Initialize the program!
Verify Test Cases
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcRunning test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 3 5 11 12 13 14 15 17 18 22 23  > __res
All passed!
Done Verification
Generating repair candidates!
Processing src/dfa.c
going to directory /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src
In file included from <built-in>:312:
<command line>:2:20: warning: missing terminating '"' character [-Winvalid-pp-token]
#define LOCALEDIR \"/usr/local/share/locale\"
                   ^
Skipping nonlast:Priority -455
At location src/dfa.c:148
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
ptr_t r = calloc(n, s);

....
Skipping nonlast:Priority -455
At location src/dfa.c:148
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
ptr_t r = calloc(n, s);

....
Skipping nonlast:Priority -455
At location src/dfa.c:148
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
ptr_t r = calloc(n, s);

....
Skipping nonlast:Priority -455
At location src/dfa.c:148
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
ptr_t r = calloc(n, s);

....
Skipping nonlast:Priority -455
At location src/dfa.c:148
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
ptr_t r = calloc(n, s);

....
Skipping nonlast:Priority -455
At location src/dfa.c:148
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
ptr_t r = calloc(n, s);

....
Skipping nonlast addifexit:Priority 4545
At location src/dfa.c:148
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(n, s)))
    return 0;
ptr_t r = calloc(n, s);

....
IsErr:priority 4546
at location src/dfa.c:150
--src file: src/dfa.c
fragment 0:
if (!(__abst_hole(r, n, s)))
    if (!r)
        dfaerror(dcgettext(((void *)0), "memory exhausted", 5));

....
Skipping error ifguard:Priority 4546
At location src/dfa.c:150
--Src File: src/dfa.c
Fragment 0:
if (!(__abst_hole(r, n, s)))
    if (!r)
        dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping nonlast:Priority 7046
At location src/dfa.c:150
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (!r)
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping nonlast:Priority 7046
At location src/dfa.c:150
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (!r)
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping nonlast:Priority 7046
At location src/dfa.c:150
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if (!r)
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping nonlast:Priority 7046
At location src/dfa.c:150
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (!r)
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping nonlast:Priority 7046
At location src/dfa.c:150
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (!r)
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping nonlast:Priority 7046
At location src/dfa.c:150
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (!r)
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping nonlast addifexit:Priority 10796
At location src/dfa.c:150
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(r, n, s)))
    return 0;
if (!r)
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping returnreturn addifexit:Priority 4547
At location src/dfa.c:152
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(r, n, s)))
    return 0;
return r;

....
Skipping nonlast:Priority -433
At location src/dfa.c:158
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
ptr_t r = malloc(n);

....
Skipping nonlast:Priority -433
At location src/dfa.c:158
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
ptr_t r = malloc(n);

....
Skipping nonlast:Priority -433
At location src/dfa.c:158
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
ptr_t r = malloc(n);

....
Skipping nonlast:Priority -433
At location src/dfa.c:158
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
ptr_t r = malloc(n);

....
Skipping nonlast:Priority -433
At location src/dfa.c:158
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
ptr_t r = malloc(n);

....
Skipping nonlast:Priority -433
At location src/dfa.c:158
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
ptr_t r = malloc(n);

....
Skipping nonlast addifexit:Priority 4567
At location src/dfa.c:158
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(n)))
    return 0;
ptr_t r = malloc(n);

....
IsErr:priority 4569
at location src/dfa.c:161
--src file: src/dfa.c
fragment 0:
if (!(__abst_hole(r, n)))
    if (!r)
        dfaerror(dcgettext(((void *)0), "memory exhausted", 5));

....
Skipping error ifguard:Priority 4569
At location src/dfa.c:161
--Src File: src/dfa.c
Fragment 0:
if (!(__abst_hole(r, n)))
    if (!r)
        dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping nonlast:Priority -431
At location src/dfa.c:161
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (!r)
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping nonlast:Priority -431
At location src/dfa.c:161
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (!r)
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping nonlast:Priority -431
At location src/dfa.c:161
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if (!r)
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping nonlast:Priority -431
At location src/dfa.c:161
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (!r)
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping nonlast:Priority -431
At location src/dfa.c:161
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (!r)
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping nonlast:Priority -431
At location src/dfa.c:161
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (!r)
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping nonlast addifexit:Priority 3319
At location src/dfa.c:161
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(r, n)))
    return 0;
if (!r)
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping returnreturn addifexit:Priority 4570
At location src/dfa.c:163
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(r, n)))
    return 0;
return r;

....
Skipping nonlast:Priority -415
At location src/dfa.c:169
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
ptr_t r = realloc(p, n);

....
Skipping nonlast:Priority -415
At location src/dfa.c:169
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
ptr_t r = realloc(p, n);

....
Skipping nonlast:Priority -415
At location src/dfa.c:169
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
ptr_t r = realloc(p, n);

....
Skipping nonlast:Priority -415
At location src/dfa.c:169
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
ptr_t r = realloc(p, n);

....
Skipping nonlast:Priority -415
At location src/dfa.c:169
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
ptr_t r = realloc(p, n);

....
Skipping nonlast:Priority -415
At location src/dfa.c:169
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
ptr_t r = realloc(p, n);

....
Skipping nonlast addifexit:Priority 4585
At location src/dfa.c:169
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(p, n)))
    return 0;
ptr_t r = realloc(p, n);

....
IsErr:priority 4587
at location src/dfa.c:172
--src file: src/dfa.c
fragment 0:
if (!(__abst_hole(r, p, n)))
    if (!r)
        dfaerror(dcgettext(((void *)0), "memory exhausted", 5));

....
Skipping error ifguard:Priority 4587
At location src/dfa.c:172
--Src File: src/dfa.c
Fragment 0:
if (!(__abst_hole(r, p, n)))
    if (!r)
        dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping nonlast:Priority -413
At location src/dfa.c:172
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (!r)
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping nonlast:Priority -413
At location src/dfa.c:172
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (!r)
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping nonlast:Priority -413
At location src/dfa.c:172
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if (!r)
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping nonlast:Priority -413
At location src/dfa.c:172
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (!r)
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping nonlast:Priority -413
At location src/dfa.c:172
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (!r)
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping nonlast:Priority -413
At location src/dfa.c:172
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (!r)
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping nonlast addifexit:Priority 3337
At location src/dfa.c:172
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(r, p, n)))
    return 0;
if (!r)
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping returnreturn addifexit:Priority 4588
At location src/dfa.c:174
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(r, p, n)))
    return 0;
return r;

....
Skipping returnreturn addifexit:Priority 12257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(b, c)))
    return 0;
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));

....
Skipping returnreturn addifexit:Priority 12257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(b, c)))
    return 1;
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));

....
Skipping returnreturn addifexit:Priority 12257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(b, c)))
    return 8;
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));

....
Skipping only addifexit:Priority 12210
At location src/dfa.c:245
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(b, c)))
    return;
c[b / (8 * sizeof(int))] |= 1 << b % (8 * sizeof(int));

....
Skipping only addifexit:Priority 12221
At location src/dfa.c:257
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(src, dst)))
    return;
memcpy(dst, src, sizeof(charclass));

....
Skipping only addifexit:Priority 12223
At location src/dfa.c:263
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s)))
    return;
memset(s, 0, sizeof(charclass));

....
Skipping nonlast:Priority -356
At location src/dfa.c:288
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int i;

....
Skipping nonlast:Priority -356
At location src/dfa.c:288
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int i;

....
Skipping nonlast:Priority -356
At location src/dfa.c:288
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
int i;

....
Skipping nonlast:Priority -356
At location src/dfa.c:288
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int i;

....
Skipping nonlast:Priority -356
At location src/dfa.c:288
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int i;

....
Skipping nonlast:Priority -356
At location src/dfa.c:288
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int i;

....
Skipping nonlast addifexit:Priority 4644
At location src/dfa.c:288
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(dfa, s)))
    return 0;
int i;

....
Skipping nonlast addifexit:Priority 4644
At location src/dfa.c:288
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(dfa, s)))
    return 2;
int i;

....
Skipping nonlast:Priority 7145
At location src/dfa.c:290
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
for (i = 0; i < dfa->cindex; ++i) 
    if (equal(s, dfa->charclasses[i]))
        return i;

....
Skipping nonlast:Priority 7145
At location src/dfa.c:290
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
for (i = 0; i < dfa->cindex; ++i) 
    if (equal(s, dfa->charclasses[i]))
        return i;

....
Skipping nonlast:Priority 7145
At location src/dfa.c:290
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
for (i = 0; i < dfa->cindex; ++i) 
    if (equal(s, dfa->charclasses[i]))
        return i;

....
Skipping nonlast:Priority 7145
At location src/dfa.c:290
--Src File: src/dfa.c
Fragment 0:
if (equal(s, dfa->charclasses[i]))
    return i;
for (i = 0; i < dfa->cindex; ++i) 
    if (equal(s, dfa->charclasses[i]))
        return i;

....
Skipping nonlast:Priority 7145
At location src/dfa.c:290
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
for (i = 0; i < dfa->cindex; ++i) 
    if (equal(s, dfa->charclasses[i]))
        return i;

....
Skipping nonlast:Priority 7145
At location src/dfa.c:290
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
for (i = 0; i < dfa->cindex; ++i) 
    if (equal(s, dfa->charclasses[i]))
        return i;

....
Skipping nonlast:Priority 7145
At location src/dfa.c:290
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
for (i = 0; i < dfa->cindex; ++i) 
    if (equal(s, dfa->charclasses[i]))
        return i;

....
Skipping nonlast addifexit:Priority 12145
At location src/dfa.c:290
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, dfa, dfa->cindex, dfa->cindex, s, dfa->charclasses, dfa->charclasses, dfa->calloc, dfa->calloc, dfa->tokens, dfa->tindex, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts, dfa->tokens, dfa->tindex, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts)))
    return 0;
for (i = 0; i < dfa->cindex; ++i) 
    if (equal(s, dfa->charclasses[i]))
        return i;

....
Skipping nonlast addifexit:Priority 12145
At location src/dfa.c:290
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, dfa, dfa->cindex, dfa->cindex, s, dfa->charclasses, dfa->charclasses, dfa->calloc, dfa->calloc, dfa->tokens, dfa->tindex, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts, dfa->tokens, dfa->tindex, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts)))
    return 2;
for (i = 0; i < dfa->cindex; ++i) 
    if (equal(s, dfa->charclasses[i]))
        return i;

....
Skipping nonlast:Priority -354
At location src/dfa.c:293
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if ((dfa->cindex) >= (dfa->calloc)) {
    do 
        (dfa->calloc) *= 2;
    while ((dfa->cindex) >= (dfa->calloc));
    ((dfa->charclasses) = xrealloc((ptr_t)(dfa->charclasses), (dfa->calloc) * sizeof(charclass)));
}

....
Skipping nonlast:Priority -354
At location src/dfa.c:293
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if ((dfa->cindex) >= (dfa->calloc)) {
    do 
        (dfa->calloc) *= 2;
    while ((dfa->cindex) >= (dfa->calloc));
    ((dfa->charclasses) = xrealloc((ptr_t)(dfa->charclasses), (dfa->calloc) * sizeof(charclass)));
}

....
Skipping nonlast:Priority -354
At location src/dfa.c:293
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if ((dfa->cindex) >= (dfa->calloc)) {
    do 
        (dfa->calloc) *= 2;
    while ((dfa->cindex) >= (dfa->calloc));
    ((dfa->charclasses) = xrealloc((ptr_t)(dfa->charclasses), (dfa->calloc) * sizeof(charclass)));
}

....
Skipping nonlast:Priority -354
At location src/dfa.c:293
--Src File: src/dfa.c
Fragment 0:
if (equal(s, dfa->charclasses[i]))
    return i;
if ((dfa->cindex) >= (dfa->calloc)) {
    do 
        (dfa->calloc) *= 2;
    while ((dfa->cindex) >= (dfa->calloc));
    ((dfa->charclasses) = xrealloc((ptr_t)(dfa->charclasses), (dfa->calloc) * sizeof(charclass)));
}

....
Skipping nonlast:Priority -354
At location src/dfa.c:293
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if ((dfa->cindex) >= (dfa->calloc)) {
    do 
        (dfa->calloc) *= 2;
    while ((dfa->cindex) >= (dfa->calloc));
    ((dfa->charclasses) = xrealloc((ptr_t)(dfa->charclasses), (dfa->calloc) * sizeof(charclass)));
}

....
Skipping nonlast:Priority -354
At location src/dfa.c:293
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if ((dfa->cindex) >= (dfa->calloc)) {
    do 
        (dfa->calloc) *= 2;
    while ((dfa->cindex) >= (dfa->calloc));
    ((dfa->charclasses) = xrealloc((ptr_t)(dfa->charclasses), (dfa->calloc) * sizeof(charclass)));
}

....
Skipping nonlast:Priority -354
At location src/dfa.c:293
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if ((dfa->cindex) >= (dfa->calloc)) {
    do 
        (dfa->calloc) *= 2;
    while ((dfa->cindex) >= (dfa->calloc));
    ((dfa->charclasses) = xrealloc((ptr_t)(dfa->charclasses), (dfa->calloc) * sizeof(charclass)));
}

....
Skipping nonlast addifexit:Priority 3396
At location src/dfa.c:293
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(dfa, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->charclasses, dfa->cindex, dfa->calloc, i, s, dfa->tokens, dfa->tindex, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts, dfa->tokens, dfa->tindex, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts)))
    return 0;
if ((dfa->cindex) >= (dfa->calloc)) {
    do 
        (dfa->calloc) *= 2;
    while ((dfa->cindex) >= (dfa->calloc));
    ((dfa->charclasses) = xrealloc((ptr_t)(dfa->charclasses), (dfa->calloc) * sizeof(charclass)));
}

....
Skipping nonlast addifexit:Priority 3396
At location src/dfa.c:293
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(dfa, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->charclasses, dfa->cindex, dfa->calloc, i, s, dfa->tokens, dfa->tindex, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts, dfa->tokens, dfa->tindex, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts)))
    return 2;
if ((dfa->cindex) >= (dfa->calloc)) {
    do 
        (dfa->calloc) *= 2;
    while ((dfa->cindex) >= (dfa->calloc));
    ((dfa->charclasses) = xrealloc((ptr_t)(dfa->charclasses), (dfa->calloc) * sizeof(charclass)));
}

....
Skipping nonlast:Priority -352
At location src/dfa.c:294
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
++dfa->cindex;

....
Skipping nonlast:Priority -352
At location src/dfa.c:294
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
++dfa->cindex;

....
Skipping nonlast:Priority -352
At location src/dfa.c:294
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
++dfa->cindex;

....
Skipping nonlast:Priority -352
At location src/dfa.c:294
--Src File: src/dfa.c
Fragment 0:
if (equal(s, dfa->charclasses[i]))
    return i;
++dfa->cindex;

....
Skipping nonlast:Priority -352
At location src/dfa.c:294
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
++dfa->cindex;

....
Skipping nonlast:Priority -352
At location src/dfa.c:294
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
++dfa->cindex;

....
Skipping nonlast:Priority -352
At location src/dfa.c:294
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
++dfa->cindex;

....
Skipping nonlast addifexit:Priority 4648
At location src/dfa.c:294
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(dfa, dfa->cindex, dfa->cindex, s, i, dfa->charclasses, dfa->calloc, dfa->charclasses, dfa->calloc, dfa->tokens, dfa->tindex, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts, dfa->tokens, dfa->tindex, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts)))
    return 0;
++dfa->cindex;

....
Skipping nonlast addifexit:Priority 4648
At location src/dfa.c:294
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(dfa, dfa->cindex, dfa->cindex, s, i, dfa->charclasses, dfa->calloc, dfa->charclasses, dfa->calloc, dfa->tokens, dfa->tindex, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts, dfa->tokens, dfa->tindex, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts)))
    return 2;
++dfa->cindex;

....
Skipping nonlast:Priority -351
At location src/dfa.c:295
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
copyset(s, dfa->charclasses[i]);

....
Skipping nonlast:Priority -351
At location src/dfa.c:295
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
copyset(s, dfa->charclasses[i]);

....
Skipping nonlast:Priority -351
At location src/dfa.c:295
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
copyset(s, dfa->charclasses[i]);

....
Skipping nonlast:Priority -351
At location src/dfa.c:295
--Src File: src/dfa.c
Fragment 0:
if (equal(s, dfa->charclasses[i]))
    return i;
copyset(s, dfa->charclasses[i]);

....
Skipping nonlast:Priority -351
At location src/dfa.c:295
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
copyset(s, dfa->charclasses[i]);

....
Skipping nonlast:Priority -351
At location src/dfa.c:295
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
copyset(s, dfa->charclasses[i]);

....
Skipping nonlast:Priority -351
At location src/dfa.c:295
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
copyset(s, dfa->charclasses[i]);

....
Skipping nonlast addifexit:Priority 4649
At location src/dfa.c:295
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, i, dfa, dfa->charclasses, dfa->charclasses, dfa->cindex, dfa->cindex, dfa->calloc, dfa->calloc, dfa->tokens, dfa->tindex, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts, dfa->tokens, dfa->tindex, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts)))
    return 0;
copyset(s, dfa->charclasses[i]);

....
Skipping nonlast addifexit:Priority 4649
At location src/dfa.c:295
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, i, dfa, dfa->charclasses, dfa->charclasses, dfa->cindex, dfa->cindex, dfa->calloc, dfa->calloc, dfa->tokens, dfa->tindex, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts, dfa->tokens, dfa->tindex, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts)))
    return 2;
copyset(s, dfa->charclasses[i]);

....
Skipping returnreturn addifexit:Priority 4650
At location src/dfa.c:296
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, s, dfa, dfa->charclasses, dfa->charclasses, dfa->cindex, dfa->cindex, dfa->calloc, dfa->calloc, dfa->tokens, dfa->tindex, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts, dfa->tokens, dfa->tindex, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts)))
    return 0;
return i;

....
Skipping returnreturn addifexit:Priority 4650
At location src/dfa.c:296
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, s, dfa, dfa->charclasses, dfa->charclasses, dfa->cindex, dfa->cindex, dfa->calloc, dfa->calloc, dfa->tokens, dfa->tindex, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts, dfa->tokens, dfa->tindex, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts)))
    return 2;
return i;

....
Skipping nonlast:Priority 6353
At location src/dfa.c:312
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
syntax_bits_set = 1;

....
Skipping nonlast:Priority 6353
At location src/dfa.c:312
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
syntax_bits_set = 1;

....
Skipping nonlast:Priority 6353
At location src/dfa.c:312
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
syntax_bits_set = 1;

....
Skipping nonlast:Priority 6353
At location src/dfa.c:312
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
syntax_bits_set = 1;

....
Skipping nonlast:Priority 6353
At location src/dfa.c:312
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
syntax_bits_set = 1;

....
Skipping nonlast:Priority 6353
At location src/dfa.c:312
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
syntax_bits_set = 1;

....
Skipping nonlast addifexit:Priority 11353
At location src/dfa.c:312
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits_set, bits, syntax_bits, fold, case_fold, eol, eolbyte)))
    return;
syntax_bits_set = 1;

....
Skipping nonlast:Priority -1146
At location src/dfa.c:313
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
syntax_bits = bits;

....
Skipping nonlast:Priority -1146
At location src/dfa.c:313
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
syntax_bits = bits;

....
Skipping nonlast:Priority -1146
At location src/dfa.c:313
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
syntax_bits = bits;

....
Skipping nonlast:Priority -1146
At location src/dfa.c:313
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
syntax_bits = bits;

....
Skipping nonlast:Priority -1146
At location src/dfa.c:313
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
syntax_bits = bits;

....
Skipping nonlast:Priority -1146
At location src/dfa.c:313
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
syntax_bits = bits;

....
Skipping nonlast addifexit:Priority 3854
At location src/dfa.c:313
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(bits, syntax_bits, fold, syntax_bits_set, case_fold, eol, eolbyte)))
    return;
syntax_bits = bits;

....
Skipping nonlast:Priority -1145
At location src/dfa.c:314
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
case_fold = fold;

....
Skipping nonlast:Priority -1145
At location src/dfa.c:314
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
case_fold = fold;

....
Skipping nonlast:Priority -1145
At location src/dfa.c:314
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
case_fold = fold;

....
Skipping nonlast:Priority -1145
At location src/dfa.c:314
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
case_fold = fold;

....
Skipping nonlast:Priority -1145
At location src/dfa.c:314
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
case_fold = fold;

....
Skipping nonlast:Priority -1145
At location src/dfa.c:314
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
case_fold = fold;

....
Skipping nonlast addifexit:Priority 3855
At location src/dfa.c:314
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(fold, case_fold, bits, eol, syntax_bits, eolbyte, syntax_bits_set)))
    return;
case_fold = fold;

....
Skipping nonlast:Priority 7140
At location src/dfa.c:322
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
setbit(b, c);

....
Skipping nonlast:Priority 7140
At location src/dfa.c:322
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
setbit(b, c);

....
Skipping nonlast:Priority 7140
At location src/dfa.c:322
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
setbit(b, c);

....
Skipping nonlast:Priority 7140
At location src/dfa.c:322
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
setbit(b, c);

....
Skipping nonlast:Priority 7140
At location src/dfa.c:322
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
setbit(b, c);

....
Skipping nonlast:Priority 7140
At location src/dfa.c:322
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
setbit(b, c);

....
Skipping nonlast addifexit:Priority 12140
At location src/dfa.c:322
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(b, c, case_fold)))
    return;
setbit(b, c);

....
Skipping isstmt addifexit:Priority 3391
At location src/dfa.c:323
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(case_fold, b, c)))
    return;
if (case_fold) {
    if (((*__ctype_b_loc())[(int)((b))] & (unsigned short)_ISupper))
        setbit((__extension__ ({
            int __res;
            if (sizeof (b) > 1) {
                if (__builtin_constant_p(b)) {
                    int __c = (b);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(b);
            } else
                __res = (*__ctype_tolower_loc())[(int)(b)];
            __res;
        })), c);
    else if (((*__ctype_b_loc())[(int)((b))] & (unsigned short)_ISlower))
        setbit((__extension__ ({
            int __res;
            if (sizeof (b) > 1) {
                if (__builtin_constant_p(b)) {
                    int __c = (b);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_toupper_loc())[__c];
                } else
                    __res = toupper(b);
            } else
                __res = (*__ctype_toupper_loc())[(int)(b)];
            __res;
        })), c);
}

....
Skipping nonlast:Priority -8
At location src/dfa.c:472
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
char c[6] = { from, 0, ch, 0, to, 0 };

....
Skipping nonlast:Priority -8
At location src/dfa.c:472
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
char c[6] = { from, 0, ch, 0, to, 0 };

....
Skipping nonlast:Priority -8
At location src/dfa.c:472
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
char c[6] = { from, 0, ch, 0, to, 0 };

....
Skipping nonlast:Priority -8
At location src/dfa.c:472
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
char c[6] = { from, 0, ch, 0, to, 0 };

....
Skipping nonlast:Priority -8
At location src/dfa.c:472
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
char c[6] = { from, 0, ch, 0, to, 0 };

....
Skipping nonlast:Priority -8
At location src/dfa.c:472
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
char c[6] = { from, 0, ch, 0, to, 0 };

....
Skipping nonlast addifexit:Priority 4992
At location src/dfa.c:472
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(ch, from, to)))
    return 0;
char c[6] = { from, 0, ch, 0, to, 0 };

....
Skipping nonlast addifexit:Priority 4992
At location src/dfa.c:472
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(ch, from, to)))
    return 2;
char c[6] = { from, 0, ch, 0, to, 0 };

....
Skipping nonlast addifexit:Priority 4992
At location src/dfa.c:472
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(ch, from, to)))
    return 4;
char c[6] = { from, 0, ch, 0, to, 0 };

....
Skipping nonlast addifexit:Priority 4992
At location src/dfa.c:472
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(ch, from, to)))
    return 6;
char c[6] = { from, 0, ch, 0, to, 0 };

....
Skipping returnreturn addifexit:Priority 12493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(ch, from, to)))
    return 0;
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);

....
Skipping returnreturn addifexit:Priority 12493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(ch, from, to)))
    return 2;
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);

....
Skipping returnreturn addifexit:Priority 12493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(ch, from, to)))
    return 4;
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);

....
Skipping returnreturn addifexit:Priority 12493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(ch, from, to)))
    return 6;
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);

....
Skipping nonlast:Priority -701
At location src/dfa.c:749
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
unsigned int c, c1, c2;

....
Skipping nonlast:Priority -701
At location src/dfa.c:749
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
unsigned int c, c1, c2;

....
Skipping nonlast:Priority -701
At location src/dfa.c:749
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
unsigned int c, c1, c2;

....
Skipping nonlast:Priority -701
At location src/dfa.c:749
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
unsigned int c, c1, c2;

....
Skipping nonlast:Priority -701
At location src/dfa.c:749
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
unsigned int c, c1, c2;

....
Skipping nonlast:Priority -701
At location src/dfa.c:749
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
unsigned int c, c1, c2;

....
Skipping nonlast addifexit:Priority 4299
At location src/dfa.c:749
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, hard_LC_COLLATE, case_fold)))
    return -128;
unsigned int c, c1, c2;

....
Skipping nonlast addifexit:Priority 4299
At location src/dfa.c:749
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, hard_LC_COLLATE, case_fold)))
    return -1;
unsigned int c, c1, c2;

....
Skipping nonlast addifexit:Priority 4299
At location src/dfa.c:749
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, hard_LC_COLLATE, case_fold)))
    return 0;
unsigned int c, c1, c2;

....
Skipping nonlast addifexit:Priority 4299
At location src/dfa.c:749
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, hard_LC_COLLATE, case_fold)))
    return 1;
unsigned int c, c1, c2;

....
Skipping nonlast addifexit:Priority 4299
At location src/dfa.c:749
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, hard_LC_COLLATE, case_fold)))
    return 2;
unsigned int c, c1, c2;

....
Skipping nonlast addifexit:Priority 4299
At location src/dfa.c:749
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, hard_LC_COLLATE, case_fold)))
    return 5;
unsigned int c, c1, c2;

....
Skipping nonlast addifexit:Priority 4299
At location src/dfa.c:749
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, hard_LC_COLLATE, case_fold)))
    return 8;
unsigned int c, c1, c2;

....
Skipping nonlast addifexit:Priority 4299
At location src/dfa.c:749
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, hard_LC_COLLATE, case_fold)))
    return 9;
unsigned int c, c1, c2;

....
Skipping nonlast addifexit:Priority 4299
At location src/dfa.c:749
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, hard_LC_COLLATE, case_fold)))
    return 10;
unsigned int c, c1, c2;

....
Skipping nonlast addifexit:Priority 4299
At location src/dfa.c:749
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, hard_LC_COLLATE, case_fold)))
    return 128;
unsigned int c, c1, c2;

....
Skipping nonlast addifexit:Priority 4299
At location src/dfa.c:749
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, hard_LC_COLLATE, case_fold)))
    return 255;
unsigned int c, c1, c2;

....
Skipping nonlast addifexit:Priority 4299
At location src/dfa.c:749
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, hard_LC_COLLATE, case_fold)))
    return 256;
unsigned int c, c1, c2;

....
Skipping nonlast addifexit:Priority 4299
At location src/dfa.c:749
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, hard_LC_COLLATE, case_fold)))
    return 32767;
unsigned int c, c1, c2;

....
Skipping nonlast addifexit:Priority 4499
At location src/dfa.c:749
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, hard_LC_COLLATE, case_fold)))
    goto skip;
unsigned int c, c1, c2;

....
Skipping nonlast addifexit:Priority 4499
At location src/dfa.c:749
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, hard_LC_COLLATE, case_fold)))
    goto normal_char;
unsigned int c, c1, c2;

....
Skipping nonlast:Priority -700
At location src/dfa.c:750
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int backslash = 0, invert;

....
Skipping nonlast:Priority -700
At location src/dfa.c:750
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int backslash = 0, invert;

....
Skipping nonlast:Priority -700
At location src/dfa.c:750
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
int backslash = 0, invert;

....
Skipping nonlast:Priority -700
At location src/dfa.c:750
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int backslash = 0, invert;

....
Skipping nonlast:Priority -700
At location src/dfa.c:750
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int backslash = 0, invert;

....
Skipping nonlast:Priority -700
At location src/dfa.c:750
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int backslash = 0, invert;

....
Skipping nonlast addifexit:Priority 4300
At location src/dfa.c:750
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, c1, hard_LC_COLLATE, case_fold)))
    return -128;
int backslash = 0, invert;

....
Skipping nonlast addifexit:Priority 4300
At location src/dfa.c:750
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, c1, hard_LC_COLLATE, case_fold)))
    return -1;
int backslash = 0, invert;

....
Skipping nonlast addifexit:Priority 4300
At location src/dfa.c:750
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, c1, hard_LC_COLLATE, case_fold)))
    return 0;
int backslash = 0, invert;

....
Skipping nonlast addifexit:Priority 4300
At location src/dfa.c:750
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, c1, hard_LC_COLLATE, case_fold)))
    return 1;
int backslash = 0, invert;

....
Skipping nonlast addifexit:Priority 4300
At location src/dfa.c:750
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, c1, hard_LC_COLLATE, case_fold)))
    return 2;
int backslash = 0, invert;

....
Skipping nonlast addifexit:Priority 4300
At location src/dfa.c:750
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, c1, hard_LC_COLLATE, case_fold)))
    return 5;
int backslash = 0, invert;

....
Skipping nonlast addifexit:Priority 4300
At location src/dfa.c:750
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, c1, hard_LC_COLLATE, case_fold)))
    return 8;
int backslash = 0, invert;

....
Skipping nonlast addifexit:Priority 4300
At location src/dfa.c:750
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, c1, hard_LC_COLLATE, case_fold)))
    return 9;
int backslash = 0, invert;

....
Skipping nonlast addifexit:Priority 4300
At location src/dfa.c:750
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, c1, hard_LC_COLLATE, case_fold)))
    return 10;
int backslash = 0, invert;

....
Skipping nonlast addifexit:Priority 4300
At location src/dfa.c:750
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, c1, hard_LC_COLLATE, case_fold)))
    return 128;
int backslash = 0, invert;

....
Skipping nonlast addifexit:Priority 4300
At location src/dfa.c:750
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, c1, hard_LC_COLLATE, case_fold)))
    return 255;
int backslash = 0, invert;

....
Skipping nonlast addifexit:Priority 4300
At location src/dfa.c:750
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, c1, hard_LC_COLLATE, case_fold)))
    return 256;
int backslash = 0, invert;

....
Skipping nonlast addifexit:Priority 4300
At location src/dfa.c:750
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, c1, hard_LC_COLLATE, case_fold)))
    return 32767;
int backslash = 0, invert;

....
Skipping nonlast addifexit:Priority 4500
At location src/dfa.c:750
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, c1, hard_LC_COLLATE, case_fold)))
    goto skip;
int backslash = 0, invert;

....
Skipping nonlast addifexit:Priority 4500
At location src/dfa.c:750
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, c1, hard_LC_COLLATE, case_fold)))
    goto normal_char;
int backslash = 0, invert;

....
Skipping nonlast:Priority -699
At location src/dfa.c:751
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
charclass ccl;

....
Skipping nonlast:Priority -699
At location src/dfa.c:751
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
charclass ccl;

....
Skipping nonlast:Priority -699
At location src/dfa.c:751
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
charclass ccl;

....
Skipping nonlast:Priority -699
At location src/dfa.c:751
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGLINE;
charclass ccl;

....
Skipping nonlast:Priority -699
At location src/dfa.c:751
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGWORD;
charclass ccl;

....
Skipping nonlast:Priority -699
At location src/dfa.c:751
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDLINE;
charclass ccl;

....
Skipping nonlast:Priority -699
At location src/dfa.c:751
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDWORD;
charclass ccl;

....
Skipping nonlast:Priority -699
At location src/dfa.c:751
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = LIMWORD;
charclass ccl;

....
Skipping nonlast:Priority -699
At location src/dfa.c:751
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = NOTLIMWORD;
charclass ccl;

....
Skipping nonlast:Priority -699
At location src/dfa.c:751
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    laststart = 0;
    return lasttok = BACKREF;
}
charclass ccl;

....
Skipping nonlast:Priority -699
At location src/dfa.c:751
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
charclass ccl;

....
Skipping nonlast:Priority -699
At location src/dfa.c:751
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
charclass ccl;

....
Skipping nonlast:Priority -699
At location src/dfa.c:751
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
charclass ccl;

....
Skipping nonlast addifexit:Priority 4301
At location src/dfa.c:751
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return -128;
charclass ccl;

....
Skipping nonlast addifexit:Priority 4301
At location src/dfa.c:751
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return -1;
charclass ccl;

....
Skipping nonlast addifexit:Priority 4301
At location src/dfa.c:751
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 0;
charclass ccl;

....
Skipping nonlast addifexit:Priority 4301
At location src/dfa.c:751
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 1;
charclass ccl;

....
Skipping nonlast addifexit:Priority 4301
At location src/dfa.c:751
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 2;
charclass ccl;

....
Skipping nonlast addifexit:Priority 4301
At location src/dfa.c:751
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 5;
charclass ccl;

....
Skipping nonlast addifexit:Priority 4301
At location src/dfa.c:751
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 8;
charclass ccl;

....
Skipping nonlast addifexit:Priority 4301
At location src/dfa.c:751
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 9;
charclass ccl;

....
Skipping nonlast addifexit:Priority 4301
At location src/dfa.c:751
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 10;
charclass ccl;

....
Skipping nonlast addifexit:Priority 4301
At location src/dfa.c:751
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 128;
charclass ccl;

....
Skipping nonlast addifexit:Priority 4301
At location src/dfa.c:751
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 255;
charclass ccl;

....
Skipping nonlast addifexit:Priority 4301
At location src/dfa.c:751
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 256;
charclass ccl;

....
Skipping nonlast addifexit:Priority 4301
At location src/dfa.c:751
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 32767;
charclass ccl;

....
Skipping nonlast addifexit:Priority 4501
At location src/dfa.c:751
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    goto skip;
charclass ccl;

....
Skipping nonlast addifexit:Priority 4501
At location src/dfa.c:751
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    goto normal_char;
charclass ccl;

....
Skipping nonlast:Priority -698
At location src/dfa.c:752
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int i;

....
Skipping nonlast:Priority -698
At location src/dfa.c:752
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int i;

....
Skipping nonlast:Priority -698
At location src/dfa.c:752
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
int i;

....
Skipping nonlast:Priority -698
At location src/dfa.c:752
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGLINE;
int i;

....
Skipping nonlast:Priority -698
At location src/dfa.c:752
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGWORD;
int i;

....
Skipping nonlast:Priority -698
At location src/dfa.c:752
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDLINE;
int i;

....
Skipping nonlast:Priority -698
At location src/dfa.c:752
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDWORD;
int i;

....
Skipping nonlast:Priority -698
At location src/dfa.c:752
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = LIMWORD;
int i;

....
Skipping nonlast:Priority -698
At location src/dfa.c:752
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = NOTLIMWORD;
int i;

....
Skipping nonlast:Priority -698
At location src/dfa.c:752
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    laststart = 0;
    return lasttok = BACKREF;
}
int i;

....
Skipping nonlast:Priority -698
At location src/dfa.c:752
--Src File: src/dfa.c
Fragment 0:
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}
int i;

....
Skipping nonlast:Priority -698
At location src/dfa.c:752
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int i;

....
Skipping nonlast:Priority -698
At location src/dfa.c:752
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int i;

....
Skipping nonlast:Priority -698
At location src/dfa.c:752
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int i;

....
Skipping nonlast addifexit:Priority 4302
At location src/dfa.c:752
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return -128;
int i;

....
Skipping nonlast addifexit:Priority 4302
At location src/dfa.c:752
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return -1;
int i;

....
Skipping nonlast addifexit:Priority 4302
At location src/dfa.c:752
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 0;
int i;

....
Skipping nonlast addifexit:Priority 4302
At location src/dfa.c:752
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 1;
int i;

....
Skipping nonlast addifexit:Priority 4302
At location src/dfa.c:752
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 2;
int i;

....
Skipping nonlast addifexit:Priority 4302
At location src/dfa.c:752
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 5;
int i;

....
Skipping nonlast addifexit:Priority 4302
At location src/dfa.c:752
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 8;
int i;

....
Skipping nonlast addifexit:Priority 4302
At location src/dfa.c:752
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 9;
int i;

....
Skipping nonlast addifexit:Priority 4302
At location src/dfa.c:752
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 10;
int i;

....
Skipping nonlast addifexit:Priority 4302
At location src/dfa.c:752
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 128;
int i;

....
Skipping nonlast addifexit:Priority 4302
At location src/dfa.c:752
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 255;
int i;

....
Skipping nonlast addifexit:Priority 4302
At location src/dfa.c:752
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 256;
int i;

....
Skipping nonlast addifexit:Priority 4302
At location src/dfa.c:752
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 32767;
int i;

....
Skipping nonlast addifexit:Priority 4502
At location src/dfa.c:752
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    goto skip;
int i;

....
Skipping nonlast addifexit:Priority 4502
At location src/dfa.c:752
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    goto normal_char;
int i;

....
Skipping nonlast:Priority 6803
At location src/dfa.c:760
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
for (i = 0; i < 2; ++i) {
    do {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 's':
      case 'S':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if (((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISspace))
                setbit(c2, ccl);
        if (c == 'S')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            return lasttok = parse_bracket_exp_mb();
        }
        zeroset(ccl);
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c == '^') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (c1 == '-') {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c2) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                    c1 = c;
                    if (!hard_LC_COLLATE)
                        for (c = c1; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    else {
                        if (case_fold) {
                            c1 = (__extension__ ({
                                int __res;
                                if (sizeof (c1) > 1) {
                                    if (__builtin_constant_p(c1)) {
                                        int __c = (c1);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c1);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c1)];
                                __res;
                            }));
                            c2 = (__extension__ ({
                                int __res;
                                if (sizeof (c2) > 1) {
                                    if (__builtin_constant_p(c2)) {
                                        int __c = (c2);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c2);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c2)];
                                __res;
                            }));
                        }
                        for (c = 0; c < (1 << 8); ++c) 
                            if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                                setbit_case_fold(c, ccl);
                    }
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast:Priority 6803
At location src/dfa.c:760
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
for (i = 0; i < 2; ++i) {
    do {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 's':
      case 'S':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if (((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISspace))
                setbit(c2, ccl);
        if (c == 'S')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            return lasttok = parse_bracket_exp_mb();
        }
        zeroset(ccl);
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c == '^') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (c1 == '-') {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c2) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                    c1 = c;
                    if (!hard_LC_COLLATE)
                        for (c = c1; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    else {
                        if (case_fold) {
                            c1 = (__extension__ ({
                                int __res;
                                if (sizeof (c1) > 1) {
                                    if (__builtin_constant_p(c1)) {
                                        int __c = (c1);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c1);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c1)];
                                __res;
                            }));
                            c2 = (__extension__ ({
                                int __res;
                                if (sizeof (c2) > 1) {
                                    if (__builtin_constant_p(c2)) {
                                        int __c = (c2);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c2);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c2)];
                                __res;
                            }));
                        }
                        for (c = 0; c < (1 << 8); ++c) 
                            if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                                setbit_case_fold(c, ccl);
                    }
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast:Priority 6803
At location src/dfa.c:760
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
for (i = 0; i < 2; ++i) {
    do {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 's':
      case 'S':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if (((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISspace))
                setbit(c2, ccl);
        if (c == 'S')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            return lasttok = parse_bracket_exp_mb();
        }
        zeroset(ccl);
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c == '^') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (c1 == '-') {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c2) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                    c1 = c;
                    if (!hard_LC_COLLATE)
                        for (c = c1; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    else {
                        if (case_fold) {
                            c1 = (__extension__ ({
                                int __res;
                                if (sizeof (c1) > 1) {
                                    if (__builtin_constant_p(c1)) {
                                        int __c = (c1);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c1);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c1)];
                                __res;
                            }));
                            c2 = (__extension__ ({
                                int __res;
                                if (sizeof (c2) > 1) {
                                    if (__builtin_constant_p(c2)) {
                                        int __c = (c2);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c2);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c2)];
                                __res;
                            }));
                        }
                        for (c = 0; c < (1 << 8); ++c) 
                            if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                                setbit_case_fold(c, ccl);
                    }
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast:Priority 6803
At location src/dfa.c:760
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGLINE;
for (i = 0; i < 2; ++i) {
    do {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 's':
      case 'S':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if (((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISspace))
                setbit(c2, ccl);
        if (c == 'S')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            return lasttok = parse_bracket_exp_mb();
        }
        zeroset(ccl);
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c == '^') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (c1 == '-') {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c2) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                    c1 = c;
                    if (!hard_LC_COLLATE)
                        for (c = c1; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    else {
                        if (case_fold) {
                            c1 = (__extension__ ({
                                int __res;
                                if (sizeof (c1) > 1) {
                                    if (__builtin_constant_p(c1)) {
                                        int __c = (c1);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c1);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c1)];
                                __res;
                            }));
                            c2 = (__extension__ ({
                                int __res;
                                if (sizeof (c2) > 1) {
                                    if (__builtin_constant_p(c2)) {
                                        int __c = (c2);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c2);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c2)];
                                __res;
                            }));
                        }
                        for (c = 0; c < (1 << 8); ++c) 
                            if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                                setbit_case_fold(c, ccl);
                    }
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast:Priority 6803
At location src/dfa.c:760
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGWORD;
for (i = 0; i < 2; ++i) {
    do {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 's':
      case 'S':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if (((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISspace))
                setbit(c2, ccl);
        if (c == 'S')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            return lasttok = parse_bracket_exp_mb();
        }
        zeroset(ccl);
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c == '^') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (c1 == '-') {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c2) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                    c1 = c;
                    if (!hard_LC_COLLATE)
                        for (c = c1; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    else {
                        if (case_fold) {
                            c1 = (__extension__ ({
                                int __res;
                                if (sizeof (c1) > 1) {
                                    if (__builtin_constant_p(c1)) {
                                        int __c = (c1);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c1);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c1)];
                                __res;
                            }));
                            c2 = (__extension__ ({
                                int __res;
                                if (sizeof (c2) > 1) {
                                    if (__builtin_constant_p(c2)) {
                                        int __c = (c2);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c2);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c2)];
                                __res;
                            }));
                        }
                        for (c = 0; c < (1 << 8); ++c) 
                            if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                                setbit_case_fold(c, ccl);
                    }
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast:Priority 6803
At location src/dfa.c:760
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDLINE;
for (i = 0; i < 2; ++i) {
    do {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 's':
      case 'S':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if (((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISspace))
                setbit(c2, ccl);
        if (c == 'S')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            return lasttok = parse_bracket_exp_mb();
        }
        zeroset(ccl);
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c == '^') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (c1 == '-') {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c2) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                    c1 = c;
                    if (!hard_LC_COLLATE)
                        for (c = c1; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    else {
                        if (case_fold) {
                            c1 = (__extension__ ({
                                int __res;
                                if (sizeof (c1) > 1) {
                                    if (__builtin_constant_p(c1)) {
                                        int __c = (c1);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c1);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c1)];
                                __res;
                            }));
                            c2 = (__extension__ ({
                                int __res;
                                if (sizeof (c2) > 1) {
                                    if (__builtin_constant_p(c2)) {
                                        int __c = (c2);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c2);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c2)];
                                __res;
                            }));
                        }
                        for (c = 0; c < (1 << 8); ++c) 
                            if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                                setbit_case_fold(c, ccl);
                    }
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast:Priority 6803
At location src/dfa.c:760
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDWORD;
for (i = 0; i < 2; ++i) {
    do {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 's':
      case 'S':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if (((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISspace))
                setbit(c2, ccl);
        if (c == 'S')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            return lasttok = parse_bracket_exp_mb();
        }
        zeroset(ccl);
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c == '^') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (c1 == '-') {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c2) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                    c1 = c;
                    if (!hard_LC_COLLATE)
                        for (c = c1; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    else {
                        if (case_fold) {
                            c1 = (__extension__ ({
                                int __res;
                                if (sizeof (c1) > 1) {
                                    if (__builtin_constant_p(c1)) {
                                        int __c = (c1);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c1);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c1)];
                                __res;
                            }));
                            c2 = (__extension__ ({
                                int __res;
                                if (sizeof (c2) > 1) {
                                    if (__builtin_constant_p(c2)) {
                                        int __c = (c2);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c2);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c2)];
                                __res;
                            }));
                        }
                        for (c = 0; c < (1 << 8); ++c) 
                            if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                                setbit_case_fold(c, ccl);
                    }
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast:Priority 6803
At location src/dfa.c:760
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = LIMWORD;
for (i = 0; i < 2; ++i) {
    do {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 's':
      case 'S':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if (((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISspace))
                setbit(c2, ccl);
        if (c == 'S')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            return lasttok = parse_bracket_exp_mb();
        }
        zeroset(ccl);
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c == '^') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (c1 == '-') {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c2) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                    c1 = c;
                    if (!hard_LC_COLLATE)
                        for (c = c1; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    else {
                        if (case_fold) {
                            c1 = (__extension__ ({
                                int __res;
                                if (sizeof (c1) > 1) {
                                    if (__builtin_constant_p(c1)) {
                                        int __c = (c1);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c1);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c1)];
                                __res;
                            }));
                            c2 = (__extension__ ({
                                int __res;
                                if (sizeof (c2) > 1) {
                                    if (__builtin_constant_p(c2)) {
                                        int __c = (c2);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c2);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c2)];
                                __res;
                            }));
                        }
                        for (c = 0; c < (1 << 8); ++c) 
                            if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                                setbit_case_fold(c, ccl);
                    }
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast:Priority 6803
At location src/dfa.c:760
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = NOTLIMWORD;
for (i = 0; i < 2; ++i) {
    do {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 's':
      case 'S':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if (((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISspace))
                setbit(c2, ccl);
        if (c == 'S')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            return lasttok = parse_bracket_exp_mb();
        }
        zeroset(ccl);
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c == '^') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (c1 == '-') {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c2) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                    c1 = c;
                    if (!hard_LC_COLLATE)
                        for (c = c1; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    else {
                        if (case_fold) {
                            c1 = (__extension__ ({
                                int __res;
                                if (sizeof (c1) > 1) {
                                    if (__builtin_constant_p(c1)) {
                                        int __c = (c1);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c1);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c1)];
                                __res;
                            }));
                            c2 = (__extension__ ({
                                int __res;
                                if (sizeof (c2) > 1) {
                                    if (__builtin_constant_p(c2)) {
                                        int __c = (c2);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c2);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c2)];
                                __res;
                            }));
                        }
                        for (c = 0; c < (1 << 8); ++c) 
                            if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                                setbit_case_fold(c, ccl);
                    }
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast:Priority 6803
At location src/dfa.c:760
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    laststart = 0;
    return lasttok = BACKREF;
}
for (i = 0; i < 2; ++i) {
    do {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 's':
      case 'S':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if (((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISspace))
                setbit(c2, ccl);
        if (c == 'S')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            return lasttok = parse_bracket_exp_mb();
        }
        zeroset(ccl);
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c == '^') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (c1 == '-') {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c2) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                    c1 = c;
                    if (!hard_LC_COLLATE)
                        for (c = c1; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    else {
                        if (case_fold) {
                            c1 = (__extension__ ({
                                int __res;
                                if (sizeof (c1) > 1) {
                                    if (__builtin_constant_p(c1)) {
                                        int __c = (c1);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c1);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c1)];
                                __res;
                            }));
                            c2 = (__extension__ ({
                                int __res;
                                if (sizeof (c2) > 1) {
                                    if (__builtin_constant_p(c2)) {
                                        int __c = (c2);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c2);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c2)];
                                __res;
                            }));
                        }
                        for (c = 0; c < (1 << 8); ++c) 
                            if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                                setbit_case_fold(c, ccl);
                    }
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast:Priority 6803
At location src/dfa.c:760
--Src File: src/dfa.c
Fragment 0:
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}
for (i = 0; i < 2; ++i) {
    do {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 's':
      case 'S':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if (((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISspace))
                setbit(c2, ccl);
        if (c == 'S')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            return lasttok = parse_bracket_exp_mb();
        }
        zeroset(ccl);
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c == '^') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (c1 == '-') {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c2) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                    c1 = c;
                    if (!hard_LC_COLLATE)
                        for (c = c1; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    else {
                        if (case_fold) {
                            c1 = (__extension__ ({
                                int __res;
                                if (sizeof (c1) > 1) {
                                    if (__builtin_constant_p(c1)) {
                                        int __c = (c1);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c1);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c1)];
                                __res;
                            }));
                            c2 = (__extension__ ({
                                int __res;
                                if (sizeof (c2) > 1) {
                                    if (__builtin_constant_p(c2)) {
                                        int __c = (c2);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c2);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c2)];
                                __res;
                            }));
                        }
                        for (c = 0; c < (1 << 8); ++c) 
                            if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                                setbit_case_fold(c, ccl);
                    }
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast:Priority 6803
At location src/dfa.c:760
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
for (i = 0; i < 2; ++i) {
    do {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 's':
      case 'S':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if (((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISspace))
                setbit(c2, ccl);
        if (c == 'S')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            return lasttok = parse_bracket_exp_mb();
        }
        zeroset(ccl);
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c == '^') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (c1 == '-') {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c2) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                    c1 = c;
                    if (!hard_LC_COLLATE)
                        for (c = c1; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    else {
                        if (case_fold) {
                            c1 = (__extension__ ({
                                int __res;
                                if (sizeof (c1) > 1) {
                                    if (__builtin_constant_p(c1)) {
                                        int __c = (c1);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c1);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c1)];
                                __res;
                            }));
                            c2 = (__extension__ ({
                                int __res;
                                if (sizeof (c2) > 1) {
                                    if (__builtin_constant_p(c2)) {
                                        int __c = (c2);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c2);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c2)];
                                __res;
                            }));
                        }
                        for (c = 0; c < (1 << 8); ++c) 
                            if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                                setbit_case_fold(c, ccl);
                    }
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast:Priority 6803
At location src/dfa.c:760
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
for (i = 0; i < 2; ++i) {
    do {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 's':
      case 'S':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if (((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISspace))
                setbit(c2, ccl);
        if (c == 'S')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            return lasttok = parse_bracket_exp_mb();
        }
        zeroset(ccl);
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c == '^') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (c1 == '-') {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c2) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                    c1 = c;
                    if (!hard_LC_COLLATE)
                        for (c = c1; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    else {
                        if (case_fold) {
                            c1 = (__extension__ ({
                                int __res;
                                if (sizeof (c1) > 1) {
                                    if (__builtin_constant_p(c1)) {
                                        int __c = (c1);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c1);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c1)];
                                __res;
                            }));
                            c2 = (__extension__ ({
                                int __res;
                                if (sizeof (c2) > 1) {
                                    if (__builtin_constant_p(c2)) {
                                        int __c = (c2);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c2);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c2)];
                                __res;
                            }));
                        }
                        for (c = 0; c < (1 << 8); ++c) 
                            if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                                setbit_case_fold(c, ccl);
                    }
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast:Priority 6803
At location src/dfa.c:760
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
for (i = 0; i < 2; ++i) {
    do {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 's':
      case 'S':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if (((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISspace))
                setbit(c2, ccl);
        if (c == 'S')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            return lasttok = parse_bracket_exp_mb();
        }
        zeroset(ccl);
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c == '^') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (c1 == '-') {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c2) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                    c1 = c;
                    if (!hard_LC_COLLATE)
                        for (c = c1; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    else {
                        if (case_fold) {
                            c1 = (__extension__ ({
                                int __res;
                                if (sizeof (c1) > 1) {
                                    if (__builtin_constant_p(c1)) {
                                        int __c = (c1);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c1);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c1)];
                                __res;
                            }));
                            c2 = (__extension__ ({
                                int __res;
                                if (sizeof (c2) > 1) {
                                    if (__builtin_constant_p(c2)) {
                                        int __c = (c2);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c2);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c2)];
                                __res;
                            }));
                        }
                        for (c = 0; c < (1 << 8); ++c) 
                            if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                                setbit_case_fold(c, ccl);
                    }
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast addifexit:Priority 11803
At location src/dfa.c:760
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return -128;
for (i = 0; i < 2; ++i) {
    do {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 's':
      case 'S':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if (((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISspace))
                setbit(c2, ccl);
        if (c == 'S')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            return lasttok = parse_bracket_exp_mb();
        }
        zeroset(ccl);
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c == '^') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (c1 == '-') {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c2) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                    c1 = c;
                    if (!hard_LC_COLLATE)
                        for (c = c1; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    else {
                        if (case_fold) {
                            c1 = (__extension__ ({
                                int __res;
                                if (sizeof (c1) > 1) {
                                    if (__builtin_constant_p(c1)) {
                                        int __c = (c1);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c1);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c1)];
                                __res;
                            }));
                            c2 = (__extension__ ({
                                int __res;
                                if (sizeof (c2) > 1) {
                                    if (__builtin_constant_p(c2)) {
                                        int __c = (c2);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c2);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c2)];
                                __res;
                            }));
                        }
                        for (c = 0; c < (1 << 8); ++c) 
                            if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                                setbit_case_fold(c, ccl);
                    }
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast addifexit:Priority 11803
At location src/dfa.c:760
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return -1;
for (i = 0; i < 2; ++i) {
    do {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 's':
      case 'S':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if (((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISspace))
                setbit(c2, ccl);
        if (c == 'S')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            return lasttok = parse_bracket_exp_mb();
        }
        zeroset(ccl);
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c == '^') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (c1 == '-') {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c2) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                    c1 = c;
                    if (!hard_LC_COLLATE)
                        for (c = c1; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    else {
                        if (case_fold) {
                            c1 = (__extension__ ({
                                int __res;
                                if (sizeof (c1) > 1) {
                                    if (__builtin_constant_p(c1)) {
                                        int __c = (c1);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c1);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c1)];
                                __res;
                            }));
                            c2 = (__extension__ ({
                                int __res;
                                if (sizeof (c2) > 1) {
                                    if (__builtin_constant_p(c2)) {
                                        int __c = (c2);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c2);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c2)];
                                __res;
                            }));
                        }
                        for (c = 0; c < (1 << 8); ++c) 
                            if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                                setbit_case_fold(c, ccl);
                    }
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast addifexit:Priority 11803
At location src/dfa.c:760
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 0;
for (i = 0; i < 2; ++i) {
    do {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 's':
      case 'S':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if (((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISspace))
                setbit(c2, ccl);
        if (c == 'S')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            return lasttok = parse_bracket_exp_mb();
        }
        zeroset(ccl);
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c == '^') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (c1 == '-') {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c2) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                    c1 = c;
                    if (!hard_LC_COLLATE)
                        for (c = c1; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    else {
                        if (case_fold) {
                            c1 = (__extension__ ({
                                int __res;
                                if (sizeof (c1) > 1) {
                                    if (__builtin_constant_p(c1)) {
                                        int __c = (c1);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c1);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c1)];
                                __res;
                            }));
                            c2 = (__extension__ ({
                                int __res;
                                if (sizeof (c2) > 1) {
                                    if (__builtin_constant_p(c2)) {
                                        int __c = (c2);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c2);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c2)];
                                __res;
                            }));
                        }
                        for (c = 0; c < (1 << 8); ++c) 
                            if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                                setbit_case_fold(c, ccl);
                    }
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast addifexit:Priority 11803
At location src/dfa.c:760
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 1;
for (i = 0; i < 2; ++i) {
    do {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 's':
      case 'S':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if (((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISspace))
                setbit(c2, ccl);
        if (c == 'S')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            return lasttok = parse_bracket_exp_mb();
        }
        zeroset(ccl);
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c == '^') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (c1 == '-') {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c2) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                    c1 = c;
                    if (!hard_LC_COLLATE)
                        for (c = c1; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    else {
                        if (case_fold) {
                            c1 = (__extension__ ({
                                int __res;
                                if (sizeof (c1) > 1) {
                                    if (__builtin_constant_p(c1)) {
                                        int __c = (c1);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c1);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c1)];
                                __res;
                            }));
                            c2 = (__extension__ ({
                                int __res;
                                if (sizeof (c2) > 1) {
                                    if (__builtin_constant_p(c2)) {
                                        int __c = (c2);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c2);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c2)];
                                __res;
                            }));
                        }
                        for (c = 0; c < (1 << 8); ++c) 
                            if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                                setbit_case_fold(c, ccl);
                    }
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast addifexit:Priority 11803
At location src/dfa.c:760
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 2;
for (i = 0; i < 2; ++i) {
    do {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 's':
      case 'S':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if (((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISspace))
                setbit(c2, ccl);
        if (c == 'S')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            return lasttok = parse_bracket_exp_mb();
        }
        zeroset(ccl);
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c == '^') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (c1 == '-') {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c2) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                    c1 = c;
                    if (!hard_LC_COLLATE)
                        for (c = c1; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    else {
                        if (case_fold) {
                            c1 = (__extension__ ({
                                int __res;
                                if (sizeof (c1) > 1) {
                                    if (__builtin_constant_p(c1)) {
                                        int __c = (c1);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c1);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c1)];
                                __res;
                            }));
                            c2 = (__extension__ ({
                                int __res;
                                if (sizeof (c2) > 1) {
                                    if (__builtin_constant_p(c2)) {
                                        int __c = (c2);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c2);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c2)];
                                __res;
                            }));
                        }
                        for (c = 0; c < (1 << 8); ++c) 
                            if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                                setbit_case_fold(c, ccl);
                    }
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast addifexit:Priority 11803
At location src/dfa.c:760
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 5;
for (i = 0; i < 2; ++i) {
    do {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 's':
      case 'S':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if (((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISspace))
                setbit(c2, ccl);
        if (c == 'S')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            return lasttok = parse_bracket_exp_mb();
        }
        zeroset(ccl);
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c == '^') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (c1 == '-') {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c2) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                    c1 = c;
                    if (!hard_LC_COLLATE)
                        for (c = c1; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    else {
                        if (case_fold) {
                            c1 = (__extension__ ({
                                int __res;
                                if (sizeof (c1) > 1) {
                                    if (__builtin_constant_p(c1)) {
                                        int __c = (c1);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c1);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c1)];
                                __res;
                            }));
                            c2 = (__extension__ ({
                                int __res;
                                if (sizeof (c2) > 1) {
                                    if (__builtin_constant_p(c2)) {
                                        int __c = (c2);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c2);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c2)];
                                __res;
                            }));
                        }
                        for (c = 0; c < (1 << 8); ++c) 
                            if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                                setbit_case_fold(c, ccl);
                    }
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast addifexit:Priority 11803
At location src/dfa.c:760
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 8;
for (i = 0; i < 2; ++i) {
    do {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 's':
      case 'S':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if (((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISspace))
                setbit(c2, ccl);
        if (c == 'S')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            return lasttok = parse_bracket_exp_mb();
        }
        zeroset(ccl);
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c == '^') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (c1 == '-') {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c2) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                    c1 = c;
                    if (!hard_LC_COLLATE)
                        for (c = c1; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    else {
                        if (case_fold) {
                            c1 = (__extension__ ({
                                int __res;
                                if (sizeof (c1) > 1) {
                                    if (__builtin_constant_p(c1)) {
                                        int __c = (c1);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c1);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c1)];
                                __res;
                            }));
                            c2 = (__extension__ ({
                                int __res;
                                if (sizeof (c2) > 1) {
                                    if (__builtin_constant_p(c2)) {
                                        int __c = (c2);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c2);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c2)];
                                __res;
                            }));
                        }
                        for (c = 0; c < (1 << 8); ++c) 
                            if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                                setbit_case_fold(c, ccl);
                    }
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast addifexit:Priority 11803
At location src/dfa.c:760
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 9;
for (i = 0; i < 2; ++i) {
    do {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 's':
      case 'S':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if (((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISspace))
                setbit(c2, ccl);
        if (c == 'S')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            return lasttok = parse_bracket_exp_mb();
        }
        zeroset(ccl);
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c == '^') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (c1 == '-') {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c2) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                    c1 = c;
                    if (!hard_LC_COLLATE)
                        for (c = c1; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    else {
                        if (case_fold) {
                            c1 = (__extension__ ({
                                int __res;
                                if (sizeof (c1) > 1) {
                                    if (__builtin_constant_p(c1)) {
                                        int __c = (c1);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c1);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c1)];
                                __res;
                            }));
                            c2 = (__extension__ ({
                                int __res;
                                if (sizeof (c2) > 1) {
                                    if (__builtin_constant_p(c2)) {
                                        int __c = (c2);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c2);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c2)];
                                __res;
                            }));
                        }
                        for (c = 0; c < (1 << 8); ++c) 
                            if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                                setbit_case_fold(c, ccl);
                    }
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast addifexit:Priority 11803
At location src/dfa.c:760
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 10;
for (i = 0; i < 2; ++i) {
    do {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 's':
      case 'S':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if (((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISspace))
                setbit(c2, ccl);
        if (c == 'S')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            return lasttok = parse_bracket_exp_mb();
        }
        zeroset(ccl);
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c == '^') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (c1 == '-') {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c2) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                    c1 = c;
                    if (!hard_LC_COLLATE)
                        for (c = c1; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    else {
                        if (case_fold) {
                            c1 = (__extension__ ({
                                int __res;
                                if (sizeof (c1) > 1) {
                                    if (__builtin_constant_p(c1)) {
                                        int __c = (c1);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c1);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c1)];
                                __res;
                            }));
                            c2 = (__extension__ ({
                                int __res;
                                if (sizeof (c2) > 1) {
                                    if (__builtin_constant_p(c2)) {
                                        int __c = (c2);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c2);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c2)];
                                __res;
                            }));
                        }
                        for (c = 0; c < (1 << 8); ++c) 
                            if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                                setbit_case_fold(c, ccl);
                    }
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast addifexit:Priority 11803
At location src/dfa.c:760
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 128;
for (i = 0; i < 2; ++i) {
    do {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 's':
      case 'S':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if (((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISspace))
                setbit(c2, ccl);
        if (c == 'S')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            return lasttok = parse_bracket_exp_mb();
        }
        zeroset(ccl);
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c == '^') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (c1 == '-') {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c2) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                    c1 = c;
                    if (!hard_LC_COLLATE)
                        for (c = c1; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    else {
                        if (case_fold) {
                            c1 = (__extension__ ({
                                int __res;
                                if (sizeof (c1) > 1) {
                                    if (__builtin_constant_p(c1)) {
                                        int __c = (c1);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c1);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c1)];
                                __res;
                            }));
                            c2 = (__extension__ ({
                                int __res;
                                if (sizeof (c2) > 1) {
                                    if (__builtin_constant_p(c2)) {
                                        int __c = (c2);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c2);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c2)];
                                __res;
                            }));
                        }
                        for (c = 0; c < (1 << 8); ++c) 
                            if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                                setbit_case_fold(c, ccl);
                    }
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast addifexit:Priority 11803
At location src/dfa.c:760
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 255;
for (i = 0; i < 2; ++i) {
    do {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 's':
      case 'S':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if (((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISspace))
                setbit(c2, ccl);
        if (c == 'S')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            return lasttok = parse_bracket_exp_mb();
        }
        zeroset(ccl);
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c == '^') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (c1 == '-') {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c2) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                    c1 = c;
                    if (!hard_LC_COLLATE)
                        for (c = c1; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    else {
                        if (case_fold) {
                            c1 = (__extension__ ({
                                int __res;
                                if (sizeof (c1) > 1) {
                                    if (__builtin_constant_p(c1)) {
                                        int __c = (c1);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c1);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c1)];
                                __res;
                            }));
                            c2 = (__extension__ ({
                                int __res;
                                if (sizeof (c2) > 1) {
                                    if (__builtin_constant_p(c2)) {
                                        int __c = (c2);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c2);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c2)];
                                __res;
                            }));
                        }
                        for (c = 0; c < (1 << 8); ++c) 
                            if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                                setbit_case_fold(c, ccl);
                    }
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast addifexit:Priority 11803
At location src/dfa.c:760
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 256;
for (i = 0; i < 2; ++i) {
    do {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 's':
      case 'S':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if (((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISspace))
                setbit(c2, ccl);
        if (c == 'S')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            return lasttok = parse_bracket_exp_mb();
        }
        zeroset(ccl);
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c == '^') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (c1 == '-') {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c2) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                    c1 = c;
                    if (!hard_LC_COLLATE)
                        for (c = c1; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    else {
                        if (case_fold) {
                            c1 = (__extension__ ({
                                int __res;
                                if (sizeof (c1) > 1) {
                                    if (__builtin_constant_p(c1)) {
                                        int __c = (c1);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c1);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c1)];
                                __res;
                            }));
                            c2 = (__extension__ ({
                                int __res;
                                if (sizeof (c2) > 1) {
                                    if (__builtin_constant_p(c2)) {
                                        int __c = (c2);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c2);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c2)];
                                __res;
                            }));
                        }
                        for (c = 0; c < (1 << 8); ++c) 
                            if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                                setbit_case_fold(c, ccl);
                    }
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast addifexit:Priority 11803
At location src/dfa.c:760
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 32767;
for (i = 0; i < 2; ++i) {
    do {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 's':
      case 'S':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if (((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISspace))
                setbit(c2, ccl);
        if (c == 'S')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            return lasttok = parse_bracket_exp_mb();
        }
        zeroset(ccl);
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c == '^') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (c1 == '-') {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c2) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                    c1 = c;
                    if (!hard_LC_COLLATE)
                        for (c = c1; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    else {
                        if (case_fold) {
                            c1 = (__extension__ ({
                                int __res;
                                if (sizeof (c1) > 1) {
                                    if (__builtin_constant_p(c1)) {
                                        int __c = (c1);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c1);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c1)];
                                __res;
                            }));
                            c2 = (__extension__ ({
                                int __res;
                                if (sizeof (c2) > 1) {
                                    if (__builtin_constant_p(c2)) {
                                        int __c = (c2);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c2);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c2)];
                                __res;
                            }));
                        }
                        for (c = 0; c < (1 << 8); ++c) 
                            if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                                setbit_case_fold(c, ccl);
                    }
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast addifexit:Priority 9503
At location src/dfa.c:760
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    goto skip;
for (i = 0; i < 2; ++i) {
    do {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 's':
      case 'S':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if (((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISspace))
                setbit(c2, ccl);
        if (c == 'S')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            return lasttok = parse_bracket_exp_mb();
        }
        zeroset(ccl);
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c == '^') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (c1 == '-') {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c2) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                    c1 = c;
                    if (!hard_LC_COLLATE)
                        for (c = c1; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    else {
                        if (case_fold) {
                            c1 = (__extension__ ({
                                int __res;
                                if (sizeof (c1) > 1) {
                                    if (__builtin_constant_p(c1)) {
                                        int __c = (c1);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c1);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c1)];
                                __res;
                            }));
                            c2 = (__extension__ ({
                                int __res;
                                if (sizeof (c2) > 1) {
                                    if (__builtin_constant_p(c2)) {
                                        int __c = (c2);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c2);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c2)];
                                __res;
                            }));
                        }
                        for (c = 0; c < (1 << 8); ++c) 
                            if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                                setbit_case_fold(c, ccl);
                    }
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast addifexit:Priority 9503
At location src/dfa.c:760
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    goto normal_char;
for (i = 0; i < 2; ++i) {
    do {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 's':
      case 'S':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if (((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISspace))
                setbit(c2, ccl);
        if (c == 'S')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            return lasttok = parse_bracket_exp_mb();
        }
        zeroset(ccl);
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c == '^') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (c1 == '-') {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                        do {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c2) = (unsigned char)*lexptr++;
                            --lexleft;
                        } while (0);
                    c1 = c;
                    if (!hard_LC_COLLATE)
                        for (c = c1; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    else {
                        if (case_fold) {
                            c1 = (__extension__ ({
                                int __res;
                                if (sizeof (c1) > 1) {
                                    if (__builtin_constant_p(c1)) {
                                        int __c = (c1);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c1);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c1)];
                                __res;
                            }));
                            c2 = (__extension__ ({
                                int __res;
                                if (sizeof (c2) > 1) {
                                    if (__builtin_constant_p(c2)) {
                                        int __c = (c2);
                                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                    } else
                                        __res = tolower(c2);
                                } else
                                    __res = (*__ctype_tolower_loc())[(int)(c2)];
                                __res;
                            }));
                        }
                        for (c = 0; c < (1 << 8); ++c) 
                            if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                                setbit_case_fold(c, ccl);
                    }
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast:Priority 4304
At location src/dfa.c:762
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
do {
    if (!lexleft) {
        if (0 != 0)
            dfaerror(0);
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority 4304
At location src/dfa.c:762
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
do {
    if (!lexleft) {
        if (0 != 0)
            dfaerror(0);
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority 4304
At location src/dfa.c:762
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
do {
    if (!lexleft) {
        if (0 != 0)
            dfaerror(0);
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority 4304
At location src/dfa.c:762
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGLINE;
do {
    if (!lexleft) {
        if (0 != 0)
            dfaerror(0);
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority 4304
At location src/dfa.c:762
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGWORD;
do {
    if (!lexleft) {
        if (0 != 0)
            dfaerror(0);
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority 4304
At location src/dfa.c:762
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDLINE;
do {
    if (!lexleft) {
        if (0 != 0)
            dfaerror(0);
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority 4304
At location src/dfa.c:762
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDWORD;
do {
    if (!lexleft) {
        if (0 != 0)
            dfaerror(0);
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority 4304
At location src/dfa.c:762
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = LIMWORD;
do {
    if (!lexleft) {
        if (0 != 0)
            dfaerror(0);
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority 4304
At location src/dfa.c:762
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = NOTLIMWORD;
do {
    if (!lexleft) {
        if (0 != 0)
            dfaerror(0);
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority 4304
At location src/dfa.c:762
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    laststart = 0;
    return lasttok = BACKREF;
}
do {
    if (!lexleft) {
        if (0 != 0)
            dfaerror(0);
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority 4304
At location src/dfa.c:762
--Src File: src/dfa.c
Fragment 0:
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}
do {
    if (!lexleft) {
        if (0 != 0)
            dfaerror(0);
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority 4304
At location src/dfa.c:762
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
do {
    if (!lexleft) {
        if (0 != 0)
            dfaerror(0);
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority 4304
At location src/dfa.c:762
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
do {
    if (!lexleft) {
        if (0 != 0)
            dfaerror(0);
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority 4304
At location src/dfa.c:762
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
do {
    if (!lexleft) {
        if (0 != 0)
            dfaerror(0);
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 9304
At location src/dfa.c:762
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, i, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return -128;
do {
    if (!lexleft) {
        if (0 != 0)
            dfaerror(0);
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 9304
At location src/dfa.c:762
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, i, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return -1;
do {
    if (!lexleft) {
        if (0 != 0)
            dfaerror(0);
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 9304
At location src/dfa.c:762
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, i, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 0;
do {
    if (!lexleft) {
        if (0 != 0)
            dfaerror(0);
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 9304
At location src/dfa.c:762
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, i, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 1;
do {
    if (!lexleft) {
        if (0 != 0)
            dfaerror(0);
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 9304
At location src/dfa.c:762
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, i, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 2;
do {
    if (!lexleft) {
        if (0 != 0)
            dfaerror(0);
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 9304
At location src/dfa.c:762
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, i, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 5;
do {
    if (!lexleft) {
        if (0 != 0)
            dfaerror(0);
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 9304
At location src/dfa.c:762
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, i, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 8;
do {
    if (!lexleft) {
        if (0 != 0)
            dfaerror(0);
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 9304
At location src/dfa.c:762
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, i, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 9;
do {
    if (!lexleft) {
        if (0 != 0)
            dfaerror(0);
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 9304
At location src/dfa.c:762
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, i, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 10;
do {
    if (!lexleft) {
        if (0 != 0)
            dfaerror(0);
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 9304
At location src/dfa.c:762
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, i, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 128;
do {
    if (!lexleft) {
        if (0 != 0)
            dfaerror(0);
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 9304
At location src/dfa.c:762
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, i, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 255;
do {
    if (!lexleft) {
        if (0 != 0)
            dfaerror(0);
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 9304
At location src/dfa.c:762
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, i, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 256;
do {
    if (!lexleft) {
        if (0 != 0)
            dfaerror(0);
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 9304
At location src/dfa.c:762
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, i, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 32767;
do {
    if (!lexleft) {
        if (0 != 0)
            dfaerror(0);
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 9304
At location src/dfa.c:762
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, i, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    break;
do {
    if (!lexleft) {
        if (0 != 0)
            dfaerror(0);
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 9504
At location src/dfa.c:762
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, i, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    goto skip;
do {
    if (!lexleft) {
        if (0 != 0)
            dfaerror(0);
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 9504
At location src/dfa.c:762
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, i, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    goto normal_char;
do {
    if (!lexleft) {
        if (0 != 0)
            dfaerror(0);
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority -712
At location src/dfa.c:764
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast:Priority -712
At location src/dfa.c:764
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast:Priority -712
At location src/dfa.c:764
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast:Priority -712
At location src/dfa.c:764
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGLINE;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast:Priority -712
At location src/dfa.c:764
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGWORD;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast:Priority -712
At location src/dfa.c:764
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDLINE;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast:Priority -712
At location src/dfa.c:764
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDWORD;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast:Priority -712
At location src/dfa.c:764
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = LIMWORD;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast:Priority -712
At location src/dfa.c:764
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = NOTLIMWORD;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast:Priority -712
At location src/dfa.c:764
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    laststart = 0;
    return lasttok = BACKREF;
}
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast:Priority -712
At location src/dfa.c:764
--Src File: src/dfa.c
Fragment 0:
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast:Priority -712
At location src/dfa.c:764
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast:Priority -712
At location src/dfa.c:764
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast:Priority -712
At location src/dfa.c:764
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3038
At location src/dfa.c:764
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cur_mb_index, c, lexptr, lexleft, lasttok, i, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return -128;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3038
At location src/dfa.c:764
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cur_mb_index, c, lexptr, lexleft, lasttok, i, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return -1;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3038
At location src/dfa.c:764
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cur_mb_index, c, lexptr, lexleft, lasttok, i, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 0;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3038
At location src/dfa.c:764
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cur_mb_index, c, lexptr, lexleft, lasttok, i, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 1;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3038
At location src/dfa.c:764
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cur_mb_index, c, lexptr, lexleft, lasttok, i, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 2;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3038
At location src/dfa.c:764
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cur_mb_index, c, lexptr, lexleft, lasttok, i, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 5;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3038
At location src/dfa.c:764
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cur_mb_index, c, lexptr, lexleft, lasttok, i, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 8;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3038
At location src/dfa.c:764
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cur_mb_index, c, lexptr, lexleft, lasttok, i, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 9;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3038
At location src/dfa.c:764
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cur_mb_index, c, lexptr, lexleft, lasttok, i, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 10;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3038
At location src/dfa.c:764
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cur_mb_index, c, lexptr, lexleft, lasttok, i, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 128;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3038
At location src/dfa.c:764
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cur_mb_index, c, lexptr, lexleft, lasttok, i, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 255;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3038
At location src/dfa.c:764
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cur_mb_index, c, lexptr, lexleft, lasttok, i, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 256;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3038
At location src/dfa.c:764
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cur_mb_index, c, lexptr, lexleft, lasttok, i, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 32767;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3038
At location src/dfa.c:764
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cur_mb_index, c, lexptr, lexleft, lasttok, i, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    break;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3238
At location src/dfa.c:764
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cur_mb_index, c, lexptr, lexleft, lasttok, i, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    goto skip;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3238
At location src/dfa.c:764
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cur_mb_index, c, lexptr, lexleft, lasttok, i, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    goto normal_char;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping returnreturn addifexit:Priority 4289
At location src/dfa.c:771
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, backslash, lexleft, cur_mb_index, lexptr, lasttok, i, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return -128;
switch (c) {
  case '\\':
    if (backslash)
        goto normal_char;
    if (lexleft == 0)
        dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
    backslash = 1;
    break;
  case '^':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    goto normal_char;
  case '$':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    goto normal_char;
  case '1':
  case '2':
  case '3':
  case '4':
  case '5':
  case '6':
  case '7':
  case '8':
  case '9':
    if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        laststart = 0;
        return lasttok = BACKREF;
    }
    goto normal_char;
  case '`':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGLINE;
    goto normal_char;
  case '\'':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDLINE;
    goto normal_char;
  case '<':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGWORD;
    goto normal_char;
  case '>':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDWORD;
    goto normal_char;
  case 'b':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = LIMWORD;
    goto normal_char;
  case 'B':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = NOTLIMWORD;
    goto normal_char;
  case '?':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = QMARK;
  case '*':
    if (backslash)
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = STAR;
  case '+':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = PLUS;
  case '{':
    if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
        int lo = -1, hi = -1;
        const char *p = lexptr;
        const char *lim = p + lexleft;
        for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
            lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
        if (p != lim && *p == ',')
            while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
        else
            hi = lo;
        if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
            goto normal_char;
    }
    minrep = 0;
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (((unsigned int)(c) - '0' <= 9)) {
        minrep = c - '0';
        for (;;) {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (!((unsigned int)(c) - '0' <= 9))
                break;
            minrep = 10 * minrep + c - '0';
        }
    } else
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    if (c == ',') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (!((unsigned int)(c) - '0' <= 9))
            maxrep = -1;
        else {
            maxrep = c - '0';
            for (;;) {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                maxrep = 10 * maxrep + c - '0';
            }
            if (0 <= maxrep && maxrep < minrep)
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        }
    } else
        maxrep = minrep;
    if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        if (c != '\\')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    }
    if (c != '}')
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    laststart = 0;
    return lasttok = REPMN;
  case '|':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '\n':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '(':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    ++parens;
    laststart = 1;
    return lasttok = LPAREN;
  case ')':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    --parens;
    laststart = 0;
    return lasttok = RPAREN;
  case '.':
    if (backslash)
        goto normal_char;
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    zeroset(ccl);
    notset(ccl);
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        clrbit(eolbyte, ccl);
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit('\x00', ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case 's':
  case 'S':
    if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    zeroset(ccl);
    for (c2 = 0; c2 < (1 << 8); ++c2) 
        if (((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISspace))
            setbit(c2, ccl);
    if (c == 'S')
        notset(ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case 'w':
  case 'W':
    if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    zeroset(ccl);
    for (c2 = 0; c2 < (1 << 8); ++c2) 
        if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
            setbit(c2, ccl);
    if (c == 'W')
        notset(ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case '[':
    if (backslash)
        goto normal_char;
    laststart = 0;
    if ((__ctype_get_mb_cur_max()) > 1) {
        return lasttok = parse_bracket_exp_mb();
    }
    zeroset(ccl);
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c == '^') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        invert = 1;
    } else
        invert = 0;
    do {
        if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
            for (c1 = 0; prednames[c1].name; ++c1) 
                if (looking_at(prednames[c1].name)) {
                    int (*pred)(int) = prednames[c1].pred;
                    for (c2 = 0; c2 < (1 << 8); ++c2) 
                        if ((*pred)(c2))
                            setbit_case_fold(c2, ccl);
                    lexptr += strlen(prednames[c1].name);
                    lexleft -= strlen(prednames[c1].name);
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    goto skip;
                }
        if (c == '\\' && (syntax_bits & ((unsigned long)1)))
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c1 == '-') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (c2 == ']') {
                --lexptr;
                ++lexleft;
            } else {
                if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c2) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                c1 = c;
                if (!hard_LC_COLLATE)
                    for (c = c1; c <= c2; c++) 
                        setbit_case_fold(c, ccl);
                else {
                    if (case_fold) {
                        c1 = (__extension__ ({
                            int __res;
                            if (sizeof (c1) > 1) {
                                if (__builtin_constant_p(c1)) {
                                    int __c = (c1);
                                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                } else
                                    __res = tolower(c1);
                            } else
                                __res = (*__ctype_tolower_loc())[(int)(c1)];
                            __res;
                        }));
                        c2 = (__extension__ ({
                            int __res;
                            if (sizeof (c2) > 1) {
                                if (__builtin_constant_p(c2)) {
                                    int __c = (c2);
                                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                } else
                                    __res = tolower(c2);
                            } else
                                __res = (*__ctype_tolower_loc())[(int)(c2)];
                            __res;
                        }));
                    }
                    for (c = 0; c < (1 << 8); ++c) 
                        if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                            setbit_case_fold(c, ccl);
                }
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                continue;
            }
        }
        setbit_case_fold(c, ccl);
      skip:
        ;
    } while ((c = c1) != ']');
    if (invert) {
        notset(ccl);
        if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit(eolbyte, ccl);
    }
    return lasttok = CSET + charclass_index(ccl);
  default:
  normal_char:
    laststart = 0;
    if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
        zeroset(ccl);
        setbit_case_fold(c, ccl);
        return lasttok = CSET + charclass_index(ccl);
    }
    return lasttok = c;
}

....
Skipping returnreturn addifexit:Priority 4289
At location src/dfa.c:771
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, backslash, lexleft, cur_mb_index, lexptr, lasttok, i, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return -1;
switch (c) {
  case '\\':
    if (backslash)
        goto normal_char;
    if (lexleft == 0)
        dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
    backslash = 1;
    break;
  case '^':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    goto normal_char;
  case '$':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    goto normal_char;
  case '1':
  case '2':
  case '3':
  case '4':
  case '5':
  case '6':
  case '7':
  case '8':
  case '9':
    if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        laststart = 0;
        return lasttok = BACKREF;
    }
    goto normal_char;
  case '`':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGLINE;
    goto normal_char;
  case '\'':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDLINE;
    goto normal_char;
  case '<':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGWORD;
    goto normal_char;
  case '>':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDWORD;
    goto normal_char;
  case 'b':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = LIMWORD;
    goto normal_char;
  case 'B':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = NOTLIMWORD;
    goto normal_char;
  case '?':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = QMARK;
  case '*':
    if (backslash)
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = STAR;
  case '+':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = PLUS;
  case '{':
    if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
        int lo = -1, hi = -1;
        const char *p = lexptr;
        const char *lim = p + lexleft;
        for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
            lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
        if (p != lim && *p == ',')
            while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
        else
            hi = lo;
        if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
            goto normal_char;
    }
    minrep = 0;
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (((unsigned int)(c) - '0' <= 9)) {
        minrep = c - '0';
        for (;;) {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (!((unsigned int)(c) - '0' <= 9))
                break;
            minrep = 10 * minrep + c - '0';
        }
    } else
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    if (c == ',') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (!((unsigned int)(c) - '0' <= 9))
            maxrep = -1;
        else {
            maxrep = c - '0';
            for (;;) {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                maxrep = 10 * maxrep + c - '0';
            }
            if (0 <= maxrep && maxrep < minrep)
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        }
    } else
        maxrep = minrep;
    if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        if (c != '\\')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    }
    if (c != '}')
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    laststart = 0;
    return lasttok = REPMN;
  case '|':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '\n':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '(':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    ++parens;
    laststart = 1;
    return lasttok = LPAREN;
  case ')':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    --parens;
    laststart = 0;
    return lasttok = RPAREN;
  case '.':
    if (backslash)
        goto normal_char;
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    zeroset(ccl);
    notset(ccl);
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        clrbit(eolbyte, ccl);
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit('\x00', ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case 's':
  case 'S':
    if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    zeroset(ccl);
    for (c2 = 0; c2 < (1 << 8); ++c2) 
        if (((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISspace))
            setbit(c2, ccl);
    if (c == 'S')
        notset(ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case 'w':
  case 'W':
    if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    zeroset(ccl);
    for (c2 = 0; c2 < (1 << 8); ++c2) 
        if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
            setbit(c2, ccl);
    if (c == 'W')
        notset(ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case '[':
    if (backslash)
        goto normal_char;
    laststart = 0;
    if ((__ctype_get_mb_cur_max()) > 1) {
        return lasttok = parse_bracket_exp_mb();
    }
    zeroset(ccl);
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c == '^') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        invert = 1;
    } else
        invert = 0;
    do {
        if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
            for (c1 = 0; prednames[c1].name; ++c1) 
                if (looking_at(prednames[c1].name)) {
                    int (*pred)(int) = prednames[c1].pred;
                    for (c2 = 0; c2 < (1 << 8); ++c2) 
                        if ((*pred)(c2))
                            setbit_case_fold(c2, ccl);
                    lexptr += strlen(prednames[c1].name);
                    lexleft -= strlen(prednames[c1].name);
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    goto skip;
                }
        if (c == '\\' && (syntax_bits & ((unsigned long)1)))
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c1 == '-') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (c2 == ']') {
                --lexptr;
                ++lexleft;
            } else {
                if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c2) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                c1 = c;
                if (!hard_LC_COLLATE)
                    for (c = c1; c <= c2; c++) 
                        setbit_case_fold(c, ccl);
                else {
                    if (case_fold) {
                        c1 = (__extension__ ({
                            int __res;
                            if (sizeof (c1) > 1) {
                                if (__builtin_constant_p(c1)) {
                                    int __c = (c1);
                                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                } else
                                    __res = tolower(c1);
                            } else
                                __res = (*__ctype_tolower_loc())[(int)(c1)];
                            __res;
                        }));
                        c2 = (__extension__ ({
                            int __res;
                            if (sizeof (c2) > 1) {
                                if (__builtin_constant_p(c2)) {
                                    int __c = (c2);
                                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                } else
                                    __res = tolower(c2);
                            } else
                                __res = (*__ctype_tolower_loc())[(int)(c2)];
                            __res;
                        }));
                    }
                    for (c = 0; c < (1 << 8); ++c) 
                        if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                            setbit_case_fold(c, ccl);
                }
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                continue;
            }
        }
        setbit_case_fold(c, ccl);
      skip:
        ;
    } while ((c = c1) != ']');
    if (invert) {
        notset(ccl);
        if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit(eolbyte, ccl);
    }
    return lasttok = CSET + charclass_index(ccl);
  default:
  normal_char:
    laststart = 0;
    if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
        zeroset(ccl);
        setbit_case_fold(c, ccl);
        return lasttok = CSET + charclass_index(ccl);
    }
    return lasttok = c;
}

....
Skipping returnreturn addifexit:Priority 4289
At location src/dfa.c:771
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, backslash, lexleft, cur_mb_index, lexptr, lasttok, i, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 0;
switch (c) {
  case '\\':
    if (backslash)
        goto normal_char;
    if (lexleft == 0)
        dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
    backslash = 1;
    break;
  case '^':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    goto normal_char;
  case '$':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    goto normal_char;
  case '1':
  case '2':
  case '3':
  case '4':
  case '5':
  case '6':
  case '7':
  case '8':
  case '9':
    if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        laststart = 0;
        return lasttok = BACKREF;
    }
    goto normal_char;
  case '`':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGLINE;
    goto normal_char;
  case '\'':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDLINE;
    goto normal_char;
  case '<':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGWORD;
    goto normal_char;
  case '>':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDWORD;
    goto normal_char;
  case 'b':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = LIMWORD;
    goto normal_char;
  case 'B':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = NOTLIMWORD;
    goto normal_char;
  case '?':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = QMARK;
  case '*':
    if (backslash)
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = STAR;
  case '+':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = PLUS;
  case '{':
    if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
        int lo = -1, hi = -1;
        const char *p = lexptr;
        const char *lim = p + lexleft;
        for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
            lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
        if (p != lim && *p == ',')
            while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
        else
            hi = lo;
        if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
            goto normal_char;
    }
    minrep = 0;
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (((unsigned int)(c) - '0' <= 9)) {
        minrep = c - '0';
        for (;;) {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (!((unsigned int)(c) - '0' <= 9))
                break;
            minrep = 10 * minrep + c - '0';
        }
    } else
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    if (c == ',') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (!((unsigned int)(c) - '0' <= 9))
            maxrep = -1;
        else {
            maxrep = c - '0';
            for (;;) {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                maxrep = 10 * maxrep + c - '0';
            }
            if (0 <= maxrep && maxrep < minrep)
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        }
    } else
        maxrep = minrep;
    if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        if (c != '\\')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    }
    if (c != '}')
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    laststart = 0;
    return lasttok = REPMN;
  case '|':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '\n':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '(':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    ++parens;
    laststart = 1;
    return lasttok = LPAREN;
  case ')':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    --parens;
    laststart = 0;
    return lasttok = RPAREN;
  case '.':
    if (backslash)
        goto normal_char;
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    zeroset(ccl);
    notset(ccl);
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        clrbit(eolbyte, ccl);
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit('\x00', ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case 's':
  case 'S':
    if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    zeroset(ccl);
    for (c2 = 0; c2 < (1 << 8); ++c2) 
        if (((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISspace))
            setbit(c2, ccl);
    if (c == 'S')
        notset(ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case 'w':
  case 'W':
    if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    zeroset(ccl);
    for (c2 = 0; c2 < (1 << 8); ++c2) 
        if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
            setbit(c2, ccl);
    if (c == 'W')
        notset(ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case '[':
    if (backslash)
        goto normal_char;
    laststart = 0;
    if ((__ctype_get_mb_cur_max()) > 1) {
        return lasttok = parse_bracket_exp_mb();
    }
    zeroset(ccl);
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c == '^') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        invert = 1;
    } else
        invert = 0;
    do {
        if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
            for (c1 = 0; prednames[c1].name; ++c1) 
                if (looking_at(prednames[c1].name)) {
                    int (*pred)(int) = prednames[c1].pred;
                    for (c2 = 0; c2 < (1 << 8); ++c2) 
                        if ((*pred)(c2))
                            setbit_case_fold(c2, ccl);
                    lexptr += strlen(prednames[c1].name);
                    lexleft -= strlen(prednames[c1].name);
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    goto skip;
                }
        if (c == '\\' && (syntax_bits & ((unsigned long)1)))
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c1 == '-') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (c2 == ']') {
                --lexptr;
                ++lexleft;
            } else {
                if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c2) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                c1 = c;
                if (!hard_LC_COLLATE)
                    for (c = c1; c <= c2; c++) 
                        setbit_case_fold(c, ccl);
                else {
                    if (case_fold) {
                        c1 = (__extension__ ({
                            int __res;
                            if (sizeof (c1) > 1) {
                                if (__builtin_constant_p(c1)) {
                                    int __c = (c1);
                                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                } else
                                    __res = tolower(c1);
                            } else
                                __res = (*__ctype_tolower_loc())[(int)(c1)];
                            __res;
                        }));
                        c2 = (__extension__ ({
                            int __res;
                            if (sizeof (c2) > 1) {
                                if (__builtin_constant_p(c2)) {
                                    int __c = (c2);
                                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                } else
                                    __res = tolower(c2);
                            } else
                                __res = (*__ctype_tolower_loc())[(int)(c2)];
                            __res;
                        }));
                    }
                    for (c = 0; c < (1 << 8); ++c) 
                        if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                            setbit_case_fold(c, ccl);
                }
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                continue;
            }
        }
        setbit_case_fold(c, ccl);
      skip:
        ;
    } while ((c = c1) != ']');
    if (invert) {
        notset(ccl);
        if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit(eolbyte, ccl);
    }
    return lasttok = CSET + charclass_index(ccl);
  default:
  normal_char:
    laststart = 0;
    if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
        zeroset(ccl);
        setbit_case_fold(c, ccl);
        return lasttok = CSET + charclass_index(ccl);
    }
    return lasttok = c;
}

....
Skipping returnreturn addifexit:Priority 4289
At location src/dfa.c:771
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, backslash, lexleft, cur_mb_index, lexptr, lasttok, i, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 1;
switch (c) {
  case '\\':
    if (backslash)
        goto normal_char;
    if (lexleft == 0)
        dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
    backslash = 1;
    break;
  case '^':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    goto normal_char;
  case '$':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    goto normal_char;
  case '1':
  case '2':
  case '3':
  case '4':
  case '5':
  case '6':
  case '7':
  case '8':
  case '9':
    if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        laststart = 0;
        return lasttok = BACKREF;
    }
    goto normal_char;
  case '`':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGLINE;
    goto normal_char;
  case '\'':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDLINE;
    goto normal_char;
  case '<':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGWORD;
    goto normal_char;
  case '>':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDWORD;
    goto normal_char;
  case 'b':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = LIMWORD;
    goto normal_char;
  case 'B':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = NOTLIMWORD;
    goto normal_char;
  case '?':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = QMARK;
  case '*':
    if (backslash)
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = STAR;
  case '+':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = PLUS;
  case '{':
    if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
        int lo = -1, hi = -1;
        const char *p = lexptr;
        const char *lim = p + lexleft;
        for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
            lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
        if (p != lim && *p == ',')
            while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
        else
            hi = lo;
        if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
            goto normal_char;
    }
    minrep = 0;
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (((unsigned int)(c) - '0' <= 9)) {
        minrep = c - '0';
        for (;;) {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (!((unsigned int)(c) - '0' <= 9))
                break;
            minrep = 10 * minrep + c - '0';
        }
    } else
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    if (c == ',') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (!((unsigned int)(c) - '0' <= 9))
            maxrep = -1;
        else {
            maxrep = c - '0';
            for (;;) {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                maxrep = 10 * maxrep + c - '0';
            }
            if (0 <= maxrep && maxrep < minrep)
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        }
    } else
        maxrep = minrep;
    if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        if (c != '\\')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    }
    if (c != '}')
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    laststart = 0;
    return lasttok = REPMN;
  case '|':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '\n':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '(':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    ++parens;
    laststart = 1;
    return lasttok = LPAREN;
  case ')':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    --parens;
    laststart = 0;
    return lasttok = RPAREN;
  case '.':
    if (backslash)
        goto normal_char;
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    zeroset(ccl);
    notset(ccl);
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        clrbit(eolbyte, ccl);
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit('\x00', ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case 's':
  case 'S':
    if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    zeroset(ccl);
    for (c2 = 0; c2 < (1 << 8); ++c2) 
        if (((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISspace))
            setbit(c2, ccl);
    if (c == 'S')
        notset(ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case 'w':
  case 'W':
    if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    zeroset(ccl);
    for (c2 = 0; c2 < (1 << 8); ++c2) 
        if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
            setbit(c2, ccl);
    if (c == 'W')
        notset(ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case '[':
    if (backslash)
        goto normal_char;
    laststart = 0;
    if ((__ctype_get_mb_cur_max()) > 1) {
        return lasttok = parse_bracket_exp_mb();
    }
    zeroset(ccl);
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c == '^') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        invert = 1;
    } else
        invert = 0;
    do {
        if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
            for (c1 = 0; prednames[c1].name; ++c1) 
                if (looking_at(prednames[c1].name)) {
                    int (*pred)(int) = prednames[c1].pred;
                    for (c2 = 0; c2 < (1 << 8); ++c2) 
                        if ((*pred)(c2))
                            setbit_case_fold(c2, ccl);
                    lexptr += strlen(prednames[c1].name);
                    lexleft -= strlen(prednames[c1].name);
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    goto skip;
                }
        if (c == '\\' && (syntax_bits & ((unsigned long)1)))
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c1 == '-') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (c2 == ']') {
                --lexptr;
                ++lexleft;
            } else {
                if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c2) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                c1 = c;
                if (!hard_LC_COLLATE)
                    for (c = c1; c <= c2; c++) 
                        setbit_case_fold(c, ccl);
                else {
                    if (case_fold) {
                        c1 = (__extension__ ({
                            int __res;
                            if (sizeof (c1) > 1) {
                                if (__builtin_constant_p(c1)) {
                                    int __c = (c1);
                                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                } else
                                    __res = tolower(c1);
                            } else
                                __res = (*__ctype_tolower_loc())[(int)(c1)];
                            __res;
                        }));
                        c2 = (__extension__ ({
                            int __res;
                            if (sizeof (c2) > 1) {
                                if (__builtin_constant_p(c2)) {
                                    int __c = (c2);
                                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                } else
                                    __res = tolower(c2);
                            } else
                                __res = (*__ctype_tolower_loc())[(int)(c2)];
                            __res;
                        }));
                    }
                    for (c = 0; c < (1 << 8); ++c) 
                        if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                            setbit_case_fold(c, ccl);
                }
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                continue;
            }
        }
        setbit_case_fold(c, ccl);
      skip:
        ;
    } while ((c = c1) != ']');
    if (invert) {
        notset(ccl);
        if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit(eolbyte, ccl);
    }
    return lasttok = CSET + charclass_index(ccl);
  default:
  normal_char:
    laststart = 0;
    if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
        zeroset(ccl);
        setbit_case_fold(c, ccl);
        return lasttok = CSET + charclass_index(ccl);
    }
    return lasttok = c;
}

....
Skipping returnreturn addifexit:Priority 4289
At location src/dfa.c:771
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, backslash, lexleft, cur_mb_index, lexptr, lasttok, i, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 2;
switch (c) {
  case '\\':
    if (backslash)
        goto normal_char;
    if (lexleft == 0)
        dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
    backslash = 1;
    break;
  case '^':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    goto normal_char;
  case '$':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    goto normal_char;
  case '1':
  case '2':
  case '3':
  case '4':
  case '5':
  case '6':
  case '7':
  case '8':
  case '9':
    if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        laststart = 0;
        return lasttok = BACKREF;
    }
    goto normal_char;
  case '`':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGLINE;
    goto normal_char;
  case '\'':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDLINE;
    goto normal_char;
  case '<':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGWORD;
    goto normal_char;
  case '>':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDWORD;
    goto normal_char;
  case 'b':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = LIMWORD;
    goto normal_char;
  case 'B':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = NOTLIMWORD;
    goto normal_char;
  case '?':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = QMARK;
  case '*':
    if (backslash)
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = STAR;
  case '+':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = PLUS;
  case '{':
    if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
        int lo = -1, hi = -1;
        const char *p = lexptr;
        const char *lim = p + lexleft;
        for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
            lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
        if (p != lim && *p == ',')
            while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
        else
            hi = lo;
        if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
            goto normal_char;
    }
    minrep = 0;
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (((unsigned int)(c) - '0' <= 9)) {
        minrep = c - '0';
        for (;;) {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (!((unsigned int)(c) - '0' <= 9))
                break;
            minrep = 10 * minrep + c - '0';
        }
    } else
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    if (c == ',') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (!((unsigned int)(c) - '0' <= 9))
            maxrep = -1;
        else {
            maxrep = c - '0';
            for (;;) {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                maxrep = 10 * maxrep + c - '0';
            }
            if (0 <= maxrep && maxrep < minrep)
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        }
    } else
        maxrep = minrep;
    if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        if (c != '\\')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    }
    if (c != '}')
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    laststart = 0;
    return lasttok = REPMN;
  case '|':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '\n':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '(':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    ++parens;
    laststart = 1;
    return lasttok = LPAREN;
  case ')':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    --parens;
    laststart = 0;
    return lasttok = RPAREN;
  case '.':
    if (backslash)
        goto normal_char;
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    zeroset(ccl);
    notset(ccl);
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        clrbit(eolbyte, ccl);
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit('\x00', ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case 's':
  case 'S':
    if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    zeroset(ccl);
    for (c2 = 0; c2 < (1 << 8); ++c2) 
        if (((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISspace))
            setbit(c2, ccl);
    if (c == 'S')
        notset(ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case 'w':
  case 'W':
    if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    zeroset(ccl);
    for (c2 = 0; c2 < (1 << 8); ++c2) 
        if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
            setbit(c2, ccl);
    if (c == 'W')
        notset(ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case '[':
    if (backslash)
        goto normal_char;
    laststart = 0;
    if ((__ctype_get_mb_cur_max()) > 1) {
        return lasttok = parse_bracket_exp_mb();
    }
    zeroset(ccl);
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c == '^') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        invert = 1;
    } else
        invert = 0;
    do {
        if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
            for (c1 = 0; prednames[c1].name; ++c1) 
                if (looking_at(prednames[c1].name)) {
                    int (*pred)(int) = prednames[c1].pred;
                    for (c2 = 0; c2 < (1 << 8); ++c2) 
                        if ((*pred)(c2))
                            setbit_case_fold(c2, ccl);
                    lexptr += strlen(prednames[c1].name);
                    lexleft -= strlen(prednames[c1].name);
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    goto skip;
                }
        if (c == '\\' && (syntax_bits & ((unsigned long)1)))
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c1 == '-') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (c2 == ']') {
                --lexptr;
                ++lexleft;
            } else {
                if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c2) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                c1 = c;
                if (!hard_LC_COLLATE)
                    for (c = c1; c <= c2; c++) 
                        setbit_case_fold(c, ccl);
                else {
                    if (case_fold) {
                        c1 = (__extension__ ({
                            int __res;
                            if (sizeof (c1) > 1) {
                                if (__builtin_constant_p(c1)) {
                                    int __c = (c1);
                                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                } else
                                    __res = tolower(c1);
                            } else
                                __res = (*__ctype_tolower_loc())[(int)(c1)];
                            __res;
                        }));
                        c2 = (__extension__ ({
                            int __res;
                            if (sizeof (c2) > 1) {
                                if (__builtin_constant_p(c2)) {
                                    int __c = (c2);
                                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                } else
                                    __res = tolower(c2);
                            } else
                                __res = (*__ctype_tolower_loc())[(int)(c2)];
                            __res;
                        }));
                    }
                    for (c = 0; c < (1 << 8); ++c) 
                        if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                            setbit_case_fold(c, ccl);
                }
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                continue;
            }
        }
        setbit_case_fold(c, ccl);
      skip:
        ;
    } while ((c = c1) != ']');
    if (invert) {
        notset(ccl);
        if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit(eolbyte, ccl);
    }
    return lasttok = CSET + charclass_index(ccl);
  default:
  normal_char:
    laststart = 0;
    if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
        zeroset(ccl);
        setbit_case_fold(c, ccl);
        return lasttok = CSET + charclass_index(ccl);
    }
    return lasttok = c;
}

....
Skipping returnreturn addifexit:Priority 4289
At location src/dfa.c:771
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, backslash, lexleft, cur_mb_index, lexptr, lasttok, i, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 5;
switch (c) {
  case '\\':
    if (backslash)
        goto normal_char;
    if (lexleft == 0)
        dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
    backslash = 1;
    break;
  case '^':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    goto normal_char;
  case '$':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    goto normal_char;
  case '1':
  case '2':
  case '3':
  case '4':
  case '5':
  case '6':
  case '7':
  case '8':
  case '9':
    if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        laststart = 0;
        return lasttok = BACKREF;
    }
    goto normal_char;
  case '`':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGLINE;
    goto normal_char;
  case '\'':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDLINE;
    goto normal_char;
  case '<':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGWORD;
    goto normal_char;
  case '>':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDWORD;
    goto normal_char;
  case 'b':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = LIMWORD;
    goto normal_char;
  case 'B':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = NOTLIMWORD;
    goto normal_char;
  case '?':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = QMARK;
  case '*':
    if (backslash)
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = STAR;
  case '+':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = PLUS;
  case '{':
    if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
        int lo = -1, hi = -1;
        const char *p = lexptr;
        const char *lim = p + lexleft;
        for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
            lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
        if (p != lim && *p == ',')
            while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
        else
            hi = lo;
        if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
            goto normal_char;
    }
    minrep = 0;
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (((unsigned int)(c) - '0' <= 9)) {
        minrep = c - '0';
        for (;;) {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (!((unsigned int)(c) - '0' <= 9))
                break;
            minrep = 10 * minrep + c - '0';
        }
    } else
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    if (c == ',') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (!((unsigned int)(c) - '0' <= 9))
            maxrep = -1;
        else {
            maxrep = c - '0';
            for (;;) {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                maxrep = 10 * maxrep + c - '0';
            }
            if (0 <= maxrep && maxrep < minrep)
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        }
    } else
        maxrep = minrep;
    if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        if (c != '\\')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    }
    if (c != '}')
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    laststart = 0;
    return lasttok = REPMN;
  case '|':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '\n':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '(':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    ++parens;
    laststart = 1;
    return lasttok = LPAREN;
  case ')':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    --parens;
    laststart = 0;
    return lasttok = RPAREN;
  case '.':
    if (backslash)
        goto normal_char;
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    zeroset(ccl);
    notset(ccl);
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        clrbit(eolbyte, ccl);
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit('\x00', ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case 's':
  case 'S':
    if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    zeroset(ccl);
    for (c2 = 0; c2 < (1 << 8); ++c2) 
        if (((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISspace))
            setbit(c2, ccl);
    if (c == 'S')
        notset(ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case 'w':
  case 'W':
    if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    zeroset(ccl);
    for (c2 = 0; c2 < (1 << 8); ++c2) 
        if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
            setbit(c2, ccl);
    if (c == 'W')
        notset(ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case '[':
    if (backslash)
        goto normal_char;
    laststart = 0;
    if ((__ctype_get_mb_cur_max()) > 1) {
        return lasttok = parse_bracket_exp_mb();
    }
    zeroset(ccl);
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c == '^') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        invert = 1;
    } else
        invert = 0;
    do {
        if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
            for (c1 = 0; prednames[c1].name; ++c1) 
                if (looking_at(prednames[c1].name)) {
                    int (*pred)(int) = prednames[c1].pred;
                    for (c2 = 0; c2 < (1 << 8); ++c2) 
                        if ((*pred)(c2))
                            setbit_case_fold(c2, ccl);
                    lexptr += strlen(prednames[c1].name);
                    lexleft -= strlen(prednames[c1].name);
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    goto skip;
                }
        if (c == '\\' && (syntax_bits & ((unsigned long)1)))
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c1 == '-') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (c2 == ']') {
                --lexptr;
                ++lexleft;
            } else {
                if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c2) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                c1 = c;
                if (!hard_LC_COLLATE)
                    for (c = c1; c <= c2; c++) 
                        setbit_case_fold(c, ccl);
                else {
                    if (case_fold) {
                        c1 = (__extension__ ({
                            int __res;
                            if (sizeof (c1) > 1) {
                                if (__builtin_constant_p(c1)) {
                                    int __c = (c1);
                                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                } else
                                    __res = tolower(c1);
                            } else
                                __res = (*__ctype_tolower_loc())[(int)(c1)];
                            __res;
                        }));
                        c2 = (__extension__ ({
                            int __res;
                            if (sizeof (c2) > 1) {
                                if (__builtin_constant_p(c2)) {
                                    int __c = (c2);
                                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                } else
                                    __res = tolower(c2);
                            } else
                                __res = (*__ctype_tolower_loc())[(int)(c2)];
                            __res;
                        }));
                    }
                    for (c = 0; c < (1 << 8); ++c) 
                        if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                            setbit_case_fold(c, ccl);
                }
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                continue;
            }
        }
        setbit_case_fold(c, ccl);
      skip:
        ;
    } while ((c = c1) != ']');
    if (invert) {
        notset(ccl);
        if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit(eolbyte, ccl);
    }
    return lasttok = CSET + charclass_index(ccl);
  default:
  normal_char:
    laststart = 0;
    if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
        zeroset(ccl);
        setbit_case_fold(c, ccl);
        return lasttok = CSET + charclass_index(ccl);
    }
    return lasttok = c;
}

....
Skipping returnreturn addifexit:Priority 4289
At location src/dfa.c:771
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, backslash, lexleft, cur_mb_index, lexptr, lasttok, i, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 8;
switch (c) {
  case '\\':
    if (backslash)
        goto normal_char;
    if (lexleft == 0)
        dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
    backslash = 1;
    break;
  case '^':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    goto normal_char;
  case '$':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    goto normal_char;
  case '1':
  case '2':
  case '3':
  case '4':
  case '5':
  case '6':
  case '7':
  case '8':
  case '9':
    if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        laststart = 0;
        return lasttok = BACKREF;
    }
    goto normal_char;
  case '`':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGLINE;
    goto normal_char;
  case '\'':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDLINE;
    goto normal_char;
  case '<':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGWORD;
    goto normal_char;
  case '>':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDWORD;
    goto normal_char;
  case 'b':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = LIMWORD;
    goto normal_char;
  case 'B':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = NOTLIMWORD;
    goto normal_char;
  case '?':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = QMARK;
  case '*':
    if (backslash)
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = STAR;
  case '+':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = PLUS;
  case '{':
    if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
        int lo = -1, hi = -1;
        const char *p = lexptr;
        const char *lim = p + lexleft;
        for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
            lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
        if (p != lim && *p == ',')
            while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
        else
            hi = lo;
        if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
            goto normal_char;
    }
    minrep = 0;
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (((unsigned int)(c) - '0' <= 9)) {
        minrep = c - '0';
        for (;;) {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (!((unsigned int)(c) - '0' <= 9))
                break;
            minrep = 10 * minrep + c - '0';
        }
    } else
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    if (c == ',') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (!((unsigned int)(c) - '0' <= 9))
            maxrep = -1;
        else {
            maxrep = c - '0';
            for (;;) {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                maxrep = 10 * maxrep + c - '0';
            }
            if (0 <= maxrep && maxrep < minrep)
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        }
    } else
        maxrep = minrep;
    if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        if (c != '\\')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    }
    if (c != '}')
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    laststart = 0;
    return lasttok = REPMN;
  case '|':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '\n':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '(':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    ++parens;
    laststart = 1;
    return lasttok = LPAREN;
  case ')':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    --parens;
    laststart = 0;
    return lasttok = RPAREN;
  case '.':
    if (backslash)
        goto normal_char;
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    zeroset(ccl);
    notset(ccl);
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        clrbit(eolbyte, ccl);
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit('\x00', ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case 's':
  case 'S':
    if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    zeroset(ccl);
    for (c2 = 0; c2 < (1 << 8); ++c2) 
        if (((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISspace))
            setbit(c2, ccl);
    if (c == 'S')
        notset(ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case 'w':
  case 'W':
    if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    zeroset(ccl);
    for (c2 = 0; c2 < (1 << 8); ++c2) 
        if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
            setbit(c2, ccl);
    if (c == 'W')
        notset(ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case '[':
    if (backslash)
        goto normal_char;
    laststart = 0;
    if ((__ctype_get_mb_cur_max()) > 1) {
        return lasttok = parse_bracket_exp_mb();
    }
    zeroset(ccl);
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c == '^') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        invert = 1;
    } else
        invert = 0;
    do {
        if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
            for (c1 = 0; prednames[c1].name; ++c1) 
                if (looking_at(prednames[c1].name)) {
                    int (*pred)(int) = prednames[c1].pred;
                    for (c2 = 0; c2 < (1 << 8); ++c2) 
                        if ((*pred)(c2))
                            setbit_case_fold(c2, ccl);
                    lexptr += strlen(prednames[c1].name);
                    lexleft -= strlen(prednames[c1].name);
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    goto skip;
                }
        if (c == '\\' && (syntax_bits & ((unsigned long)1)))
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c1 == '-') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (c2 == ']') {
                --lexptr;
                ++lexleft;
            } else {
                if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c2) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                c1 = c;
                if (!hard_LC_COLLATE)
                    for (c = c1; c <= c2; c++) 
                        setbit_case_fold(c, ccl);
                else {
                    if (case_fold) {
                        c1 = (__extension__ ({
                            int __res;
                            if (sizeof (c1) > 1) {
                                if (__builtin_constant_p(c1)) {
                                    int __c = (c1);
                                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                } else
                                    __res = tolower(c1);
                            } else
                                __res = (*__ctype_tolower_loc())[(int)(c1)];
                            __res;
                        }));
                        c2 = (__extension__ ({
                            int __res;
                            if (sizeof (c2) > 1) {
                                if (__builtin_constant_p(c2)) {
                                    int __c = (c2);
                                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                } else
                                    __res = tolower(c2);
                            } else
                                __res = (*__ctype_tolower_loc())[(int)(c2)];
                            __res;
                        }));
                    }
                    for (c = 0; c < (1 << 8); ++c) 
                        if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                            setbit_case_fold(c, ccl);
                }
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                continue;
            }
        }
        setbit_case_fold(c, ccl);
      skip:
        ;
    } while ((c = c1) != ']');
    if (invert) {
        notset(ccl);
        if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit(eolbyte, ccl);
    }
    return lasttok = CSET + charclass_index(ccl);
  default:
  normal_char:
    laststart = 0;
    if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
        zeroset(ccl);
        setbit_case_fold(c, ccl);
        return lasttok = CSET + charclass_index(ccl);
    }
    return lasttok = c;
}

....
Skipping returnreturn addifexit:Priority 4289
At location src/dfa.c:771
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, backslash, lexleft, cur_mb_index, lexptr, lasttok, i, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 9;
switch (c) {
  case '\\':
    if (backslash)
        goto normal_char;
    if (lexleft == 0)
        dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
    backslash = 1;
    break;
  case '^':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    goto normal_char;
  case '$':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    goto normal_char;
  case '1':
  case '2':
  case '3':
  case '4':
  case '5':
  case '6':
  case '7':
  case '8':
  case '9':
    if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        laststart = 0;
        return lasttok = BACKREF;
    }
    goto normal_char;
  case '`':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGLINE;
    goto normal_char;
  case '\'':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDLINE;
    goto normal_char;
  case '<':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGWORD;
    goto normal_char;
  case '>':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDWORD;
    goto normal_char;
  case 'b':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = LIMWORD;
    goto normal_char;
  case 'B':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = NOTLIMWORD;
    goto normal_char;
  case '?':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = QMARK;
  case '*':
    if (backslash)
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = STAR;
  case '+':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = PLUS;
  case '{':
    if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
        int lo = -1, hi = -1;
        const char *p = lexptr;
        const char *lim = p + lexleft;
        for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
            lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
        if (p != lim && *p == ',')
            while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
        else
            hi = lo;
        if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
            goto normal_char;
    }
    minrep = 0;
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (((unsigned int)(c) - '0' <= 9)) {
        minrep = c - '0';
        for (;;) {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (!((unsigned int)(c) - '0' <= 9))
                break;
            minrep = 10 * minrep + c - '0';
        }
    } else
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    if (c == ',') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (!((unsigned int)(c) - '0' <= 9))
            maxrep = -1;
        else {
            maxrep = c - '0';
            for (;;) {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                maxrep = 10 * maxrep + c - '0';
            }
            if (0 <= maxrep && maxrep < minrep)
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        }
    } else
        maxrep = minrep;
    if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        if (c != '\\')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    }
    if (c != '}')
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    laststart = 0;
    return lasttok = REPMN;
  case '|':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '\n':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '(':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    ++parens;
    laststart = 1;
    return lasttok = LPAREN;
  case ')':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    --parens;
    laststart = 0;
    return lasttok = RPAREN;
  case '.':
    if (backslash)
        goto normal_char;
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    zeroset(ccl);
    notset(ccl);
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        clrbit(eolbyte, ccl);
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit('\x00', ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case 's':
  case 'S':
    if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    zeroset(ccl);
    for (c2 = 0; c2 < (1 << 8); ++c2) 
        if (((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISspace))
            setbit(c2, ccl);
    if (c == 'S')
        notset(ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case 'w':
  case 'W':
    if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    zeroset(ccl);
    for (c2 = 0; c2 < (1 << 8); ++c2) 
        if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
            setbit(c2, ccl);
    if (c == 'W')
        notset(ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case '[':
    if (backslash)
        goto normal_char;
    laststart = 0;
    if ((__ctype_get_mb_cur_max()) > 1) {
        return lasttok = parse_bracket_exp_mb();
    }
    zeroset(ccl);
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c == '^') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        invert = 1;
    } else
        invert = 0;
    do {
        if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
            for (c1 = 0; prednames[c1].name; ++c1) 
                if (looking_at(prednames[c1].name)) {
                    int (*pred)(int) = prednames[c1].pred;
                    for (c2 = 0; c2 < (1 << 8); ++c2) 
                        if ((*pred)(c2))
                            setbit_case_fold(c2, ccl);
                    lexptr += strlen(prednames[c1].name);
                    lexleft -= strlen(prednames[c1].name);
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    goto skip;
                }
        if (c == '\\' && (syntax_bits & ((unsigned long)1)))
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c1 == '-') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (c2 == ']') {
                --lexptr;
                ++lexleft;
            } else {
                if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c2) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                c1 = c;
                if (!hard_LC_COLLATE)
                    for (c = c1; c <= c2; c++) 
                        setbit_case_fold(c, ccl);
                else {
                    if (case_fold) {
                        c1 = (__extension__ ({
                            int __res;
                            if (sizeof (c1) > 1) {
                                if (__builtin_constant_p(c1)) {
                                    int __c = (c1);
                                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                } else
                                    __res = tolower(c1);
                            } else
                                __res = (*__ctype_tolower_loc())[(int)(c1)];
                            __res;
                        }));
                        c2 = (__extension__ ({
                            int __res;
                            if (sizeof (c2) > 1) {
                                if (__builtin_constant_p(c2)) {
                                    int __c = (c2);
                                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                } else
                                    __res = tolower(c2);
                            } else
                                __res = (*__ctype_tolower_loc())[(int)(c2)];
                            __res;
                        }));
                    }
                    for (c = 0; c < (1 << 8); ++c) 
                        if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                            setbit_case_fold(c, ccl);
                }
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                continue;
            }
        }
        setbit_case_fold(c, ccl);
      skip:
        ;
    } while ((c = c1) != ']');
    if (invert) {
        notset(ccl);
        if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit(eolbyte, ccl);
    }
    return lasttok = CSET + charclass_index(ccl);
  default:
  normal_char:
    laststart = 0;
    if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
        zeroset(ccl);
        setbit_case_fold(c, ccl);
        return lasttok = CSET + charclass_index(ccl);
    }
    return lasttok = c;
}

....
Skipping returnreturn addifexit:Priority 4289
At location src/dfa.c:771
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, backslash, lexleft, cur_mb_index, lexptr, lasttok, i, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 10;
switch (c) {
  case '\\':
    if (backslash)
        goto normal_char;
    if (lexleft == 0)
        dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
    backslash = 1;
    break;
  case '^':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    goto normal_char;
  case '$':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    goto normal_char;
  case '1':
  case '2':
  case '3':
  case '4':
  case '5':
  case '6':
  case '7':
  case '8':
  case '9':
    if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        laststart = 0;
        return lasttok = BACKREF;
    }
    goto normal_char;
  case '`':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGLINE;
    goto normal_char;
  case '\'':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDLINE;
    goto normal_char;
  case '<':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGWORD;
    goto normal_char;
  case '>':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDWORD;
    goto normal_char;
  case 'b':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = LIMWORD;
    goto normal_char;
  case 'B':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = NOTLIMWORD;
    goto normal_char;
  case '?':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = QMARK;
  case '*':
    if (backslash)
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = STAR;
  case '+':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = PLUS;
  case '{':
    if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
        int lo = -1, hi = -1;
        const char *p = lexptr;
        const char *lim = p + lexleft;
        for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
            lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
        if (p != lim && *p == ',')
            while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
        else
            hi = lo;
        if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
            goto normal_char;
    }
    minrep = 0;
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (((unsigned int)(c) - '0' <= 9)) {
        minrep = c - '0';
        for (;;) {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (!((unsigned int)(c) - '0' <= 9))
                break;
            minrep = 10 * minrep + c - '0';
        }
    } else
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    if (c == ',') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (!((unsigned int)(c) - '0' <= 9))
            maxrep = -1;
        else {
            maxrep = c - '0';
            for (;;) {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                maxrep = 10 * maxrep + c - '0';
            }
            if (0 <= maxrep && maxrep < minrep)
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        }
    } else
        maxrep = minrep;
    if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        if (c != '\\')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    }
    if (c != '}')
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    laststart = 0;
    return lasttok = REPMN;
  case '|':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '\n':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '(':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    ++parens;
    laststart = 1;
    return lasttok = LPAREN;
  case ')':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    --parens;
    laststart = 0;
    return lasttok = RPAREN;
  case '.':
    if (backslash)
        goto normal_char;
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    zeroset(ccl);
    notset(ccl);
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        clrbit(eolbyte, ccl);
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit('\x00', ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case 's':
  case 'S':
    if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    zeroset(ccl);
    for (c2 = 0; c2 < (1 << 8); ++c2) 
        if (((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISspace))
            setbit(c2, ccl);
    if (c == 'S')
        notset(ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case 'w':
  case 'W':
    if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    zeroset(ccl);
    for (c2 = 0; c2 < (1 << 8); ++c2) 
        if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
            setbit(c2, ccl);
    if (c == 'W')
        notset(ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case '[':
    if (backslash)
        goto normal_char;
    laststart = 0;
    if ((__ctype_get_mb_cur_max()) > 1) {
        return lasttok = parse_bracket_exp_mb();
    }
    zeroset(ccl);
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c == '^') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        invert = 1;
    } else
        invert = 0;
    do {
        if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
            for (c1 = 0; prednames[c1].name; ++c1) 
                if (looking_at(prednames[c1].name)) {
                    int (*pred)(int) = prednames[c1].pred;
                    for (c2 = 0; c2 < (1 << 8); ++c2) 
                        if ((*pred)(c2))
                            setbit_case_fold(c2, ccl);
                    lexptr += strlen(prednames[c1].name);
                    lexleft -= strlen(prednames[c1].name);
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    goto skip;
                }
        if (c == '\\' && (syntax_bits & ((unsigned long)1)))
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c1 == '-') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (c2 == ']') {
                --lexptr;
                ++lexleft;
            } else {
                if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c2) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                c1 = c;
                if (!hard_LC_COLLATE)
                    for (c = c1; c <= c2; c++) 
                        setbit_case_fold(c, ccl);
                else {
                    if (case_fold) {
                        c1 = (__extension__ ({
                            int __res;
                            if (sizeof (c1) > 1) {
                                if (__builtin_constant_p(c1)) {
                                    int __c = (c1);
                                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                } else
                                    __res = tolower(c1);
                            } else
                                __res = (*__ctype_tolower_loc())[(int)(c1)];
                            __res;
                        }));
                        c2 = (__extension__ ({
                            int __res;
                            if (sizeof (c2) > 1) {
                                if (__builtin_constant_p(c2)) {
                                    int __c = (c2);
                                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                } else
                                    __res = tolower(c2);
                            } else
                                __res = (*__ctype_tolower_loc())[(int)(c2)];
                            __res;
                        }));
                    }
                    for (c = 0; c < (1 << 8); ++c) 
                        if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                            setbit_case_fold(c, ccl);
                }
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                continue;
            }
        }
        setbit_case_fold(c, ccl);
      skip:
        ;
    } while ((c = c1) != ']');
    if (invert) {
        notset(ccl);
        if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit(eolbyte, ccl);
    }
    return lasttok = CSET + charclass_index(ccl);
  default:
  normal_char:
    laststart = 0;
    if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
        zeroset(ccl);
        setbit_case_fold(c, ccl);
        return lasttok = CSET + charclass_index(ccl);
    }
    return lasttok = c;
}

....
Skipping returnreturn addifexit:Priority 4289
At location src/dfa.c:771
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, backslash, lexleft, cur_mb_index, lexptr, lasttok, i, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 128;
switch (c) {
  case '\\':
    if (backslash)
        goto normal_char;
    if (lexleft == 0)
        dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
    backslash = 1;
    break;
  case '^':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    goto normal_char;
  case '$':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    goto normal_char;
  case '1':
  case '2':
  case '3':
  case '4':
  case '5':
  case '6':
  case '7':
  case '8':
  case '9':
    if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        laststart = 0;
        return lasttok = BACKREF;
    }
    goto normal_char;
  case '`':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGLINE;
    goto normal_char;
  case '\'':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDLINE;
    goto normal_char;
  case '<':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGWORD;
    goto normal_char;
  case '>':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDWORD;
    goto normal_char;
  case 'b':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = LIMWORD;
    goto normal_char;
  case 'B':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = NOTLIMWORD;
    goto normal_char;
  case '?':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = QMARK;
  case '*':
    if (backslash)
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = STAR;
  case '+':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = PLUS;
  case '{':
    if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
        int lo = -1, hi = -1;
        const char *p = lexptr;
        const char *lim = p + lexleft;
        for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
            lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
        if (p != lim && *p == ',')
            while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
        else
            hi = lo;
        if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
            goto normal_char;
    }
    minrep = 0;
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (((unsigned int)(c) - '0' <= 9)) {
        minrep = c - '0';
        for (;;) {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (!((unsigned int)(c) - '0' <= 9))
                break;
            minrep = 10 * minrep + c - '0';
        }
    } else
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    if (c == ',') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (!((unsigned int)(c) - '0' <= 9))
            maxrep = -1;
        else {
            maxrep = c - '0';
            for (;;) {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                maxrep = 10 * maxrep + c - '0';
            }
            if (0 <= maxrep && maxrep < minrep)
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        }
    } else
        maxrep = minrep;
    if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        if (c != '\\')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    }
    if (c != '}')
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    laststart = 0;
    return lasttok = REPMN;
  case '|':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '\n':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '(':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    ++parens;
    laststart = 1;
    return lasttok = LPAREN;
  case ')':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    --parens;
    laststart = 0;
    return lasttok = RPAREN;
  case '.':
    if (backslash)
        goto normal_char;
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    zeroset(ccl);
    notset(ccl);
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        clrbit(eolbyte, ccl);
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit('\x00', ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case 's':
  case 'S':
    if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    zeroset(ccl);
    for (c2 = 0; c2 < (1 << 8); ++c2) 
        if (((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISspace))
            setbit(c2, ccl);
    if (c == 'S')
        notset(ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case 'w':
  case 'W':
    if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    zeroset(ccl);
    for (c2 = 0; c2 < (1 << 8); ++c2) 
        if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
            setbit(c2, ccl);
    if (c == 'W')
        notset(ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case '[':
    if (backslash)
        goto normal_char;
    laststart = 0;
    if ((__ctype_get_mb_cur_max()) > 1) {
        return lasttok = parse_bracket_exp_mb();
    }
    zeroset(ccl);
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c == '^') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        invert = 1;
    } else
        invert = 0;
    do {
        if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
            for (c1 = 0; prednames[c1].name; ++c1) 
                if (looking_at(prednames[c1].name)) {
                    int (*pred)(int) = prednames[c1].pred;
                    for (c2 = 0; c2 < (1 << 8); ++c2) 
                        if ((*pred)(c2))
                            setbit_case_fold(c2, ccl);
                    lexptr += strlen(prednames[c1].name);
                    lexleft -= strlen(prednames[c1].name);
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    goto skip;
                }
        if (c == '\\' && (syntax_bits & ((unsigned long)1)))
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c1 == '-') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (c2 == ']') {
                --lexptr;
                ++lexleft;
            } else {
                if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c2) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                c1 = c;
                if (!hard_LC_COLLATE)
                    for (c = c1; c <= c2; c++) 
                        setbit_case_fold(c, ccl);
                else {
                    if (case_fold) {
                        c1 = (__extension__ ({
                            int __res;
                            if (sizeof (c1) > 1) {
                                if (__builtin_constant_p(c1)) {
                                    int __c = (c1);
                                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                } else
                                    __res = tolower(c1);
                            } else
                                __res = (*__ctype_tolower_loc())[(int)(c1)];
                            __res;
                        }));
                        c2 = (__extension__ ({
                            int __res;
                            if (sizeof (c2) > 1) {
                                if (__builtin_constant_p(c2)) {
                                    int __c = (c2);
                                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                } else
                                    __res = tolower(c2);
                            } else
                                __res = (*__ctype_tolower_loc())[(int)(c2)];
                            __res;
                        }));
                    }
                    for (c = 0; c < (1 << 8); ++c) 
                        if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                            setbit_case_fold(c, ccl);
                }
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                continue;
            }
        }
        setbit_case_fold(c, ccl);
      skip:
        ;
    } while ((c = c1) != ']');
    if (invert) {
        notset(ccl);
        if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit(eolbyte, ccl);
    }
    return lasttok = CSET + charclass_index(ccl);
  default:
  normal_char:
    laststart = 0;
    if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
        zeroset(ccl);
        setbit_case_fold(c, ccl);
        return lasttok = CSET + charclass_index(ccl);
    }
    return lasttok = c;
}

....
Skipping returnreturn addifexit:Priority 4289
At location src/dfa.c:771
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, backslash, lexleft, cur_mb_index, lexptr, lasttok, i, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 255;
switch (c) {
  case '\\':
    if (backslash)
        goto normal_char;
    if (lexleft == 0)
        dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
    backslash = 1;
    break;
  case '^':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    goto normal_char;
  case '$':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    goto normal_char;
  case '1':
  case '2':
  case '3':
  case '4':
  case '5':
  case '6':
  case '7':
  case '8':
  case '9':
    if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        laststart = 0;
        return lasttok = BACKREF;
    }
    goto normal_char;
  case '`':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGLINE;
    goto normal_char;
  case '\'':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDLINE;
    goto normal_char;
  case '<':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGWORD;
    goto normal_char;
  case '>':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDWORD;
    goto normal_char;
  case 'b':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = LIMWORD;
    goto normal_char;
  case 'B':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = NOTLIMWORD;
    goto normal_char;
  case '?':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = QMARK;
  case '*':
    if (backslash)
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = STAR;
  case '+':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = PLUS;
  case '{':
    if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
        int lo = -1, hi = -1;
        const char *p = lexptr;
        const char *lim = p + lexleft;
        for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
            lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
        if (p != lim && *p == ',')
            while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
        else
            hi = lo;
        if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
            goto normal_char;
    }
    minrep = 0;
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (((unsigned int)(c) - '0' <= 9)) {
        minrep = c - '0';
        for (;;) {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (!((unsigned int)(c) - '0' <= 9))
                break;
            minrep = 10 * minrep + c - '0';
        }
    } else
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    if (c == ',') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (!((unsigned int)(c) - '0' <= 9))
            maxrep = -1;
        else {
            maxrep = c - '0';
            for (;;) {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                maxrep = 10 * maxrep + c - '0';
            }
            if (0 <= maxrep && maxrep < minrep)
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        }
    } else
        maxrep = minrep;
    if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        if (c != '\\')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    }
    if (c != '}')
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    laststart = 0;
    return lasttok = REPMN;
  case '|':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '\n':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '(':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    ++parens;
    laststart = 1;
    return lasttok = LPAREN;
  case ')':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    --parens;
    laststart = 0;
    return lasttok = RPAREN;
  case '.':
    if (backslash)
        goto normal_char;
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    zeroset(ccl);
    notset(ccl);
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        clrbit(eolbyte, ccl);
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit('\x00', ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case 's':
  case 'S':
    if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    zeroset(ccl);
    for (c2 = 0; c2 < (1 << 8); ++c2) 
        if (((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISspace))
            setbit(c2, ccl);
    if (c == 'S')
        notset(ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case 'w':
  case 'W':
    if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    zeroset(ccl);
    for (c2 = 0; c2 < (1 << 8); ++c2) 
        if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
            setbit(c2, ccl);
    if (c == 'W')
        notset(ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case '[':
    if (backslash)
        goto normal_char;
    laststart = 0;
    if ((__ctype_get_mb_cur_max()) > 1) {
        return lasttok = parse_bracket_exp_mb();
    }
    zeroset(ccl);
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c == '^') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        invert = 1;
    } else
        invert = 0;
    do {
        if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
            for (c1 = 0; prednames[c1].name; ++c1) 
                if (looking_at(prednames[c1].name)) {
                    int (*pred)(int) = prednames[c1].pred;
                    for (c2 = 0; c2 < (1 << 8); ++c2) 
                        if ((*pred)(c2))
                            setbit_case_fold(c2, ccl);
                    lexptr += strlen(prednames[c1].name);
                    lexleft -= strlen(prednames[c1].name);
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    goto skip;
                }
        if (c == '\\' && (syntax_bits & ((unsigned long)1)))
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c1 == '-') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (c2 == ']') {
                --lexptr;
                ++lexleft;
            } else {
                if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c2) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                c1 = c;
                if (!hard_LC_COLLATE)
                    for (c = c1; c <= c2; c++) 
                        setbit_case_fold(c, ccl);
                else {
                    if (case_fold) {
                        c1 = (__extension__ ({
                            int __res;
                            if (sizeof (c1) > 1) {
                                if (__builtin_constant_p(c1)) {
                                    int __c = (c1);
                                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                } else
                                    __res = tolower(c1);
                            } else
                                __res = (*__ctype_tolower_loc())[(int)(c1)];
                            __res;
                        }));
                        c2 = (__extension__ ({
                            int __res;
                            if (sizeof (c2) > 1) {
                                if (__builtin_constant_p(c2)) {
                                    int __c = (c2);
                                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                } else
                                    __res = tolower(c2);
                            } else
                                __res = (*__ctype_tolower_loc())[(int)(c2)];
                            __res;
                        }));
                    }
                    for (c = 0; c < (1 << 8); ++c) 
                        if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                            setbit_case_fold(c, ccl);
                }
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                continue;
            }
        }
        setbit_case_fold(c, ccl);
      skip:
        ;
    } while ((c = c1) != ']');
    if (invert) {
        notset(ccl);
        if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit(eolbyte, ccl);
    }
    return lasttok = CSET + charclass_index(ccl);
  default:
  normal_char:
    laststart = 0;
    if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
        zeroset(ccl);
        setbit_case_fold(c, ccl);
        return lasttok = CSET + charclass_index(ccl);
    }
    return lasttok = c;
}

....
Skipping returnreturn addifexit:Priority 4289
At location src/dfa.c:771
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, backslash, lexleft, cur_mb_index, lexptr, lasttok, i, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 256;
switch (c) {
  case '\\':
    if (backslash)
        goto normal_char;
    if (lexleft == 0)
        dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
    backslash = 1;
    break;
  case '^':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    goto normal_char;
  case '$':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    goto normal_char;
  case '1':
  case '2':
  case '3':
  case '4':
  case '5':
  case '6':
  case '7':
  case '8':
  case '9':
    if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        laststart = 0;
        return lasttok = BACKREF;
    }
    goto normal_char;
  case '`':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGLINE;
    goto normal_char;
  case '\'':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDLINE;
    goto normal_char;
  case '<':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGWORD;
    goto normal_char;
  case '>':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDWORD;
    goto normal_char;
  case 'b':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = LIMWORD;
    goto normal_char;
  case 'B':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = NOTLIMWORD;
    goto normal_char;
  case '?':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = QMARK;
  case '*':
    if (backslash)
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = STAR;
  case '+':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = PLUS;
  case '{':
    if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
        int lo = -1, hi = -1;
        const char *p = lexptr;
        const char *lim = p + lexleft;
        for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
            lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
        if (p != lim && *p == ',')
            while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
        else
            hi = lo;
        if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
            goto normal_char;
    }
    minrep = 0;
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (((unsigned int)(c) - '0' <= 9)) {
        minrep = c - '0';
        for (;;) {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (!((unsigned int)(c) - '0' <= 9))
                break;
            minrep = 10 * minrep + c - '0';
        }
    } else
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    if (c == ',') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (!((unsigned int)(c) - '0' <= 9))
            maxrep = -1;
        else {
            maxrep = c - '0';
            for (;;) {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                maxrep = 10 * maxrep + c - '0';
            }
            if (0 <= maxrep && maxrep < minrep)
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        }
    } else
        maxrep = minrep;
    if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        if (c != '\\')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    }
    if (c != '}')
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    laststart = 0;
    return lasttok = REPMN;
  case '|':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '\n':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '(':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    ++parens;
    laststart = 1;
    return lasttok = LPAREN;
  case ')':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    --parens;
    laststart = 0;
    return lasttok = RPAREN;
  case '.':
    if (backslash)
        goto normal_char;
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    zeroset(ccl);
    notset(ccl);
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        clrbit(eolbyte, ccl);
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit('\x00', ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case 's':
  case 'S':
    if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    zeroset(ccl);
    for (c2 = 0; c2 < (1 << 8); ++c2) 
        if (((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISspace))
            setbit(c2, ccl);
    if (c == 'S')
        notset(ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case 'w':
  case 'W':
    if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    zeroset(ccl);
    for (c2 = 0; c2 < (1 << 8); ++c2) 
        if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
            setbit(c2, ccl);
    if (c == 'W')
        notset(ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case '[':
    if (backslash)
        goto normal_char;
    laststart = 0;
    if ((__ctype_get_mb_cur_max()) > 1) {
        return lasttok = parse_bracket_exp_mb();
    }
    zeroset(ccl);
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c == '^') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        invert = 1;
    } else
        invert = 0;
    do {
        if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
            for (c1 = 0; prednames[c1].name; ++c1) 
                if (looking_at(prednames[c1].name)) {
                    int (*pred)(int) = prednames[c1].pred;
                    for (c2 = 0; c2 < (1 << 8); ++c2) 
                        if ((*pred)(c2))
                            setbit_case_fold(c2, ccl);
                    lexptr += strlen(prednames[c1].name);
                    lexleft -= strlen(prednames[c1].name);
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    goto skip;
                }
        if (c == '\\' && (syntax_bits & ((unsigned long)1)))
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c1 == '-') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (c2 == ']') {
                --lexptr;
                ++lexleft;
            } else {
                if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c2) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                c1 = c;
                if (!hard_LC_COLLATE)
                    for (c = c1; c <= c2; c++) 
                        setbit_case_fold(c, ccl);
                else {
                    if (case_fold) {
                        c1 = (__extension__ ({
                            int __res;
                            if (sizeof (c1) > 1) {
                                if (__builtin_constant_p(c1)) {
                                    int __c = (c1);
                                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                } else
                                    __res = tolower(c1);
                            } else
                                __res = (*__ctype_tolower_loc())[(int)(c1)];
                            __res;
                        }));
                        c2 = (__extension__ ({
                            int __res;
                            if (sizeof (c2) > 1) {
                                if (__builtin_constant_p(c2)) {
                                    int __c = (c2);
                                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                } else
                                    __res = tolower(c2);
                            } else
                                __res = (*__ctype_tolower_loc())[(int)(c2)];
                            __res;
                        }));
                    }
                    for (c = 0; c < (1 << 8); ++c) 
                        if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                            setbit_case_fold(c, ccl);
                }
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                continue;
            }
        }
        setbit_case_fold(c, ccl);
      skip:
        ;
    } while ((c = c1) != ']');
    if (invert) {
        notset(ccl);
        if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit(eolbyte, ccl);
    }
    return lasttok = CSET + charclass_index(ccl);
  default:
  normal_char:
    laststart = 0;
    if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
        zeroset(ccl);
        setbit_case_fold(c, ccl);
        return lasttok = CSET + charclass_index(ccl);
    }
    return lasttok = c;
}

....
Skipping returnreturn addifexit:Priority 4289
At location src/dfa.c:771
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, backslash, lexleft, cur_mb_index, lexptr, lasttok, i, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 32767;
switch (c) {
  case '\\':
    if (backslash)
        goto normal_char;
    if (lexleft == 0)
        dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
    backslash = 1;
    break;
  case '^':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    goto normal_char;
  case '$':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    goto normal_char;
  case '1':
  case '2':
  case '3':
  case '4':
  case '5':
  case '6':
  case '7':
  case '8':
  case '9':
    if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        laststart = 0;
        return lasttok = BACKREF;
    }
    goto normal_char;
  case '`':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGLINE;
    goto normal_char;
  case '\'':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDLINE;
    goto normal_char;
  case '<':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGWORD;
    goto normal_char;
  case '>':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDWORD;
    goto normal_char;
  case 'b':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = LIMWORD;
    goto normal_char;
  case 'B':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = NOTLIMWORD;
    goto normal_char;
  case '?':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = QMARK;
  case '*':
    if (backslash)
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = STAR;
  case '+':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = PLUS;
  case '{':
    if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
        int lo = -1, hi = -1;
        const char *p = lexptr;
        const char *lim = p + lexleft;
        for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
            lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
        if (p != lim && *p == ',')
            while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
        else
            hi = lo;
        if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
            goto normal_char;
    }
    minrep = 0;
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (((unsigned int)(c) - '0' <= 9)) {
        minrep = c - '0';
        for (;;) {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (!((unsigned int)(c) - '0' <= 9))
                break;
            minrep = 10 * minrep + c - '0';
        }
    } else
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    if (c == ',') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (!((unsigned int)(c) - '0' <= 9))
            maxrep = -1;
        else {
            maxrep = c - '0';
            for (;;) {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                maxrep = 10 * maxrep + c - '0';
            }
            if (0 <= maxrep && maxrep < minrep)
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        }
    } else
        maxrep = minrep;
    if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        if (c != '\\')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    }
    if (c != '}')
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    laststart = 0;
    return lasttok = REPMN;
  case '|':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '\n':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '(':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    ++parens;
    laststart = 1;
    return lasttok = LPAREN;
  case ')':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    --parens;
    laststart = 0;
    return lasttok = RPAREN;
  case '.':
    if (backslash)
        goto normal_char;
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    zeroset(ccl);
    notset(ccl);
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        clrbit(eolbyte, ccl);
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit('\x00', ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case 's':
  case 'S':
    if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    zeroset(ccl);
    for (c2 = 0; c2 < (1 << 8); ++c2) 
        if (((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISspace))
            setbit(c2, ccl);
    if (c == 'S')
        notset(ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case 'w':
  case 'W':
    if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    zeroset(ccl);
    for (c2 = 0; c2 < (1 << 8); ++c2) 
        if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
            setbit(c2, ccl);
    if (c == 'W')
        notset(ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case '[':
    if (backslash)
        goto normal_char;
    laststart = 0;
    if ((__ctype_get_mb_cur_max()) > 1) {
        return lasttok = parse_bracket_exp_mb();
    }
    zeroset(ccl);
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c == '^') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        invert = 1;
    } else
        invert = 0;
    do {
        if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
            for (c1 = 0; prednames[c1].name; ++c1) 
                if (looking_at(prednames[c1].name)) {
                    int (*pred)(int) = prednames[c1].pred;
                    for (c2 = 0; c2 < (1 << 8); ++c2) 
                        if ((*pred)(c2))
                            setbit_case_fold(c2, ccl);
                    lexptr += strlen(prednames[c1].name);
                    lexleft -= strlen(prednames[c1].name);
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    goto skip;
                }
        if (c == '\\' && (syntax_bits & ((unsigned long)1)))
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c1 == '-') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (c2 == ']') {
                --lexptr;
                ++lexleft;
            } else {
                if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c2) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                c1 = c;
                if (!hard_LC_COLLATE)
                    for (c = c1; c <= c2; c++) 
                        setbit_case_fold(c, ccl);
                else {
                    if (case_fold) {
                        c1 = (__extension__ ({
                            int __res;
                            if (sizeof (c1) > 1) {
                                if (__builtin_constant_p(c1)) {
                                    int __c = (c1);
                                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                } else
                                    __res = tolower(c1);
                            } else
                                __res = (*__ctype_tolower_loc())[(int)(c1)];
                            __res;
                        }));
                        c2 = (__extension__ ({
                            int __res;
                            if (sizeof (c2) > 1) {
                                if (__builtin_constant_p(c2)) {
                                    int __c = (c2);
                                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                } else
                                    __res = tolower(c2);
                            } else
                                __res = (*__ctype_tolower_loc())[(int)(c2)];
                            __res;
                        }));
                    }
                    for (c = 0; c < (1 << 8); ++c) 
                        if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                            setbit_case_fold(c, ccl);
                }
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                continue;
            }
        }
        setbit_case_fold(c, ccl);
      skip:
        ;
    } while ((c = c1) != ']');
    if (invert) {
        notset(ccl);
        if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit(eolbyte, ccl);
    }
    return lasttok = CSET + charclass_index(ccl);
  default:
  normal_char:
    laststart = 0;
    if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
        zeroset(ccl);
        setbit_case_fold(c, ccl);
        return lasttok = CSET + charclass_index(ccl);
    }
    return lasttok = c;
}

....
Skipping returnreturn addifexit:Priority 4289
At location src/dfa.c:771
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, backslash, lexleft, cur_mb_index, lexptr, lasttok, i, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    break;
switch (c) {
  case '\\':
    if (backslash)
        goto normal_char;
    if (lexleft == 0)
        dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
    backslash = 1;
    break;
  case '^':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    goto normal_char;
  case '$':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    goto normal_char;
  case '1':
  case '2':
  case '3':
  case '4':
  case '5':
  case '6':
  case '7':
  case '8':
  case '9':
    if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        laststart = 0;
        return lasttok = BACKREF;
    }
    goto normal_char;
  case '`':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGLINE;
    goto normal_char;
  case '\'':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDLINE;
    goto normal_char;
  case '<':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGWORD;
    goto normal_char;
  case '>':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDWORD;
    goto normal_char;
  case 'b':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = LIMWORD;
    goto normal_char;
  case 'B':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = NOTLIMWORD;
    goto normal_char;
  case '?':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = QMARK;
  case '*':
    if (backslash)
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = STAR;
  case '+':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = PLUS;
  case '{':
    if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
        int lo = -1, hi = -1;
        const char *p = lexptr;
        const char *lim = p + lexleft;
        for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
            lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
        if (p != lim && *p == ',')
            while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
        else
            hi = lo;
        if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
            goto normal_char;
    }
    minrep = 0;
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (((unsigned int)(c) - '0' <= 9)) {
        minrep = c - '0';
        for (;;) {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (!((unsigned int)(c) - '0' <= 9))
                break;
            minrep = 10 * minrep + c - '0';
        }
    } else
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    if (c == ',') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (!((unsigned int)(c) - '0' <= 9))
            maxrep = -1;
        else {
            maxrep = c - '0';
            for (;;) {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                maxrep = 10 * maxrep + c - '0';
            }
            if (0 <= maxrep && maxrep < minrep)
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        }
    } else
        maxrep = minrep;
    if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        if (c != '\\')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    }
    if (c != '}')
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    laststart = 0;
    return lasttok = REPMN;
  case '|':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '\n':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '(':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    ++parens;
    laststart = 1;
    return lasttok = LPAREN;
  case ')':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    --parens;
    laststart = 0;
    return lasttok = RPAREN;
  case '.':
    if (backslash)
        goto normal_char;
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    zeroset(ccl);
    notset(ccl);
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        clrbit(eolbyte, ccl);
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit('\x00', ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case 's':
  case 'S':
    if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    zeroset(ccl);
    for (c2 = 0; c2 < (1 << 8); ++c2) 
        if (((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISspace))
            setbit(c2, ccl);
    if (c == 'S')
        notset(ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case 'w':
  case 'W':
    if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    zeroset(ccl);
    for (c2 = 0; c2 < (1 << 8); ++c2) 
        if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
            setbit(c2, ccl);
    if (c == 'W')
        notset(ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case '[':
    if (backslash)
        goto normal_char;
    laststart = 0;
    if ((__ctype_get_mb_cur_max()) > 1) {
        return lasttok = parse_bracket_exp_mb();
    }
    zeroset(ccl);
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c == '^') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        invert = 1;
    } else
        invert = 0;
    do {
        if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
            for (c1 = 0; prednames[c1].name; ++c1) 
                if (looking_at(prednames[c1].name)) {
                    int (*pred)(int) = prednames[c1].pred;
                    for (c2 = 0; c2 < (1 << 8); ++c2) 
                        if ((*pred)(c2))
                            setbit_case_fold(c2, ccl);
                    lexptr += strlen(prednames[c1].name);
                    lexleft -= strlen(prednames[c1].name);
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    goto skip;
                }
        if (c == '\\' && (syntax_bits & ((unsigned long)1)))
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c1 == '-') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (c2 == ']') {
                --lexptr;
                ++lexleft;
            } else {
                if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c2) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                c1 = c;
                if (!hard_LC_COLLATE)
                    for (c = c1; c <= c2; c++) 
                        setbit_case_fold(c, ccl);
                else {
                    if (case_fold) {
                        c1 = (__extension__ ({
                            int __res;
                            if (sizeof (c1) > 1) {
                                if (__builtin_constant_p(c1)) {
                                    int __c = (c1);
                                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                } else
                                    __res = tolower(c1);
                            } else
                                __res = (*__ctype_tolower_loc())[(int)(c1)];
                            __res;
                        }));
                        c2 = (__extension__ ({
                            int __res;
                            if (sizeof (c2) > 1) {
                                if (__builtin_constant_p(c2)) {
                                    int __c = (c2);
                                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                } else
                                    __res = tolower(c2);
                            } else
                                __res = (*__ctype_tolower_loc())[(int)(c2)];
                            __res;
                        }));
                    }
                    for (c = 0; c < (1 << 8); ++c) 
                        if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                            setbit_case_fold(c, ccl);
                }
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                continue;
            }
        }
        setbit_case_fold(c, ccl);
      skip:
        ;
    } while ((c = c1) != ']');
    if (invert) {
        notset(ccl);
        if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit(eolbyte, ccl);
    }
    return lasttok = CSET + charclass_index(ccl);
  default:
  normal_char:
    laststart = 0;
    if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
        zeroset(ccl);
        setbit_case_fold(c, ccl);
        return lasttok = CSET + charclass_index(ccl);
    }
    return lasttok = c;
}

....
Skipping returnreturn addifexit:Priority 4489
At location src/dfa.c:771
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, backslash, lexleft, cur_mb_index, lexptr, lasttok, i, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    goto skip;
switch (c) {
  case '\\':
    if (backslash)
        goto normal_char;
    if (lexleft == 0)
        dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
    backslash = 1;
    break;
  case '^':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    goto normal_char;
  case '$':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    goto normal_char;
  case '1':
  case '2':
  case '3':
  case '4':
  case '5':
  case '6':
  case '7':
  case '8':
  case '9':
    if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        laststart = 0;
        return lasttok = BACKREF;
    }
    goto normal_char;
  case '`':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGLINE;
    goto normal_char;
  case '\'':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDLINE;
    goto normal_char;
  case '<':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGWORD;
    goto normal_char;
  case '>':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDWORD;
    goto normal_char;
  case 'b':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = LIMWORD;
    goto normal_char;
  case 'B':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = NOTLIMWORD;
    goto normal_char;
  case '?':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = QMARK;
  case '*':
    if (backslash)
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = STAR;
  case '+':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = PLUS;
  case '{':
    if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
        int lo = -1, hi = -1;
        const char *p = lexptr;
        const char *lim = p + lexleft;
        for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
            lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
        if (p != lim && *p == ',')
            while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
        else
            hi = lo;
        if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
            goto normal_char;
    }
    minrep = 0;
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (((unsigned int)(c) - '0' <= 9)) {
        minrep = c - '0';
        for (;;) {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (!((unsigned int)(c) - '0' <= 9))
                break;
            minrep = 10 * minrep + c - '0';
        }
    } else
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    if (c == ',') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (!((unsigned int)(c) - '0' <= 9))
            maxrep = -1;
        else {
            maxrep = c - '0';
            for (;;) {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                maxrep = 10 * maxrep + c - '0';
            }
            if (0 <= maxrep && maxrep < minrep)
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        }
    } else
        maxrep = minrep;
    if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        if (c != '\\')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    }
    if (c != '}')
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    laststart = 0;
    return lasttok = REPMN;
  case '|':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '\n':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '(':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    ++parens;
    laststart = 1;
    return lasttok = LPAREN;
  case ')':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    --parens;
    laststart = 0;
    return lasttok = RPAREN;
  case '.':
    if (backslash)
        goto normal_char;
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    zeroset(ccl);
    notset(ccl);
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        clrbit(eolbyte, ccl);
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit('\x00', ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case 's':
  case 'S':
    if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    zeroset(ccl);
    for (c2 = 0; c2 < (1 << 8); ++c2) 
        if (((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISspace))
            setbit(c2, ccl);
    if (c == 'S')
        notset(ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case 'w':
  case 'W':
    if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    zeroset(ccl);
    for (c2 = 0; c2 < (1 << 8); ++c2) 
        if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
            setbit(c2, ccl);
    if (c == 'W')
        notset(ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case '[':
    if (backslash)
        goto normal_char;
    laststart = 0;
    if ((__ctype_get_mb_cur_max()) > 1) {
        return lasttok = parse_bracket_exp_mb();
    }
    zeroset(ccl);
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c == '^') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        invert = 1;
    } else
        invert = 0;
    do {
        if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
            for (c1 = 0; prednames[c1].name; ++c1) 
                if (looking_at(prednames[c1].name)) {
                    int (*pred)(int) = prednames[c1].pred;
                    for (c2 = 0; c2 < (1 << 8); ++c2) 
                        if ((*pred)(c2))
                            setbit_case_fold(c2, ccl);
                    lexptr += strlen(prednames[c1].name);
                    lexleft -= strlen(prednames[c1].name);
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    goto skip;
                }
        if (c == '\\' && (syntax_bits & ((unsigned long)1)))
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c1 == '-') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (c2 == ']') {
                --lexptr;
                ++lexleft;
            } else {
                if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c2) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                c1 = c;
                if (!hard_LC_COLLATE)
                    for (c = c1; c <= c2; c++) 
                        setbit_case_fold(c, ccl);
                else {
                    if (case_fold) {
                        c1 = (__extension__ ({
                            int __res;
                            if (sizeof (c1) > 1) {
                                if (__builtin_constant_p(c1)) {
                                    int __c = (c1);
                                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                } else
                                    __res = tolower(c1);
                            } else
                                __res = (*__ctype_tolower_loc())[(int)(c1)];
                            __res;
                        }));
                        c2 = (__extension__ ({
                            int __res;
                            if (sizeof (c2) > 1) {
                                if (__builtin_constant_p(c2)) {
                                    int __c = (c2);
                                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                } else
                                    __res = tolower(c2);
                            } else
                                __res = (*__ctype_tolower_loc())[(int)(c2)];
                            __res;
                        }));
                    }
                    for (c = 0; c < (1 << 8); ++c) 
                        if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                            setbit_case_fold(c, ccl);
                }
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                continue;
            }
        }
        setbit_case_fold(c, ccl);
      skip:
        ;
    } while ((c = c1) != ']');
    if (invert) {
        notset(ccl);
        if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit(eolbyte, ccl);
    }
    return lasttok = CSET + charclass_index(ccl);
  default:
  normal_char:
    laststart = 0;
    if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
        zeroset(ccl);
        setbit_case_fold(c, ccl);
        return lasttok = CSET + charclass_index(ccl);
    }
    return lasttok = c;
}

....
Skipping returnreturn addifexit:Priority 4489
At location src/dfa.c:771
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, backslash, lexleft, cur_mb_index, lexptr, lasttok, i, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    goto normal_char;
switch (c) {
  case '\\':
    if (backslash)
        goto normal_char;
    if (lexleft == 0)
        dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
    backslash = 1;
    break;
  case '^':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    goto normal_char;
  case '$':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    goto normal_char;
  case '1':
  case '2':
  case '3':
  case '4':
  case '5':
  case '6':
  case '7':
  case '8':
  case '9':
    if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        laststart = 0;
        return lasttok = BACKREF;
    }
    goto normal_char;
  case '`':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGLINE;
    goto normal_char;
  case '\'':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDLINE;
    goto normal_char;
  case '<':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGWORD;
    goto normal_char;
  case '>':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDWORD;
    goto normal_char;
  case 'b':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = LIMWORD;
    goto normal_char;
  case 'B':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = NOTLIMWORD;
    goto normal_char;
  case '?':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = QMARK;
  case '*':
    if (backslash)
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = STAR;
  case '+':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = PLUS;
  case '{':
    if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
        int lo = -1, hi = -1;
        const char *p = lexptr;
        const char *lim = p + lexleft;
        for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
            lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
        if (p != lim && *p == ',')
            while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
        else
            hi = lo;
        if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
            goto normal_char;
    }
    minrep = 0;
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (((unsigned int)(c) - '0' <= 9)) {
        minrep = c - '0';
        for (;;) {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (!((unsigned int)(c) - '0' <= 9))
                break;
            minrep = 10 * minrep + c - '0';
        }
    } else
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    if (c == ',') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (!((unsigned int)(c) - '0' <= 9))
            maxrep = -1;
        else {
            maxrep = c - '0';
            for (;;) {
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                maxrep = 10 * maxrep + c - '0';
            }
            if (0 <= maxrep && maxrep < minrep)
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        }
    } else
        maxrep = minrep;
    if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        if (c != '\\')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    }
    if (c != '}')
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    laststart = 0;
    return lasttok = REPMN;
  case '|':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '\n':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '(':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    ++parens;
    laststart = 1;
    return lasttok = LPAREN;
  case ')':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    --parens;
    laststart = 0;
    return lasttok = RPAREN;
  case '.':
    if (backslash)
        goto normal_char;
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    zeroset(ccl);
    notset(ccl);
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        clrbit(eolbyte, ccl);
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit('\x00', ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case 's':
  case 'S':
    if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    zeroset(ccl);
    for (c2 = 0; c2 < (1 << 8); ++c2) 
        if (((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISspace))
            setbit(c2, ccl);
    if (c == 'S')
        notset(ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case 'w':
  case 'W':
    if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    zeroset(ccl);
    for (c2 = 0; c2 < (1 << 8); ++c2) 
        if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
            setbit(c2, ccl);
    if (c == 'W')
        notset(ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case '[':
    if (backslash)
        goto normal_char;
    laststart = 0;
    if ((__ctype_get_mb_cur_max()) > 1) {
        return lasttok = parse_bracket_exp_mb();
    }
    zeroset(ccl);
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c == '^') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        invert = 1;
    } else
        invert = 0;
    do {
        if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
            for (c1 = 0; prednames[c1].name; ++c1) 
                if (looking_at(prednames[c1].name)) {
                    int (*pred)(int) = prednames[c1].pred;
                    for (c2 = 0; c2 < (1 << 8); ++c2) 
                        if ((*pred)(c2))
                            setbit_case_fold(c2, ccl);
                    lexptr += strlen(prednames[c1].name);
                    lexleft -= strlen(prednames[c1].name);
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                    goto skip;
                }
        if (c == '\\' && (syntax_bits & ((unsigned long)1)))
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c1 == '-') {
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            if (c2 == ']') {
                --lexptr;
                ++lexleft;
            } else {
                if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                    do {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c2) = (unsigned char)*lexptr++;
                        --lexleft;
                    } while (0);
                c1 = c;
                if (!hard_LC_COLLATE)
                    for (c = c1; c <= c2; c++) 
                        setbit_case_fold(c, ccl);
                else {
                    if (case_fold) {
                        c1 = (__extension__ ({
                            int __res;
                            if (sizeof (c1) > 1) {
                                if (__builtin_constant_p(c1)) {
                                    int __c = (c1);
                                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                } else
                                    __res = tolower(c1);
                            } else
                                __res = (*__ctype_tolower_loc())[(int)(c1)];
                            __res;
                        }));
                        c2 = (__extension__ ({
                            int __res;
                            if (sizeof (c2) > 1) {
                                if (__builtin_constant_p(c2)) {
                                    int __c = (c2);
                                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                                } else
                                    __res = tolower(c2);
                            } else
                                __res = (*__ctype_tolower_loc())[(int)(c2)];
                            __res;
                        }));
                    }
                    for (c = 0; c < (1 << 8); ++c) 
                        if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                            setbit_case_fold(c, ccl);
                }
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                continue;
            }
        }
        setbit_case_fold(c, ccl);
      skip:
        ;
    } while ((c = c1) != ']');
    if (invert) {
        notset(ccl);
        if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit(eolbyte, ccl);
    }
    return lasttok = CSET + charclass_index(ccl);
  default:
  normal_char:
    laststart = 0;
    if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
        zeroset(ccl);
        setbit_case_fold(c, ccl);
        return lasttok = CSET + charclass_index(ccl);
    }
    return lasttok = c;
}

....
Skipping nonlast:Priority -371
At location src/dfa.c:1043
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
laststart = 0;

....
Skipping nonlast:Priority -371
At location src/dfa.c:1043
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
laststart = 0;

....
Skipping nonlast:Priority -371
At location src/dfa.c:1043
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
laststart = 0;

....
Skipping nonlast:Priority -371
At location src/dfa.c:1043
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGLINE;
laststart = 0;

....
Skipping nonlast:Priority -371
At location src/dfa.c:1043
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGWORD;
laststart = 0;

....
Skipping nonlast:Priority -371
At location src/dfa.c:1043
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDLINE;
laststart = 0;

....
Skipping nonlast:Priority -371
At location src/dfa.c:1043
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDWORD;
laststart = 0;

....
Skipping nonlast:Priority -371
At location src/dfa.c:1043
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = LIMWORD;
laststart = 0;

....
Skipping nonlast:Priority -371
At location src/dfa.c:1043
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = NOTLIMWORD;
laststart = 0;

....
Skipping nonlast:Priority -371
At location src/dfa.c:1043
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    laststart = 0;
    return lasttok = BACKREF;
}
laststart = 0;

....
Skipping nonlast:Priority -371
At location src/dfa.c:1043
--Src File: src/dfa.c
Fragment 0:
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}
laststart = 0;

....
Skipping nonlast:Priority -371
At location src/dfa.c:1043
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
laststart = 0;

....
Skipping nonlast:Priority -371
At location src/dfa.c:1043
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
laststart = 0;

....
Skipping nonlast:Priority -371
At location src/dfa.c:1043
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
laststart = 0;

....
Skipping nonlast addifexit:Priority 4629
At location src/dfa.c:1043
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, backslash, lasttok, c, c2, lexptr, lexleft, syntax_bits, invert, c1, eolbyte, parens, hard_LC_COLLATE, case_fold, minrep, maxrep, cur_mb_index, i)))
    return -128;
laststart = 0;

....
Skipping nonlast addifexit:Priority 4629
At location src/dfa.c:1043
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, backslash, lasttok, c, c2, lexptr, lexleft, syntax_bits, invert, c1, eolbyte, parens, hard_LC_COLLATE, case_fold, minrep, maxrep, cur_mb_index, i)))
    return -1;
laststart = 0;

....
Skipping nonlast addifexit:Priority 4629
At location src/dfa.c:1043
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, backslash, lasttok, c, c2, lexptr, lexleft, syntax_bits, invert, c1, eolbyte, parens, hard_LC_COLLATE, case_fold, minrep, maxrep, cur_mb_index, i)))
    return 0;
laststart = 0;

....
Skipping nonlast addifexit:Priority 4629
At location src/dfa.c:1043
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, backslash, lasttok, c, c2, lexptr, lexleft, syntax_bits, invert, c1, eolbyte, parens, hard_LC_COLLATE, case_fold, minrep, maxrep, cur_mb_index, i)))
    return 1;
laststart = 0;

....
Skipping nonlast addifexit:Priority 4629
At location src/dfa.c:1043
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, backslash, lasttok, c, c2, lexptr, lexleft, syntax_bits, invert, c1, eolbyte, parens, hard_LC_COLLATE, case_fold, minrep, maxrep, cur_mb_index, i)))
    return 2;
laststart = 0;

....
Skipping nonlast addifexit:Priority 4629
At location src/dfa.c:1043
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, backslash, lasttok, c, c2, lexptr, lexleft, syntax_bits, invert, c1, eolbyte, parens, hard_LC_COLLATE, case_fold, minrep, maxrep, cur_mb_index, i)))
    return 5;
laststart = 0;

....
Skipping nonlast addifexit:Priority 4629
At location src/dfa.c:1043
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, backslash, lasttok, c, c2, lexptr, lexleft, syntax_bits, invert, c1, eolbyte, parens, hard_LC_COLLATE, case_fold, minrep, maxrep, cur_mb_index, i)))
    return 8;
laststart = 0;

....
Skipping nonlast addifexit:Priority 4629
At location src/dfa.c:1043
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, backslash, lasttok, c, c2, lexptr, lexleft, syntax_bits, invert, c1, eolbyte, parens, hard_LC_COLLATE, case_fold, minrep, maxrep, cur_mb_index, i)))
    return 9;
laststart = 0;

....
Skipping nonlast addifexit:Priority 4629
At location src/dfa.c:1043
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, backslash, lasttok, c, c2, lexptr, lexleft, syntax_bits, invert, c1, eolbyte, parens, hard_LC_COLLATE, case_fold, minrep, maxrep, cur_mb_index, i)))
    return 10;
laststart = 0;

....
Skipping nonlast addifexit:Priority 4629
At location src/dfa.c:1043
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, backslash, lasttok, c, c2, lexptr, lexleft, syntax_bits, invert, c1, eolbyte, parens, hard_LC_COLLATE, case_fold, minrep, maxrep, cur_mb_index, i)))
    return 128;
laststart = 0;

....
Skipping nonlast addifexit:Priority 4629
At location src/dfa.c:1043
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, backslash, lasttok, c, c2, lexptr, lexleft, syntax_bits, invert, c1, eolbyte, parens, hard_LC_COLLATE, case_fold, minrep, maxrep, cur_mb_index, i)))
    return 255;
laststart = 0;

....
Skipping nonlast addifexit:Priority 4629
At location src/dfa.c:1043
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, backslash, lasttok, c, c2, lexptr, lexleft, syntax_bits, invert, c1, eolbyte, parens, hard_LC_COLLATE, case_fold, minrep, maxrep, cur_mb_index, i)))
    return 256;
laststart = 0;

....
Skipping nonlast addifexit:Priority 4629
At location src/dfa.c:1043
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, backslash, lasttok, c, c2, lexptr, lexleft, syntax_bits, invert, c1, eolbyte, parens, hard_LC_COLLATE, case_fold, minrep, maxrep, cur_mb_index, i)))
    return 32767;
laststart = 0;

....
Skipping nonlast addifexit:Priority 4629
At location src/dfa.c:1043
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, backslash, lasttok, c, c2, lexptr, lexleft, syntax_bits, invert, c1, eolbyte, parens, hard_LC_COLLATE, case_fold, minrep, maxrep, cur_mb_index, i)))
    break;
laststart = 0;

....
Skipping nonlast addifexit:Priority 4829
At location src/dfa.c:1043
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, backslash, lasttok, c, c2, lexptr, lexleft, syntax_bits, invert, c1, eolbyte, parens, hard_LC_COLLATE, case_fold, minrep, maxrep, cur_mb_index, i)))
    goto skip;
laststart = 0;

....
Skipping nonlast addifexit:Priority 4829
At location src/dfa.c:1043
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, backslash, lasttok, c, c2, lexptr, lexleft, syntax_bits, invert, c1, eolbyte, parens, hard_LC_COLLATE, case_fold, minrep, maxrep, cur_mb_index, i)))
    goto normal_char;
laststart = 0;

....
Skipping nonlast:Priority -370
At location src/dfa.c:1045
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}

....
Skipping nonlast:Priority -370
At location src/dfa.c:1045
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}

....
Skipping nonlast:Priority -370
At location src/dfa.c:1045
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}

....
Skipping nonlast:Priority -370
At location src/dfa.c:1045
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGLINE;
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}

....
Skipping nonlast:Priority -370
At location src/dfa.c:1045
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGWORD;
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}

....
Skipping nonlast:Priority -370
At location src/dfa.c:1045
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDLINE;
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}

....
Skipping nonlast:Priority -370
At location src/dfa.c:1045
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDWORD;
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}

....
Skipping nonlast:Priority -370
At location src/dfa.c:1045
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = LIMWORD;
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}

....
Skipping nonlast:Priority -370
At location src/dfa.c:1045
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = NOTLIMWORD;
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}

....
Skipping nonlast:Priority -370
At location src/dfa.c:1045
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    laststart = 0;
    return lasttok = BACKREF;
}
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}

....
Skipping nonlast:Priority -370
At location src/dfa.c:1045
--Src File: src/dfa.c
Fragment 0:
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}

....
Skipping nonlast:Priority -370
At location src/dfa.c:1045
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}

....
Skipping nonlast:Priority -370
At location src/dfa.c:1045
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}

....
Skipping nonlast:Priority -370
At location src/dfa.c:1045
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}

....
Skipping nonlast addifexit:Priority 3380
At location src/dfa.c:1045
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, backslash, lasttok, c, lexptr, lexleft, c2, invert, syntax_bits, c1, eolbyte, parens, hard_LC_COLLATE, case_fold, minrep, maxrep, cur_mb_index, i)))
    return -128;
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}

....
Skipping nonlast addifexit:Priority 3380
At location src/dfa.c:1045
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, backslash, lasttok, c, lexptr, lexleft, c2, invert, syntax_bits, c1, eolbyte, parens, hard_LC_COLLATE, case_fold, minrep, maxrep, cur_mb_index, i)))
    return -1;
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}

....
Skipping nonlast addifexit:Priority 3380
At location src/dfa.c:1045
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, backslash, lasttok, c, lexptr, lexleft, c2, invert, syntax_bits, c1, eolbyte, parens, hard_LC_COLLATE, case_fold, minrep, maxrep, cur_mb_index, i)))
    return 0;
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}

....
Skipping nonlast addifexit:Priority 3380
At location src/dfa.c:1045
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, backslash, lasttok, c, lexptr, lexleft, c2, invert, syntax_bits, c1, eolbyte, parens, hard_LC_COLLATE, case_fold, minrep, maxrep, cur_mb_index, i)))
    return 1;
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}

....
Skipping nonlast addifexit:Priority 3380
At location src/dfa.c:1045
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, backslash, lasttok, c, lexptr, lexleft, c2, invert, syntax_bits, c1, eolbyte, parens, hard_LC_COLLATE, case_fold, minrep, maxrep, cur_mb_index, i)))
    return 2;
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}

....
Skipping nonlast addifexit:Priority 3380
At location src/dfa.c:1045
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, backslash, lasttok, c, lexptr, lexleft, c2, invert, syntax_bits, c1, eolbyte, parens, hard_LC_COLLATE, case_fold, minrep, maxrep, cur_mb_index, i)))
    return 5;
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}

....
Skipping nonlast addifexit:Priority 3380
At location src/dfa.c:1045
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, backslash, lasttok, c, lexptr, lexleft, c2, invert, syntax_bits, c1, eolbyte, parens, hard_LC_COLLATE, case_fold, minrep, maxrep, cur_mb_index, i)))
    return 8;
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}

....
Skipping nonlast addifexit:Priority 3380
At location src/dfa.c:1045
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, backslash, lasttok, c, lexptr, lexleft, c2, invert, syntax_bits, c1, eolbyte, parens, hard_LC_COLLATE, case_fold, minrep, maxrep, cur_mb_index, i)))
    return 9;
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}

....
Skipping nonlast addifexit:Priority 3380
At location src/dfa.c:1045
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, backslash, lasttok, c, lexptr, lexleft, c2, invert, syntax_bits, c1, eolbyte, parens, hard_LC_COLLATE, case_fold, minrep, maxrep, cur_mb_index, i)))
    return 10;
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}

....
Skipping nonlast addifexit:Priority 3380
At location src/dfa.c:1045
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, backslash, lasttok, c, lexptr, lexleft, c2, invert, syntax_bits, c1, eolbyte, parens, hard_LC_COLLATE, case_fold, minrep, maxrep, cur_mb_index, i)))
    return 128;
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}

....
Skipping nonlast addifexit:Priority 3380
At location src/dfa.c:1045
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, backslash, lasttok, c, lexptr, lexleft, c2, invert, syntax_bits, c1, eolbyte, parens, hard_LC_COLLATE, case_fold, minrep, maxrep, cur_mb_index, i)))
    return 255;
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}

....
Skipping nonlast addifexit:Priority 3380
At location src/dfa.c:1045
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, backslash, lasttok, c, lexptr, lexleft, c2, invert, syntax_bits, c1, eolbyte, parens, hard_LC_COLLATE, case_fold, minrep, maxrep, cur_mb_index, i)))
    return 256;
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}

....
Skipping nonlast addifexit:Priority 3380
At location src/dfa.c:1045
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, backslash, lasttok, c, lexptr, lexleft, c2, invert, syntax_bits, c1, eolbyte, parens, hard_LC_COLLATE, case_fold, minrep, maxrep, cur_mb_index, i)))
    return 32767;
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}

....
Skipping nonlast addifexit:Priority 3380
At location src/dfa.c:1045
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, backslash, lasttok, c, lexptr, lexleft, c2, invert, syntax_bits, c1, eolbyte, parens, hard_LC_COLLATE, case_fold, minrep, maxrep, cur_mb_index, i)))
    break;
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}

....
Skipping nonlast addifexit:Priority 3580
At location src/dfa.c:1045
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, backslash, lasttok, c, lexptr, lexleft, c2, invert, syntax_bits, c1, eolbyte, parens, hard_LC_COLLATE, case_fold, minrep, maxrep, cur_mb_index, i)))
    goto skip;
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}

....
Skipping nonlast addifexit:Priority 3580
At location src/dfa.c:1045
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, backslash, lasttok, c, lexptr, lexleft, c2, invert, syntax_bits, c1, eolbyte, parens, hard_LC_COLLATE, case_fold, minrep, maxrep, cur_mb_index, i)))
    goto normal_char;
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}

....
Skipping nonlast:Priority -369
At location src/dfa.c:1053
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
zeroset(ccl);

....
Skipping nonlast:Priority -369
At location src/dfa.c:1053
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
zeroset(ccl);

....
Skipping nonlast:Priority -369
At location src/dfa.c:1053
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
zeroset(ccl);

....
Skipping nonlast:Priority -369
At location src/dfa.c:1053
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGLINE;
zeroset(ccl);

....
Skipping nonlast:Priority -369
At location src/dfa.c:1053
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGWORD;
zeroset(ccl);

....
Skipping nonlast:Priority -369
At location src/dfa.c:1053
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDLINE;
zeroset(ccl);

....
Skipping nonlast:Priority -369
At location src/dfa.c:1053
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDWORD;
zeroset(ccl);

....
Skipping nonlast:Priority -369
At location src/dfa.c:1053
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = LIMWORD;
zeroset(ccl);

....
Skipping nonlast:Priority -369
At location src/dfa.c:1053
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = NOTLIMWORD;
zeroset(ccl);

....
Skipping nonlast:Priority -369
At location src/dfa.c:1053
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    laststart = 0;
    return lasttok = BACKREF;
}
zeroset(ccl);

....
Skipping nonlast:Priority -369
At location src/dfa.c:1053
--Src File: src/dfa.c
Fragment 0:
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}
zeroset(ccl);

....
Skipping nonlast:Priority -369
At location src/dfa.c:1053
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
zeroset(ccl);

....
Skipping nonlast:Priority -369
At location src/dfa.c:1053
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
zeroset(ccl);

....
Skipping nonlast:Priority -369
At location src/dfa.c:1053
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
zeroset(ccl);

....
Skipping nonlast addifexit:Priority 4631
At location src/dfa.c:1053
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, invert, laststart, backslash, syntax_bits, c1, c2, eolbyte, hard_LC_COLLATE, case_fold, parens, minrep, maxrep, cur_mb_index, i)))
    return -128;
zeroset(ccl);

....
Skipping nonlast addifexit:Priority 4631
At location src/dfa.c:1053
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, invert, laststart, backslash, syntax_bits, c1, c2, eolbyte, hard_LC_COLLATE, case_fold, parens, minrep, maxrep, cur_mb_index, i)))
    return -1;
zeroset(ccl);

....
Skipping nonlast addifexit:Priority 4631
At location src/dfa.c:1053
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, invert, laststart, backslash, syntax_bits, c1, c2, eolbyte, hard_LC_COLLATE, case_fold, parens, minrep, maxrep, cur_mb_index, i)))
    return 0;
zeroset(ccl);

....
Skipping nonlast addifexit:Priority 4631
At location src/dfa.c:1053
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, invert, laststart, backslash, syntax_bits, c1, c2, eolbyte, hard_LC_COLLATE, case_fold, parens, minrep, maxrep, cur_mb_index, i)))
    return 1;
zeroset(ccl);

....
Skipping nonlast addifexit:Priority 4631
At location src/dfa.c:1053
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, invert, laststart, backslash, syntax_bits, c1, c2, eolbyte, hard_LC_COLLATE, case_fold, parens, minrep, maxrep, cur_mb_index, i)))
    return 2;
zeroset(ccl);

....
Skipping nonlast addifexit:Priority 4631
At location src/dfa.c:1053
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, invert, laststart, backslash, syntax_bits, c1, c2, eolbyte, hard_LC_COLLATE, case_fold, parens, minrep, maxrep, cur_mb_index, i)))
    return 5;
zeroset(ccl);

....
Skipping nonlast addifexit:Priority 4631
At location src/dfa.c:1053
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, invert, laststart, backslash, syntax_bits, c1, c2, eolbyte, hard_LC_COLLATE, case_fold, parens, minrep, maxrep, cur_mb_index, i)))
    return 8;
zeroset(ccl);

....
Skipping nonlast addifexit:Priority 4631
At location src/dfa.c:1053
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, invert, laststart, backslash, syntax_bits, c1, c2, eolbyte, hard_LC_COLLATE, case_fold, parens, minrep, maxrep, cur_mb_index, i)))
    return 9;
zeroset(ccl);

....
Skipping nonlast addifexit:Priority 4631
At location src/dfa.c:1053
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, invert, laststart, backslash, syntax_bits, c1, c2, eolbyte, hard_LC_COLLATE, case_fold, parens, minrep, maxrep, cur_mb_index, i)))
    return 10;
zeroset(ccl);

....
Skipping nonlast addifexit:Priority 4631
At location src/dfa.c:1053
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, invert, laststart, backslash, syntax_bits, c1, c2, eolbyte, hard_LC_COLLATE, case_fold, parens, minrep, maxrep, cur_mb_index, i)))
    return 128;
zeroset(ccl);

....
Skipping nonlast addifexit:Priority 4631
At location src/dfa.c:1053
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, invert, laststart, backslash, syntax_bits, c1, c2, eolbyte, hard_LC_COLLATE, case_fold, parens, minrep, maxrep, cur_mb_index, i)))
    return 255;
zeroset(ccl);

....
Skipping nonlast addifexit:Priority 4631
At location src/dfa.c:1053
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, invert, laststart, backslash, syntax_bits, c1, c2, eolbyte, hard_LC_COLLATE, case_fold, parens, minrep, maxrep, cur_mb_index, i)))
    return 256;
zeroset(ccl);

....
Skipping nonlast addifexit:Priority 4631
At location src/dfa.c:1053
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, invert, laststart, backslash, syntax_bits, c1, c2, eolbyte, hard_LC_COLLATE, case_fold, parens, minrep, maxrep, cur_mb_index, i)))
    return 32767;
zeroset(ccl);

....
Skipping nonlast addifexit:Priority 4631
At location src/dfa.c:1053
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, invert, laststart, backslash, syntax_bits, c1, c2, eolbyte, hard_LC_COLLATE, case_fold, parens, minrep, maxrep, cur_mb_index, i)))
    break;
zeroset(ccl);

....
Skipping nonlast addifexit:Priority 4831
At location src/dfa.c:1053
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, invert, laststart, backslash, syntax_bits, c1, c2, eolbyte, hard_LC_COLLATE, case_fold, parens, minrep, maxrep, cur_mb_index, i)))
    goto skip;
zeroset(ccl);

....
Skipping nonlast addifexit:Priority 4831
At location src/dfa.c:1053
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, invert, laststart, backslash, syntax_bits, c1, c2, eolbyte, hard_LC_COLLATE, case_fold, parens, minrep, maxrep, cur_mb_index, i)))
    goto normal_char;
zeroset(ccl);

....
Skipping nonlast:Priority -368
At location src/dfa.c:1054
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority -368
At location src/dfa.c:1054
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority -368
At location src/dfa.c:1054
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority -368
At location src/dfa.c:1054
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGLINE;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority -368
At location src/dfa.c:1054
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGWORD;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority -368
At location src/dfa.c:1054
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDLINE;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority -368
At location src/dfa.c:1054
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDWORD;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority -368
At location src/dfa.c:1054
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = LIMWORD;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority -368
At location src/dfa.c:1054
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = NOTLIMWORD;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority -368
At location src/dfa.c:1054
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    laststart = 0;
    return lasttok = BACKREF;
}
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority -368
At location src/dfa.c:1054
--Src File: src/dfa.c
Fragment 0:
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority -368
At location src/dfa.c:1054
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority -368
At location src/dfa.c:1054
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority -368
At location src/dfa.c:1054
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 4632
At location src/dfa.c:1054
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, invert, laststart, backslash, syntax_bits, c1, c2, eolbyte, hard_LC_COLLATE, case_fold, parens, minrep, maxrep, cur_mb_index, i)))
    return -128;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 4632
At location src/dfa.c:1054
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, invert, laststart, backslash, syntax_bits, c1, c2, eolbyte, hard_LC_COLLATE, case_fold, parens, minrep, maxrep, cur_mb_index, i)))
    return -1;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 4632
At location src/dfa.c:1054
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, invert, laststart, backslash, syntax_bits, c1, c2, eolbyte, hard_LC_COLLATE, case_fold, parens, minrep, maxrep, cur_mb_index, i)))
    return 0;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 4632
At location src/dfa.c:1054
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, invert, laststart, backslash, syntax_bits, c1, c2, eolbyte, hard_LC_COLLATE, case_fold, parens, minrep, maxrep, cur_mb_index, i)))
    return 1;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 4632
At location src/dfa.c:1054
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, invert, laststart, backslash, syntax_bits, c1, c2, eolbyte, hard_LC_COLLATE, case_fold, parens, minrep, maxrep, cur_mb_index, i)))
    return 2;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 4632
At location src/dfa.c:1054
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, invert, laststart, backslash, syntax_bits, c1, c2, eolbyte, hard_LC_COLLATE, case_fold, parens, minrep, maxrep, cur_mb_index, i)))
    return 5;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 4632
At location src/dfa.c:1054
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, invert, laststart, backslash, syntax_bits, c1, c2, eolbyte, hard_LC_COLLATE, case_fold, parens, minrep, maxrep, cur_mb_index, i)))
    return 8;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 4632
At location src/dfa.c:1054
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, invert, laststart, backslash, syntax_bits, c1, c2, eolbyte, hard_LC_COLLATE, case_fold, parens, minrep, maxrep, cur_mb_index, i)))
    return 9;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 4632
At location src/dfa.c:1054
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, invert, laststart, backslash, syntax_bits, c1, c2, eolbyte, hard_LC_COLLATE, case_fold, parens, minrep, maxrep, cur_mb_index, i)))
    return 10;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 4632
At location src/dfa.c:1054
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, invert, laststart, backslash, syntax_bits, c1, c2, eolbyte, hard_LC_COLLATE, case_fold, parens, minrep, maxrep, cur_mb_index, i)))
    return 128;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 4632
At location src/dfa.c:1054
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, invert, laststart, backslash, syntax_bits, c1, c2, eolbyte, hard_LC_COLLATE, case_fold, parens, minrep, maxrep, cur_mb_index, i)))
    return 255;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 4632
At location src/dfa.c:1054
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, invert, laststart, backslash, syntax_bits, c1, c2, eolbyte, hard_LC_COLLATE, case_fold, parens, minrep, maxrep, cur_mb_index, i)))
    return 256;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 4632
At location src/dfa.c:1054
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, invert, laststart, backslash, syntax_bits, c1, c2, eolbyte, hard_LC_COLLATE, case_fold, parens, minrep, maxrep, cur_mb_index, i)))
    return 32767;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 4632
At location src/dfa.c:1054
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, invert, laststart, backslash, syntax_bits, c1, c2, eolbyte, hard_LC_COLLATE, case_fold, parens, minrep, maxrep, cur_mb_index, i)))
    break;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 4832
At location src/dfa.c:1054
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, invert, laststart, backslash, syntax_bits, c1, c2, eolbyte, hard_LC_COLLATE, case_fold, parens, minrep, maxrep, cur_mb_index, i)))
    goto skip;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 4832
At location src/dfa.c:1054
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, invert, laststart, backslash, syntax_bits, c1, c2, eolbyte, hard_LC_COLLATE, case_fold, parens, minrep, maxrep, cur_mb_index, i)))
    goto normal_char;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
IsErr:priority 4637
at location src/dfa.c:1055
--src file: src/dfa.c
fragment 0:
if (!(__abst_hole(c, lexptr, lexleft, lasttok, invert, laststart, backslash, syntax_bits, c1, c2, eolbyte, hard_lc_collate, case_fold, parens, minrep, maxrep, cur_mb_index, i)))
    if (c == '^') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unbalanced [", 5));
                else
                    return lasttok = end;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        invert = 1;
    } else
        invert = 0;

....
Skipping error ifguard:Priority 4637
At location src/dfa.c:1055
--Src File: src/dfa.c
Fragment 0:
if (!(__abst_hole(c, lexptr, lexleft, lasttok, invert, laststart, backslash, syntax_bits, c1, c2, eolbyte, hard_LC_COLLATE, case_fold, parens, minrep, maxrep, cur_mb_index, i)))
    if (c == '^') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        invert = 1;
    } else
        invert = 0;

....
Skipping nonlast:Priority -363
At location src/dfa.c:1055
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (c == '^') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    invert = 1;
} else
    invert = 0;

....
Skipping nonlast:Priority -363
At location src/dfa.c:1055
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (c == '^') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    invert = 1;
} else
    invert = 0;

....
Skipping nonlast:Priority -363
At location src/dfa.c:1055
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if (c == '^') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    invert = 1;
} else
    invert = 0;

....
Skipping nonlast:Priority -363
At location src/dfa.c:1055
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGLINE;
if (c == '^') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    invert = 1;
} else
    invert = 0;

....
Skipping nonlast:Priority -363
At location src/dfa.c:1055
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGWORD;
if (c == '^') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    invert = 1;
} else
    invert = 0;

....
Skipping nonlast:Priority -363
At location src/dfa.c:1055
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDLINE;
if (c == '^') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    invert = 1;
} else
    invert = 0;

....
Skipping nonlast:Priority -363
At location src/dfa.c:1055
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDWORD;
if (c == '^') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    invert = 1;
} else
    invert = 0;

....
Skipping nonlast:Priority -363
At location src/dfa.c:1055
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = LIMWORD;
if (c == '^') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    invert = 1;
} else
    invert = 0;

....
Skipping nonlast:Priority -363
At location src/dfa.c:1055
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = NOTLIMWORD;
if (c == '^') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    invert = 1;
} else
    invert = 0;

....
Skipping nonlast:Priority -363
At location src/dfa.c:1055
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    laststart = 0;
    return lasttok = BACKREF;
}
if (c == '^') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    invert = 1;
} else
    invert = 0;

....
Skipping nonlast:Priority -363
At location src/dfa.c:1055
--Src File: src/dfa.c
Fragment 0:
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}
if (c == '^') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    invert = 1;
} else
    invert = 0;

....
Skipping nonlast:Priority -363
At location src/dfa.c:1055
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (c == '^') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    invert = 1;
} else
    invert = 0;

....
Skipping nonlast:Priority -363
At location src/dfa.c:1055
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (c == '^') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    invert = 1;
} else
    invert = 0;

....
Skipping nonlast:Priority -363
At location src/dfa.c:1055
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (c == '^') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    invert = 1;
} else
    invert = 0;

....
Skipping nonlast addifexit:Priority 3387
At location src/dfa.c:1055
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, invert, laststart, backslash, syntax_bits, c1, c2, eolbyte, hard_LC_COLLATE, case_fold, parens, minrep, maxrep, cur_mb_index, i)))
    return -128;
if (c == '^') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    invert = 1;
} else
    invert = 0;

....
Skipping nonlast addifexit:Priority 3387
At location src/dfa.c:1055
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, invert, laststart, backslash, syntax_bits, c1, c2, eolbyte, hard_LC_COLLATE, case_fold, parens, minrep, maxrep, cur_mb_index, i)))
    return -1;
if (c == '^') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    invert = 1;
} else
    invert = 0;

....
Skipping nonlast addifexit:Priority 3387
At location src/dfa.c:1055
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, invert, laststart, backslash, syntax_bits, c1, c2, eolbyte, hard_LC_COLLATE, case_fold, parens, minrep, maxrep, cur_mb_index, i)))
    return 0;
if (c == '^') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    invert = 1;
} else
    invert = 0;

....
Skipping nonlast addifexit:Priority 3387
At location src/dfa.c:1055
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, invert, laststart, backslash, syntax_bits, c1, c2, eolbyte, hard_LC_COLLATE, case_fold, parens, minrep, maxrep, cur_mb_index, i)))
    return 1;
if (c == '^') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    invert = 1;
} else
    invert = 0;

....
Skipping nonlast addifexit:Priority 3387
At location src/dfa.c:1055
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, invert, laststart, backslash, syntax_bits, c1, c2, eolbyte, hard_LC_COLLATE, case_fold, parens, minrep, maxrep, cur_mb_index, i)))
    return 2;
if (c == '^') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    invert = 1;
} else
    invert = 0;

....
Skipping nonlast addifexit:Priority 3387
At location src/dfa.c:1055
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, invert, laststart, backslash, syntax_bits, c1, c2, eolbyte, hard_LC_COLLATE, case_fold, parens, minrep, maxrep, cur_mb_index, i)))
    return 5;
if (c == '^') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    invert = 1;
} else
    invert = 0;

....
Skipping nonlast addifexit:Priority 3387
At location src/dfa.c:1055
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, invert, laststart, backslash, syntax_bits, c1, c2, eolbyte, hard_LC_COLLATE, case_fold, parens, minrep, maxrep, cur_mb_index, i)))
    return 8;
if (c == '^') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    invert = 1;
} else
    invert = 0;

....
Skipping nonlast addifexit:Priority 3387
At location src/dfa.c:1055
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, invert, laststart, backslash, syntax_bits, c1, c2, eolbyte, hard_LC_COLLATE, case_fold, parens, minrep, maxrep, cur_mb_index, i)))
    return 9;
if (c == '^') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    invert = 1;
} else
    invert = 0;

....
Skipping nonlast addifexit:Priority 3387
At location src/dfa.c:1055
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, invert, laststart, backslash, syntax_bits, c1, c2, eolbyte, hard_LC_COLLATE, case_fold, parens, minrep, maxrep, cur_mb_index, i)))
    return 10;
if (c == '^') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    invert = 1;
} else
    invert = 0;

....
Skipping nonlast addifexit:Priority 3387
At location src/dfa.c:1055
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, invert, laststart, backslash, syntax_bits, c1, c2, eolbyte, hard_LC_COLLATE, case_fold, parens, minrep, maxrep, cur_mb_index, i)))
    return 128;
if (c == '^') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    invert = 1;
} else
    invert = 0;

....
Skipping nonlast addifexit:Priority 3387
At location src/dfa.c:1055
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, invert, laststart, backslash, syntax_bits, c1, c2, eolbyte, hard_LC_COLLATE, case_fold, parens, minrep, maxrep, cur_mb_index, i)))
    return 255;
if (c == '^') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    invert = 1;
} else
    invert = 0;

....
Skipping nonlast addifexit:Priority 3387
At location src/dfa.c:1055
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, invert, laststart, backslash, syntax_bits, c1, c2, eolbyte, hard_LC_COLLATE, case_fold, parens, minrep, maxrep, cur_mb_index, i)))
    return 256;
if (c == '^') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    invert = 1;
} else
    invert = 0;

....
Skipping nonlast addifexit:Priority 3387
At location src/dfa.c:1055
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, invert, laststart, backslash, syntax_bits, c1, c2, eolbyte, hard_LC_COLLATE, case_fold, parens, minrep, maxrep, cur_mb_index, i)))
    return 32767;
if (c == '^') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    invert = 1;
} else
    invert = 0;

....
Skipping nonlast addifexit:Priority 3387
At location src/dfa.c:1055
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, invert, laststart, backslash, syntax_bits, c1, c2, eolbyte, hard_LC_COLLATE, case_fold, parens, minrep, maxrep, cur_mb_index, i)))
    break;
if (c == '^') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    invert = 1;
} else
    invert = 0;

....
Skipping nonlast addifexit:Priority 3587
At location src/dfa.c:1055
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, invert, laststart, backslash, syntax_bits, c1, c2, eolbyte, hard_LC_COLLATE, case_fold, parens, minrep, maxrep, cur_mb_index, i)))
    goto skip;
if (c == '^') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    invert = 1;
} else
    invert = 0;

....
Skipping nonlast addifexit:Priority 3587
At location src/dfa.c:1055
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, invert, laststart, backslash, syntax_bits, c1, c2, eolbyte, hard_LC_COLLATE, case_fold, parens, minrep, maxrep, cur_mb_index, i)))
    goto normal_char;
if (c == '^') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    invert = 1;
} else
    invert = 0;

....
Skipping nonlast:Priority -92
At location src/dfa.c:1061
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    invert = 0;
}

....
Skipping nonlast:Priority -92
At location src/dfa.c:1061
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    invert = 0;
}

....
Skipping nonlast:Priority -92
At location src/dfa.c:1061
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        return lasttok = parse_bracket_exp_mb();
    }
    invert = 0;
}

....
Skipping nonlast:Priority -92
At location src/dfa.c:1061
--Src File: src/dfa.c
Fragment 0:
{
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGLINE;
    invert = 0;
}

....
Skipping nonlast:Priority -92
At location src/dfa.c:1061
--Src File: src/dfa.c
Fragment 0:
{
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGWORD;
    invert = 0;
}

....
Skipping nonlast:Priority -92
At location src/dfa.c:1061
--Src File: src/dfa.c
Fragment 0:
{
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDLINE;
    invert = 0;
}

....
Skipping nonlast:Priority -92
At location src/dfa.c:1061
--Src File: src/dfa.c
Fragment 0:
{
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDWORD;
    invert = 0;
}

....
Skipping nonlast:Priority -92
At location src/dfa.c:1061
--Src File: src/dfa.c
Fragment 0:
{
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = LIMWORD;
    invert = 0;
}

....
Skipping nonlast:Priority -92
At location src/dfa.c:1061
--Src File: src/dfa.c
Fragment 0:
{
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = NOTLIMWORD;
    invert = 0;
}

....
Skipping nonlast:Priority -92
At location src/dfa.c:1061
--Src File: src/dfa.c
Fragment 0:
{
    if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        laststart = 0;
        return lasttok = BACKREF;
    }
    invert = 0;
}

....
Skipping nonlast:Priority -92
At location src/dfa.c:1061
--Src File: src/dfa.c
Fragment 0:
{
    if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
        zeroset(ccl);
        setbit_case_fold(c, ccl);
        return lasttok = CSET + charclass_index(ccl);
    }
    invert = 0;
}

....
Skipping nonlast:Priority -92
At location src/dfa.c:1061
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    invert = 0;
}

....
Skipping nonlast:Priority -92
At location src/dfa.c:1061
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    invert = 0;
}

....
Skipping nonlast:Priority -92
At location src/dfa.c:1061
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    invert = 0;
}

....
Skipping nonlast addifexit:Priority 4908
At location src/dfa.c:1061
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(invert, c, lexptr, lexleft, lasttok, syntax_bits, c1, c2, laststart, backslash, hard_LC_COLLATE, case_fold, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
        return -128;
    invert = 0;
}

....
Skipping nonlast addifexit:Priority 4908
At location src/dfa.c:1061
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(invert, c, lexptr, lexleft, lasttok, syntax_bits, c1, c2, laststart, backslash, hard_LC_COLLATE, case_fold, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
        return -1;
    invert = 0;
}

....
Skipping nonlast addifexit:Priority 4908
At location src/dfa.c:1061
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(invert, c, lexptr, lexleft, lasttok, syntax_bits, c1, c2, laststart, backslash, hard_LC_COLLATE, case_fold, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
        return 0;
    invert = 0;
}

....
Skipping nonlast addifexit:Priority 4908
At location src/dfa.c:1061
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(invert, c, lexptr, lexleft, lasttok, syntax_bits, c1, c2, laststart, backslash, hard_LC_COLLATE, case_fold, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
        return 1;
    invert = 0;
}

....
Skipping nonlast addifexit:Priority 4908
At location src/dfa.c:1061
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(invert, c, lexptr, lexleft, lasttok, syntax_bits, c1, c2, laststart, backslash, hard_LC_COLLATE, case_fold, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
        return 2;
    invert = 0;
}

....
Skipping nonlast addifexit:Priority 4908
At location src/dfa.c:1061
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(invert, c, lexptr, lexleft, lasttok, syntax_bits, c1, c2, laststart, backslash, hard_LC_COLLATE, case_fold, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
        return 5;
    invert = 0;
}

....
Skipping nonlast addifexit:Priority 4908
At location src/dfa.c:1061
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(invert, c, lexptr, lexleft, lasttok, syntax_bits, c1, c2, laststart, backslash, hard_LC_COLLATE, case_fold, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
        return 8;
    invert = 0;
}

....
Skipping nonlast addifexit:Priority 4908
At location src/dfa.c:1061
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(invert, c, lexptr, lexleft, lasttok, syntax_bits, c1, c2, laststart, backslash, hard_LC_COLLATE, case_fold, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
        return 9;
    invert = 0;
}

....
Skipping nonlast addifexit:Priority 4908
At location src/dfa.c:1061
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(invert, c, lexptr, lexleft, lasttok, syntax_bits, c1, c2, laststart, backslash, hard_LC_COLLATE, case_fold, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
        return 10;
    invert = 0;
}

....
Skipping nonlast addifexit:Priority 4908
At location src/dfa.c:1061
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(invert, c, lexptr, lexleft, lasttok, syntax_bits, c1, c2, laststart, backslash, hard_LC_COLLATE, case_fold, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
        return 128;
    invert = 0;
}

....
Skipping nonlast addifexit:Priority 4908
At location src/dfa.c:1061
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(invert, c, lexptr, lexleft, lasttok, syntax_bits, c1, c2, laststart, backslash, hard_LC_COLLATE, case_fold, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
        return 255;
    invert = 0;
}

....
Skipping nonlast addifexit:Priority 4908
At location src/dfa.c:1061
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(invert, c, lexptr, lexleft, lasttok, syntax_bits, c1, c2, laststart, backslash, hard_LC_COLLATE, case_fold, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
        return 256;
    invert = 0;
}

....
Skipping nonlast addifexit:Priority 4908
At location src/dfa.c:1061
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(invert, c, lexptr, lexleft, lasttok, syntax_bits, c1, c2, laststart, backslash, hard_LC_COLLATE, case_fold, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
        return 32767;
    invert = 0;
}

....
Skipping nonlast addifexit:Priority 4908
At location src/dfa.c:1061
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(invert, c, lexptr, lexleft, lasttok, syntax_bits, c1, c2, laststart, backslash, hard_LC_COLLATE, case_fold, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
        break;
    invert = 0;
}

....
Skipping nonlast addifexit:Priority 5108
At location src/dfa.c:1061
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(invert, c, lexptr, lexleft, lasttok, syntax_bits, c1, c2, laststart, backslash, hard_LC_COLLATE, case_fold, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
        goto skip;
    invert = 0;
}

....
Skipping nonlast addifexit:Priority 5108
At location src/dfa.c:1061
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(invert, c, lexptr, lexleft, lasttok, syntax_bits, c1, c2, laststart, backslash, hard_LC_COLLATE, case_fold, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
        goto normal_char;
    invert = 0;
}

....
Skipping nonlast:Priority -362
At location src/dfa.c:1062
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
do {
    if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
        for (c1 = 0; prednames[c1].name; ++c1) 
            if (looking_at(prednames[c1].name)) {
                int (*pred)(int) = prednames[c1].pred;
                for (c2 = 0; c2 < (1 << 8); ++c2) 
                    if ((*pred)(c2))
                        setbit_case_fold(c2, ccl);
                lexptr += strlen(prednames[c1].name);
                lexleft -= strlen(prednames[c1].name);
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                goto skip;
            }
    if (c == '\\' && (syntax_bits & ((unsigned long)1)))
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c1) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c1 == '-') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c2) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c2 == ']') {
            --lexptr;
            ++lexleft;
        } else {
            if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            c1 = c;
            if (!hard_LC_COLLATE)
                for (c = c1; c <= c2; c++) 
                    setbit_case_fold(c, ccl);
            else {
                if (case_fold) {
                    c1 = (__extension__ ({
                        int __res;
                        if (sizeof (c1) > 1) {
                            if (__builtin_constant_p(c1)) {
                                int __c = (c1);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c1);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c1)];
                        __res;
                    }));
                    c2 = (__extension__ ({
                        int __res;
                        if (sizeof (c2) > 1) {
                            if (__builtin_constant_p(c2)) {
                                int __c = (c2);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c2);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c2)];
                        __res;
                    }));
                }
                for (c = 0; c < (1 << 8); ++c) 
                    if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                        setbit_case_fold(c, ccl);
            }
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            continue;
        }
    }
    setbit_case_fold(c, ccl);
  skip:
    ;
} while ((c = c1) != ']');

....
Skipping nonlast:Priority -362
At location src/dfa.c:1062
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
do {
    if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
        for (c1 = 0; prednames[c1].name; ++c1) 
            if (looking_at(prednames[c1].name)) {
                int (*pred)(int) = prednames[c1].pred;
                for (c2 = 0; c2 < (1 << 8); ++c2) 
                    if ((*pred)(c2))
                        setbit_case_fold(c2, ccl);
                lexptr += strlen(prednames[c1].name);
                lexleft -= strlen(prednames[c1].name);
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                goto skip;
            }
    if (c == '\\' && (syntax_bits & ((unsigned long)1)))
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c1) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c1 == '-') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c2) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c2 == ']') {
            --lexptr;
            ++lexleft;
        } else {
            if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            c1 = c;
            if (!hard_LC_COLLATE)
                for (c = c1; c <= c2; c++) 
                    setbit_case_fold(c, ccl);
            else {
                if (case_fold) {
                    c1 = (__extension__ ({
                        int __res;
                        if (sizeof (c1) > 1) {
                            if (__builtin_constant_p(c1)) {
                                int __c = (c1);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c1);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c1)];
                        __res;
                    }));
                    c2 = (__extension__ ({
                        int __res;
                        if (sizeof (c2) > 1) {
                            if (__builtin_constant_p(c2)) {
                                int __c = (c2);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c2);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c2)];
                        __res;
                    }));
                }
                for (c = 0; c < (1 << 8); ++c) 
                    if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                        setbit_case_fold(c, ccl);
            }
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            continue;
        }
    }
    setbit_case_fold(c, ccl);
  skip:
    ;
} while ((c = c1) != ']');

....
Skipping nonlast:Priority -362
At location src/dfa.c:1062
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
do {
    if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
        for (c1 = 0; prednames[c1].name; ++c1) 
            if (looking_at(prednames[c1].name)) {
                int (*pred)(int) = prednames[c1].pred;
                for (c2 = 0; c2 < (1 << 8); ++c2) 
                    if ((*pred)(c2))
                        setbit_case_fold(c2, ccl);
                lexptr += strlen(prednames[c1].name);
                lexleft -= strlen(prednames[c1].name);
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                goto skip;
            }
    if (c == '\\' && (syntax_bits & ((unsigned long)1)))
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c1) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c1 == '-') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c2) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c2 == ']') {
            --lexptr;
            ++lexleft;
        } else {
            if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            c1 = c;
            if (!hard_LC_COLLATE)
                for (c = c1; c <= c2; c++) 
                    setbit_case_fold(c, ccl);
            else {
                if (case_fold) {
                    c1 = (__extension__ ({
                        int __res;
                        if (sizeof (c1) > 1) {
                            if (__builtin_constant_p(c1)) {
                                int __c = (c1);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c1);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c1)];
                        __res;
                    }));
                    c2 = (__extension__ ({
                        int __res;
                        if (sizeof (c2) > 1) {
                            if (__builtin_constant_p(c2)) {
                                int __c = (c2);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c2);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c2)];
                        __res;
                    }));
                }
                for (c = 0; c < (1 << 8); ++c) 
                    if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                        setbit_case_fold(c, ccl);
            }
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            continue;
        }
    }
    setbit_case_fold(c, ccl);
  skip:
    ;
} while ((c = c1) != ']');

....
Skipping nonlast:Priority -362
At location src/dfa.c:1062
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGLINE;
do {
    if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
        for (c1 = 0; prednames[c1].name; ++c1) 
            if (looking_at(prednames[c1].name)) {
                int (*pred)(int) = prednames[c1].pred;
                for (c2 = 0; c2 < (1 << 8); ++c2) 
                    if ((*pred)(c2))
                        setbit_case_fold(c2, ccl);
                lexptr += strlen(prednames[c1].name);
                lexleft -= strlen(prednames[c1].name);
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                goto skip;
            }
    if (c == '\\' && (syntax_bits & ((unsigned long)1)))
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c1) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c1 == '-') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c2) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c2 == ']') {
            --lexptr;
            ++lexleft;
        } else {
            if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            c1 = c;
            if (!hard_LC_COLLATE)
                for (c = c1; c <= c2; c++) 
                    setbit_case_fold(c, ccl);
            else {
                if (case_fold) {
                    c1 = (__extension__ ({
                        int __res;
                        if (sizeof (c1) > 1) {
                            if (__builtin_constant_p(c1)) {
                                int __c = (c1);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c1);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c1)];
                        __res;
                    }));
                    c2 = (__extension__ ({
                        int __res;
                        if (sizeof (c2) > 1) {
                            if (__builtin_constant_p(c2)) {
                                int __c = (c2);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c2);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c2)];
                        __res;
                    }));
                }
                for (c = 0; c < (1 << 8); ++c) 
                    if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                        setbit_case_fold(c, ccl);
            }
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            continue;
        }
    }
    setbit_case_fold(c, ccl);
  skip:
    ;
} while ((c = c1) != ']');

....
Skipping nonlast:Priority -362
At location src/dfa.c:1062
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGWORD;
do {
    if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
        for (c1 = 0; prednames[c1].name; ++c1) 
            if (looking_at(prednames[c1].name)) {
                int (*pred)(int) = prednames[c1].pred;
                for (c2 = 0; c2 < (1 << 8); ++c2) 
                    if ((*pred)(c2))
                        setbit_case_fold(c2, ccl);
                lexptr += strlen(prednames[c1].name);
                lexleft -= strlen(prednames[c1].name);
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                goto skip;
            }
    if (c == '\\' && (syntax_bits & ((unsigned long)1)))
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c1) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c1 == '-') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c2) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c2 == ']') {
            --lexptr;
            ++lexleft;
        } else {
            if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            c1 = c;
            if (!hard_LC_COLLATE)
                for (c = c1; c <= c2; c++) 
                    setbit_case_fold(c, ccl);
            else {
                if (case_fold) {
                    c1 = (__extension__ ({
                        int __res;
                        if (sizeof (c1) > 1) {
                            if (__builtin_constant_p(c1)) {
                                int __c = (c1);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c1);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c1)];
                        __res;
                    }));
                    c2 = (__extension__ ({
                        int __res;
                        if (sizeof (c2) > 1) {
                            if (__builtin_constant_p(c2)) {
                                int __c = (c2);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c2);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c2)];
                        __res;
                    }));
                }
                for (c = 0; c < (1 << 8); ++c) 
                    if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                        setbit_case_fold(c, ccl);
            }
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            continue;
        }
    }
    setbit_case_fold(c, ccl);
  skip:
    ;
} while ((c = c1) != ']');

....
Skipping nonlast:Priority -362
At location src/dfa.c:1062
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDLINE;
do {
    if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
        for (c1 = 0; prednames[c1].name; ++c1) 
            if (looking_at(prednames[c1].name)) {
                int (*pred)(int) = prednames[c1].pred;
                for (c2 = 0; c2 < (1 << 8); ++c2) 
                    if ((*pred)(c2))
                        setbit_case_fold(c2, ccl);
                lexptr += strlen(prednames[c1].name);
                lexleft -= strlen(prednames[c1].name);
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                goto skip;
            }
    if (c == '\\' && (syntax_bits & ((unsigned long)1)))
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c1) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c1 == '-') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c2) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c2 == ']') {
            --lexptr;
            ++lexleft;
        } else {
            if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            c1 = c;
            if (!hard_LC_COLLATE)
                for (c = c1; c <= c2; c++) 
                    setbit_case_fold(c, ccl);
            else {
                if (case_fold) {
                    c1 = (__extension__ ({
                        int __res;
                        if (sizeof (c1) > 1) {
                            if (__builtin_constant_p(c1)) {
                                int __c = (c1);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c1);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c1)];
                        __res;
                    }));
                    c2 = (__extension__ ({
                        int __res;
                        if (sizeof (c2) > 1) {
                            if (__builtin_constant_p(c2)) {
                                int __c = (c2);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c2);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c2)];
                        __res;
                    }));
                }
                for (c = 0; c < (1 << 8); ++c) 
                    if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                        setbit_case_fold(c, ccl);
            }
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            continue;
        }
    }
    setbit_case_fold(c, ccl);
  skip:
    ;
} while ((c = c1) != ']');

....
Skipping nonlast:Priority -362
At location src/dfa.c:1062
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDWORD;
do {
    if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
        for (c1 = 0; prednames[c1].name; ++c1) 
            if (looking_at(prednames[c1].name)) {
                int (*pred)(int) = prednames[c1].pred;
                for (c2 = 0; c2 < (1 << 8); ++c2) 
                    if ((*pred)(c2))
                        setbit_case_fold(c2, ccl);
                lexptr += strlen(prednames[c1].name);
                lexleft -= strlen(prednames[c1].name);
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                goto skip;
            }
    if (c == '\\' && (syntax_bits & ((unsigned long)1)))
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c1) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c1 == '-') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c2) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c2 == ']') {
            --lexptr;
            ++lexleft;
        } else {
            if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            c1 = c;
            if (!hard_LC_COLLATE)
                for (c = c1; c <= c2; c++) 
                    setbit_case_fold(c, ccl);
            else {
                if (case_fold) {
                    c1 = (__extension__ ({
                        int __res;
                        if (sizeof (c1) > 1) {
                            if (__builtin_constant_p(c1)) {
                                int __c = (c1);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c1);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c1)];
                        __res;
                    }));
                    c2 = (__extension__ ({
                        int __res;
                        if (sizeof (c2) > 1) {
                            if (__builtin_constant_p(c2)) {
                                int __c = (c2);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c2);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c2)];
                        __res;
                    }));
                }
                for (c = 0; c < (1 << 8); ++c) 
                    if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                        setbit_case_fold(c, ccl);
            }
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            continue;
        }
    }
    setbit_case_fold(c, ccl);
  skip:
    ;
} while ((c = c1) != ']');

....
Skipping nonlast:Priority -362
At location src/dfa.c:1062
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = LIMWORD;
do {
    if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
        for (c1 = 0; prednames[c1].name; ++c1) 
            if (looking_at(prednames[c1].name)) {
                int (*pred)(int) = prednames[c1].pred;
                for (c2 = 0; c2 < (1 << 8); ++c2) 
                    if ((*pred)(c2))
                        setbit_case_fold(c2, ccl);
                lexptr += strlen(prednames[c1].name);
                lexleft -= strlen(prednames[c1].name);
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                goto skip;
            }
    if (c == '\\' && (syntax_bits & ((unsigned long)1)))
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c1) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c1 == '-') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c2) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c2 == ']') {
            --lexptr;
            ++lexleft;
        } else {
            if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            c1 = c;
            if (!hard_LC_COLLATE)
                for (c = c1; c <= c2; c++) 
                    setbit_case_fold(c, ccl);
            else {
                if (case_fold) {
                    c1 = (__extension__ ({
                        int __res;
                        if (sizeof (c1) > 1) {
                            if (__builtin_constant_p(c1)) {
                                int __c = (c1);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c1);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c1)];
                        __res;
                    }));
                    c2 = (__extension__ ({
                        int __res;
                        if (sizeof (c2) > 1) {
                            if (__builtin_constant_p(c2)) {
                                int __c = (c2);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c2);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c2)];
                        __res;
                    }));
                }
                for (c = 0; c < (1 << 8); ++c) 
                    if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                        setbit_case_fold(c, ccl);
            }
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            continue;
        }
    }
    setbit_case_fold(c, ccl);
  skip:
    ;
} while ((c = c1) != ']');

....
Skipping nonlast:Priority -362
At location src/dfa.c:1062
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = NOTLIMWORD;
do {
    if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
        for (c1 = 0; prednames[c1].name; ++c1) 
            if (looking_at(prednames[c1].name)) {
                int (*pred)(int) = prednames[c1].pred;
                for (c2 = 0; c2 < (1 << 8); ++c2) 
                    if ((*pred)(c2))
                        setbit_case_fold(c2, ccl);
                lexptr += strlen(prednames[c1].name);
                lexleft -= strlen(prednames[c1].name);
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                goto skip;
            }
    if (c == '\\' && (syntax_bits & ((unsigned long)1)))
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c1) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c1 == '-') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c2) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c2 == ']') {
            --lexptr;
            ++lexleft;
        } else {
            if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            c1 = c;
            if (!hard_LC_COLLATE)
                for (c = c1; c <= c2; c++) 
                    setbit_case_fold(c, ccl);
            else {
                if (case_fold) {
                    c1 = (__extension__ ({
                        int __res;
                        if (sizeof (c1) > 1) {
                            if (__builtin_constant_p(c1)) {
                                int __c = (c1);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c1);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c1)];
                        __res;
                    }));
                    c2 = (__extension__ ({
                        int __res;
                        if (sizeof (c2) > 1) {
                            if (__builtin_constant_p(c2)) {
                                int __c = (c2);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c2);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c2)];
                        __res;
                    }));
                }
                for (c = 0; c < (1 << 8); ++c) 
                    if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                        setbit_case_fold(c, ccl);
            }
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            continue;
        }
    }
    setbit_case_fold(c, ccl);
  skip:
    ;
} while ((c = c1) != ']');

....
Skipping nonlast:Priority -362
At location src/dfa.c:1062
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    laststart = 0;
    return lasttok = BACKREF;
}
do {
    if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
        for (c1 = 0; prednames[c1].name; ++c1) 
            if (looking_at(prednames[c1].name)) {
                int (*pred)(int) = prednames[c1].pred;
                for (c2 = 0; c2 < (1 << 8); ++c2) 
                    if ((*pred)(c2))
                        setbit_case_fold(c2, ccl);
                lexptr += strlen(prednames[c1].name);
                lexleft -= strlen(prednames[c1].name);
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                goto skip;
            }
    if (c == '\\' && (syntax_bits & ((unsigned long)1)))
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c1) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c1 == '-') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c2) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c2 == ']') {
            --lexptr;
            ++lexleft;
        } else {
            if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            c1 = c;
            if (!hard_LC_COLLATE)
                for (c = c1; c <= c2; c++) 
                    setbit_case_fold(c, ccl);
            else {
                if (case_fold) {
                    c1 = (__extension__ ({
                        int __res;
                        if (sizeof (c1) > 1) {
                            if (__builtin_constant_p(c1)) {
                                int __c = (c1);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c1);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c1)];
                        __res;
                    }));
                    c2 = (__extension__ ({
                        int __res;
                        if (sizeof (c2) > 1) {
                            if (__builtin_constant_p(c2)) {
                                int __c = (c2);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c2);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c2)];
                        __res;
                    }));
                }
                for (c = 0; c < (1 << 8); ++c) 
                    if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                        setbit_case_fold(c, ccl);
            }
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            continue;
        }
    }
    setbit_case_fold(c, ccl);
  skip:
    ;
} while ((c = c1) != ']');

....
Skipping nonlast:Priority -362
At location src/dfa.c:1062
--Src File: src/dfa.c
Fragment 0:
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}
do {
    if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
        for (c1 = 0; prednames[c1].name; ++c1) 
            if (looking_at(prednames[c1].name)) {
                int (*pred)(int) = prednames[c1].pred;
                for (c2 = 0; c2 < (1 << 8); ++c2) 
                    if ((*pred)(c2))
                        setbit_case_fold(c2, ccl);
                lexptr += strlen(prednames[c1].name);
                lexleft -= strlen(prednames[c1].name);
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                goto skip;
            }
    if (c == '\\' && (syntax_bits & ((unsigned long)1)))
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c1) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c1 == '-') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c2) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c2 == ']') {
            --lexptr;
            ++lexleft;
        } else {
            if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            c1 = c;
            if (!hard_LC_COLLATE)
                for (c = c1; c <= c2; c++) 
                    setbit_case_fold(c, ccl);
            else {
                if (case_fold) {
                    c1 = (__extension__ ({
                        int __res;
                        if (sizeof (c1) > 1) {
                            if (__builtin_constant_p(c1)) {
                                int __c = (c1);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c1);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c1)];
                        __res;
                    }));
                    c2 = (__extension__ ({
                        int __res;
                        if (sizeof (c2) > 1) {
                            if (__builtin_constant_p(c2)) {
                                int __c = (c2);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c2);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c2)];
                        __res;
                    }));
                }
                for (c = 0; c < (1 << 8); ++c) 
                    if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                        setbit_case_fold(c, ccl);
            }
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            continue;
        }
    }
    setbit_case_fold(c, ccl);
  skip:
    ;
} while ((c = c1) != ']');

....
Skipping nonlast:Priority -362
At location src/dfa.c:1062
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
do {
    if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
        for (c1 = 0; prednames[c1].name; ++c1) 
            if (looking_at(prednames[c1].name)) {
                int (*pred)(int) = prednames[c1].pred;
                for (c2 = 0; c2 < (1 << 8); ++c2) 
                    if ((*pred)(c2))
                        setbit_case_fold(c2, ccl);
                lexptr += strlen(prednames[c1].name);
                lexleft -= strlen(prednames[c1].name);
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                goto skip;
            }
    if (c == '\\' && (syntax_bits & ((unsigned long)1)))
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c1) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c1 == '-') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c2) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c2 == ']') {
            --lexptr;
            ++lexleft;
        } else {
            if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            c1 = c;
            if (!hard_LC_COLLATE)
                for (c = c1; c <= c2; c++) 
                    setbit_case_fold(c, ccl);
            else {
                if (case_fold) {
                    c1 = (__extension__ ({
                        int __res;
                        if (sizeof (c1) > 1) {
                            if (__builtin_constant_p(c1)) {
                                int __c = (c1);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c1);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c1)];
                        __res;
                    }));
                    c2 = (__extension__ ({
                        int __res;
                        if (sizeof (c2) > 1) {
                            if (__builtin_constant_p(c2)) {
                                int __c = (c2);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c2);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c2)];
                        __res;
                    }));
                }
                for (c = 0; c < (1 << 8); ++c) 
                    if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                        setbit_case_fold(c, ccl);
            }
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            continue;
        }
    }
    setbit_case_fold(c, ccl);
  skip:
    ;
} while ((c = c1) != ']');

....
Skipping nonlast:Priority -362
At location src/dfa.c:1062
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
do {
    if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
        for (c1 = 0; prednames[c1].name; ++c1) 
            if (looking_at(prednames[c1].name)) {
                int (*pred)(int) = prednames[c1].pred;
                for (c2 = 0; c2 < (1 << 8); ++c2) 
                    if ((*pred)(c2))
                        setbit_case_fold(c2, ccl);
                lexptr += strlen(prednames[c1].name);
                lexleft -= strlen(prednames[c1].name);
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                goto skip;
            }
    if (c == '\\' && (syntax_bits & ((unsigned long)1)))
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c1) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c1 == '-') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c2) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c2 == ']') {
            --lexptr;
            ++lexleft;
        } else {
            if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            c1 = c;
            if (!hard_LC_COLLATE)
                for (c = c1; c <= c2; c++) 
                    setbit_case_fold(c, ccl);
            else {
                if (case_fold) {
                    c1 = (__extension__ ({
                        int __res;
                        if (sizeof (c1) > 1) {
                            if (__builtin_constant_p(c1)) {
                                int __c = (c1);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c1);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c1)];
                        __res;
                    }));
                    c2 = (__extension__ ({
                        int __res;
                        if (sizeof (c2) > 1) {
                            if (__builtin_constant_p(c2)) {
                                int __c = (c2);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c2);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c2)];
                        __res;
                    }));
                }
                for (c = 0; c < (1 << 8); ++c) 
                    if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                        setbit_case_fold(c, ccl);
            }
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            continue;
        }
    }
    setbit_case_fold(c, ccl);
  skip:
    ;
} while ((c = c1) != ']');

....
Skipping nonlast:Priority -362
At location src/dfa.c:1062
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
do {
    if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
        for (c1 = 0; prednames[c1].name; ++c1) 
            if (looking_at(prednames[c1].name)) {
                int (*pred)(int) = prednames[c1].pred;
                for (c2 = 0; c2 < (1 << 8); ++c2) 
                    if ((*pred)(c2))
                        setbit_case_fold(c2, ccl);
                lexptr += strlen(prednames[c1].name);
                lexleft -= strlen(prednames[c1].name);
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                goto skip;
            }
    if (c == '\\' && (syntax_bits & ((unsigned long)1)))
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c1) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c1 == '-') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c2) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c2 == ']') {
            --lexptr;
            ++lexleft;
        } else {
            if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            c1 = c;
            if (!hard_LC_COLLATE)
                for (c = c1; c <= c2; c++) 
                    setbit_case_fold(c, ccl);
            else {
                if (case_fold) {
                    c1 = (__extension__ ({
                        int __res;
                        if (sizeof (c1) > 1) {
                            if (__builtin_constant_p(c1)) {
                                int __c = (c1);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c1);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c1)];
                        __res;
                    }));
                    c2 = (__extension__ ({
                        int __res;
                        if (sizeof (c2) > 1) {
                            if (__builtin_constant_p(c2)) {
                                int __c = (c2);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c2);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c2)];
                        __res;
                    }));
                }
                for (c = 0; c < (1 << 8); ++c) 
                    if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                        setbit_case_fold(c, ccl);
            }
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            continue;
        }
    }
    setbit_case_fold(c, ccl);
  skip:
    ;
} while ((c = c1) != ']');

....
Skipping nonlast addifexit:Priority 4638
At location src/dfa.c:1062
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(invert, c, lexptr, lexleft, lasttok, syntax_bits, c1, c2, laststart, backslash, hard_LC_COLLATE, case_fold, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return -128;
do {
    if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
        for (c1 = 0; prednames[c1].name; ++c1) 
            if (looking_at(prednames[c1].name)) {
                int (*pred)(int) = prednames[c1].pred;
                for (c2 = 0; c2 < (1 << 8); ++c2) 
                    if ((*pred)(c2))
                        setbit_case_fold(c2, ccl);
                lexptr += strlen(prednames[c1].name);
                lexleft -= strlen(prednames[c1].name);
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                goto skip;
            }
    if (c == '\\' && (syntax_bits & ((unsigned long)1)))
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c1) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c1 == '-') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c2) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c2 == ']') {
            --lexptr;
            ++lexleft;
        } else {
            if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            c1 = c;
            if (!hard_LC_COLLATE)
                for (c = c1; c <= c2; c++) 
                    setbit_case_fold(c, ccl);
            else {
                if (case_fold) {
                    c1 = (__extension__ ({
                        int __res;
                        if (sizeof (c1) > 1) {
                            if (__builtin_constant_p(c1)) {
                                int __c = (c1);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c1);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c1)];
                        __res;
                    }));
                    c2 = (__extension__ ({
                        int __res;
                        if (sizeof (c2) > 1) {
                            if (__builtin_constant_p(c2)) {
                                int __c = (c2);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c2);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c2)];
                        __res;
                    }));
                }
                for (c = 0; c < (1 << 8); ++c) 
                    if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                        setbit_case_fold(c, ccl);
            }
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            continue;
        }
    }
    setbit_case_fold(c, ccl);
  skip:
    ;
} while ((c = c1) != ']');

....
Skipping nonlast addifexit:Priority 4638
At location src/dfa.c:1062
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(invert, c, lexptr, lexleft, lasttok, syntax_bits, c1, c2, laststart, backslash, hard_LC_COLLATE, case_fold, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return -1;
do {
    if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
        for (c1 = 0; prednames[c1].name; ++c1) 
            if (looking_at(prednames[c1].name)) {
                int (*pred)(int) = prednames[c1].pred;
                for (c2 = 0; c2 < (1 << 8); ++c2) 
                    if ((*pred)(c2))
                        setbit_case_fold(c2, ccl);
                lexptr += strlen(prednames[c1].name);
                lexleft -= strlen(prednames[c1].name);
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                goto skip;
            }
    if (c == '\\' && (syntax_bits & ((unsigned long)1)))
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c1) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c1 == '-') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c2) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c2 == ']') {
            --lexptr;
            ++lexleft;
        } else {
            if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            c1 = c;
            if (!hard_LC_COLLATE)
                for (c = c1; c <= c2; c++) 
                    setbit_case_fold(c, ccl);
            else {
                if (case_fold) {
                    c1 = (__extension__ ({
                        int __res;
                        if (sizeof (c1) > 1) {
                            if (__builtin_constant_p(c1)) {
                                int __c = (c1);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c1);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c1)];
                        __res;
                    }));
                    c2 = (__extension__ ({
                        int __res;
                        if (sizeof (c2) > 1) {
                            if (__builtin_constant_p(c2)) {
                                int __c = (c2);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c2);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c2)];
                        __res;
                    }));
                }
                for (c = 0; c < (1 << 8); ++c) 
                    if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                        setbit_case_fold(c, ccl);
            }
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            continue;
        }
    }
    setbit_case_fold(c, ccl);
  skip:
    ;
} while ((c = c1) != ']');

....
Skipping nonlast addifexit:Priority 4638
At location src/dfa.c:1062
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(invert, c, lexptr, lexleft, lasttok, syntax_bits, c1, c2, laststart, backslash, hard_LC_COLLATE, case_fold, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 0;
do {
    if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
        for (c1 = 0; prednames[c1].name; ++c1) 
            if (looking_at(prednames[c1].name)) {
                int (*pred)(int) = prednames[c1].pred;
                for (c2 = 0; c2 < (1 << 8); ++c2) 
                    if ((*pred)(c2))
                        setbit_case_fold(c2, ccl);
                lexptr += strlen(prednames[c1].name);
                lexleft -= strlen(prednames[c1].name);
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                goto skip;
            }
    if (c == '\\' && (syntax_bits & ((unsigned long)1)))
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c1) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c1 == '-') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c2) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c2 == ']') {
            --lexptr;
            ++lexleft;
        } else {
            if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            c1 = c;
            if (!hard_LC_COLLATE)
                for (c = c1; c <= c2; c++) 
                    setbit_case_fold(c, ccl);
            else {
                if (case_fold) {
                    c1 = (__extension__ ({
                        int __res;
                        if (sizeof (c1) > 1) {
                            if (__builtin_constant_p(c1)) {
                                int __c = (c1);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c1);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c1)];
                        __res;
                    }));
                    c2 = (__extension__ ({
                        int __res;
                        if (sizeof (c2) > 1) {
                            if (__builtin_constant_p(c2)) {
                                int __c = (c2);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c2);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c2)];
                        __res;
                    }));
                }
                for (c = 0; c < (1 << 8); ++c) 
                    if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                        setbit_case_fold(c, ccl);
            }
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            continue;
        }
    }
    setbit_case_fold(c, ccl);
  skip:
    ;
} while ((c = c1) != ']');

....
Skipping nonlast addifexit:Priority 4638
At location src/dfa.c:1062
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(invert, c, lexptr, lexleft, lasttok, syntax_bits, c1, c2, laststart, backslash, hard_LC_COLLATE, case_fold, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 1;
do {
    if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
        for (c1 = 0; prednames[c1].name; ++c1) 
            if (looking_at(prednames[c1].name)) {
                int (*pred)(int) = prednames[c1].pred;
                for (c2 = 0; c2 < (1 << 8); ++c2) 
                    if ((*pred)(c2))
                        setbit_case_fold(c2, ccl);
                lexptr += strlen(prednames[c1].name);
                lexleft -= strlen(prednames[c1].name);
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                goto skip;
            }
    if (c == '\\' && (syntax_bits & ((unsigned long)1)))
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c1) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c1 == '-') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c2) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c2 == ']') {
            --lexptr;
            ++lexleft;
        } else {
            if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            c1 = c;
            if (!hard_LC_COLLATE)
                for (c = c1; c <= c2; c++) 
                    setbit_case_fold(c, ccl);
            else {
                if (case_fold) {
                    c1 = (__extension__ ({
                        int __res;
                        if (sizeof (c1) > 1) {
                            if (__builtin_constant_p(c1)) {
                                int __c = (c1);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c1);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c1)];
                        __res;
                    }));
                    c2 = (__extension__ ({
                        int __res;
                        if (sizeof (c2) > 1) {
                            if (__builtin_constant_p(c2)) {
                                int __c = (c2);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c2);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c2)];
                        __res;
                    }));
                }
                for (c = 0; c < (1 << 8); ++c) 
                    if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                        setbit_case_fold(c, ccl);
            }
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            continue;
        }
    }
    setbit_case_fold(c, ccl);
  skip:
    ;
} while ((c = c1) != ']');

....
Skipping nonlast addifexit:Priority 4638
At location src/dfa.c:1062
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(invert, c, lexptr, lexleft, lasttok, syntax_bits, c1, c2, laststart, backslash, hard_LC_COLLATE, case_fold, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 2;
do {
    if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
        for (c1 = 0; prednames[c1].name; ++c1) 
            if (looking_at(prednames[c1].name)) {
                int (*pred)(int) = prednames[c1].pred;
                for (c2 = 0; c2 < (1 << 8); ++c2) 
                    if ((*pred)(c2))
                        setbit_case_fold(c2, ccl);
                lexptr += strlen(prednames[c1].name);
                lexleft -= strlen(prednames[c1].name);
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                goto skip;
            }
    if (c == '\\' && (syntax_bits & ((unsigned long)1)))
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c1) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c1 == '-') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c2) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c2 == ']') {
            --lexptr;
            ++lexleft;
        } else {
            if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            c1 = c;
            if (!hard_LC_COLLATE)
                for (c = c1; c <= c2; c++) 
                    setbit_case_fold(c, ccl);
            else {
                if (case_fold) {
                    c1 = (__extension__ ({
                        int __res;
                        if (sizeof (c1) > 1) {
                            if (__builtin_constant_p(c1)) {
                                int __c = (c1);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c1);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c1)];
                        __res;
                    }));
                    c2 = (__extension__ ({
                        int __res;
                        if (sizeof (c2) > 1) {
                            if (__builtin_constant_p(c2)) {
                                int __c = (c2);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c2);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c2)];
                        __res;
                    }));
                }
                for (c = 0; c < (1 << 8); ++c) 
                    if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                        setbit_case_fold(c, ccl);
            }
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            continue;
        }
    }
    setbit_case_fold(c, ccl);
  skip:
    ;
} while ((c = c1) != ']');

....
Skipping nonlast addifexit:Priority 4638
At location src/dfa.c:1062
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(invert, c, lexptr, lexleft, lasttok, syntax_bits, c1, c2, laststart, backslash, hard_LC_COLLATE, case_fold, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 5;
do {
    if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
        for (c1 = 0; prednames[c1].name; ++c1) 
            if (looking_at(prednames[c1].name)) {
                int (*pred)(int) = prednames[c1].pred;
                for (c2 = 0; c2 < (1 << 8); ++c2) 
                    if ((*pred)(c2))
                        setbit_case_fold(c2, ccl);
                lexptr += strlen(prednames[c1].name);
                lexleft -= strlen(prednames[c1].name);
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                goto skip;
            }
    if (c == '\\' && (syntax_bits & ((unsigned long)1)))
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c1) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c1 == '-') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c2) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c2 == ']') {
            --lexptr;
            ++lexleft;
        } else {
            if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            c1 = c;
            if (!hard_LC_COLLATE)
                for (c = c1; c <= c2; c++) 
                    setbit_case_fold(c, ccl);
            else {
                if (case_fold) {
                    c1 = (__extension__ ({
                        int __res;
                        if (sizeof (c1) > 1) {
                            if (__builtin_constant_p(c1)) {
                                int __c = (c1);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c1);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c1)];
                        __res;
                    }));
                    c2 = (__extension__ ({
                        int __res;
                        if (sizeof (c2) > 1) {
                            if (__builtin_constant_p(c2)) {
                                int __c = (c2);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c2);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c2)];
                        __res;
                    }));
                }
                for (c = 0; c < (1 << 8); ++c) 
                    if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                        setbit_case_fold(c, ccl);
            }
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            continue;
        }
    }
    setbit_case_fold(c, ccl);
  skip:
    ;
} while ((c = c1) != ']');

....
Skipping nonlast addifexit:Priority 4638
At location src/dfa.c:1062
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(invert, c, lexptr, lexleft, lasttok, syntax_bits, c1, c2, laststart, backslash, hard_LC_COLLATE, case_fold, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 8;
do {
    if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
        for (c1 = 0; prednames[c1].name; ++c1) 
            if (looking_at(prednames[c1].name)) {
                int (*pred)(int) = prednames[c1].pred;
                for (c2 = 0; c2 < (1 << 8); ++c2) 
                    if ((*pred)(c2))
                        setbit_case_fold(c2, ccl);
                lexptr += strlen(prednames[c1].name);
                lexleft -= strlen(prednames[c1].name);
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                goto skip;
            }
    if (c == '\\' && (syntax_bits & ((unsigned long)1)))
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c1) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c1 == '-') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c2) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c2 == ']') {
            --lexptr;
            ++lexleft;
        } else {
            if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            c1 = c;
            if (!hard_LC_COLLATE)
                for (c = c1; c <= c2; c++) 
                    setbit_case_fold(c, ccl);
            else {
                if (case_fold) {
                    c1 = (__extension__ ({
                        int __res;
                        if (sizeof (c1) > 1) {
                            if (__builtin_constant_p(c1)) {
                                int __c = (c1);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c1);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c1)];
                        __res;
                    }));
                    c2 = (__extension__ ({
                        int __res;
                        if (sizeof (c2) > 1) {
                            if (__builtin_constant_p(c2)) {
                                int __c = (c2);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c2);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c2)];
                        __res;
                    }));
                }
                for (c = 0; c < (1 << 8); ++c) 
                    if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                        setbit_case_fold(c, ccl);
            }
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            continue;
        }
    }
    setbit_case_fold(c, ccl);
  skip:
    ;
} while ((c = c1) != ']');

....
Skipping nonlast addifexit:Priority 4638
At location src/dfa.c:1062
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(invert, c, lexptr, lexleft, lasttok, syntax_bits, c1, c2, laststart, backslash, hard_LC_COLLATE, case_fold, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 9;
do {
    if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
        for (c1 = 0; prednames[c1].name; ++c1) 
            if (looking_at(prednames[c1].name)) {
                int (*pred)(int) = prednames[c1].pred;
                for (c2 = 0; c2 < (1 << 8); ++c2) 
                    if ((*pred)(c2))
                        setbit_case_fold(c2, ccl);
                lexptr += strlen(prednames[c1].name);
                lexleft -= strlen(prednames[c1].name);
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                goto skip;
            }
    if (c == '\\' && (syntax_bits & ((unsigned long)1)))
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c1) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c1 == '-') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c2) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c2 == ']') {
            --lexptr;
            ++lexleft;
        } else {
            if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            c1 = c;
            if (!hard_LC_COLLATE)
                for (c = c1; c <= c2; c++) 
                    setbit_case_fold(c, ccl);
            else {
                if (case_fold) {
                    c1 = (__extension__ ({
                        int __res;
                        if (sizeof (c1) > 1) {
                            if (__builtin_constant_p(c1)) {
                                int __c = (c1);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c1);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c1)];
                        __res;
                    }));
                    c2 = (__extension__ ({
                        int __res;
                        if (sizeof (c2) > 1) {
                            if (__builtin_constant_p(c2)) {
                                int __c = (c2);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c2);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c2)];
                        __res;
                    }));
                }
                for (c = 0; c < (1 << 8); ++c) 
                    if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                        setbit_case_fold(c, ccl);
            }
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            continue;
        }
    }
    setbit_case_fold(c, ccl);
  skip:
    ;
} while ((c = c1) != ']');

....
Skipping nonlast addifexit:Priority 4638
At location src/dfa.c:1062
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(invert, c, lexptr, lexleft, lasttok, syntax_bits, c1, c2, laststart, backslash, hard_LC_COLLATE, case_fold, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 10;
do {
    if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
        for (c1 = 0; prednames[c1].name; ++c1) 
            if (looking_at(prednames[c1].name)) {
                int (*pred)(int) = prednames[c1].pred;
                for (c2 = 0; c2 < (1 << 8); ++c2) 
                    if ((*pred)(c2))
                        setbit_case_fold(c2, ccl);
                lexptr += strlen(prednames[c1].name);
                lexleft -= strlen(prednames[c1].name);
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                goto skip;
            }
    if (c == '\\' && (syntax_bits & ((unsigned long)1)))
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c1) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c1 == '-') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c2) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c2 == ']') {
            --lexptr;
            ++lexleft;
        } else {
            if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            c1 = c;
            if (!hard_LC_COLLATE)
                for (c = c1; c <= c2; c++) 
                    setbit_case_fold(c, ccl);
            else {
                if (case_fold) {
                    c1 = (__extension__ ({
                        int __res;
                        if (sizeof (c1) > 1) {
                            if (__builtin_constant_p(c1)) {
                                int __c = (c1);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c1);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c1)];
                        __res;
                    }));
                    c2 = (__extension__ ({
                        int __res;
                        if (sizeof (c2) > 1) {
                            if (__builtin_constant_p(c2)) {
                                int __c = (c2);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c2);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c2)];
                        __res;
                    }));
                }
                for (c = 0; c < (1 << 8); ++c) 
                    if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                        setbit_case_fold(c, ccl);
            }
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            continue;
        }
    }
    setbit_case_fold(c, ccl);
  skip:
    ;
} while ((c = c1) != ']');

....
Skipping nonlast addifexit:Priority 4638
At location src/dfa.c:1062
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(invert, c, lexptr, lexleft, lasttok, syntax_bits, c1, c2, laststart, backslash, hard_LC_COLLATE, case_fold, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 128;
do {
    if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
        for (c1 = 0; prednames[c1].name; ++c1) 
            if (looking_at(prednames[c1].name)) {
                int (*pred)(int) = prednames[c1].pred;
                for (c2 = 0; c2 < (1 << 8); ++c2) 
                    if ((*pred)(c2))
                        setbit_case_fold(c2, ccl);
                lexptr += strlen(prednames[c1].name);
                lexleft -= strlen(prednames[c1].name);
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                goto skip;
            }
    if (c == '\\' && (syntax_bits & ((unsigned long)1)))
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c1) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c1 == '-') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c2) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c2 == ']') {
            --lexptr;
            ++lexleft;
        } else {
            if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            c1 = c;
            if (!hard_LC_COLLATE)
                for (c = c1; c <= c2; c++) 
                    setbit_case_fold(c, ccl);
            else {
                if (case_fold) {
                    c1 = (__extension__ ({
                        int __res;
                        if (sizeof (c1) > 1) {
                            if (__builtin_constant_p(c1)) {
                                int __c = (c1);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c1);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c1)];
                        __res;
                    }));
                    c2 = (__extension__ ({
                        int __res;
                        if (sizeof (c2) > 1) {
                            if (__builtin_constant_p(c2)) {
                                int __c = (c2);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c2);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c2)];
                        __res;
                    }));
                }
                for (c = 0; c < (1 << 8); ++c) 
                    if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                        setbit_case_fold(c, ccl);
            }
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            continue;
        }
    }
    setbit_case_fold(c, ccl);
  skip:
    ;
} while ((c = c1) != ']');

....
Skipping nonlast addifexit:Priority 4638
At location src/dfa.c:1062
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(invert, c, lexptr, lexleft, lasttok, syntax_bits, c1, c2, laststart, backslash, hard_LC_COLLATE, case_fold, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 255;
do {
    if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
        for (c1 = 0; prednames[c1].name; ++c1) 
            if (looking_at(prednames[c1].name)) {
                int (*pred)(int) = prednames[c1].pred;
                for (c2 = 0; c2 < (1 << 8); ++c2) 
                    if ((*pred)(c2))
                        setbit_case_fold(c2, ccl);
                lexptr += strlen(prednames[c1].name);
                lexleft -= strlen(prednames[c1].name);
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                goto skip;
            }
    if (c == '\\' && (syntax_bits & ((unsigned long)1)))
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c1) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c1 == '-') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c2) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c2 == ']') {
            --lexptr;
            ++lexleft;
        } else {
            if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            c1 = c;
            if (!hard_LC_COLLATE)
                for (c = c1; c <= c2; c++) 
                    setbit_case_fold(c, ccl);
            else {
                if (case_fold) {
                    c1 = (__extension__ ({
                        int __res;
                        if (sizeof (c1) > 1) {
                            if (__builtin_constant_p(c1)) {
                                int __c = (c1);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c1);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c1)];
                        __res;
                    }));
                    c2 = (__extension__ ({
                        int __res;
                        if (sizeof (c2) > 1) {
                            if (__builtin_constant_p(c2)) {
                                int __c = (c2);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c2);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c2)];
                        __res;
                    }));
                }
                for (c = 0; c < (1 << 8); ++c) 
                    if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                        setbit_case_fold(c, ccl);
            }
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            continue;
        }
    }
    setbit_case_fold(c, ccl);
  skip:
    ;
} while ((c = c1) != ']');

....
Skipping nonlast addifexit:Priority 4638
At location src/dfa.c:1062
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(invert, c, lexptr, lexleft, lasttok, syntax_bits, c1, c2, laststart, backslash, hard_LC_COLLATE, case_fold, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 256;
do {
    if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
        for (c1 = 0; prednames[c1].name; ++c1) 
            if (looking_at(prednames[c1].name)) {
                int (*pred)(int) = prednames[c1].pred;
                for (c2 = 0; c2 < (1 << 8); ++c2) 
                    if ((*pred)(c2))
                        setbit_case_fold(c2, ccl);
                lexptr += strlen(prednames[c1].name);
                lexleft -= strlen(prednames[c1].name);
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                goto skip;
            }
    if (c == '\\' && (syntax_bits & ((unsigned long)1)))
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c1) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c1 == '-') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c2) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c2 == ']') {
            --lexptr;
            ++lexleft;
        } else {
            if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            c1 = c;
            if (!hard_LC_COLLATE)
                for (c = c1; c <= c2; c++) 
                    setbit_case_fold(c, ccl);
            else {
                if (case_fold) {
                    c1 = (__extension__ ({
                        int __res;
                        if (sizeof (c1) > 1) {
                            if (__builtin_constant_p(c1)) {
                                int __c = (c1);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c1);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c1)];
                        __res;
                    }));
                    c2 = (__extension__ ({
                        int __res;
                        if (sizeof (c2) > 1) {
                            if (__builtin_constant_p(c2)) {
                                int __c = (c2);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c2);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c2)];
                        __res;
                    }));
                }
                for (c = 0; c < (1 << 8); ++c) 
                    if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                        setbit_case_fold(c, ccl);
            }
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            continue;
        }
    }
    setbit_case_fold(c, ccl);
  skip:
    ;
} while ((c = c1) != ']');

....
Skipping nonlast addifexit:Priority 4638
At location src/dfa.c:1062
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(invert, c, lexptr, lexleft, lasttok, syntax_bits, c1, c2, laststart, backslash, hard_LC_COLLATE, case_fold, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 32767;
do {
    if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
        for (c1 = 0; prednames[c1].name; ++c1) 
            if (looking_at(prednames[c1].name)) {
                int (*pred)(int) = prednames[c1].pred;
                for (c2 = 0; c2 < (1 << 8); ++c2) 
                    if ((*pred)(c2))
                        setbit_case_fold(c2, ccl);
                lexptr += strlen(prednames[c1].name);
                lexleft -= strlen(prednames[c1].name);
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                goto skip;
            }
    if (c == '\\' && (syntax_bits & ((unsigned long)1)))
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c1) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c1 == '-') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c2) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c2 == ']') {
            --lexptr;
            ++lexleft;
        } else {
            if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            c1 = c;
            if (!hard_LC_COLLATE)
                for (c = c1; c <= c2; c++) 
                    setbit_case_fold(c, ccl);
            else {
                if (case_fold) {
                    c1 = (__extension__ ({
                        int __res;
                        if (sizeof (c1) > 1) {
                            if (__builtin_constant_p(c1)) {
                                int __c = (c1);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c1);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c1)];
                        __res;
                    }));
                    c2 = (__extension__ ({
                        int __res;
                        if (sizeof (c2) > 1) {
                            if (__builtin_constant_p(c2)) {
                                int __c = (c2);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c2);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c2)];
                        __res;
                    }));
                }
                for (c = 0; c < (1 << 8); ++c) 
                    if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                        setbit_case_fold(c, ccl);
            }
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            continue;
        }
    }
    setbit_case_fold(c, ccl);
  skip:
    ;
} while ((c = c1) != ']');

....
Skipping nonlast addifexit:Priority 4638
At location src/dfa.c:1062
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(invert, c, lexptr, lexleft, lasttok, syntax_bits, c1, c2, laststart, backslash, hard_LC_COLLATE, case_fold, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    break;
do {
    if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
        for (c1 = 0; prednames[c1].name; ++c1) 
            if (looking_at(prednames[c1].name)) {
                int (*pred)(int) = prednames[c1].pred;
                for (c2 = 0; c2 < (1 << 8); ++c2) 
                    if ((*pred)(c2))
                        setbit_case_fold(c2, ccl);
                lexptr += strlen(prednames[c1].name);
                lexleft -= strlen(prednames[c1].name);
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                goto skip;
            }
    if (c == '\\' && (syntax_bits & ((unsigned long)1)))
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c1) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c1 == '-') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c2) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c2 == ']') {
            --lexptr;
            ++lexleft;
        } else {
            if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            c1 = c;
            if (!hard_LC_COLLATE)
                for (c = c1; c <= c2; c++) 
                    setbit_case_fold(c, ccl);
            else {
                if (case_fold) {
                    c1 = (__extension__ ({
                        int __res;
                        if (sizeof (c1) > 1) {
                            if (__builtin_constant_p(c1)) {
                                int __c = (c1);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c1);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c1)];
                        __res;
                    }));
                    c2 = (__extension__ ({
                        int __res;
                        if (sizeof (c2) > 1) {
                            if (__builtin_constant_p(c2)) {
                                int __c = (c2);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c2);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c2)];
                        __res;
                    }));
                }
                for (c = 0; c < (1 << 8); ++c) 
                    if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                        setbit_case_fold(c, ccl);
            }
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            continue;
        }
    }
    setbit_case_fold(c, ccl);
  skip:
    ;
} while ((c = c1) != ']');

....
Skipping nonlast addifexit:Priority 4838
At location src/dfa.c:1062
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(invert, c, lexptr, lexleft, lasttok, syntax_bits, c1, c2, laststart, backslash, hard_LC_COLLATE, case_fold, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    goto skip;
do {
    if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
        for (c1 = 0; prednames[c1].name; ++c1) 
            if (looking_at(prednames[c1].name)) {
                int (*pred)(int) = prednames[c1].pred;
                for (c2 = 0; c2 < (1 << 8); ++c2) 
                    if ((*pred)(c2))
                        setbit_case_fold(c2, ccl);
                lexptr += strlen(prednames[c1].name);
                lexleft -= strlen(prednames[c1].name);
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                goto skip;
            }
    if (c == '\\' && (syntax_bits & ((unsigned long)1)))
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c1) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c1 == '-') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c2) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c2 == ']') {
            --lexptr;
            ++lexleft;
        } else {
            if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            c1 = c;
            if (!hard_LC_COLLATE)
                for (c = c1; c <= c2; c++) 
                    setbit_case_fold(c, ccl);
            else {
                if (case_fold) {
                    c1 = (__extension__ ({
                        int __res;
                        if (sizeof (c1) > 1) {
                            if (__builtin_constant_p(c1)) {
                                int __c = (c1);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c1);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c1)];
                        __res;
                    }));
                    c2 = (__extension__ ({
                        int __res;
                        if (sizeof (c2) > 1) {
                            if (__builtin_constant_p(c2)) {
                                int __c = (c2);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c2);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c2)];
                        __res;
                    }));
                }
                for (c = 0; c < (1 << 8); ++c) 
                    if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                        setbit_case_fold(c, ccl);
            }
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            continue;
        }
    }
    setbit_case_fold(c, ccl);
  skip:
    ;
} while ((c = c1) != ']');

....
Skipping nonlast addifexit:Priority 4838
At location src/dfa.c:1062
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(invert, c, lexptr, lexleft, lasttok, syntax_bits, c1, c2, laststart, backslash, hard_LC_COLLATE, case_fold, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    goto normal_char;
do {
    if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
        for (c1 = 0; prednames[c1].name; ++c1) 
            if (looking_at(prednames[c1].name)) {
                int (*pred)(int) = prednames[c1].pred;
                for (c2 = 0; c2 < (1 << 8); ++c2) 
                    if ((*pred)(c2))
                        setbit_case_fold(c2, ccl);
                lexptr += strlen(prednames[c1].name);
                lexleft -= strlen(prednames[c1].name);
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                goto skip;
            }
    if (c == '\\' && (syntax_bits & ((unsigned long)1)))
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c1) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c1 == '-') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c2) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c2 == ']') {
            --lexptr;
            ++lexleft;
        } else {
            if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            c1 = c;
            if (!hard_LC_COLLATE)
                for (c = c1; c <= c2; c++) 
                    setbit_case_fold(c, ccl);
            else {
                if (case_fold) {
                    c1 = (__extension__ ({
                        int __res;
                        if (sizeof (c1) > 1) {
                            if (__builtin_constant_p(c1)) {
                                int __c = (c1);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c1);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c1)];
                        __res;
                    }));
                    c2 = (__extension__ ({
                        int __res;
                        if (sizeof (c2) > 1) {
                            if (__builtin_constant_p(c2)) {
                                int __c = (c2);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c2);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c2)];
                        __res;
                    }));
                }
                for (c = 0; c < (1 << 8); ++c) 
                    if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                        setbit_case_fold(c, ccl);
            }
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            continue;
        }
    }
    setbit_case_fold(c, ccl);
  skip:
    ;
} while ((c = c1) != ']');

....
IsErr:priority 4639
at location src/dfa.c:1070
--src file: src/dfa.c
fragment 0:
if (!(__abst_hole(c, syntax_bits, c1, prednames[c1].name, prednames[c1].pred, c2, invert, lexptr, lexleft, lasttok, laststart, backslash, hard_lc_collate, case_fold, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
        for (c1 = 0; prednames[c1].name; ++c1) 
            if (looking_at(prednames[c1].name)) {
                int (*pred)(int) = prednames[c1].pred;
                for (c2 = 0; c2 < (1 << 8); ++c2) 
                    if ((*pred)(c2))
                        setbit_case_fold(c2, ccl);
                lexptr += strlen(prednames[c1].name);
                lexleft -= strlen(prednames[c1].name);
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unbalanced [", 5));
                        else
                            return lasttok = end;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                goto skip;
            }

....
Skipping error ifguard:Priority 4639
At location src/dfa.c:1070
--Src File: src/dfa.c
Fragment 0:
if (!(__abst_hole(c, syntax_bits, c1, prednames[c1].name, prednames[c1].pred, c2, invert, lexptr, lexleft, lasttok, laststart, backslash, hard_LC_COLLATE, case_fold, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
        for (c1 = 0; prednames[c1].name; ++c1) 
            if (looking_at(prednames[c1].name)) {
                int (*pred)(int) = prednames[c1].pred;
                for (c2 = 0; c2 < (1 << 8); ++c2) 
                    if ((*pred)(c2))
                        setbit_case_fold(c2, ccl);
                lexptr += strlen(prednames[c1].name);
                lexleft -= strlen(prednames[c1].name);
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
                goto skip;
            }

....
Skipping nonlast:Priority 4639
At location src/dfa.c:1070
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
    for (c1 = 0; prednames[c1].name; ++c1) 
        if (looking_at(prednames[c1].name)) {
            int (*pred)(int) = prednames[c1].pred;
            for (c2 = 0; c2 < (1 << 8); ++c2) 
                if ((*pred)(c2))
                    setbit_case_fold(c2, ccl);
            lexptr += strlen(prednames[c1].name);
            lexleft -= strlen(prednames[c1].name);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            goto skip;
        }

....
Skipping nonlast:Priority 4639
At location src/dfa.c:1070
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
    for (c1 = 0; prednames[c1].name; ++c1) 
        if (looking_at(prednames[c1].name)) {
            int (*pred)(int) = prednames[c1].pred;
            for (c2 = 0; c2 < (1 << 8); ++c2) 
                if ((*pred)(c2))
                    setbit_case_fold(c2, ccl);
            lexptr += strlen(prednames[c1].name);
            lexleft -= strlen(prednames[c1].name);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            goto skip;
        }

....
Skipping nonlast:Priority 4639
At location src/dfa.c:1070
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
    for (c1 = 0; prednames[c1].name; ++c1) 
        if (looking_at(prednames[c1].name)) {
            int (*pred)(int) = prednames[c1].pred;
            for (c2 = 0; c2 < (1 << 8); ++c2) 
                if ((*pred)(c2))
                    setbit_case_fold(c2, ccl);
            lexptr += strlen(prednames[c1].name);
            lexleft -= strlen(prednames[c1].name);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            goto skip;
        }

....
Skipping nonlast:Priority 4639
At location src/dfa.c:1070
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGLINE;
if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
    for (c1 = 0; prednames[c1].name; ++c1) 
        if (looking_at(prednames[c1].name)) {
            int (*pred)(int) = prednames[c1].pred;
            for (c2 = 0; c2 < (1 << 8); ++c2) 
                if ((*pred)(c2))
                    setbit_case_fold(c2, ccl);
            lexptr += strlen(prednames[c1].name);
            lexleft -= strlen(prednames[c1].name);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            goto skip;
        }

....
Skipping nonlast:Priority 4639
At location src/dfa.c:1070
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGWORD;
if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
    for (c1 = 0; prednames[c1].name; ++c1) 
        if (looking_at(prednames[c1].name)) {
            int (*pred)(int) = prednames[c1].pred;
            for (c2 = 0; c2 < (1 << 8); ++c2) 
                if ((*pred)(c2))
                    setbit_case_fold(c2, ccl);
            lexptr += strlen(prednames[c1].name);
            lexleft -= strlen(prednames[c1].name);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            goto skip;
        }

....
Skipping nonlast:Priority 4639
At location src/dfa.c:1070
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDLINE;
if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
    for (c1 = 0; prednames[c1].name; ++c1) 
        if (looking_at(prednames[c1].name)) {
            int (*pred)(int) = prednames[c1].pred;
            for (c2 = 0; c2 < (1 << 8); ++c2) 
                if ((*pred)(c2))
                    setbit_case_fold(c2, ccl);
            lexptr += strlen(prednames[c1].name);
            lexleft -= strlen(prednames[c1].name);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            goto skip;
        }

....
Skipping nonlast:Priority 4639
At location src/dfa.c:1070
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDWORD;
if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
    for (c1 = 0; prednames[c1].name; ++c1) 
        if (looking_at(prednames[c1].name)) {
            int (*pred)(int) = prednames[c1].pred;
            for (c2 = 0; c2 < (1 << 8); ++c2) 
                if ((*pred)(c2))
                    setbit_case_fold(c2, ccl);
            lexptr += strlen(prednames[c1].name);
            lexleft -= strlen(prednames[c1].name);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            goto skip;
        }

....
Skipping nonlast:Priority 4639
At location src/dfa.c:1070
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = LIMWORD;
if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
    for (c1 = 0; prednames[c1].name; ++c1) 
        if (looking_at(prednames[c1].name)) {
            int (*pred)(int) = prednames[c1].pred;
            for (c2 = 0; c2 < (1 << 8); ++c2) 
                if ((*pred)(c2))
                    setbit_case_fold(c2, ccl);
            lexptr += strlen(prednames[c1].name);
            lexleft -= strlen(prednames[c1].name);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            goto skip;
        }

....
Skipping nonlast:Priority 4639
At location src/dfa.c:1070
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = NOTLIMWORD;
if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
    for (c1 = 0; prednames[c1].name; ++c1) 
        if (looking_at(prednames[c1].name)) {
            int (*pred)(int) = prednames[c1].pred;
            for (c2 = 0; c2 < (1 << 8); ++c2) 
                if ((*pred)(c2))
                    setbit_case_fold(c2, ccl);
            lexptr += strlen(prednames[c1].name);
            lexleft -= strlen(prednames[c1].name);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            goto skip;
        }

....
Skipping nonlast:Priority 4639
At location src/dfa.c:1070
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    laststart = 0;
    return lasttok = BACKREF;
}
if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
    for (c1 = 0; prednames[c1].name; ++c1) 
        if (looking_at(prednames[c1].name)) {
            int (*pred)(int) = prednames[c1].pred;
            for (c2 = 0; c2 < (1 << 8); ++c2) 
                if ((*pred)(c2))
                    setbit_case_fold(c2, ccl);
            lexptr += strlen(prednames[c1].name);
            lexleft -= strlen(prednames[c1].name);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            goto skip;
        }

....
Skipping nonlast:Priority 4639
At location src/dfa.c:1070
--Src File: src/dfa.c
Fragment 0:
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}
if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
    for (c1 = 0; prednames[c1].name; ++c1) 
        if (looking_at(prednames[c1].name)) {
            int (*pred)(int) = prednames[c1].pred;
            for (c2 = 0; c2 < (1 << 8); ++c2) 
                if ((*pred)(c2))
                    setbit_case_fold(c2, ccl);
            lexptr += strlen(prednames[c1].name);
            lexleft -= strlen(prednames[c1].name);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            goto skip;
        }

....
Skipping nonlast:Priority 4639
At location src/dfa.c:1070
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
    for (c1 = 0; prednames[c1].name; ++c1) 
        if (looking_at(prednames[c1].name)) {
            int (*pred)(int) = prednames[c1].pred;
            for (c2 = 0; c2 < (1 << 8); ++c2) 
                if ((*pred)(c2))
                    setbit_case_fold(c2, ccl);
            lexptr += strlen(prednames[c1].name);
            lexleft -= strlen(prednames[c1].name);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            goto skip;
        }

....
Skipping nonlast:Priority 4639
At location src/dfa.c:1070
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
    for (c1 = 0; prednames[c1].name; ++c1) 
        if (looking_at(prednames[c1].name)) {
            int (*pred)(int) = prednames[c1].pred;
            for (c2 = 0; c2 < (1 << 8); ++c2) 
                if ((*pred)(c2))
                    setbit_case_fold(c2, ccl);
            lexptr += strlen(prednames[c1].name);
            lexleft -= strlen(prednames[c1].name);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            goto skip;
        }

....
Skipping nonlast:Priority 4639
At location src/dfa.c:1070
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
    for (c1 = 0; prednames[c1].name; ++c1) 
        if (looking_at(prednames[c1].name)) {
            int (*pred)(int) = prednames[c1].pred;
            for (c2 = 0; c2 < (1 << 8); ++c2) 
                if ((*pred)(c2))
                    setbit_case_fold(c2, ccl);
            lexptr += strlen(prednames[c1].name);
            lexleft -= strlen(prednames[c1].name);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            goto skip;
        }

....
Skipping nonlast addifexit:Priority 8389
At location src/dfa.c:1070
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, syntax_bits, c1, prednames[c1].name, prednames[c1].pred, c2, invert, lexptr, lexleft, lasttok, laststart, backslash, hard_LC_COLLATE, case_fold, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return -128;
if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
    for (c1 = 0; prednames[c1].name; ++c1) 
        if (looking_at(prednames[c1].name)) {
            int (*pred)(int) = prednames[c1].pred;
            for (c2 = 0; c2 < (1 << 8); ++c2) 
                if ((*pred)(c2))
                    setbit_case_fold(c2, ccl);
            lexptr += strlen(prednames[c1].name);
            lexleft -= strlen(prednames[c1].name);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            goto skip;
        }

....
Skipping nonlast addifexit:Priority 8389
At location src/dfa.c:1070
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, syntax_bits, c1, prednames[c1].name, prednames[c1].pred, c2, invert, lexptr, lexleft, lasttok, laststart, backslash, hard_LC_COLLATE, case_fold, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return -1;
if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
    for (c1 = 0; prednames[c1].name; ++c1) 
        if (looking_at(prednames[c1].name)) {
            int (*pred)(int) = prednames[c1].pred;
            for (c2 = 0; c2 < (1 << 8); ++c2) 
                if ((*pred)(c2))
                    setbit_case_fold(c2, ccl);
            lexptr += strlen(prednames[c1].name);
            lexleft -= strlen(prednames[c1].name);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            goto skip;
        }

....
Skipping nonlast addifexit:Priority 8389
At location src/dfa.c:1070
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, syntax_bits, c1, prednames[c1].name, prednames[c1].pred, c2, invert, lexptr, lexleft, lasttok, laststart, backslash, hard_LC_COLLATE, case_fold, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 0;
if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
    for (c1 = 0; prednames[c1].name; ++c1) 
        if (looking_at(prednames[c1].name)) {
            int (*pred)(int) = prednames[c1].pred;
            for (c2 = 0; c2 < (1 << 8); ++c2) 
                if ((*pred)(c2))
                    setbit_case_fold(c2, ccl);
            lexptr += strlen(prednames[c1].name);
            lexleft -= strlen(prednames[c1].name);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            goto skip;
        }

....
Skipping nonlast addifexit:Priority 8389
At location src/dfa.c:1070
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, syntax_bits, c1, prednames[c1].name, prednames[c1].pred, c2, invert, lexptr, lexleft, lasttok, laststart, backslash, hard_LC_COLLATE, case_fold, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 1;
if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
    for (c1 = 0; prednames[c1].name; ++c1) 
        if (looking_at(prednames[c1].name)) {
            int (*pred)(int) = prednames[c1].pred;
            for (c2 = 0; c2 < (1 << 8); ++c2) 
                if ((*pred)(c2))
                    setbit_case_fold(c2, ccl);
            lexptr += strlen(prednames[c1].name);
            lexleft -= strlen(prednames[c1].name);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            goto skip;
        }

....
Skipping nonlast addifexit:Priority 8389
At location src/dfa.c:1070
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, syntax_bits, c1, prednames[c1].name, prednames[c1].pred, c2, invert, lexptr, lexleft, lasttok, laststart, backslash, hard_LC_COLLATE, case_fold, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 2;
if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
    for (c1 = 0; prednames[c1].name; ++c1) 
        if (looking_at(prednames[c1].name)) {
            int (*pred)(int) = prednames[c1].pred;
            for (c2 = 0; c2 < (1 << 8); ++c2) 
                if ((*pred)(c2))
                    setbit_case_fold(c2, ccl);
            lexptr += strlen(prednames[c1].name);
            lexleft -= strlen(prednames[c1].name);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            goto skip;
        }

....
Skipping nonlast addifexit:Priority 8389
At location src/dfa.c:1070
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, syntax_bits, c1, prednames[c1].name, prednames[c1].pred, c2, invert, lexptr, lexleft, lasttok, laststart, backslash, hard_LC_COLLATE, case_fold, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 5;
if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
    for (c1 = 0; prednames[c1].name; ++c1) 
        if (looking_at(prednames[c1].name)) {
            int (*pred)(int) = prednames[c1].pred;
            for (c2 = 0; c2 < (1 << 8); ++c2) 
                if ((*pred)(c2))
                    setbit_case_fold(c2, ccl);
            lexptr += strlen(prednames[c1].name);
            lexleft -= strlen(prednames[c1].name);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            goto skip;
        }

....
Skipping nonlast addifexit:Priority 8389
At location src/dfa.c:1070
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, syntax_bits, c1, prednames[c1].name, prednames[c1].pred, c2, invert, lexptr, lexleft, lasttok, laststart, backslash, hard_LC_COLLATE, case_fold, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 8;
if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
    for (c1 = 0; prednames[c1].name; ++c1) 
        if (looking_at(prednames[c1].name)) {
            int (*pred)(int) = prednames[c1].pred;
            for (c2 = 0; c2 < (1 << 8); ++c2) 
                if ((*pred)(c2))
                    setbit_case_fold(c2, ccl);
            lexptr += strlen(prednames[c1].name);
            lexleft -= strlen(prednames[c1].name);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            goto skip;
        }

....
Skipping nonlast addifexit:Priority 8389
At location src/dfa.c:1070
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, syntax_bits, c1, prednames[c1].name, prednames[c1].pred, c2, invert, lexptr, lexleft, lasttok, laststart, backslash, hard_LC_COLLATE, case_fold, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 9;
if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
    for (c1 = 0; prednames[c1].name; ++c1) 
        if (looking_at(prednames[c1].name)) {
            int (*pred)(int) = prednames[c1].pred;
            for (c2 = 0; c2 < (1 << 8); ++c2) 
                if ((*pred)(c2))
                    setbit_case_fold(c2, ccl);
            lexptr += strlen(prednames[c1].name);
            lexleft -= strlen(prednames[c1].name);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            goto skip;
        }

....
Skipping nonlast addifexit:Priority 8389
At location src/dfa.c:1070
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, syntax_bits, c1, prednames[c1].name, prednames[c1].pred, c2, invert, lexptr, lexleft, lasttok, laststart, backslash, hard_LC_COLLATE, case_fold, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 10;
if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
    for (c1 = 0; prednames[c1].name; ++c1) 
        if (looking_at(prednames[c1].name)) {
            int (*pred)(int) = prednames[c1].pred;
            for (c2 = 0; c2 < (1 << 8); ++c2) 
                if ((*pred)(c2))
                    setbit_case_fold(c2, ccl);
            lexptr += strlen(prednames[c1].name);
            lexleft -= strlen(prednames[c1].name);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            goto skip;
        }

....
Skipping nonlast addifexit:Priority 8389
At location src/dfa.c:1070
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, syntax_bits, c1, prednames[c1].name, prednames[c1].pred, c2, invert, lexptr, lexleft, lasttok, laststart, backslash, hard_LC_COLLATE, case_fold, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 128;
if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
    for (c1 = 0; prednames[c1].name; ++c1) 
        if (looking_at(prednames[c1].name)) {
            int (*pred)(int) = prednames[c1].pred;
            for (c2 = 0; c2 < (1 << 8); ++c2) 
                if ((*pred)(c2))
                    setbit_case_fold(c2, ccl);
            lexptr += strlen(prednames[c1].name);
            lexleft -= strlen(prednames[c1].name);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            goto skip;
        }

....
Skipping nonlast addifexit:Priority 8389
At location src/dfa.c:1070
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, syntax_bits, c1, prednames[c1].name, prednames[c1].pred, c2, invert, lexptr, lexleft, lasttok, laststart, backslash, hard_LC_COLLATE, case_fold, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 255;
if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
    for (c1 = 0; prednames[c1].name; ++c1) 
        if (looking_at(prednames[c1].name)) {
            int (*pred)(int) = prednames[c1].pred;
            for (c2 = 0; c2 < (1 << 8); ++c2) 
                if ((*pred)(c2))
                    setbit_case_fold(c2, ccl);
            lexptr += strlen(prednames[c1].name);
            lexleft -= strlen(prednames[c1].name);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            goto skip;
        }

....
Skipping nonlast addifexit:Priority 8389
At location src/dfa.c:1070
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, syntax_bits, c1, prednames[c1].name, prednames[c1].pred, c2, invert, lexptr, lexleft, lasttok, laststart, backslash, hard_LC_COLLATE, case_fold, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 256;
if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
    for (c1 = 0; prednames[c1].name; ++c1) 
        if (looking_at(prednames[c1].name)) {
            int (*pred)(int) = prednames[c1].pred;
            for (c2 = 0; c2 < (1 << 8); ++c2) 
                if ((*pred)(c2))
                    setbit_case_fold(c2, ccl);
            lexptr += strlen(prednames[c1].name);
            lexleft -= strlen(prednames[c1].name);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            goto skip;
        }

....
Skipping nonlast addifexit:Priority 8389
At location src/dfa.c:1070
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, syntax_bits, c1, prednames[c1].name, prednames[c1].pred, c2, invert, lexptr, lexleft, lasttok, laststart, backslash, hard_LC_COLLATE, case_fold, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 32767;
if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
    for (c1 = 0; prednames[c1].name; ++c1) 
        if (looking_at(prednames[c1].name)) {
            int (*pred)(int) = prednames[c1].pred;
            for (c2 = 0; c2 < (1 << 8); ++c2) 
                if ((*pred)(c2))
                    setbit_case_fold(c2, ccl);
            lexptr += strlen(prednames[c1].name);
            lexleft -= strlen(prednames[c1].name);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            goto skip;
        }

....
Skipping nonlast addifexit:Priority 8389
At location src/dfa.c:1070
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, syntax_bits, c1, prednames[c1].name, prednames[c1].pred, c2, invert, lexptr, lexleft, lasttok, laststart, backslash, hard_LC_COLLATE, case_fold, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    break;
if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
    for (c1 = 0; prednames[c1].name; ++c1) 
        if (looking_at(prednames[c1].name)) {
            int (*pred)(int) = prednames[c1].pred;
            for (c2 = 0; c2 < (1 << 8); ++c2) 
                if ((*pred)(c2))
                    setbit_case_fold(c2, ccl);
            lexptr += strlen(prednames[c1].name);
            lexleft -= strlen(prednames[c1].name);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            goto skip;
        }

....
Skipping nonlast addifexit:Priority 8589
At location src/dfa.c:1070
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, syntax_bits, c1, prednames[c1].name, prednames[c1].pred, c2, invert, lexptr, lexleft, lasttok, laststart, backslash, hard_LC_COLLATE, case_fold, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    goto skip;
if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
    for (c1 = 0; prednames[c1].name; ++c1) 
        if (looking_at(prednames[c1].name)) {
            int (*pred)(int) = prednames[c1].pred;
            for (c2 = 0; c2 < (1 << 8); ++c2) 
                if ((*pred)(c2))
                    setbit_case_fold(c2, ccl);
            lexptr += strlen(prednames[c1].name);
            lexleft -= strlen(prednames[c1].name);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            goto skip;
        }

....
Skipping nonlast addifexit:Priority 8589
At location src/dfa.c:1070
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, syntax_bits, c1, prednames[c1].name, prednames[c1].pred, c2, invert, lexptr, lexleft, lasttok, laststart, backslash, hard_LC_COLLATE, case_fold, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    goto normal_char;
if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
    for (c1 = 0; prednames[c1].name; ++c1) 
        if (looking_at(prednames[c1].name)) {
            int (*pred)(int) = prednames[c1].pred;
            for (c2 = 0; c2 < (1 << 8); ++c2) 
                if ((*pred)(c2))
                    setbit_case_fold(c2, ccl);
            lexptr += strlen(prednames[c1].name);
            lexleft -= strlen(prednames[c1].name);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            goto skip;
        }

....
IsErr:priority 4824
at location src/dfa.c:1084
--src file: src/dfa.c
fragment 0:
if (!(__abst_hole(c, syntax_bits, lexptr, lexleft, lasttok, c1, c2, hard_lc_collate, invert, case_fold, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    if (c == '\\' && (syntax_bits & ((unsigned long)1)))
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unbalanced [", 5));
                else
                    return lasttok = end;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);

....
Skipping error ifguard:Priority 4824
At location src/dfa.c:1084
--Src File: src/dfa.c
Fragment 0:
if (!(__abst_hole(c, syntax_bits, lexptr, lexleft, lasttok, c1, c2, hard_LC_COLLATE, invert, case_fold, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    if (c == '\\' && (syntax_bits & ((unsigned long)1)))
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);

....
Skipping nonlast:Priority -176
At location src/dfa.c:1084
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (c == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast:Priority -176
At location src/dfa.c:1084
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (c == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast:Priority -176
At location src/dfa.c:1084
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if (c == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast:Priority -176
At location src/dfa.c:1084
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGLINE;
if (c == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast:Priority -176
At location src/dfa.c:1084
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGWORD;
if (c == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast:Priority -176
At location src/dfa.c:1084
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDLINE;
if (c == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast:Priority -176
At location src/dfa.c:1084
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDWORD;
if (c == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast:Priority -176
At location src/dfa.c:1084
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = LIMWORD;
if (c == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast:Priority -176
At location src/dfa.c:1084
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = NOTLIMWORD;
if (c == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast:Priority -176
At location src/dfa.c:1084
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    laststart = 0;
    return lasttok = BACKREF;
}
if (c == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast:Priority -176
At location src/dfa.c:1084
--Src File: src/dfa.c
Fragment 0:
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}
if (c == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast:Priority -176
At location src/dfa.c:1084
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (c == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast:Priority -176
At location src/dfa.c:1084
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (c == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast:Priority -176
At location src/dfa.c:1084
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (c == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast addifexit:Priority 3574
At location src/dfa.c:1084
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, syntax_bits, lexptr, lexleft, lasttok, c1, c2, hard_LC_COLLATE, invert, case_fold, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return -128;
if (c == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast addifexit:Priority 3574
At location src/dfa.c:1084
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, syntax_bits, lexptr, lexleft, lasttok, c1, c2, hard_LC_COLLATE, invert, case_fold, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return -1;
if (c == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast addifexit:Priority 3574
At location src/dfa.c:1084
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, syntax_bits, lexptr, lexleft, lasttok, c1, c2, hard_LC_COLLATE, invert, case_fold, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 0;
if (c == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast addifexit:Priority 3574
At location src/dfa.c:1084
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, syntax_bits, lexptr, lexleft, lasttok, c1, c2, hard_LC_COLLATE, invert, case_fold, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 1;
if (c == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast addifexit:Priority 3574
At location src/dfa.c:1084
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, syntax_bits, lexptr, lexleft, lasttok, c1, c2, hard_LC_COLLATE, invert, case_fold, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 2;
if (c == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast addifexit:Priority 3574
At location src/dfa.c:1084
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, syntax_bits, lexptr, lexleft, lasttok, c1, c2, hard_LC_COLLATE, invert, case_fold, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 5;
if (c == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast addifexit:Priority 3574
At location src/dfa.c:1084
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, syntax_bits, lexptr, lexleft, lasttok, c1, c2, hard_LC_COLLATE, invert, case_fold, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 8;
if (c == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast addifexit:Priority 3574
At location src/dfa.c:1084
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, syntax_bits, lexptr, lexleft, lasttok, c1, c2, hard_LC_COLLATE, invert, case_fold, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 9;
if (c == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast addifexit:Priority 3574
At location src/dfa.c:1084
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, syntax_bits, lexptr, lexleft, lasttok, c1, c2, hard_LC_COLLATE, invert, case_fold, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 10;
if (c == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast addifexit:Priority 3574
At location src/dfa.c:1084
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, syntax_bits, lexptr, lexleft, lasttok, c1, c2, hard_LC_COLLATE, invert, case_fold, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 128;
if (c == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast addifexit:Priority 3574
At location src/dfa.c:1084
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, syntax_bits, lexptr, lexleft, lasttok, c1, c2, hard_LC_COLLATE, invert, case_fold, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 255;
if (c == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast addifexit:Priority 3574
At location src/dfa.c:1084
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, syntax_bits, lexptr, lexleft, lasttok, c1, c2, hard_LC_COLLATE, invert, case_fold, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 256;
if (c == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast addifexit:Priority 3574
At location src/dfa.c:1084
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, syntax_bits, lexptr, lexleft, lasttok, c1, c2, hard_LC_COLLATE, invert, case_fold, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 32767;
if (c == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast addifexit:Priority 3574
At location src/dfa.c:1084
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, syntax_bits, lexptr, lexleft, lasttok, c1, c2, hard_LC_COLLATE, invert, case_fold, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    break;
if (c == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast addifexit:Priority 3774
At location src/dfa.c:1084
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, syntax_bits, lexptr, lexleft, lasttok, c1, c2, hard_LC_COLLATE, invert, case_fold, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    goto skip;
if (c == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast addifexit:Priority 3774
At location src/dfa.c:1084
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, syntax_bits, lexptr, lexleft, lasttok, c1, c2, hard_LC_COLLATE, invert, case_fold, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    goto normal_char;
if (c == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast:Priority -175
At location src/dfa.c:1086
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority -175
At location src/dfa.c:1086
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority -175
At location src/dfa.c:1086
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority -175
At location src/dfa.c:1086
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGLINE;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority -175
At location src/dfa.c:1086
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGWORD;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority -175
At location src/dfa.c:1086
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDLINE;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority -175
At location src/dfa.c:1086
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDWORD;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority -175
At location src/dfa.c:1086
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = LIMWORD;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority -175
At location src/dfa.c:1086
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = NOTLIMWORD;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority -175
At location src/dfa.c:1086
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    laststart = 0;
    return lasttok = BACKREF;
}
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority -175
At location src/dfa.c:1086
--Src File: src/dfa.c
Fragment 0:
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority -175
At location src/dfa.c:1086
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority -175
At location src/dfa.c:1086
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority -175
At location src/dfa.c:1086
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 4825
At location src/dfa.c:1086
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c1, lexptr, lexleft, lasttok, c, syntax_bits, c2, hard_LC_COLLATE, case_fold, invert, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return -128;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 4825
At location src/dfa.c:1086
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c1, lexptr, lexleft, lasttok, c, syntax_bits, c2, hard_LC_COLLATE, case_fold, invert, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return -1;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 4825
At location src/dfa.c:1086
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c1, lexptr, lexleft, lasttok, c, syntax_bits, c2, hard_LC_COLLATE, case_fold, invert, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 0;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 4825
At location src/dfa.c:1086
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c1, lexptr, lexleft, lasttok, c, syntax_bits, c2, hard_LC_COLLATE, case_fold, invert, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 1;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 4825
At location src/dfa.c:1086
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c1, lexptr, lexleft, lasttok, c, syntax_bits, c2, hard_LC_COLLATE, case_fold, invert, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 2;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 4825
At location src/dfa.c:1086
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c1, lexptr, lexleft, lasttok, c, syntax_bits, c2, hard_LC_COLLATE, case_fold, invert, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 5;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 4825
At location src/dfa.c:1086
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c1, lexptr, lexleft, lasttok, c, syntax_bits, c2, hard_LC_COLLATE, case_fold, invert, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 8;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 4825
At location src/dfa.c:1086
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c1, lexptr, lexleft, lasttok, c, syntax_bits, c2, hard_LC_COLLATE, case_fold, invert, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 9;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 4825
At location src/dfa.c:1086
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c1, lexptr, lexleft, lasttok, c, syntax_bits, c2, hard_LC_COLLATE, case_fold, invert, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 10;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 4825
At location src/dfa.c:1086
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c1, lexptr, lexleft, lasttok, c, syntax_bits, c2, hard_LC_COLLATE, case_fold, invert, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 128;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 4825
At location src/dfa.c:1086
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c1, lexptr, lexleft, lasttok, c, syntax_bits, c2, hard_LC_COLLATE, case_fold, invert, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 255;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 4825
At location src/dfa.c:1086
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c1, lexptr, lexleft, lasttok, c, syntax_bits, c2, hard_LC_COLLATE, case_fold, invert, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 256;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 4825
At location src/dfa.c:1086
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c1, lexptr, lexleft, lasttok, c, syntax_bits, c2, hard_LC_COLLATE, case_fold, invert, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 32767;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 4825
At location src/dfa.c:1086
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c1, lexptr, lexleft, lasttok, c, syntax_bits, c2, hard_LC_COLLATE, case_fold, invert, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    break;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 5025
At location src/dfa.c:1086
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c1, lexptr, lexleft, lasttok, c, syntax_bits, c2, hard_LC_COLLATE, case_fold, invert, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    goto skip;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 5025
At location src/dfa.c:1086
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c1, lexptr, lexleft, lasttok, c, syntax_bits, c2, hard_LC_COLLATE, case_fold, invert, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    goto normal_char;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
IsErr:priority 4830
at location src/dfa.c:1087
--src file: src/dfa.c
fragment 0:
if (!(__abst_hole(c1, lexptr, lexleft, lasttok, c, c2, syntax_bits, hard_lc_collate, case_fold, invert, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    if (c1 == '-') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unbalanced [", 5));
                else
                    return lasttok = end;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c2) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c2 == ']') {
            --lexptr;
            ++lexleft;
        } else {
            if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unbalanced [", 5));
                        else
                            return lasttok = end;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            c1 = c;
            if (!hard_lc_collate)
                for (c = c1; c <= c2; c++) 
                    setbit_case_fold(c, ccl);
            else {
                if (case_fold) {
                    c1 = (__extension__ ({
                        int __res;
                        if (sizeof (c1) > 1) {
                            if (__builtin_constant_p(c1)) {
                                int __c = (c1);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c1);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c1)];
                        __res;
                    }));
                    c2 = (__extension__ ({
                        int __res;
                        if (sizeof (c2) > 1) {
                            if (__builtin_constant_p(c2)) {
                                int __c = (c2);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c2);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c2)];
                        __res;
                    }));
                }
                for (c = 0; c < (1 << 8); ++c) 
                    if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_isupper)) && in_coll_range(c, c1, c2))
                        setbit_case_fold(c, ccl);
            }
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unbalanced [", 5));
                    else
                        return lasttok = end;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            continue;
        }
    }

....
Skipping error ifguard:Priority 4830
At location src/dfa.c:1087
--Src File: src/dfa.c
Fragment 0:
if (!(__abst_hole(c1, lexptr, lexleft, lasttok, c, c2, syntax_bits, hard_LC_COLLATE, case_fold, invert, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    if (c1 == '-') {
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c2) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        if (c2 == ']') {
            --lexptr;
            ++lexleft;
        } else {
            if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
                do {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                } while (0);
            c1 = c;
            if (!hard_LC_COLLATE)
                for (c = c1; c <= c2; c++) 
                    setbit_case_fold(c, ccl);
            else {
                if (case_fold) {
                    c1 = (__extension__ ({
                        int __res;
                        if (sizeof (c1) > 1) {
                            if (__builtin_constant_p(c1)) {
                                int __c = (c1);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c1);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c1)];
                        __res;
                    }));
                    c2 = (__extension__ ({
                        int __res;
                        if (sizeof (c2) > 1) {
                            if (__builtin_constant_p(c2)) {
                                int __c = (c2);
                                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                            } else
                                __res = tolower(c2);
                        } else
                            __res = (*__ctype_tolower_loc())[(int)(c2)];
                        __res;
                    }));
                }
                for (c = 0; c < (1 << 8); ++c) 
                    if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                        setbit_case_fold(c, ccl);
            }
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            continue;
        }
    }

....
Skipping nonlast:Priority -170
At location src/dfa.c:1087
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (c1 == '-') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c2 == ']') {
        --lexptr;
        ++lexleft;
    } else {
        if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        c1 = c;
        if (!hard_LC_COLLATE)
            for (c = c1; c <= c2; c++) 
                setbit_case_fold(c, ccl);
        else {
            if (case_fold) {
                c1 = (__extension__ ({
                    int __res;
                    if (sizeof (c1) > 1) {
                        if (__builtin_constant_p(c1)) {
                            int __c = (c1);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c1);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c1)];
                    __res;
                }));
                c2 = (__extension__ ({
                    int __res;
                    if (sizeof (c2) > 1) {
                        if (__builtin_constant_p(c2)) {
                            int __c = (c2);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c2);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c2)];
                    __res;
                }));
            }
            for (c = 0; c < (1 << 8); ++c) 
                if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                    setbit_case_fold(c, ccl);
        }
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        continue;
    }
}

....
Skipping nonlast:Priority -170
At location src/dfa.c:1087
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (c1 == '-') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c2 == ']') {
        --lexptr;
        ++lexleft;
    } else {
        if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        c1 = c;
        if (!hard_LC_COLLATE)
            for (c = c1; c <= c2; c++) 
                setbit_case_fold(c, ccl);
        else {
            if (case_fold) {
                c1 = (__extension__ ({
                    int __res;
                    if (sizeof (c1) > 1) {
                        if (__builtin_constant_p(c1)) {
                            int __c = (c1);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c1);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c1)];
                    __res;
                }));
                c2 = (__extension__ ({
                    int __res;
                    if (sizeof (c2) > 1) {
                        if (__builtin_constant_p(c2)) {
                            int __c = (c2);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c2);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c2)];
                    __res;
                }));
            }
            for (c = 0; c < (1 << 8); ++c) 
                if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                    setbit_case_fold(c, ccl);
        }
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        continue;
    }
}

....
Skipping nonlast:Priority -170
At location src/dfa.c:1087
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if (c1 == '-') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c2 == ']') {
        --lexptr;
        ++lexleft;
    } else {
        if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        c1 = c;
        if (!hard_LC_COLLATE)
            for (c = c1; c <= c2; c++) 
                setbit_case_fold(c, ccl);
        else {
            if (case_fold) {
                c1 = (__extension__ ({
                    int __res;
                    if (sizeof (c1) > 1) {
                        if (__builtin_constant_p(c1)) {
                            int __c = (c1);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c1);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c1)];
                    __res;
                }));
                c2 = (__extension__ ({
                    int __res;
                    if (sizeof (c2) > 1) {
                        if (__builtin_constant_p(c2)) {
                            int __c = (c2);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c2);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c2)];
                    __res;
                }));
            }
            for (c = 0; c < (1 << 8); ++c) 
                if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                    setbit_case_fold(c, ccl);
        }
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        continue;
    }
}

....
Skipping nonlast:Priority -170
At location src/dfa.c:1087
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGLINE;
if (c1 == '-') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c2 == ']') {
        --lexptr;
        ++lexleft;
    } else {
        if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        c1 = c;
        if (!hard_LC_COLLATE)
            for (c = c1; c <= c2; c++) 
                setbit_case_fold(c, ccl);
        else {
            if (case_fold) {
                c1 = (__extension__ ({
                    int __res;
                    if (sizeof (c1) > 1) {
                        if (__builtin_constant_p(c1)) {
                            int __c = (c1);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c1);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c1)];
                    __res;
                }));
                c2 = (__extension__ ({
                    int __res;
                    if (sizeof (c2) > 1) {
                        if (__builtin_constant_p(c2)) {
                            int __c = (c2);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c2);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c2)];
                    __res;
                }));
            }
            for (c = 0; c < (1 << 8); ++c) 
                if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                    setbit_case_fold(c, ccl);
        }
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        continue;
    }
}

....
Skipping nonlast:Priority -170
At location src/dfa.c:1087
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGWORD;
if (c1 == '-') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c2 == ']') {
        --lexptr;
        ++lexleft;
    } else {
        if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        c1 = c;
        if (!hard_LC_COLLATE)
            for (c = c1; c <= c2; c++) 
                setbit_case_fold(c, ccl);
        else {
            if (case_fold) {
                c1 = (__extension__ ({
                    int __res;
                    if (sizeof (c1) > 1) {
                        if (__builtin_constant_p(c1)) {
                            int __c = (c1);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c1);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c1)];
                    __res;
                }));
                c2 = (__extension__ ({
                    int __res;
                    if (sizeof (c2) > 1) {
                        if (__builtin_constant_p(c2)) {
                            int __c = (c2);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c2);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c2)];
                    __res;
                }));
            }
            for (c = 0; c < (1 << 8); ++c) 
                if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                    setbit_case_fold(c, ccl);
        }
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        continue;
    }
}

....
Skipping nonlast:Priority -170
At location src/dfa.c:1087
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDLINE;
if (c1 == '-') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c2 == ']') {
        --lexptr;
        ++lexleft;
    } else {
        if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        c1 = c;
        if (!hard_LC_COLLATE)
            for (c = c1; c <= c2; c++) 
                setbit_case_fold(c, ccl);
        else {
            if (case_fold) {
                c1 = (__extension__ ({
                    int __res;
                    if (sizeof (c1) > 1) {
                        if (__builtin_constant_p(c1)) {
                            int __c = (c1);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c1);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c1)];
                    __res;
                }));
                c2 = (__extension__ ({
                    int __res;
                    if (sizeof (c2) > 1) {
                        if (__builtin_constant_p(c2)) {
                            int __c = (c2);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c2);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c2)];
                    __res;
                }));
            }
            for (c = 0; c < (1 << 8); ++c) 
                if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                    setbit_case_fold(c, ccl);
        }
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        continue;
    }
}

....
Skipping nonlast:Priority -170
At location src/dfa.c:1087
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDWORD;
if (c1 == '-') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c2 == ']') {
        --lexptr;
        ++lexleft;
    } else {
        if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        c1 = c;
        if (!hard_LC_COLLATE)
            for (c = c1; c <= c2; c++) 
                setbit_case_fold(c, ccl);
        else {
            if (case_fold) {
                c1 = (__extension__ ({
                    int __res;
                    if (sizeof (c1) > 1) {
                        if (__builtin_constant_p(c1)) {
                            int __c = (c1);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c1);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c1)];
                    __res;
                }));
                c2 = (__extension__ ({
                    int __res;
                    if (sizeof (c2) > 1) {
                        if (__builtin_constant_p(c2)) {
                            int __c = (c2);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c2);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c2)];
                    __res;
                }));
            }
            for (c = 0; c < (1 << 8); ++c) 
                if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                    setbit_case_fold(c, ccl);
        }
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        continue;
    }
}

....
Skipping nonlast:Priority -170
At location src/dfa.c:1087
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = LIMWORD;
if (c1 == '-') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c2 == ']') {
        --lexptr;
        ++lexleft;
    } else {
        if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        c1 = c;
        if (!hard_LC_COLLATE)
            for (c = c1; c <= c2; c++) 
                setbit_case_fold(c, ccl);
        else {
            if (case_fold) {
                c1 = (__extension__ ({
                    int __res;
                    if (sizeof (c1) > 1) {
                        if (__builtin_constant_p(c1)) {
                            int __c = (c1);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c1);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c1)];
                    __res;
                }));
                c2 = (__extension__ ({
                    int __res;
                    if (sizeof (c2) > 1) {
                        if (__builtin_constant_p(c2)) {
                            int __c = (c2);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c2);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c2)];
                    __res;
                }));
            }
            for (c = 0; c < (1 << 8); ++c) 
                if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                    setbit_case_fold(c, ccl);
        }
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        continue;
    }
}

....
Skipping nonlast:Priority -170
At location src/dfa.c:1087
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = NOTLIMWORD;
if (c1 == '-') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c2 == ']') {
        --lexptr;
        ++lexleft;
    } else {
        if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        c1 = c;
        if (!hard_LC_COLLATE)
            for (c = c1; c <= c2; c++) 
                setbit_case_fold(c, ccl);
        else {
            if (case_fold) {
                c1 = (__extension__ ({
                    int __res;
                    if (sizeof (c1) > 1) {
                        if (__builtin_constant_p(c1)) {
                            int __c = (c1);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c1);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c1)];
                    __res;
                }));
                c2 = (__extension__ ({
                    int __res;
                    if (sizeof (c2) > 1) {
                        if (__builtin_constant_p(c2)) {
                            int __c = (c2);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c2);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c2)];
                    __res;
                }));
            }
            for (c = 0; c < (1 << 8); ++c) 
                if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                    setbit_case_fold(c, ccl);
        }
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        continue;
    }
}

....
Skipping nonlast:Priority -170
At location src/dfa.c:1087
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    laststart = 0;
    return lasttok = BACKREF;
}
if (c1 == '-') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c2 == ']') {
        --lexptr;
        ++lexleft;
    } else {
        if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        c1 = c;
        if (!hard_LC_COLLATE)
            for (c = c1; c <= c2; c++) 
                setbit_case_fold(c, ccl);
        else {
            if (case_fold) {
                c1 = (__extension__ ({
                    int __res;
                    if (sizeof (c1) > 1) {
                        if (__builtin_constant_p(c1)) {
                            int __c = (c1);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c1);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c1)];
                    __res;
                }));
                c2 = (__extension__ ({
                    int __res;
                    if (sizeof (c2) > 1) {
                        if (__builtin_constant_p(c2)) {
                            int __c = (c2);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c2);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c2)];
                    __res;
                }));
            }
            for (c = 0; c < (1 << 8); ++c) 
                if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                    setbit_case_fold(c, ccl);
        }
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        continue;
    }
}

....
Skipping nonlast:Priority -170
At location src/dfa.c:1087
--Src File: src/dfa.c
Fragment 0:
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}
if (c1 == '-') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c2 == ']') {
        --lexptr;
        ++lexleft;
    } else {
        if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        c1 = c;
        if (!hard_LC_COLLATE)
            for (c = c1; c <= c2; c++) 
                setbit_case_fold(c, ccl);
        else {
            if (case_fold) {
                c1 = (__extension__ ({
                    int __res;
                    if (sizeof (c1) > 1) {
                        if (__builtin_constant_p(c1)) {
                            int __c = (c1);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c1);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c1)];
                    __res;
                }));
                c2 = (__extension__ ({
                    int __res;
                    if (sizeof (c2) > 1) {
                        if (__builtin_constant_p(c2)) {
                            int __c = (c2);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c2);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c2)];
                    __res;
                }));
            }
            for (c = 0; c < (1 << 8); ++c) 
                if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                    setbit_case_fold(c, ccl);
        }
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        continue;
    }
}

....
Skipping nonlast:Priority -170
At location src/dfa.c:1087
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (c1 == '-') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c2 == ']') {
        --lexptr;
        ++lexleft;
    } else {
        if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        c1 = c;
        if (!hard_LC_COLLATE)
            for (c = c1; c <= c2; c++) 
                setbit_case_fold(c, ccl);
        else {
            if (case_fold) {
                c1 = (__extension__ ({
                    int __res;
                    if (sizeof (c1) > 1) {
                        if (__builtin_constant_p(c1)) {
                            int __c = (c1);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c1);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c1)];
                    __res;
                }));
                c2 = (__extension__ ({
                    int __res;
                    if (sizeof (c2) > 1) {
                        if (__builtin_constant_p(c2)) {
                            int __c = (c2);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c2);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c2)];
                    __res;
                }));
            }
            for (c = 0; c < (1 << 8); ++c) 
                if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                    setbit_case_fold(c, ccl);
        }
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        continue;
    }
}

....
Skipping nonlast:Priority -170
At location src/dfa.c:1087
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (c1 == '-') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c2 == ']') {
        --lexptr;
        ++lexleft;
    } else {
        if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        c1 = c;
        if (!hard_LC_COLLATE)
            for (c = c1; c <= c2; c++) 
                setbit_case_fold(c, ccl);
        else {
            if (case_fold) {
                c1 = (__extension__ ({
                    int __res;
                    if (sizeof (c1) > 1) {
                        if (__builtin_constant_p(c1)) {
                            int __c = (c1);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c1);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c1)];
                    __res;
                }));
                c2 = (__extension__ ({
                    int __res;
                    if (sizeof (c2) > 1) {
                        if (__builtin_constant_p(c2)) {
                            int __c = (c2);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c2);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c2)];
                    __res;
                }));
            }
            for (c = 0; c < (1 << 8); ++c) 
                if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                    setbit_case_fold(c, ccl);
        }
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        continue;
    }
}

....
Skipping nonlast:Priority -170
At location src/dfa.c:1087
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (c1 == '-') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c2 == ']') {
        --lexptr;
        ++lexleft;
    } else {
        if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        c1 = c;
        if (!hard_LC_COLLATE)
            for (c = c1; c <= c2; c++) 
                setbit_case_fold(c, ccl);
        else {
            if (case_fold) {
                c1 = (__extension__ ({
                    int __res;
                    if (sizeof (c1) > 1) {
                        if (__builtin_constant_p(c1)) {
                            int __c = (c1);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c1);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c1)];
                    __res;
                }));
                c2 = (__extension__ ({
                    int __res;
                    if (sizeof (c2) > 1) {
                        if (__builtin_constant_p(c2)) {
                            int __c = (c2);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c2);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c2)];
                    __res;
                }));
            }
            for (c = 0; c < (1 << 8); ++c) 
                if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                    setbit_case_fold(c, ccl);
        }
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        continue;
    }
}

....
Skipping nonlast addifexit:Priority 3580
At location src/dfa.c:1087
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c1, lexptr, lexleft, lasttok, c, c2, syntax_bits, hard_LC_COLLATE, case_fold, invert, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return -128;
if (c1 == '-') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c2 == ']') {
        --lexptr;
        ++lexleft;
    } else {
        if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        c1 = c;
        if (!hard_LC_COLLATE)
            for (c = c1; c <= c2; c++) 
                setbit_case_fold(c, ccl);
        else {
            if (case_fold) {
                c1 = (__extension__ ({
                    int __res;
                    if (sizeof (c1) > 1) {
                        if (__builtin_constant_p(c1)) {
                            int __c = (c1);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c1);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c1)];
                    __res;
                }));
                c2 = (__extension__ ({
                    int __res;
                    if (sizeof (c2) > 1) {
                        if (__builtin_constant_p(c2)) {
                            int __c = (c2);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c2);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c2)];
                    __res;
                }));
            }
            for (c = 0; c < (1 << 8); ++c) 
                if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                    setbit_case_fold(c, ccl);
        }
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        continue;
    }
}

....
Skipping nonlast addifexit:Priority 3580
At location src/dfa.c:1087
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c1, lexptr, lexleft, lasttok, c, c2, syntax_bits, hard_LC_COLLATE, case_fold, invert, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return -1;
if (c1 == '-') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c2 == ']') {
        --lexptr;
        ++lexleft;
    } else {
        if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        c1 = c;
        if (!hard_LC_COLLATE)
            for (c = c1; c <= c2; c++) 
                setbit_case_fold(c, ccl);
        else {
            if (case_fold) {
                c1 = (__extension__ ({
                    int __res;
                    if (sizeof (c1) > 1) {
                        if (__builtin_constant_p(c1)) {
                            int __c = (c1);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c1);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c1)];
                    __res;
                }));
                c2 = (__extension__ ({
                    int __res;
                    if (sizeof (c2) > 1) {
                        if (__builtin_constant_p(c2)) {
                            int __c = (c2);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c2);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c2)];
                    __res;
                }));
            }
            for (c = 0; c < (1 << 8); ++c) 
                if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                    setbit_case_fold(c, ccl);
        }
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        continue;
    }
}

....
Skipping nonlast addifexit:Priority 3580
At location src/dfa.c:1087
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c1, lexptr, lexleft, lasttok, c, c2, syntax_bits, hard_LC_COLLATE, case_fold, invert, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 0;
if (c1 == '-') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c2 == ']') {
        --lexptr;
        ++lexleft;
    } else {
        if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        c1 = c;
        if (!hard_LC_COLLATE)
            for (c = c1; c <= c2; c++) 
                setbit_case_fold(c, ccl);
        else {
            if (case_fold) {
                c1 = (__extension__ ({
                    int __res;
                    if (sizeof (c1) > 1) {
                        if (__builtin_constant_p(c1)) {
                            int __c = (c1);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c1);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c1)];
                    __res;
                }));
                c2 = (__extension__ ({
                    int __res;
                    if (sizeof (c2) > 1) {
                        if (__builtin_constant_p(c2)) {
                            int __c = (c2);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c2);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c2)];
                    __res;
                }));
            }
            for (c = 0; c < (1 << 8); ++c) 
                if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                    setbit_case_fold(c, ccl);
        }
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        continue;
    }
}

....
Skipping nonlast addifexit:Priority 3580
At location src/dfa.c:1087
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c1, lexptr, lexleft, lasttok, c, c2, syntax_bits, hard_LC_COLLATE, case_fold, invert, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 1;
if (c1 == '-') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c2 == ']') {
        --lexptr;
        ++lexleft;
    } else {
        if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        c1 = c;
        if (!hard_LC_COLLATE)
            for (c = c1; c <= c2; c++) 
                setbit_case_fold(c, ccl);
        else {
            if (case_fold) {
                c1 = (__extension__ ({
                    int __res;
                    if (sizeof (c1) > 1) {
                        if (__builtin_constant_p(c1)) {
                            int __c = (c1);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c1);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c1)];
                    __res;
                }));
                c2 = (__extension__ ({
                    int __res;
                    if (sizeof (c2) > 1) {
                        if (__builtin_constant_p(c2)) {
                            int __c = (c2);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c2);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c2)];
                    __res;
                }));
            }
            for (c = 0; c < (1 << 8); ++c) 
                if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                    setbit_case_fold(c, ccl);
        }
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        continue;
    }
}

....
Skipping nonlast addifexit:Priority 3580
At location src/dfa.c:1087
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c1, lexptr, lexleft, lasttok, c, c2, syntax_bits, hard_LC_COLLATE, case_fold, invert, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 2;
if (c1 == '-') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c2 == ']') {
        --lexptr;
        ++lexleft;
    } else {
        if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        c1 = c;
        if (!hard_LC_COLLATE)
            for (c = c1; c <= c2; c++) 
                setbit_case_fold(c, ccl);
        else {
            if (case_fold) {
                c1 = (__extension__ ({
                    int __res;
                    if (sizeof (c1) > 1) {
                        if (__builtin_constant_p(c1)) {
                            int __c = (c1);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c1);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c1)];
                    __res;
                }));
                c2 = (__extension__ ({
                    int __res;
                    if (sizeof (c2) > 1) {
                        if (__builtin_constant_p(c2)) {
                            int __c = (c2);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c2);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c2)];
                    __res;
                }));
            }
            for (c = 0; c < (1 << 8); ++c) 
                if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                    setbit_case_fold(c, ccl);
        }
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        continue;
    }
}

....
Skipping nonlast addifexit:Priority 3580
At location src/dfa.c:1087
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c1, lexptr, lexleft, lasttok, c, c2, syntax_bits, hard_LC_COLLATE, case_fold, invert, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 5;
if (c1 == '-') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c2 == ']') {
        --lexptr;
        ++lexleft;
    } else {
        if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        c1 = c;
        if (!hard_LC_COLLATE)
            for (c = c1; c <= c2; c++) 
                setbit_case_fold(c, ccl);
        else {
            if (case_fold) {
                c1 = (__extension__ ({
                    int __res;
                    if (sizeof (c1) > 1) {
                        if (__builtin_constant_p(c1)) {
                            int __c = (c1);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c1);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c1)];
                    __res;
                }));
                c2 = (__extension__ ({
                    int __res;
                    if (sizeof (c2) > 1) {
                        if (__builtin_constant_p(c2)) {
                            int __c = (c2);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c2);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c2)];
                    __res;
                }));
            }
            for (c = 0; c < (1 << 8); ++c) 
                if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                    setbit_case_fold(c, ccl);
        }
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        continue;
    }
}

....
Skipping nonlast addifexit:Priority 3580
At location src/dfa.c:1087
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c1, lexptr, lexleft, lasttok, c, c2, syntax_bits, hard_LC_COLLATE, case_fold, invert, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 8;
if (c1 == '-') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c2 == ']') {
        --lexptr;
        ++lexleft;
    } else {
        if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        c1 = c;
        if (!hard_LC_COLLATE)
            for (c = c1; c <= c2; c++) 
                setbit_case_fold(c, ccl);
        else {
            if (case_fold) {
                c1 = (__extension__ ({
                    int __res;
                    if (sizeof (c1) > 1) {
                        if (__builtin_constant_p(c1)) {
                            int __c = (c1);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c1);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c1)];
                    __res;
                }));
                c2 = (__extension__ ({
                    int __res;
                    if (sizeof (c2) > 1) {
                        if (__builtin_constant_p(c2)) {
                            int __c = (c2);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c2);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c2)];
                    __res;
                }));
            }
            for (c = 0; c < (1 << 8); ++c) 
                if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                    setbit_case_fold(c, ccl);
        }
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        continue;
    }
}

....
Skipping nonlast addifexit:Priority 3580
At location src/dfa.c:1087
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c1, lexptr, lexleft, lasttok, c, c2, syntax_bits, hard_LC_COLLATE, case_fold, invert, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 9;
if (c1 == '-') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c2 == ']') {
        --lexptr;
        ++lexleft;
    } else {
        if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        c1 = c;
        if (!hard_LC_COLLATE)
            for (c = c1; c <= c2; c++) 
                setbit_case_fold(c, ccl);
        else {
            if (case_fold) {
                c1 = (__extension__ ({
                    int __res;
                    if (sizeof (c1) > 1) {
                        if (__builtin_constant_p(c1)) {
                            int __c = (c1);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c1);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c1)];
                    __res;
                }));
                c2 = (__extension__ ({
                    int __res;
                    if (sizeof (c2) > 1) {
                        if (__builtin_constant_p(c2)) {
                            int __c = (c2);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c2);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c2)];
                    __res;
                }));
            }
            for (c = 0; c < (1 << 8); ++c) 
                if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                    setbit_case_fold(c, ccl);
        }
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        continue;
    }
}

....
Skipping nonlast addifexit:Priority 3580
At location src/dfa.c:1087
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c1, lexptr, lexleft, lasttok, c, c2, syntax_bits, hard_LC_COLLATE, case_fold, invert, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 10;
if (c1 == '-') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c2 == ']') {
        --lexptr;
        ++lexleft;
    } else {
        if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        c1 = c;
        if (!hard_LC_COLLATE)
            for (c = c1; c <= c2; c++) 
                setbit_case_fold(c, ccl);
        else {
            if (case_fold) {
                c1 = (__extension__ ({
                    int __res;
                    if (sizeof (c1) > 1) {
                        if (__builtin_constant_p(c1)) {
                            int __c = (c1);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c1);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c1)];
                    __res;
                }));
                c2 = (__extension__ ({
                    int __res;
                    if (sizeof (c2) > 1) {
                        if (__builtin_constant_p(c2)) {
                            int __c = (c2);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c2);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c2)];
                    __res;
                }));
            }
            for (c = 0; c < (1 << 8); ++c) 
                if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                    setbit_case_fold(c, ccl);
        }
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        continue;
    }
}

....
Skipping nonlast addifexit:Priority 3580
At location src/dfa.c:1087
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c1, lexptr, lexleft, lasttok, c, c2, syntax_bits, hard_LC_COLLATE, case_fold, invert, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 128;
if (c1 == '-') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c2 == ']') {
        --lexptr;
        ++lexleft;
    } else {
        if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        c1 = c;
        if (!hard_LC_COLLATE)
            for (c = c1; c <= c2; c++) 
                setbit_case_fold(c, ccl);
        else {
            if (case_fold) {
                c1 = (__extension__ ({
                    int __res;
                    if (sizeof (c1) > 1) {
                        if (__builtin_constant_p(c1)) {
                            int __c = (c1);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c1);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c1)];
                    __res;
                }));
                c2 = (__extension__ ({
                    int __res;
                    if (sizeof (c2) > 1) {
                        if (__builtin_constant_p(c2)) {
                            int __c = (c2);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c2);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c2)];
                    __res;
                }));
            }
            for (c = 0; c < (1 << 8); ++c) 
                if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                    setbit_case_fold(c, ccl);
        }
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        continue;
    }
}

....
Skipping nonlast addifexit:Priority 3580
At location src/dfa.c:1087
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c1, lexptr, lexleft, lasttok, c, c2, syntax_bits, hard_LC_COLLATE, case_fold, invert, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 255;
if (c1 == '-') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c2 == ']') {
        --lexptr;
        ++lexleft;
    } else {
        if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        c1 = c;
        if (!hard_LC_COLLATE)
            for (c = c1; c <= c2; c++) 
                setbit_case_fold(c, ccl);
        else {
            if (case_fold) {
                c1 = (__extension__ ({
                    int __res;
                    if (sizeof (c1) > 1) {
                        if (__builtin_constant_p(c1)) {
                            int __c = (c1);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c1);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c1)];
                    __res;
                }));
                c2 = (__extension__ ({
                    int __res;
                    if (sizeof (c2) > 1) {
                        if (__builtin_constant_p(c2)) {
                            int __c = (c2);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c2);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c2)];
                    __res;
                }));
            }
            for (c = 0; c < (1 << 8); ++c) 
                if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                    setbit_case_fold(c, ccl);
        }
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        continue;
    }
}

....
Skipping nonlast addifexit:Priority 3580
At location src/dfa.c:1087
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c1, lexptr, lexleft, lasttok, c, c2, syntax_bits, hard_LC_COLLATE, case_fold, invert, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 256;
if (c1 == '-') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c2 == ']') {
        --lexptr;
        ++lexleft;
    } else {
        if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        c1 = c;
        if (!hard_LC_COLLATE)
            for (c = c1; c <= c2; c++) 
                setbit_case_fold(c, ccl);
        else {
            if (case_fold) {
                c1 = (__extension__ ({
                    int __res;
                    if (sizeof (c1) > 1) {
                        if (__builtin_constant_p(c1)) {
                            int __c = (c1);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c1);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c1)];
                    __res;
                }));
                c2 = (__extension__ ({
                    int __res;
                    if (sizeof (c2) > 1) {
                        if (__builtin_constant_p(c2)) {
                            int __c = (c2);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c2);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c2)];
                    __res;
                }));
            }
            for (c = 0; c < (1 << 8); ++c) 
                if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                    setbit_case_fold(c, ccl);
        }
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        continue;
    }
}

....
Skipping nonlast addifexit:Priority 3580
At location src/dfa.c:1087
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c1, lexptr, lexleft, lasttok, c, c2, syntax_bits, hard_LC_COLLATE, case_fold, invert, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    return 32767;
if (c1 == '-') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c2 == ']') {
        --lexptr;
        ++lexleft;
    } else {
        if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        c1 = c;
        if (!hard_LC_COLLATE)
            for (c = c1; c <= c2; c++) 
                setbit_case_fold(c, ccl);
        else {
            if (case_fold) {
                c1 = (__extension__ ({
                    int __res;
                    if (sizeof (c1) > 1) {
                        if (__builtin_constant_p(c1)) {
                            int __c = (c1);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c1);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c1)];
                    __res;
                }));
                c2 = (__extension__ ({
                    int __res;
                    if (sizeof (c2) > 1) {
                        if (__builtin_constant_p(c2)) {
                            int __c = (c2);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c2);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c2)];
                    __res;
                }));
            }
            for (c = 0; c < (1 << 8); ++c) 
                if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                    setbit_case_fold(c, ccl);
        }
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        continue;
    }
}

....
Skipping nonlast addifexit:Priority 3580
At location src/dfa.c:1087
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c1, lexptr, lexleft, lasttok, c, c2, syntax_bits, hard_LC_COLLATE, case_fold, invert, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    break;
if (c1 == '-') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c2 == ']') {
        --lexptr;
        ++lexleft;
    } else {
        if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        c1 = c;
        if (!hard_LC_COLLATE)
            for (c = c1; c <= c2; c++) 
                setbit_case_fold(c, ccl);
        else {
            if (case_fold) {
                c1 = (__extension__ ({
                    int __res;
                    if (sizeof (c1) > 1) {
                        if (__builtin_constant_p(c1)) {
                            int __c = (c1);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c1);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c1)];
                    __res;
                }));
                c2 = (__extension__ ({
                    int __res;
                    if (sizeof (c2) > 1) {
                        if (__builtin_constant_p(c2)) {
                            int __c = (c2);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c2);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c2)];
                    __res;
                }));
            }
            for (c = 0; c < (1 << 8); ++c) 
                if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                    setbit_case_fold(c, ccl);
        }
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        continue;
    }
}

....
Skipping nonlast addifexit:Priority 3780
At location src/dfa.c:1087
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c1, lexptr, lexleft, lasttok, c, c2, syntax_bits, hard_LC_COLLATE, case_fold, invert, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    goto skip;
if (c1 == '-') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c2 == ']') {
        --lexptr;
        ++lexleft;
    } else {
        if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        c1 = c;
        if (!hard_LC_COLLATE)
            for (c = c1; c <= c2; c++) 
                setbit_case_fold(c, ccl);
        else {
            if (case_fold) {
                c1 = (__extension__ ({
                    int __res;
                    if (sizeof (c1) > 1) {
                        if (__builtin_constant_p(c1)) {
                            int __c = (c1);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c1);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c1)];
                    __res;
                }));
                c2 = (__extension__ ({
                    int __res;
                    if (sizeof (c2) > 1) {
                        if (__builtin_constant_p(c2)) {
                            int __c = (c2);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c2);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c2)];
                    __res;
                }));
            }
            for (c = 0; c < (1 << 8); ++c) 
                if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                    setbit_case_fold(c, ccl);
        }
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        continue;
    }
}

....
Skipping nonlast addifexit:Priority 3780
At location src/dfa.c:1087
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c1, lexptr, lexleft, lasttok, c, c2, syntax_bits, hard_LC_COLLATE, case_fold, invert, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    goto normal_char;
if (c1 == '-') {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c2 == ']') {
        --lexptr;
        ++lexleft;
    } else {
        if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        c1 = c;
        if (!hard_LC_COLLATE)
            for (c = c1; c <= c2; c++) 
                setbit_case_fold(c, ccl);
        else {
            if (case_fold) {
                c1 = (__extension__ ({
                    int __res;
                    if (sizeof (c1) > 1) {
                        if (__builtin_constant_p(c1)) {
                            int __c = (c1);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c1);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c1)];
                    __res;
                }));
                c2 = (__extension__ ({
                    int __res;
                    if (sizeof (c2) > 1) {
                        if (__builtin_constant_p(c2)) {
                            int __c = (c2);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c2);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c2)];
                    __res;
                }));
            }
            for (c = 0; c < (1 << 8); ++c) 
                if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                    setbit_case_fold(c, ccl);
        }
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        continue;
    }
}

....
Skipping nonlast:Priority 4981
At location src/dfa.c:1089
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c2) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority 4981
At location src/dfa.c:1089
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c2) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority 4981
At location src/dfa.c:1089
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c2) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority 4981
At location src/dfa.c:1089
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGLINE;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c2) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority 4981
At location src/dfa.c:1089
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGWORD;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c2) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority 4981
At location src/dfa.c:1089
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDLINE;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c2) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority 4981
At location src/dfa.c:1089
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDWORD;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c2) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority 4981
At location src/dfa.c:1089
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = LIMWORD;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c2) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority 4981
At location src/dfa.c:1089
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = NOTLIMWORD;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c2) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority 4981
At location src/dfa.c:1089
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    laststart = 0;
    return lasttok = BACKREF;
}
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c2) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority 4981
At location src/dfa.c:1089
--Src File: src/dfa.c
Fragment 0:
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c2) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority 4981
At location src/dfa.c:1089
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c2) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority 4981
At location src/dfa.c:1089
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c2) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority 4981
At location src/dfa.c:1089
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c2) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 9981
At location src/dfa.c:1089
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c2, lexptr, lexleft, lasttok, c1, c, syntax_bits, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return -128;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c2) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 9981
At location src/dfa.c:1089
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c2, lexptr, lexleft, lasttok, c1, c, syntax_bits, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return -1;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c2) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 9981
At location src/dfa.c:1089
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c2, lexptr, lexleft, lasttok, c1, c, syntax_bits, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 0;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c2) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 9981
At location src/dfa.c:1089
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c2, lexptr, lexleft, lasttok, c1, c, syntax_bits, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 1;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c2) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 9981
At location src/dfa.c:1089
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c2, lexptr, lexleft, lasttok, c1, c, syntax_bits, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 2;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c2) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 9981
At location src/dfa.c:1089
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c2, lexptr, lexleft, lasttok, c1, c, syntax_bits, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 5;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c2) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 9981
At location src/dfa.c:1089
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c2, lexptr, lexleft, lasttok, c1, c, syntax_bits, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 8;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c2) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 9981
At location src/dfa.c:1089
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c2, lexptr, lexleft, lasttok, c1, c, syntax_bits, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 9;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c2) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 9981
At location src/dfa.c:1089
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c2, lexptr, lexleft, lasttok, c1, c, syntax_bits, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 10;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c2) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 9981
At location src/dfa.c:1089
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c2, lexptr, lexleft, lasttok, c1, c, syntax_bits, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 128;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c2) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 9981
At location src/dfa.c:1089
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c2, lexptr, lexleft, lasttok, c1, c, syntax_bits, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 255;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c2) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 9981
At location src/dfa.c:1089
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c2, lexptr, lexleft, lasttok, c1, c, syntax_bits, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 256;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c2) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 9981
At location src/dfa.c:1089
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c2, lexptr, lexleft, lasttok, c1, c, syntax_bits, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 32767;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c2) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 9981
At location src/dfa.c:1089
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c2, lexptr, lexleft, lasttok, c1, c, syntax_bits, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    break;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c2) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 10181
At location src/dfa.c:1089
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c2, lexptr, lexleft, lasttok, c1, c, syntax_bits, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    goto skip;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c2) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 10181
At location src/dfa.c:1089
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c2, lexptr, lexleft, lasttok, c1, c, syntax_bits, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    goto normal_char;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c2) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
IsErr:priority 4986
at location src/dfa.c:1090
--src file: src/dfa.c
fragment 0:
if (!(__abst_hole(c2, lexptr, lexleft, lasttok, c1, c, syntax_bits, hard_lc_collate, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    if (c2 == ']') {
        --lexptr;
        ++lexleft;
    } else {
        if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unbalanced [", 5));
                    else
                        return lasttok = end;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        c1 = c;
        if (!hard_lc_collate)
            for (c = c1; c <= c2; c++) 
                setbit_case_fold(c, ccl);
        else {
            if (case_fold) {
                c1 = (__extension__ ({
                    int __res;
                    if (sizeof (c1) > 1) {
                        if (__builtin_constant_p(c1)) {
                            int __c = (c1);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c1);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c1)];
                    __res;
                }));
                c2 = (__extension__ ({
                    int __res;
                    if (sizeof (c2) > 1) {
                        if (__builtin_constant_p(c2)) {
                            int __c = (c2);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c2);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c2)];
                    __res;
                }));
            }
            for (c = 0; c < (1 << 8); ++c) 
                if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_isupper)) && in_coll_range(c, c1, c2))
                    setbit_case_fold(c, ccl);
        }
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unbalanced [", 5));
                else
                    return lasttok = end;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        continue;
    }

....
Skipping error ifguard:Priority 4986
At location src/dfa.c:1090
--Src File: src/dfa.c
Fragment 0:
if (!(__abst_hole(c2, lexptr, lexleft, lasttok, c1, c, syntax_bits, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    if (c2 == ']') {
        --lexptr;
        ++lexleft;
    } else {
        if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        c1 = c;
        if (!hard_LC_COLLATE)
            for (c = c1; c <= c2; c++) 
                setbit_case_fold(c, ccl);
        else {
            if (case_fold) {
                c1 = (__extension__ ({
                    int __res;
                    if (sizeof (c1) > 1) {
                        if (__builtin_constant_p(c1)) {
                            int __c = (c1);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c1);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c1)];
                    __res;
                }));
                c2 = (__extension__ ({
                    int __res;
                    if (sizeof (c2) > 1) {
                        if (__builtin_constant_p(c2)) {
                            int __c = (c2);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c2);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c2)];
                    __res;
                }));
            }
            for (c = 0; c < (1 << 8); ++c) 
                if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                    setbit_case_fold(c, ccl);
        }
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        continue;
    }

....
Skipping returnreturn addifexit:Priority 3736
At location src/dfa.c:1090
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c2, lexptr, lexleft, lasttok, c1, c, syntax_bits, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return -128;
if (c2 == ']') {
    --lexptr;
    ++lexleft;
} else {
    if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c2) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    c1 = c;
    if (!hard_LC_COLLATE)
        for (c = c1; c <= c2; c++) 
            setbit_case_fold(c, ccl);
    else {
        if (case_fold) {
            c1 = (__extension__ ({
                int __res;
                if (sizeof (c1) > 1) {
                    if (__builtin_constant_p(c1)) {
                        int __c = (c1);
                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                    } else
                        __res = tolower(c1);
                } else
                    __res = (*__ctype_tolower_loc())[(int)(c1)];
                __res;
            }));
            c2 = (__extension__ ({
                int __res;
                if (sizeof (c2) > 1) {
                    if (__builtin_constant_p(c2)) {
                        int __c = (c2);
                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                    } else
                        __res = tolower(c2);
                } else
                    __res = (*__ctype_tolower_loc())[(int)(c2)];
                __res;
            }));
        }
        for (c = 0; c < (1 << 8); ++c) 
            if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                setbit_case_fold(c, ccl);
    }
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c1) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    continue;
}

....
Skipping returnreturn addifexit:Priority 3736
At location src/dfa.c:1090
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c2, lexptr, lexleft, lasttok, c1, c, syntax_bits, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return -1;
if (c2 == ']') {
    --lexptr;
    ++lexleft;
} else {
    if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c2) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    c1 = c;
    if (!hard_LC_COLLATE)
        for (c = c1; c <= c2; c++) 
            setbit_case_fold(c, ccl);
    else {
        if (case_fold) {
            c1 = (__extension__ ({
                int __res;
                if (sizeof (c1) > 1) {
                    if (__builtin_constant_p(c1)) {
                        int __c = (c1);
                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                    } else
                        __res = tolower(c1);
                } else
                    __res = (*__ctype_tolower_loc())[(int)(c1)];
                __res;
            }));
            c2 = (__extension__ ({
                int __res;
                if (sizeof (c2) > 1) {
                    if (__builtin_constant_p(c2)) {
                        int __c = (c2);
                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                    } else
                        __res = tolower(c2);
                } else
                    __res = (*__ctype_tolower_loc())[(int)(c2)];
                __res;
            }));
        }
        for (c = 0; c < (1 << 8); ++c) 
            if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                setbit_case_fold(c, ccl);
    }
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c1) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    continue;
}

....
Skipping returnreturn addifexit:Priority 3736
At location src/dfa.c:1090
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c2, lexptr, lexleft, lasttok, c1, c, syntax_bits, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 0;
if (c2 == ']') {
    --lexptr;
    ++lexleft;
} else {
    if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c2) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    c1 = c;
    if (!hard_LC_COLLATE)
        for (c = c1; c <= c2; c++) 
            setbit_case_fold(c, ccl);
    else {
        if (case_fold) {
            c1 = (__extension__ ({
                int __res;
                if (sizeof (c1) > 1) {
                    if (__builtin_constant_p(c1)) {
                        int __c = (c1);
                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                    } else
                        __res = tolower(c1);
                } else
                    __res = (*__ctype_tolower_loc())[(int)(c1)];
                __res;
            }));
            c2 = (__extension__ ({
                int __res;
                if (sizeof (c2) > 1) {
                    if (__builtin_constant_p(c2)) {
                        int __c = (c2);
                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                    } else
                        __res = tolower(c2);
                } else
                    __res = (*__ctype_tolower_loc())[(int)(c2)];
                __res;
            }));
        }
        for (c = 0; c < (1 << 8); ++c) 
            if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                setbit_case_fold(c, ccl);
    }
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c1) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    continue;
}

....
Skipping returnreturn addifexit:Priority 3736
At location src/dfa.c:1090
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c2, lexptr, lexleft, lasttok, c1, c, syntax_bits, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 1;
if (c2 == ']') {
    --lexptr;
    ++lexleft;
} else {
    if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c2) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    c1 = c;
    if (!hard_LC_COLLATE)
        for (c = c1; c <= c2; c++) 
            setbit_case_fold(c, ccl);
    else {
        if (case_fold) {
            c1 = (__extension__ ({
                int __res;
                if (sizeof (c1) > 1) {
                    if (__builtin_constant_p(c1)) {
                        int __c = (c1);
                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                    } else
                        __res = tolower(c1);
                } else
                    __res = (*__ctype_tolower_loc())[(int)(c1)];
                __res;
            }));
            c2 = (__extension__ ({
                int __res;
                if (sizeof (c2) > 1) {
                    if (__builtin_constant_p(c2)) {
                        int __c = (c2);
                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                    } else
                        __res = tolower(c2);
                } else
                    __res = (*__ctype_tolower_loc())[(int)(c2)];
                __res;
            }));
        }
        for (c = 0; c < (1 << 8); ++c) 
            if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                setbit_case_fold(c, ccl);
    }
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c1) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    continue;
}

....
Skipping returnreturn addifexit:Priority 3736
At location src/dfa.c:1090
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c2, lexptr, lexleft, lasttok, c1, c, syntax_bits, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 2;
if (c2 == ']') {
    --lexptr;
    ++lexleft;
} else {
    if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c2) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    c1 = c;
    if (!hard_LC_COLLATE)
        for (c = c1; c <= c2; c++) 
            setbit_case_fold(c, ccl);
    else {
        if (case_fold) {
            c1 = (__extension__ ({
                int __res;
                if (sizeof (c1) > 1) {
                    if (__builtin_constant_p(c1)) {
                        int __c = (c1);
                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                    } else
                        __res = tolower(c1);
                } else
                    __res = (*__ctype_tolower_loc())[(int)(c1)];
                __res;
            }));
            c2 = (__extension__ ({
                int __res;
                if (sizeof (c2) > 1) {
                    if (__builtin_constant_p(c2)) {
                        int __c = (c2);
                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                    } else
                        __res = tolower(c2);
                } else
                    __res = (*__ctype_tolower_loc())[(int)(c2)];
                __res;
            }));
        }
        for (c = 0; c < (1 << 8); ++c) 
            if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                setbit_case_fold(c, ccl);
    }
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c1) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    continue;
}

....
Skipping returnreturn addifexit:Priority 3736
At location src/dfa.c:1090
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c2, lexptr, lexleft, lasttok, c1, c, syntax_bits, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 5;
if (c2 == ']') {
    --lexptr;
    ++lexleft;
} else {
    if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c2) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    c1 = c;
    if (!hard_LC_COLLATE)
        for (c = c1; c <= c2; c++) 
            setbit_case_fold(c, ccl);
    else {
        if (case_fold) {
            c1 = (__extension__ ({
                int __res;
                if (sizeof (c1) > 1) {
                    if (__builtin_constant_p(c1)) {
                        int __c = (c1);
                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                    } else
                        __res = tolower(c1);
                } else
                    __res = (*__ctype_tolower_loc())[(int)(c1)];
                __res;
            }));
            c2 = (__extension__ ({
                int __res;
                if (sizeof (c2) > 1) {
                    if (__builtin_constant_p(c2)) {
                        int __c = (c2);
                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                    } else
                        __res = tolower(c2);
                } else
                    __res = (*__ctype_tolower_loc())[(int)(c2)];
                __res;
            }));
        }
        for (c = 0; c < (1 << 8); ++c) 
            if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                setbit_case_fold(c, ccl);
    }
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c1) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    continue;
}

....
Skipping returnreturn addifexit:Priority 3736
At location src/dfa.c:1090
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c2, lexptr, lexleft, lasttok, c1, c, syntax_bits, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 8;
if (c2 == ']') {
    --lexptr;
    ++lexleft;
} else {
    if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c2) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    c1 = c;
    if (!hard_LC_COLLATE)
        for (c = c1; c <= c2; c++) 
            setbit_case_fold(c, ccl);
    else {
        if (case_fold) {
            c1 = (__extension__ ({
                int __res;
                if (sizeof (c1) > 1) {
                    if (__builtin_constant_p(c1)) {
                        int __c = (c1);
                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                    } else
                        __res = tolower(c1);
                } else
                    __res = (*__ctype_tolower_loc())[(int)(c1)];
                __res;
            }));
            c2 = (__extension__ ({
                int __res;
                if (sizeof (c2) > 1) {
                    if (__builtin_constant_p(c2)) {
                        int __c = (c2);
                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                    } else
                        __res = tolower(c2);
                } else
                    __res = (*__ctype_tolower_loc())[(int)(c2)];
                __res;
            }));
        }
        for (c = 0; c < (1 << 8); ++c) 
            if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                setbit_case_fold(c, ccl);
    }
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c1) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    continue;
}

....
Skipping returnreturn addifexit:Priority 3736
At location src/dfa.c:1090
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c2, lexptr, lexleft, lasttok, c1, c, syntax_bits, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 9;
if (c2 == ']') {
    --lexptr;
    ++lexleft;
} else {
    if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c2) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    c1 = c;
    if (!hard_LC_COLLATE)
        for (c = c1; c <= c2; c++) 
            setbit_case_fold(c, ccl);
    else {
        if (case_fold) {
            c1 = (__extension__ ({
                int __res;
                if (sizeof (c1) > 1) {
                    if (__builtin_constant_p(c1)) {
                        int __c = (c1);
                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                    } else
                        __res = tolower(c1);
                } else
                    __res = (*__ctype_tolower_loc())[(int)(c1)];
                __res;
            }));
            c2 = (__extension__ ({
                int __res;
                if (sizeof (c2) > 1) {
                    if (__builtin_constant_p(c2)) {
                        int __c = (c2);
                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                    } else
                        __res = tolower(c2);
                } else
                    __res = (*__ctype_tolower_loc())[(int)(c2)];
                __res;
            }));
        }
        for (c = 0; c < (1 << 8); ++c) 
            if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                setbit_case_fold(c, ccl);
    }
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c1) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    continue;
}

....
Skipping returnreturn addifexit:Priority 3736
At location src/dfa.c:1090
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c2, lexptr, lexleft, lasttok, c1, c, syntax_bits, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 10;
if (c2 == ']') {
    --lexptr;
    ++lexleft;
} else {
    if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c2) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    c1 = c;
    if (!hard_LC_COLLATE)
        for (c = c1; c <= c2; c++) 
            setbit_case_fold(c, ccl);
    else {
        if (case_fold) {
            c1 = (__extension__ ({
                int __res;
                if (sizeof (c1) > 1) {
                    if (__builtin_constant_p(c1)) {
                        int __c = (c1);
                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                    } else
                        __res = tolower(c1);
                } else
                    __res = (*__ctype_tolower_loc())[(int)(c1)];
                __res;
            }));
            c2 = (__extension__ ({
                int __res;
                if (sizeof (c2) > 1) {
                    if (__builtin_constant_p(c2)) {
                        int __c = (c2);
                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                    } else
                        __res = tolower(c2);
                } else
                    __res = (*__ctype_tolower_loc())[(int)(c2)];
                __res;
            }));
        }
        for (c = 0; c < (1 << 8); ++c) 
            if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                setbit_case_fold(c, ccl);
    }
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c1) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    continue;
}

....
Skipping returnreturn addifexit:Priority 3736
At location src/dfa.c:1090
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c2, lexptr, lexleft, lasttok, c1, c, syntax_bits, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 128;
if (c2 == ']') {
    --lexptr;
    ++lexleft;
} else {
    if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c2) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    c1 = c;
    if (!hard_LC_COLLATE)
        for (c = c1; c <= c2; c++) 
            setbit_case_fold(c, ccl);
    else {
        if (case_fold) {
            c1 = (__extension__ ({
                int __res;
                if (sizeof (c1) > 1) {
                    if (__builtin_constant_p(c1)) {
                        int __c = (c1);
                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                    } else
                        __res = tolower(c1);
                } else
                    __res = (*__ctype_tolower_loc())[(int)(c1)];
                __res;
            }));
            c2 = (__extension__ ({
                int __res;
                if (sizeof (c2) > 1) {
                    if (__builtin_constant_p(c2)) {
                        int __c = (c2);
                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                    } else
                        __res = tolower(c2);
                } else
                    __res = (*__ctype_tolower_loc())[(int)(c2)];
                __res;
            }));
        }
        for (c = 0; c < (1 << 8); ++c) 
            if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                setbit_case_fold(c, ccl);
    }
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c1) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    continue;
}

....
Skipping returnreturn addifexit:Priority 3736
At location src/dfa.c:1090
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c2, lexptr, lexleft, lasttok, c1, c, syntax_bits, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 255;
if (c2 == ']') {
    --lexptr;
    ++lexleft;
} else {
    if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c2) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    c1 = c;
    if (!hard_LC_COLLATE)
        for (c = c1; c <= c2; c++) 
            setbit_case_fold(c, ccl);
    else {
        if (case_fold) {
            c1 = (__extension__ ({
                int __res;
                if (sizeof (c1) > 1) {
                    if (__builtin_constant_p(c1)) {
                        int __c = (c1);
                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                    } else
                        __res = tolower(c1);
                } else
                    __res = (*__ctype_tolower_loc())[(int)(c1)];
                __res;
            }));
            c2 = (__extension__ ({
                int __res;
                if (sizeof (c2) > 1) {
                    if (__builtin_constant_p(c2)) {
                        int __c = (c2);
                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                    } else
                        __res = tolower(c2);
                } else
                    __res = (*__ctype_tolower_loc())[(int)(c2)];
                __res;
            }));
        }
        for (c = 0; c < (1 << 8); ++c) 
            if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                setbit_case_fold(c, ccl);
    }
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c1) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    continue;
}

....
Skipping returnreturn addifexit:Priority 3736
At location src/dfa.c:1090
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c2, lexptr, lexleft, lasttok, c1, c, syntax_bits, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 256;
if (c2 == ']') {
    --lexptr;
    ++lexleft;
} else {
    if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c2) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    c1 = c;
    if (!hard_LC_COLLATE)
        for (c = c1; c <= c2; c++) 
            setbit_case_fold(c, ccl);
    else {
        if (case_fold) {
            c1 = (__extension__ ({
                int __res;
                if (sizeof (c1) > 1) {
                    if (__builtin_constant_p(c1)) {
                        int __c = (c1);
                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                    } else
                        __res = tolower(c1);
                } else
                    __res = (*__ctype_tolower_loc())[(int)(c1)];
                __res;
            }));
            c2 = (__extension__ ({
                int __res;
                if (sizeof (c2) > 1) {
                    if (__builtin_constant_p(c2)) {
                        int __c = (c2);
                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                    } else
                        __res = tolower(c2);
                } else
                    __res = (*__ctype_tolower_loc())[(int)(c2)];
                __res;
            }));
        }
        for (c = 0; c < (1 << 8); ++c) 
            if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                setbit_case_fold(c, ccl);
    }
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c1) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    continue;
}

....
Skipping returnreturn addifexit:Priority 3736
At location src/dfa.c:1090
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c2, lexptr, lexleft, lasttok, c1, c, syntax_bits, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 32767;
if (c2 == ']') {
    --lexptr;
    ++lexleft;
} else {
    if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c2) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    c1 = c;
    if (!hard_LC_COLLATE)
        for (c = c1; c <= c2; c++) 
            setbit_case_fold(c, ccl);
    else {
        if (case_fold) {
            c1 = (__extension__ ({
                int __res;
                if (sizeof (c1) > 1) {
                    if (__builtin_constant_p(c1)) {
                        int __c = (c1);
                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                    } else
                        __res = tolower(c1);
                } else
                    __res = (*__ctype_tolower_loc())[(int)(c1)];
                __res;
            }));
            c2 = (__extension__ ({
                int __res;
                if (sizeof (c2) > 1) {
                    if (__builtin_constant_p(c2)) {
                        int __c = (c2);
                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                    } else
                        __res = tolower(c2);
                } else
                    __res = (*__ctype_tolower_loc())[(int)(c2)];
                __res;
            }));
        }
        for (c = 0; c < (1 << 8); ++c) 
            if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                setbit_case_fold(c, ccl);
    }
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c1) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    continue;
}

....
Skipping returnreturn addifexit:Priority 3736
At location src/dfa.c:1090
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c2, lexptr, lexleft, lasttok, c1, c, syntax_bits, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    break;
if (c2 == ']') {
    --lexptr;
    ++lexleft;
} else {
    if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c2) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    c1 = c;
    if (!hard_LC_COLLATE)
        for (c = c1; c <= c2; c++) 
            setbit_case_fold(c, ccl);
    else {
        if (case_fold) {
            c1 = (__extension__ ({
                int __res;
                if (sizeof (c1) > 1) {
                    if (__builtin_constant_p(c1)) {
                        int __c = (c1);
                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                    } else
                        __res = tolower(c1);
                } else
                    __res = (*__ctype_tolower_loc())[(int)(c1)];
                __res;
            }));
            c2 = (__extension__ ({
                int __res;
                if (sizeof (c2) > 1) {
                    if (__builtin_constant_p(c2)) {
                        int __c = (c2);
                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                    } else
                        __res = tolower(c2);
                } else
                    __res = (*__ctype_tolower_loc())[(int)(c2)];
                __res;
            }));
        }
        for (c = 0; c < (1 << 8); ++c) 
            if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                setbit_case_fold(c, ccl);
    }
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c1) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    continue;
}

....
Skipping returnreturn addifexit:Priority 3936
At location src/dfa.c:1090
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c2, lexptr, lexleft, lasttok, c1, c, syntax_bits, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    goto skip;
if (c2 == ']') {
    --lexptr;
    ++lexleft;
} else {
    if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c2) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    c1 = c;
    if (!hard_LC_COLLATE)
        for (c = c1; c <= c2; c++) 
            setbit_case_fold(c, ccl);
    else {
        if (case_fold) {
            c1 = (__extension__ ({
                int __res;
                if (sizeof (c1) > 1) {
                    if (__builtin_constant_p(c1)) {
                        int __c = (c1);
                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                    } else
                        __res = tolower(c1);
                } else
                    __res = (*__ctype_tolower_loc())[(int)(c1)];
                __res;
            }));
            c2 = (__extension__ ({
                int __res;
                if (sizeof (c2) > 1) {
                    if (__builtin_constant_p(c2)) {
                        int __c = (c2);
                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                    } else
                        __res = tolower(c2);
                } else
                    __res = (*__ctype_tolower_loc())[(int)(c2)];
                __res;
            }));
        }
        for (c = 0; c < (1 << 8); ++c) 
            if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                setbit_case_fold(c, ccl);
    }
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c1) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    continue;
}

....
Skipping returnreturn addifexit:Priority 3936
At location src/dfa.c:1090
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c2, lexptr, lexleft, lasttok, c1, c, syntax_bits, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    goto normal_char;
if (c2 == ']') {
    --lexptr;
    ++lexleft;
} else {
    if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c2) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    c1 = c;
    if (!hard_LC_COLLATE)
        for (c = c1; c <= c2; c++) 
            setbit_case_fold(c, ccl);
    else {
        if (case_fold) {
            c1 = (__extension__ ({
                int __res;
                if (sizeof (c1) > 1) {
                    if (__builtin_constant_p(c1)) {
                        int __c = (c1);
                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                    } else
                        __res = tolower(c1);
                } else
                    __res = (*__ctype_tolower_loc())[(int)(c1)];
                __res;
            }));
            c2 = (__extension__ ({
                int __res;
                if (sizeof (c2) > 1) {
                    if (__builtin_constant_p(c2)) {
                        int __c = (c2);
                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                    } else
                        __res = tolower(c2);
                } else
                    __res = (*__ctype_tolower_loc())[(int)(c2)];
                __res;
            }));
        }
        for (c = 0; c < (1 << 8); ++c) 
            if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                setbit_case_fold(c, ccl);
    }
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c1) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    continue;
}

....
IsErr:priority 4987
at location src/dfa.c:1099
--src file: src/dfa.c
fragment 0:
if (!(__abst_hole(c2, syntax_bits, lexptr, lexleft, lasttok, c, c1, hard_lc_collate, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unbalanced [", 5));
                else
                    return lasttok = end;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c2) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);

....
Skipping error ifguard:Priority 4987
At location src/dfa.c:1099
--Src File: src/dfa.c
Fragment 0:
if (!(__abst_hole(c2, syntax_bits, lexptr, lexleft, lasttok, c, c1, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c2) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);

....
Skipping nonlast:Priority 4987
At location src/dfa.c:1099
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast:Priority 4987
At location src/dfa.c:1099
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast:Priority 4987
At location src/dfa.c:1099
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast:Priority 4987
At location src/dfa.c:1099
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGLINE;
if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast:Priority 4987
At location src/dfa.c:1099
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGWORD;
if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast:Priority 4987
At location src/dfa.c:1099
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDLINE;
if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast:Priority 4987
At location src/dfa.c:1099
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDWORD;
if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast:Priority 4987
At location src/dfa.c:1099
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = LIMWORD;
if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast:Priority 4987
At location src/dfa.c:1099
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = NOTLIMWORD;
if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast:Priority 4987
At location src/dfa.c:1099
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    laststart = 0;
    return lasttok = BACKREF;
}
if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast:Priority 4987
At location src/dfa.c:1099
--Src File: src/dfa.c
Fragment 0:
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}
if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast:Priority 4987
At location src/dfa.c:1099
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast:Priority 4987
At location src/dfa.c:1099
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast:Priority 4987
At location src/dfa.c:1099
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast addifexit:Priority 8737
At location src/dfa.c:1099
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c2, syntax_bits, lexptr, lexleft, lasttok, c, c1, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return -128;
if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast addifexit:Priority 8737
At location src/dfa.c:1099
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c2, syntax_bits, lexptr, lexleft, lasttok, c, c1, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return -1;
if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast addifexit:Priority 8737
At location src/dfa.c:1099
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c2, syntax_bits, lexptr, lexleft, lasttok, c, c1, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 0;
if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast addifexit:Priority 8737
At location src/dfa.c:1099
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c2, syntax_bits, lexptr, lexleft, lasttok, c, c1, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 1;
if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast addifexit:Priority 8737
At location src/dfa.c:1099
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c2, syntax_bits, lexptr, lexleft, lasttok, c, c1, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 2;
if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast addifexit:Priority 8737
At location src/dfa.c:1099
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c2, syntax_bits, lexptr, lexleft, lasttok, c, c1, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 5;
if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast addifexit:Priority 8737
At location src/dfa.c:1099
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c2, syntax_bits, lexptr, lexleft, lasttok, c, c1, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 8;
if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast addifexit:Priority 8737
At location src/dfa.c:1099
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c2, syntax_bits, lexptr, lexleft, lasttok, c, c1, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 9;
if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast addifexit:Priority 8737
At location src/dfa.c:1099
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c2, syntax_bits, lexptr, lexleft, lasttok, c, c1, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 10;
if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast addifexit:Priority 8737
At location src/dfa.c:1099
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c2, syntax_bits, lexptr, lexleft, lasttok, c, c1, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 128;
if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast addifexit:Priority 8737
At location src/dfa.c:1099
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c2, syntax_bits, lexptr, lexleft, lasttok, c, c1, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 255;
if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast addifexit:Priority 8737
At location src/dfa.c:1099
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c2, syntax_bits, lexptr, lexleft, lasttok, c, c1, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 256;
if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast addifexit:Priority 8737
At location src/dfa.c:1099
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c2, syntax_bits, lexptr, lexleft, lasttok, c, c1, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 32767;
if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast addifexit:Priority 8737
At location src/dfa.c:1099
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c2, syntax_bits, lexptr, lexleft, lasttok, c, c1, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    break;
if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast addifexit:Priority 8937
At location src/dfa.c:1099
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c2, syntax_bits, lexptr, lexleft, lasttok, c, c1, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    goto skip;
if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast addifexit:Priority 8937
At location src/dfa.c:1099
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c2, syntax_bits, lexptr, lexleft, lasttok, c, c1, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    goto normal_char;
if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);

....
Skipping nonlast:Priority -12
At location src/dfa.c:1103
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
c1 = c;

....
Skipping nonlast:Priority -12
At location src/dfa.c:1103
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
c1 = c;

....
Skipping nonlast:Priority -12
At location src/dfa.c:1103
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
c1 = c;

....
Skipping nonlast:Priority -12
At location src/dfa.c:1103
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGLINE;
c1 = c;

....
Skipping nonlast:Priority -12
At location src/dfa.c:1103
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGWORD;
c1 = c;

....
Skipping nonlast:Priority -12
At location src/dfa.c:1103
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDLINE;
c1 = c;

....
Skipping nonlast:Priority -12
At location src/dfa.c:1103
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDWORD;
c1 = c;

....
Skipping nonlast:Priority -12
At location src/dfa.c:1103
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = LIMWORD;
c1 = c;

....
Skipping nonlast:Priority -12
At location src/dfa.c:1103
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = NOTLIMWORD;
c1 = c;

....
Skipping nonlast:Priority -12
At location src/dfa.c:1103
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    laststart = 0;
    return lasttok = BACKREF;
}
c1 = c;

....
Skipping nonlast:Priority -12
At location src/dfa.c:1103
--Src File: src/dfa.c
Fragment 0:
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}
c1 = c;

....
Skipping nonlast:Priority -12
At location src/dfa.c:1103
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
c1 = c;

....
Skipping nonlast:Priority -12
At location src/dfa.c:1103
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
c1 = c;

....
Skipping nonlast:Priority -12
At location src/dfa.c:1103
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
c1 = c;

....
Skipping nonlast addifexit:Priority 4988
At location src/dfa.c:1103
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, c1, hard_LC_COLLATE, c2, lexptr, lexleft, lasttok, syntax_bits, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return -128;
c1 = c;

....
Skipping nonlast addifexit:Priority 4988
At location src/dfa.c:1103
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, c1, hard_LC_COLLATE, c2, lexptr, lexleft, lasttok, syntax_bits, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return -1;
c1 = c;

....
Skipping nonlast addifexit:Priority 4988
At location src/dfa.c:1103
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, c1, hard_LC_COLLATE, c2, lexptr, lexleft, lasttok, syntax_bits, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 0;
c1 = c;

....
Skipping nonlast addifexit:Priority 4988
At location src/dfa.c:1103
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, c1, hard_LC_COLLATE, c2, lexptr, lexleft, lasttok, syntax_bits, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 1;
c1 = c;

....
Skipping nonlast addifexit:Priority 4988
At location src/dfa.c:1103
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, c1, hard_LC_COLLATE, c2, lexptr, lexleft, lasttok, syntax_bits, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 2;
c1 = c;

....
Skipping nonlast addifexit:Priority 4988
At location src/dfa.c:1103
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, c1, hard_LC_COLLATE, c2, lexptr, lexleft, lasttok, syntax_bits, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 5;
c1 = c;

....
Skipping nonlast addifexit:Priority 4988
At location src/dfa.c:1103
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, c1, hard_LC_COLLATE, c2, lexptr, lexleft, lasttok, syntax_bits, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 8;
c1 = c;

....
Skipping nonlast addifexit:Priority 4988
At location src/dfa.c:1103
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, c1, hard_LC_COLLATE, c2, lexptr, lexleft, lasttok, syntax_bits, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 9;
c1 = c;

....
Skipping nonlast addifexit:Priority 4988
At location src/dfa.c:1103
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, c1, hard_LC_COLLATE, c2, lexptr, lexleft, lasttok, syntax_bits, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 10;
c1 = c;

....
Skipping nonlast addifexit:Priority 4988
At location src/dfa.c:1103
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, c1, hard_LC_COLLATE, c2, lexptr, lexleft, lasttok, syntax_bits, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 128;
c1 = c;

....
Skipping nonlast addifexit:Priority 4988
At location src/dfa.c:1103
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, c1, hard_LC_COLLATE, c2, lexptr, lexleft, lasttok, syntax_bits, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 255;
c1 = c;

....
Skipping nonlast addifexit:Priority 4988
At location src/dfa.c:1103
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, c1, hard_LC_COLLATE, c2, lexptr, lexleft, lasttok, syntax_bits, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 256;
c1 = c;

....
Skipping nonlast addifexit:Priority 4988
At location src/dfa.c:1103
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, c1, hard_LC_COLLATE, c2, lexptr, lexleft, lasttok, syntax_bits, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 32767;
c1 = c;

....
Skipping nonlast addifexit:Priority 4988
At location src/dfa.c:1103
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, c1, hard_LC_COLLATE, c2, lexptr, lexleft, lasttok, syntax_bits, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    break;
c1 = c;

....
Skipping nonlast addifexit:Priority 5188
At location src/dfa.c:1103
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, c1, hard_LC_COLLATE, c2, lexptr, lexleft, lasttok, syntax_bits, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    goto skip;
c1 = c;

....
Skipping nonlast addifexit:Priority 5188
At location src/dfa.c:1103
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, c1, hard_LC_COLLATE, c2, lexptr, lexleft, lasttok, syntax_bits, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    goto normal_char;
c1 = c;

....
Skipping nonlast:Priority -11
At location src/dfa.c:1104
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (!hard_LC_COLLATE)
    for (c = c1; c <= c2; c++) 
        setbit_case_fold(c, ccl);
else {
    if (case_fold) {
        c1 = (__extension__ ({
            int __res;
            if (sizeof (c1) > 1) {
                if (__builtin_constant_p(c1)) {
                    int __c = (c1);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c1);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c1)];
            __res;
        }));
        c2 = (__extension__ ({
            int __res;
            if (sizeof (c2) > 1) {
                if (__builtin_constant_p(c2)) {
                    int __c = (c2);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c2);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c2)];
            __res;
        }));
    }
    for (c = 0; c < (1 << 8); ++c) 
        if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
            setbit_case_fold(c, ccl);
}

....
Skipping nonlast:Priority -11
At location src/dfa.c:1104
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (!hard_LC_COLLATE)
    for (c = c1; c <= c2; c++) 
        setbit_case_fold(c, ccl);
else {
    if (case_fold) {
        c1 = (__extension__ ({
            int __res;
            if (sizeof (c1) > 1) {
                if (__builtin_constant_p(c1)) {
                    int __c = (c1);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c1);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c1)];
            __res;
        }));
        c2 = (__extension__ ({
            int __res;
            if (sizeof (c2) > 1) {
                if (__builtin_constant_p(c2)) {
                    int __c = (c2);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c2);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c2)];
            __res;
        }));
    }
    for (c = 0; c < (1 << 8); ++c) 
        if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
            setbit_case_fold(c, ccl);
}

....
Skipping nonlast:Priority -11
At location src/dfa.c:1104
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if (!hard_LC_COLLATE)
    for (c = c1; c <= c2; c++) 
        setbit_case_fold(c, ccl);
else {
    if (case_fold) {
        c1 = (__extension__ ({
            int __res;
            if (sizeof (c1) > 1) {
                if (__builtin_constant_p(c1)) {
                    int __c = (c1);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c1);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c1)];
            __res;
        }));
        c2 = (__extension__ ({
            int __res;
            if (sizeof (c2) > 1) {
                if (__builtin_constant_p(c2)) {
                    int __c = (c2);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c2);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c2)];
            __res;
        }));
    }
    for (c = 0; c < (1 << 8); ++c) 
        if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
            setbit_case_fold(c, ccl);
}

....
Skipping nonlast:Priority -11
At location src/dfa.c:1104
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGLINE;
if (!hard_LC_COLLATE)
    for (c = c1; c <= c2; c++) 
        setbit_case_fold(c, ccl);
else {
    if (case_fold) {
        c1 = (__extension__ ({
            int __res;
            if (sizeof (c1) > 1) {
                if (__builtin_constant_p(c1)) {
                    int __c = (c1);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c1);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c1)];
            __res;
        }));
        c2 = (__extension__ ({
            int __res;
            if (sizeof (c2) > 1) {
                if (__builtin_constant_p(c2)) {
                    int __c = (c2);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c2);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c2)];
            __res;
        }));
    }
    for (c = 0; c < (1 << 8); ++c) 
        if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
            setbit_case_fold(c, ccl);
}

....
Skipping nonlast:Priority -11
At location src/dfa.c:1104
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGWORD;
if (!hard_LC_COLLATE)
    for (c = c1; c <= c2; c++) 
        setbit_case_fold(c, ccl);
else {
    if (case_fold) {
        c1 = (__extension__ ({
            int __res;
            if (sizeof (c1) > 1) {
                if (__builtin_constant_p(c1)) {
                    int __c = (c1);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c1);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c1)];
            __res;
        }));
        c2 = (__extension__ ({
            int __res;
            if (sizeof (c2) > 1) {
                if (__builtin_constant_p(c2)) {
                    int __c = (c2);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c2);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c2)];
            __res;
        }));
    }
    for (c = 0; c < (1 << 8); ++c) 
        if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
            setbit_case_fold(c, ccl);
}

....
Skipping nonlast:Priority -11
At location src/dfa.c:1104
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDLINE;
if (!hard_LC_COLLATE)
    for (c = c1; c <= c2; c++) 
        setbit_case_fold(c, ccl);
else {
    if (case_fold) {
        c1 = (__extension__ ({
            int __res;
            if (sizeof (c1) > 1) {
                if (__builtin_constant_p(c1)) {
                    int __c = (c1);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c1);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c1)];
            __res;
        }));
        c2 = (__extension__ ({
            int __res;
            if (sizeof (c2) > 1) {
                if (__builtin_constant_p(c2)) {
                    int __c = (c2);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c2);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c2)];
            __res;
        }));
    }
    for (c = 0; c < (1 << 8); ++c) 
        if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
            setbit_case_fold(c, ccl);
}

....
Skipping nonlast:Priority -11
At location src/dfa.c:1104
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDWORD;
if (!hard_LC_COLLATE)
    for (c = c1; c <= c2; c++) 
        setbit_case_fold(c, ccl);
else {
    if (case_fold) {
        c1 = (__extension__ ({
            int __res;
            if (sizeof (c1) > 1) {
                if (__builtin_constant_p(c1)) {
                    int __c = (c1);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c1);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c1)];
            __res;
        }));
        c2 = (__extension__ ({
            int __res;
            if (sizeof (c2) > 1) {
                if (__builtin_constant_p(c2)) {
                    int __c = (c2);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c2);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c2)];
            __res;
        }));
    }
    for (c = 0; c < (1 << 8); ++c) 
        if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
            setbit_case_fold(c, ccl);
}

....
Skipping nonlast:Priority -11
At location src/dfa.c:1104
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = LIMWORD;
if (!hard_LC_COLLATE)
    for (c = c1; c <= c2; c++) 
        setbit_case_fold(c, ccl);
else {
    if (case_fold) {
        c1 = (__extension__ ({
            int __res;
            if (sizeof (c1) > 1) {
                if (__builtin_constant_p(c1)) {
                    int __c = (c1);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c1);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c1)];
            __res;
        }));
        c2 = (__extension__ ({
            int __res;
            if (sizeof (c2) > 1) {
                if (__builtin_constant_p(c2)) {
                    int __c = (c2);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c2);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c2)];
            __res;
        }));
    }
    for (c = 0; c < (1 << 8); ++c) 
        if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
            setbit_case_fold(c, ccl);
}

....
Skipping nonlast:Priority -11
At location src/dfa.c:1104
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = NOTLIMWORD;
if (!hard_LC_COLLATE)
    for (c = c1; c <= c2; c++) 
        setbit_case_fold(c, ccl);
else {
    if (case_fold) {
        c1 = (__extension__ ({
            int __res;
            if (sizeof (c1) > 1) {
                if (__builtin_constant_p(c1)) {
                    int __c = (c1);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c1);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c1)];
            __res;
        }));
        c2 = (__extension__ ({
            int __res;
            if (sizeof (c2) > 1) {
                if (__builtin_constant_p(c2)) {
                    int __c = (c2);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c2);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c2)];
            __res;
        }));
    }
    for (c = 0; c < (1 << 8); ++c) 
        if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
            setbit_case_fold(c, ccl);
}

....
Skipping nonlast:Priority -11
At location src/dfa.c:1104
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    laststart = 0;
    return lasttok = BACKREF;
}
if (!hard_LC_COLLATE)
    for (c = c1; c <= c2; c++) 
        setbit_case_fold(c, ccl);
else {
    if (case_fold) {
        c1 = (__extension__ ({
            int __res;
            if (sizeof (c1) > 1) {
                if (__builtin_constant_p(c1)) {
                    int __c = (c1);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c1);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c1)];
            __res;
        }));
        c2 = (__extension__ ({
            int __res;
            if (sizeof (c2) > 1) {
                if (__builtin_constant_p(c2)) {
                    int __c = (c2);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c2);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c2)];
            __res;
        }));
    }
    for (c = 0; c < (1 << 8); ++c) 
        if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
            setbit_case_fold(c, ccl);
}

....
Skipping nonlast:Priority -11
At location src/dfa.c:1104
--Src File: src/dfa.c
Fragment 0:
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}
if (!hard_LC_COLLATE)
    for (c = c1; c <= c2; c++) 
        setbit_case_fold(c, ccl);
else {
    if (case_fold) {
        c1 = (__extension__ ({
            int __res;
            if (sizeof (c1) > 1) {
                if (__builtin_constant_p(c1)) {
                    int __c = (c1);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c1);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c1)];
            __res;
        }));
        c2 = (__extension__ ({
            int __res;
            if (sizeof (c2) > 1) {
                if (__builtin_constant_p(c2)) {
                    int __c = (c2);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c2);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c2)];
            __res;
        }));
    }
    for (c = 0; c < (1 << 8); ++c) 
        if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
            setbit_case_fold(c, ccl);
}

....
Skipping nonlast:Priority -11
At location src/dfa.c:1104
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (!hard_LC_COLLATE)
    for (c = c1; c <= c2; c++) 
        setbit_case_fold(c, ccl);
else {
    if (case_fold) {
        c1 = (__extension__ ({
            int __res;
            if (sizeof (c1) > 1) {
                if (__builtin_constant_p(c1)) {
                    int __c = (c1);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c1);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c1)];
            __res;
        }));
        c2 = (__extension__ ({
            int __res;
            if (sizeof (c2) > 1) {
                if (__builtin_constant_p(c2)) {
                    int __c = (c2);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c2);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c2)];
            __res;
        }));
    }
    for (c = 0; c < (1 << 8); ++c) 
        if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
            setbit_case_fold(c, ccl);
}

....
Skipping nonlast:Priority -11
At location src/dfa.c:1104
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (!hard_LC_COLLATE)
    for (c = c1; c <= c2; c++) 
        setbit_case_fold(c, ccl);
else {
    if (case_fold) {
        c1 = (__extension__ ({
            int __res;
            if (sizeof (c1) > 1) {
                if (__builtin_constant_p(c1)) {
                    int __c = (c1);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c1);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c1)];
            __res;
        }));
        c2 = (__extension__ ({
            int __res;
            if (sizeof (c2) > 1) {
                if (__builtin_constant_p(c2)) {
                    int __c = (c2);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c2);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c2)];
            __res;
        }));
    }
    for (c = 0; c < (1 << 8); ++c) 
        if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
            setbit_case_fold(c, ccl);
}

....
Skipping nonlast:Priority -11
At location src/dfa.c:1104
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (!hard_LC_COLLATE)
    for (c = c1; c <= c2; c++) 
        setbit_case_fold(c, ccl);
else {
    if (case_fold) {
        c1 = (__extension__ ({
            int __res;
            if (sizeof (c1) > 1) {
                if (__builtin_constant_p(c1)) {
                    int __c = (c1);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c1);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c1)];
            __res;
        }));
        c2 = (__extension__ ({
            int __res;
            if (sizeof (c2) > 1) {
                if (__builtin_constant_p(c2)) {
                    int __c = (c2);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c2);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c2)];
            __res;
        }));
    }
    for (c = 0; c < (1 << 8); ++c) 
        if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
            setbit_case_fold(c, ccl);
}

....
Skipping nonlast addifexit:Priority 3739
At location src/dfa.c:1104
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(hard_LC_COLLATE, c, c1, c2, lexptr, lexleft, lasttok, syntax_bits, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return -128;
if (!hard_LC_COLLATE)
    for (c = c1; c <= c2; c++) 
        setbit_case_fold(c, ccl);
else {
    if (case_fold) {
        c1 = (__extension__ ({
            int __res;
            if (sizeof (c1) > 1) {
                if (__builtin_constant_p(c1)) {
                    int __c = (c1);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c1);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c1)];
            __res;
        }));
        c2 = (__extension__ ({
            int __res;
            if (sizeof (c2) > 1) {
                if (__builtin_constant_p(c2)) {
                    int __c = (c2);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c2);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c2)];
            __res;
        }));
    }
    for (c = 0; c < (1 << 8); ++c) 
        if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
            setbit_case_fold(c, ccl);
}

....
Skipping nonlast addifexit:Priority 3739
At location src/dfa.c:1104
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(hard_LC_COLLATE, c, c1, c2, lexptr, lexleft, lasttok, syntax_bits, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return -1;
if (!hard_LC_COLLATE)
    for (c = c1; c <= c2; c++) 
        setbit_case_fold(c, ccl);
else {
    if (case_fold) {
        c1 = (__extension__ ({
            int __res;
            if (sizeof (c1) > 1) {
                if (__builtin_constant_p(c1)) {
                    int __c = (c1);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c1);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c1)];
            __res;
        }));
        c2 = (__extension__ ({
            int __res;
            if (sizeof (c2) > 1) {
                if (__builtin_constant_p(c2)) {
                    int __c = (c2);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c2);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c2)];
            __res;
        }));
    }
    for (c = 0; c < (1 << 8); ++c) 
        if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
            setbit_case_fold(c, ccl);
}

....
Skipping nonlast addifexit:Priority 3739
At location src/dfa.c:1104
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(hard_LC_COLLATE, c, c1, c2, lexptr, lexleft, lasttok, syntax_bits, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 0;
if (!hard_LC_COLLATE)
    for (c = c1; c <= c2; c++) 
        setbit_case_fold(c, ccl);
else {
    if (case_fold) {
        c1 = (__extension__ ({
            int __res;
            if (sizeof (c1) > 1) {
                if (__builtin_constant_p(c1)) {
                    int __c = (c1);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c1);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c1)];
            __res;
        }));
        c2 = (__extension__ ({
            int __res;
            if (sizeof (c2) > 1) {
                if (__builtin_constant_p(c2)) {
                    int __c = (c2);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c2);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c2)];
            __res;
        }));
    }
    for (c = 0; c < (1 << 8); ++c) 
        if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
            setbit_case_fold(c, ccl);
}

....
Skipping nonlast addifexit:Priority 3739
At location src/dfa.c:1104
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(hard_LC_COLLATE, c, c1, c2, lexptr, lexleft, lasttok, syntax_bits, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 1;
if (!hard_LC_COLLATE)
    for (c = c1; c <= c2; c++) 
        setbit_case_fold(c, ccl);
else {
    if (case_fold) {
        c1 = (__extension__ ({
            int __res;
            if (sizeof (c1) > 1) {
                if (__builtin_constant_p(c1)) {
                    int __c = (c1);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c1);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c1)];
            __res;
        }));
        c2 = (__extension__ ({
            int __res;
            if (sizeof (c2) > 1) {
                if (__builtin_constant_p(c2)) {
                    int __c = (c2);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c2);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c2)];
            __res;
        }));
    }
    for (c = 0; c < (1 << 8); ++c) 
        if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
            setbit_case_fold(c, ccl);
}

....
Skipping nonlast addifexit:Priority 3739
At location src/dfa.c:1104
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(hard_LC_COLLATE, c, c1, c2, lexptr, lexleft, lasttok, syntax_bits, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 2;
if (!hard_LC_COLLATE)
    for (c = c1; c <= c2; c++) 
        setbit_case_fold(c, ccl);
else {
    if (case_fold) {
        c1 = (__extension__ ({
            int __res;
            if (sizeof (c1) > 1) {
                if (__builtin_constant_p(c1)) {
                    int __c = (c1);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c1);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c1)];
            __res;
        }));
        c2 = (__extension__ ({
            int __res;
            if (sizeof (c2) > 1) {
                if (__builtin_constant_p(c2)) {
                    int __c = (c2);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c2);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c2)];
            __res;
        }));
    }
    for (c = 0; c < (1 << 8); ++c) 
        if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
            setbit_case_fold(c, ccl);
}

....
Skipping nonlast addifexit:Priority 3739
At location src/dfa.c:1104
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(hard_LC_COLLATE, c, c1, c2, lexptr, lexleft, lasttok, syntax_bits, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 5;
if (!hard_LC_COLLATE)
    for (c = c1; c <= c2; c++) 
        setbit_case_fold(c, ccl);
else {
    if (case_fold) {
        c1 = (__extension__ ({
            int __res;
            if (sizeof (c1) > 1) {
                if (__builtin_constant_p(c1)) {
                    int __c = (c1);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c1);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c1)];
            __res;
        }));
        c2 = (__extension__ ({
            int __res;
            if (sizeof (c2) > 1) {
                if (__builtin_constant_p(c2)) {
                    int __c = (c2);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c2);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c2)];
            __res;
        }));
    }
    for (c = 0; c < (1 << 8); ++c) 
        if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
            setbit_case_fold(c, ccl);
}

....
Skipping nonlast addifexit:Priority 3739
At location src/dfa.c:1104
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(hard_LC_COLLATE, c, c1, c2, lexptr, lexleft, lasttok, syntax_bits, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 8;
if (!hard_LC_COLLATE)
    for (c = c1; c <= c2; c++) 
        setbit_case_fold(c, ccl);
else {
    if (case_fold) {
        c1 = (__extension__ ({
            int __res;
            if (sizeof (c1) > 1) {
                if (__builtin_constant_p(c1)) {
                    int __c = (c1);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c1);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c1)];
            __res;
        }));
        c2 = (__extension__ ({
            int __res;
            if (sizeof (c2) > 1) {
                if (__builtin_constant_p(c2)) {
                    int __c = (c2);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c2);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c2)];
            __res;
        }));
    }
    for (c = 0; c < (1 << 8); ++c) 
        if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
            setbit_case_fold(c, ccl);
}

....
Skipping nonlast addifexit:Priority 3739
At location src/dfa.c:1104
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(hard_LC_COLLATE, c, c1, c2, lexptr, lexleft, lasttok, syntax_bits, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 9;
if (!hard_LC_COLLATE)
    for (c = c1; c <= c2; c++) 
        setbit_case_fold(c, ccl);
else {
    if (case_fold) {
        c1 = (__extension__ ({
            int __res;
            if (sizeof (c1) > 1) {
                if (__builtin_constant_p(c1)) {
                    int __c = (c1);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c1);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c1)];
            __res;
        }));
        c2 = (__extension__ ({
            int __res;
            if (sizeof (c2) > 1) {
                if (__builtin_constant_p(c2)) {
                    int __c = (c2);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c2);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c2)];
            __res;
        }));
    }
    for (c = 0; c < (1 << 8); ++c) 
        if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
            setbit_case_fold(c, ccl);
}

....
Skipping nonlast addifexit:Priority 3739
At location src/dfa.c:1104
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(hard_LC_COLLATE, c, c1, c2, lexptr, lexleft, lasttok, syntax_bits, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 10;
if (!hard_LC_COLLATE)
    for (c = c1; c <= c2; c++) 
        setbit_case_fold(c, ccl);
else {
    if (case_fold) {
        c1 = (__extension__ ({
            int __res;
            if (sizeof (c1) > 1) {
                if (__builtin_constant_p(c1)) {
                    int __c = (c1);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c1);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c1)];
            __res;
        }));
        c2 = (__extension__ ({
            int __res;
            if (sizeof (c2) > 1) {
                if (__builtin_constant_p(c2)) {
                    int __c = (c2);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c2);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c2)];
            __res;
        }));
    }
    for (c = 0; c < (1 << 8); ++c) 
        if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
            setbit_case_fold(c, ccl);
}

....
Skipping nonlast addifexit:Priority 3739
At location src/dfa.c:1104
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(hard_LC_COLLATE, c, c1, c2, lexptr, lexleft, lasttok, syntax_bits, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 128;
if (!hard_LC_COLLATE)
    for (c = c1; c <= c2; c++) 
        setbit_case_fold(c, ccl);
else {
    if (case_fold) {
        c1 = (__extension__ ({
            int __res;
            if (sizeof (c1) > 1) {
                if (__builtin_constant_p(c1)) {
                    int __c = (c1);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c1);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c1)];
            __res;
        }));
        c2 = (__extension__ ({
            int __res;
            if (sizeof (c2) > 1) {
                if (__builtin_constant_p(c2)) {
                    int __c = (c2);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c2);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c2)];
            __res;
        }));
    }
    for (c = 0; c < (1 << 8); ++c) 
        if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
            setbit_case_fold(c, ccl);
}

....
Skipping nonlast addifexit:Priority 3739
At location src/dfa.c:1104
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(hard_LC_COLLATE, c, c1, c2, lexptr, lexleft, lasttok, syntax_bits, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 255;
if (!hard_LC_COLLATE)
    for (c = c1; c <= c2; c++) 
        setbit_case_fold(c, ccl);
else {
    if (case_fold) {
        c1 = (__extension__ ({
            int __res;
            if (sizeof (c1) > 1) {
                if (__builtin_constant_p(c1)) {
                    int __c = (c1);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c1);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c1)];
            __res;
        }));
        c2 = (__extension__ ({
            int __res;
            if (sizeof (c2) > 1) {
                if (__builtin_constant_p(c2)) {
                    int __c = (c2);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c2);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c2)];
            __res;
        }));
    }
    for (c = 0; c < (1 << 8); ++c) 
        if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
            setbit_case_fold(c, ccl);
}

....
Skipping nonlast addifexit:Priority 3739
At location src/dfa.c:1104
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(hard_LC_COLLATE, c, c1, c2, lexptr, lexleft, lasttok, syntax_bits, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 256;
if (!hard_LC_COLLATE)
    for (c = c1; c <= c2; c++) 
        setbit_case_fold(c, ccl);
else {
    if (case_fold) {
        c1 = (__extension__ ({
            int __res;
            if (sizeof (c1) > 1) {
                if (__builtin_constant_p(c1)) {
                    int __c = (c1);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c1);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c1)];
            __res;
        }));
        c2 = (__extension__ ({
            int __res;
            if (sizeof (c2) > 1) {
                if (__builtin_constant_p(c2)) {
                    int __c = (c2);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c2);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c2)];
            __res;
        }));
    }
    for (c = 0; c < (1 << 8); ++c) 
        if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
            setbit_case_fold(c, ccl);
}

....
Skipping nonlast addifexit:Priority 3739
At location src/dfa.c:1104
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(hard_LC_COLLATE, c, c1, c2, lexptr, lexleft, lasttok, syntax_bits, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 32767;
if (!hard_LC_COLLATE)
    for (c = c1; c <= c2; c++) 
        setbit_case_fold(c, ccl);
else {
    if (case_fold) {
        c1 = (__extension__ ({
            int __res;
            if (sizeof (c1) > 1) {
                if (__builtin_constant_p(c1)) {
                    int __c = (c1);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c1);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c1)];
            __res;
        }));
        c2 = (__extension__ ({
            int __res;
            if (sizeof (c2) > 1) {
                if (__builtin_constant_p(c2)) {
                    int __c = (c2);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c2);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c2)];
            __res;
        }));
    }
    for (c = 0; c < (1 << 8); ++c) 
        if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
            setbit_case_fold(c, ccl);
}

....
Skipping nonlast addifexit:Priority 3739
At location src/dfa.c:1104
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(hard_LC_COLLATE, c, c1, c2, lexptr, lexleft, lasttok, syntax_bits, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    break;
if (!hard_LC_COLLATE)
    for (c = c1; c <= c2; c++) 
        setbit_case_fold(c, ccl);
else {
    if (case_fold) {
        c1 = (__extension__ ({
            int __res;
            if (sizeof (c1) > 1) {
                if (__builtin_constant_p(c1)) {
                    int __c = (c1);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c1);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c1)];
            __res;
        }));
        c2 = (__extension__ ({
            int __res;
            if (sizeof (c2) > 1) {
                if (__builtin_constant_p(c2)) {
                    int __c = (c2);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c2);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c2)];
            __res;
        }));
    }
    for (c = 0; c < (1 << 8); ++c) 
        if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
            setbit_case_fold(c, ccl);
}

....
Skipping nonlast addifexit:Priority 3939
At location src/dfa.c:1104
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(hard_LC_COLLATE, c, c1, c2, lexptr, lexleft, lasttok, syntax_bits, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    goto skip;
if (!hard_LC_COLLATE)
    for (c = c1; c <= c2; c++) 
        setbit_case_fold(c, ccl);
else {
    if (case_fold) {
        c1 = (__extension__ ({
            int __res;
            if (sizeof (c1) > 1) {
                if (__builtin_constant_p(c1)) {
                    int __c = (c1);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c1);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c1)];
            __res;
        }));
        c2 = (__extension__ ({
            int __res;
            if (sizeof (c2) > 1) {
                if (__builtin_constant_p(c2)) {
                    int __c = (c2);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c2);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c2)];
            __res;
        }));
    }
    for (c = 0; c < (1 << 8); ++c) 
        if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
            setbit_case_fold(c, ccl);
}

....
Skipping nonlast addifexit:Priority 3939
At location src/dfa.c:1104
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(hard_LC_COLLATE, c, c1, c2, lexptr, lexleft, lasttok, syntax_bits, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    goto normal_char;
if (!hard_LC_COLLATE)
    for (c = c1; c <= c2; c++) 
        setbit_case_fold(c, ccl);
else {
    if (case_fold) {
        c1 = (__extension__ ({
            int __res;
            if (sizeof (c1) > 1) {
                if (__builtin_constant_p(c1)) {
                    int __c = (c1);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c1);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c1)];
            __res;
        }));
        c2 = (__extension__ ({
            int __res;
            if (sizeof (c2) > 1) {
                if (__builtin_constant_p(c2)) {
                    int __c = (c2);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c2);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c2)];
            __res;
        }));
    }
    for (c = 0; c < (1 << 8); ++c) 
        if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
            setbit_case_fold(c, ccl);
}

....
Skipping nonlast:Priority 4990
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (case_fold) {
    c1 = (__extension__ ({
        int __res;
        if (sizeof (c1) > 1) {
            if (__builtin_constant_p(c1)) {
                int __c = (c1);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c1);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c1)];
        __res;
    }));
    c2 = (__extension__ ({
        int __res;
        if (sizeof (c2) > 1) {
            if (__builtin_constant_p(c2)) {
                int __c = (c2);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c2);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c2)];
        __res;
    }));
}

....
Skipping nonlast:Priority 4990
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (case_fold) {
    c1 = (__extension__ ({
        int __res;
        if (sizeof (c1) > 1) {
            if (__builtin_constant_p(c1)) {
                int __c = (c1);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c1);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c1)];
        __res;
    }));
    c2 = (__extension__ ({
        int __res;
        if (sizeof (c2) > 1) {
            if (__builtin_constant_p(c2)) {
                int __c = (c2);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c2);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c2)];
        __res;
    }));
}

....
Skipping nonlast:Priority 4990
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if (case_fold) {
    c1 = (__extension__ ({
        int __res;
        if (sizeof (c1) > 1) {
            if (__builtin_constant_p(c1)) {
                int __c = (c1);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c1);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c1)];
        __res;
    }));
    c2 = (__extension__ ({
        int __res;
        if (sizeof (c2) > 1) {
            if (__builtin_constant_p(c2)) {
                int __c = (c2);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c2);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c2)];
        __res;
    }));
}

....
Skipping nonlast:Priority 4990
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGLINE;
if (case_fold) {
    c1 = (__extension__ ({
        int __res;
        if (sizeof (c1) > 1) {
            if (__builtin_constant_p(c1)) {
                int __c = (c1);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c1);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c1)];
        __res;
    }));
    c2 = (__extension__ ({
        int __res;
        if (sizeof (c2) > 1) {
            if (__builtin_constant_p(c2)) {
                int __c = (c2);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c2);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c2)];
        __res;
    }));
}

....
Skipping nonlast:Priority 4990
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGWORD;
if (case_fold) {
    c1 = (__extension__ ({
        int __res;
        if (sizeof (c1) > 1) {
            if (__builtin_constant_p(c1)) {
                int __c = (c1);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c1);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c1)];
        __res;
    }));
    c2 = (__extension__ ({
        int __res;
        if (sizeof (c2) > 1) {
            if (__builtin_constant_p(c2)) {
                int __c = (c2);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c2);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c2)];
        __res;
    }));
}

....
Skipping nonlast:Priority 4990
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDLINE;
if (case_fold) {
    c1 = (__extension__ ({
        int __res;
        if (sizeof (c1) > 1) {
            if (__builtin_constant_p(c1)) {
                int __c = (c1);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c1);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c1)];
        __res;
    }));
    c2 = (__extension__ ({
        int __res;
        if (sizeof (c2) > 1) {
            if (__builtin_constant_p(c2)) {
                int __c = (c2);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c2);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c2)];
        __res;
    }));
}

....
Skipping nonlast:Priority 4990
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDWORD;
if (case_fold) {
    c1 = (__extension__ ({
        int __res;
        if (sizeof (c1) > 1) {
            if (__builtin_constant_p(c1)) {
                int __c = (c1);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c1);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c1)];
        __res;
    }));
    c2 = (__extension__ ({
        int __res;
        if (sizeof (c2) > 1) {
            if (__builtin_constant_p(c2)) {
                int __c = (c2);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c2);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c2)];
        __res;
    }));
}

....
Skipping nonlast:Priority 4990
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = LIMWORD;
if (case_fold) {
    c1 = (__extension__ ({
        int __res;
        if (sizeof (c1) > 1) {
            if (__builtin_constant_p(c1)) {
                int __c = (c1);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c1);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c1)];
        __res;
    }));
    c2 = (__extension__ ({
        int __res;
        if (sizeof (c2) > 1) {
            if (__builtin_constant_p(c2)) {
                int __c = (c2);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c2);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c2)];
        __res;
    }));
}

....
Skipping nonlast:Priority 4990
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = NOTLIMWORD;
if (case_fold) {
    c1 = (__extension__ ({
        int __res;
        if (sizeof (c1) > 1) {
            if (__builtin_constant_p(c1)) {
                int __c = (c1);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c1);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c1)];
        __res;
    }));
    c2 = (__extension__ ({
        int __res;
        if (sizeof (c2) > 1) {
            if (__builtin_constant_p(c2)) {
                int __c = (c2);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c2);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c2)];
        __res;
    }));
}

....
Skipping nonlast:Priority 4990
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    laststart = 0;
    return lasttok = BACKREF;
}
if (case_fold) {
    c1 = (__extension__ ({
        int __res;
        if (sizeof (c1) > 1) {
            if (__builtin_constant_p(c1)) {
                int __c = (c1);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c1);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c1)];
        __res;
    }));
    c2 = (__extension__ ({
        int __res;
        if (sizeof (c2) > 1) {
            if (__builtin_constant_p(c2)) {
                int __c = (c2);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c2);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c2)];
        __res;
    }));
}

....
Skipping nonlast:Priority 4990
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}
if (case_fold) {
    c1 = (__extension__ ({
        int __res;
        if (sizeof (c1) > 1) {
            if (__builtin_constant_p(c1)) {
                int __c = (c1);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c1);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c1)];
        __res;
    }));
    c2 = (__extension__ ({
        int __res;
        if (sizeof (c2) > 1) {
            if (__builtin_constant_p(c2)) {
                int __c = (c2);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c2);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c2)];
        __res;
    }));
}

....
Skipping nonlast:Priority 4990
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (case_fold) {
    c1 = (__extension__ ({
        int __res;
        if (sizeof (c1) > 1) {
            if (__builtin_constant_p(c1)) {
                int __c = (c1);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c1);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c1)];
        __res;
    }));
    c2 = (__extension__ ({
        int __res;
        if (sizeof (c2) > 1) {
            if (__builtin_constant_p(c2)) {
                int __c = (c2);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c2);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c2)];
        __res;
    }));
}

....
Skipping nonlast:Priority 4990
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (case_fold) {
    c1 = (__extension__ ({
        int __res;
        if (sizeof (c1) > 1) {
            if (__builtin_constant_p(c1)) {
                int __c = (c1);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c1);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c1)];
        __res;
    }));
    c2 = (__extension__ ({
        int __res;
        if (sizeof (c2) > 1) {
            if (__builtin_constant_p(c2)) {
                int __c = (c2);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c2);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c2)];
        __res;
    }));
}

....
Skipping nonlast:Priority 4990
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (case_fold) {
    c1 = (__extension__ ({
        int __res;
        if (sizeof (c1) > 1) {
            if (__builtin_constant_p(c1)) {
                int __c = (c1);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c1);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c1)];
        __res;
    }));
    c2 = (__extension__ ({
        int __res;
        if (sizeof (c2) > 1) {
            if (__builtin_constant_p(c2)) {
                int __c = (c2);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c2);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c2)];
        __res;
    }));
}

....
Skipping nonlast addifexit:Priority 8740
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(case_fold, c1, c, c2, hard_LC_COLLATE, lexptr, lexleft, lasttok, syntax_bits, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return -128;
if (case_fold) {
    c1 = (__extension__ ({
        int __res;
        if (sizeof (c1) > 1) {
            if (__builtin_constant_p(c1)) {
                int __c = (c1);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c1);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c1)];
        __res;
    }));
    c2 = (__extension__ ({
        int __res;
        if (sizeof (c2) > 1) {
            if (__builtin_constant_p(c2)) {
                int __c = (c2);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c2);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c2)];
        __res;
    }));
}

....
Skipping nonlast addifexit:Priority 8740
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(case_fold, c1, c, c2, hard_LC_COLLATE, lexptr, lexleft, lasttok, syntax_bits, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return -1;
if (case_fold) {
    c1 = (__extension__ ({
        int __res;
        if (sizeof (c1) > 1) {
            if (__builtin_constant_p(c1)) {
                int __c = (c1);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c1);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c1)];
        __res;
    }));
    c2 = (__extension__ ({
        int __res;
        if (sizeof (c2) > 1) {
            if (__builtin_constant_p(c2)) {
                int __c = (c2);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c2);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c2)];
        __res;
    }));
}

....
Skipping nonlast addifexit:Priority 8740
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(case_fold, c1, c, c2, hard_LC_COLLATE, lexptr, lexleft, lasttok, syntax_bits, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 0;
if (case_fold) {
    c1 = (__extension__ ({
        int __res;
        if (sizeof (c1) > 1) {
            if (__builtin_constant_p(c1)) {
                int __c = (c1);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c1);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c1)];
        __res;
    }));
    c2 = (__extension__ ({
        int __res;
        if (sizeof (c2) > 1) {
            if (__builtin_constant_p(c2)) {
                int __c = (c2);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c2);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c2)];
        __res;
    }));
}

....
Skipping nonlast addifexit:Priority 8740
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(case_fold, c1, c, c2, hard_LC_COLLATE, lexptr, lexleft, lasttok, syntax_bits, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 1;
if (case_fold) {
    c1 = (__extension__ ({
        int __res;
        if (sizeof (c1) > 1) {
            if (__builtin_constant_p(c1)) {
                int __c = (c1);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c1);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c1)];
        __res;
    }));
    c2 = (__extension__ ({
        int __res;
        if (sizeof (c2) > 1) {
            if (__builtin_constant_p(c2)) {
                int __c = (c2);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c2);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c2)];
        __res;
    }));
}

....
Skipping nonlast addifexit:Priority 8740
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(case_fold, c1, c, c2, hard_LC_COLLATE, lexptr, lexleft, lasttok, syntax_bits, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 2;
if (case_fold) {
    c1 = (__extension__ ({
        int __res;
        if (sizeof (c1) > 1) {
            if (__builtin_constant_p(c1)) {
                int __c = (c1);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c1);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c1)];
        __res;
    }));
    c2 = (__extension__ ({
        int __res;
        if (sizeof (c2) > 1) {
            if (__builtin_constant_p(c2)) {
                int __c = (c2);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c2);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c2)];
        __res;
    }));
}

....
Skipping nonlast addifexit:Priority 8740
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(case_fold, c1, c, c2, hard_LC_COLLATE, lexptr, lexleft, lasttok, syntax_bits, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 5;
if (case_fold) {
    c1 = (__extension__ ({
        int __res;
        if (sizeof (c1) > 1) {
            if (__builtin_constant_p(c1)) {
                int __c = (c1);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c1);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c1)];
        __res;
    }));
    c2 = (__extension__ ({
        int __res;
        if (sizeof (c2) > 1) {
            if (__builtin_constant_p(c2)) {
                int __c = (c2);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c2);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c2)];
        __res;
    }));
}

....
Skipping nonlast addifexit:Priority 8740
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(case_fold, c1, c, c2, hard_LC_COLLATE, lexptr, lexleft, lasttok, syntax_bits, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 8;
if (case_fold) {
    c1 = (__extension__ ({
        int __res;
        if (sizeof (c1) > 1) {
            if (__builtin_constant_p(c1)) {
                int __c = (c1);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c1);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c1)];
        __res;
    }));
    c2 = (__extension__ ({
        int __res;
        if (sizeof (c2) > 1) {
            if (__builtin_constant_p(c2)) {
                int __c = (c2);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c2);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c2)];
        __res;
    }));
}

....
Skipping nonlast addifexit:Priority 8740
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(case_fold, c1, c, c2, hard_LC_COLLATE, lexptr, lexleft, lasttok, syntax_bits, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 9;
if (case_fold) {
    c1 = (__extension__ ({
        int __res;
        if (sizeof (c1) > 1) {
            if (__builtin_constant_p(c1)) {
                int __c = (c1);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c1);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c1)];
        __res;
    }));
    c2 = (__extension__ ({
        int __res;
        if (sizeof (c2) > 1) {
            if (__builtin_constant_p(c2)) {
                int __c = (c2);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c2);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c2)];
        __res;
    }));
}

....
Skipping nonlast addifexit:Priority 8740
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(case_fold, c1, c, c2, hard_LC_COLLATE, lexptr, lexleft, lasttok, syntax_bits, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 10;
if (case_fold) {
    c1 = (__extension__ ({
        int __res;
        if (sizeof (c1) > 1) {
            if (__builtin_constant_p(c1)) {
                int __c = (c1);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c1);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c1)];
        __res;
    }));
    c2 = (__extension__ ({
        int __res;
        if (sizeof (c2) > 1) {
            if (__builtin_constant_p(c2)) {
                int __c = (c2);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c2);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c2)];
        __res;
    }));
}

....
Skipping nonlast addifexit:Priority 8740
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(case_fold, c1, c, c2, hard_LC_COLLATE, lexptr, lexleft, lasttok, syntax_bits, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 128;
if (case_fold) {
    c1 = (__extension__ ({
        int __res;
        if (sizeof (c1) > 1) {
            if (__builtin_constant_p(c1)) {
                int __c = (c1);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c1);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c1)];
        __res;
    }));
    c2 = (__extension__ ({
        int __res;
        if (sizeof (c2) > 1) {
            if (__builtin_constant_p(c2)) {
                int __c = (c2);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c2);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c2)];
        __res;
    }));
}

....
Skipping nonlast addifexit:Priority 8740
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(case_fold, c1, c, c2, hard_LC_COLLATE, lexptr, lexleft, lasttok, syntax_bits, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 255;
if (case_fold) {
    c1 = (__extension__ ({
        int __res;
        if (sizeof (c1) > 1) {
            if (__builtin_constant_p(c1)) {
                int __c = (c1);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c1);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c1)];
        __res;
    }));
    c2 = (__extension__ ({
        int __res;
        if (sizeof (c2) > 1) {
            if (__builtin_constant_p(c2)) {
                int __c = (c2);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c2);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c2)];
        __res;
    }));
}

....
Skipping nonlast addifexit:Priority 8740
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(case_fold, c1, c, c2, hard_LC_COLLATE, lexptr, lexleft, lasttok, syntax_bits, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 256;
if (case_fold) {
    c1 = (__extension__ ({
        int __res;
        if (sizeof (c1) > 1) {
            if (__builtin_constant_p(c1)) {
                int __c = (c1);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c1);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c1)];
        __res;
    }));
    c2 = (__extension__ ({
        int __res;
        if (sizeof (c2) > 1) {
            if (__builtin_constant_p(c2)) {
                int __c = (c2);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c2);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c2)];
        __res;
    }));
}

....
Skipping nonlast addifexit:Priority 8740
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(case_fold, c1, c, c2, hard_LC_COLLATE, lexptr, lexleft, lasttok, syntax_bits, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 32767;
if (case_fold) {
    c1 = (__extension__ ({
        int __res;
        if (sizeof (c1) > 1) {
            if (__builtin_constant_p(c1)) {
                int __c = (c1);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c1);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c1)];
        __res;
    }));
    c2 = (__extension__ ({
        int __res;
        if (sizeof (c2) > 1) {
            if (__builtin_constant_p(c2)) {
                int __c = (c2);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c2);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c2)];
        __res;
    }));
}

....
Skipping nonlast addifexit:Priority 8740
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(case_fold, c1, c, c2, hard_LC_COLLATE, lexptr, lexleft, lasttok, syntax_bits, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    break;
if (case_fold) {
    c1 = (__extension__ ({
        int __res;
        if (sizeof (c1) > 1) {
            if (__builtin_constant_p(c1)) {
                int __c = (c1);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c1);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c1)];
        __res;
    }));
    c2 = (__extension__ ({
        int __res;
        if (sizeof (c2) > 1) {
            if (__builtin_constant_p(c2)) {
                int __c = (c2);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c2);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c2)];
        __res;
    }));
}

....
Skipping nonlast addifexit:Priority 8940
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(case_fold, c1, c, c2, hard_LC_COLLATE, lexptr, lexleft, lasttok, syntax_bits, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    goto skip;
if (case_fold) {
    c1 = (__extension__ ({
        int __res;
        if (sizeof (c1) > 1) {
            if (__builtin_constant_p(c1)) {
                int __c = (c1);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c1);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c1)];
        __res;
    }));
    c2 = (__extension__ ({
        int __res;
        if (sizeof (c2) > 1) {
            if (__builtin_constant_p(c2)) {
                int __c = (c2);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c2);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c2)];
        __res;
    }));
}

....
Skipping nonlast addifexit:Priority 8940
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(case_fold, c1, c, c2, hard_LC_COLLATE, lexptr, lexleft, lasttok, syntax_bits, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    goto normal_char;
if (case_fold) {
    c1 = (__extension__ ({
        int __res;
        if (sizeof (c1) > 1) {
            if (__builtin_constant_p(c1)) {
                int __c = (c1);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c1);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c1)];
        __res;
    }));
    c2 = (__extension__ ({
        int __res;
        if (sizeof (c2) > 1) {
            if (__builtin_constant_p(c2)) {
                int __c = (c2);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c2);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c2)];
        __res;
    }));
}

....
Skipping isstmt addifexit:Priority 4991
At location src/dfa.c:1114
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, case_fold, c1, c2, lexptr, lexleft, lasttok, hard_LC_COLLATE, syntax_bits, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return -128;
for (c = 0; c < (1 << 8); ++c) 
    if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
        setbit_case_fold(c, ccl);

....
Skipping isstmt addifexit:Priority 4991
At location src/dfa.c:1114
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, case_fold, c1, c2, lexptr, lexleft, lasttok, hard_LC_COLLATE, syntax_bits, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return -1;
for (c = 0; c < (1 << 8); ++c) 
    if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
        setbit_case_fold(c, ccl);

....
Skipping isstmt addifexit:Priority 4991
At location src/dfa.c:1114
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, case_fold, c1, c2, lexptr, lexleft, lasttok, hard_LC_COLLATE, syntax_bits, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 0;
for (c = 0; c < (1 << 8); ++c) 
    if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
        setbit_case_fold(c, ccl);

....
Skipping isstmt addifexit:Priority 4991
At location src/dfa.c:1114
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, case_fold, c1, c2, lexptr, lexleft, lasttok, hard_LC_COLLATE, syntax_bits, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 1;
for (c = 0; c < (1 << 8); ++c) 
    if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
        setbit_case_fold(c, ccl);

....
Skipping isstmt addifexit:Priority 4991
At location src/dfa.c:1114
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, case_fold, c1, c2, lexptr, lexleft, lasttok, hard_LC_COLLATE, syntax_bits, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 2;
for (c = 0; c < (1 << 8); ++c) 
    if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
        setbit_case_fold(c, ccl);

....
Skipping isstmt addifexit:Priority 4991
At location src/dfa.c:1114
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, case_fold, c1, c2, lexptr, lexleft, lasttok, hard_LC_COLLATE, syntax_bits, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 5;
for (c = 0; c < (1 << 8); ++c) 
    if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
        setbit_case_fold(c, ccl);

....
Skipping isstmt addifexit:Priority 4991
At location src/dfa.c:1114
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, case_fold, c1, c2, lexptr, lexleft, lasttok, hard_LC_COLLATE, syntax_bits, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 8;
for (c = 0; c < (1 << 8); ++c) 
    if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
        setbit_case_fold(c, ccl);

....
Skipping isstmt addifexit:Priority 4991
At location src/dfa.c:1114
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, case_fold, c1, c2, lexptr, lexleft, lasttok, hard_LC_COLLATE, syntax_bits, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 9;
for (c = 0; c < (1 << 8); ++c) 
    if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
        setbit_case_fold(c, ccl);

....
Skipping isstmt addifexit:Priority 4991
At location src/dfa.c:1114
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, case_fold, c1, c2, lexptr, lexleft, lasttok, hard_LC_COLLATE, syntax_bits, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 10;
for (c = 0; c < (1 << 8); ++c) 
    if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
        setbit_case_fold(c, ccl);

....
Skipping isstmt addifexit:Priority 4991
At location src/dfa.c:1114
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, case_fold, c1, c2, lexptr, lexleft, lasttok, hard_LC_COLLATE, syntax_bits, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 128;
for (c = 0; c < (1 << 8); ++c) 
    if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
        setbit_case_fold(c, ccl);

....
Skipping isstmt addifexit:Priority 4991
At location src/dfa.c:1114
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, case_fold, c1, c2, lexptr, lexleft, lasttok, hard_LC_COLLATE, syntax_bits, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 255;
for (c = 0; c < (1 << 8); ++c) 
    if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
        setbit_case_fold(c, ccl);

....
Skipping isstmt addifexit:Priority 4991
At location src/dfa.c:1114
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, case_fold, c1, c2, lexptr, lexleft, lasttok, hard_LC_COLLATE, syntax_bits, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 256;
for (c = 0; c < (1 << 8); ++c) 
    if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
        setbit_case_fold(c, ccl);

....
Skipping isstmt addifexit:Priority 4991
At location src/dfa.c:1114
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, case_fold, c1, c2, lexptr, lexleft, lasttok, hard_LC_COLLATE, syntax_bits, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 32767;
for (c = 0; c < (1 << 8); ++c) 
    if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
        setbit_case_fold(c, ccl);

....
Skipping isstmt addifexit:Priority 4991
At location src/dfa.c:1114
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, case_fold, c1, c2, lexptr, lexleft, lasttok, hard_LC_COLLATE, syntax_bits, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    break;
for (c = 0; c < (1 << 8); ++c) 
    if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
        setbit_case_fold(c, ccl);

....
Skipping isstmt addifexit:Priority 5191
At location src/dfa.c:1114
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, case_fold, c1, c2, lexptr, lexleft, lasttok, hard_LC_COLLATE, syntax_bits, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    goto skip;
for (c = 0; c < (1 << 8); ++c) 
    if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
        setbit_case_fold(c, ccl);

....
Skipping isstmt addifexit:Priority 5191
At location src/dfa.c:1114
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, case_fold, c1, c2, lexptr, lexleft, lasttok, hard_LC_COLLATE, syntax_bits, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    goto normal_char;
for (c = 0; c < (1 << 8); ++c) 
    if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
        setbit_case_fold(c, ccl);

....
Skipping nonlast:Priority -6
At location src/dfa.c:1117
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    setbit_case_fold(c, ccl);
}

....
Skipping nonlast:Priority -6
At location src/dfa.c:1117
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    setbit_case_fold(c, ccl);
}

....
Skipping nonlast:Priority -6
At location src/dfa.c:1117
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        return lasttok = parse_bracket_exp_mb();
    }
    setbit_case_fold(c, ccl);
}

....
Skipping nonlast:Priority -6
At location src/dfa.c:1117
--Src File: src/dfa.c
Fragment 0:
{
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGLINE;
    setbit_case_fold(c, ccl);
}

....
Skipping nonlast:Priority -6
At location src/dfa.c:1117
--Src File: src/dfa.c
Fragment 0:
{
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGWORD;
    setbit_case_fold(c, ccl);
}

....
Skipping nonlast:Priority -6
At location src/dfa.c:1117
--Src File: src/dfa.c
Fragment 0:
{
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDLINE;
    setbit_case_fold(c, ccl);
}

....
Skipping nonlast:Priority -6
At location src/dfa.c:1117
--Src File: src/dfa.c
Fragment 0:
{
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDWORD;
    setbit_case_fold(c, ccl);
}

....
Skipping nonlast:Priority -6
At location src/dfa.c:1117
--Src File: src/dfa.c
Fragment 0:
{
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = LIMWORD;
    setbit_case_fold(c, ccl);
}

....
Skipping nonlast:Priority -6
At location src/dfa.c:1117
--Src File: src/dfa.c
Fragment 0:
{
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = NOTLIMWORD;
    setbit_case_fold(c, ccl);
}

....
Skipping nonlast:Priority -6
At location src/dfa.c:1117
--Src File: src/dfa.c
Fragment 0:
{
    if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        laststart = 0;
        return lasttok = BACKREF;
    }
    setbit_case_fold(c, ccl);
}

....
Skipping nonlast:Priority -6
At location src/dfa.c:1117
--Src File: src/dfa.c
Fragment 0:
{
    if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
        zeroset(ccl);
        setbit_case_fold(c, ccl);
        return lasttok = CSET + charclass_index(ccl);
    }
    setbit_case_fold(c, ccl);
}

....
Skipping nonlast:Priority -6
At location src/dfa.c:1117
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    setbit_case_fold(c, ccl);
}

....
Skipping nonlast:Priority -6
At location src/dfa.c:1117
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    setbit_case_fold(c, ccl);
}

....
Skipping nonlast:Priority -6
At location src/dfa.c:1117
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    setbit_case_fold(c, ccl);
}

....
Skipping nonlast addifexit:Priority 4994
At location src/dfa.c:1117
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(c, c1, c2, case_fold, lexptr, lexleft, lasttok, hard_LC_COLLATE, invert, syntax_bits, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
        return -128;
    setbit_case_fold(c, ccl);
}

....
Skipping nonlast addifexit:Priority 4994
At location src/dfa.c:1117
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(c, c1, c2, case_fold, lexptr, lexleft, lasttok, hard_LC_COLLATE, invert, syntax_bits, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
        return -1;
    setbit_case_fold(c, ccl);
}

....
Skipping nonlast addifexit:Priority 4994
At location src/dfa.c:1117
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(c, c1, c2, case_fold, lexptr, lexleft, lasttok, hard_LC_COLLATE, invert, syntax_bits, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
        return 0;
    setbit_case_fold(c, ccl);
}

....
Skipping nonlast addifexit:Priority 4994
At location src/dfa.c:1117
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(c, c1, c2, case_fold, lexptr, lexleft, lasttok, hard_LC_COLLATE, invert, syntax_bits, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
        return 1;
    setbit_case_fold(c, ccl);
}

....
Skipping nonlast addifexit:Priority 4994
At location src/dfa.c:1117
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(c, c1, c2, case_fold, lexptr, lexleft, lasttok, hard_LC_COLLATE, invert, syntax_bits, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
        return 2;
    setbit_case_fold(c, ccl);
}

....
Skipping nonlast addifexit:Priority 4994
At location src/dfa.c:1117
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(c, c1, c2, case_fold, lexptr, lexleft, lasttok, hard_LC_COLLATE, invert, syntax_bits, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
        return 5;
    setbit_case_fold(c, ccl);
}

....
Skipping nonlast addifexit:Priority 4994
At location src/dfa.c:1117
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(c, c1, c2, case_fold, lexptr, lexleft, lasttok, hard_LC_COLLATE, invert, syntax_bits, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
        return 8;
    setbit_case_fold(c, ccl);
}

....
Skipping nonlast addifexit:Priority 4994
At location src/dfa.c:1117
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(c, c1, c2, case_fold, lexptr, lexleft, lasttok, hard_LC_COLLATE, invert, syntax_bits, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
        return 9;
    setbit_case_fold(c, ccl);
}

....
Skipping nonlast addifexit:Priority 4994
At location src/dfa.c:1117
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(c, c1, c2, case_fold, lexptr, lexleft, lasttok, hard_LC_COLLATE, invert, syntax_bits, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
        return 10;
    setbit_case_fold(c, ccl);
}

....
Skipping nonlast addifexit:Priority 4994
At location src/dfa.c:1117
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(c, c1, c2, case_fold, lexptr, lexleft, lasttok, hard_LC_COLLATE, invert, syntax_bits, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
        return 128;
    setbit_case_fold(c, ccl);
}

....
Skipping nonlast addifexit:Priority 4994
At location src/dfa.c:1117
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(c, c1, c2, case_fold, lexptr, lexleft, lasttok, hard_LC_COLLATE, invert, syntax_bits, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
        return 255;
    setbit_case_fold(c, ccl);
}

....
Skipping nonlast addifexit:Priority 4994
At location src/dfa.c:1117
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(c, c1, c2, case_fold, lexptr, lexleft, lasttok, hard_LC_COLLATE, invert, syntax_bits, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
        return 256;
    setbit_case_fold(c, ccl);
}

....
Skipping nonlast addifexit:Priority 4994
At location src/dfa.c:1117
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(c, c1, c2, case_fold, lexptr, lexleft, lasttok, hard_LC_COLLATE, invert, syntax_bits, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
        return 32767;
    setbit_case_fold(c, ccl);
}

....
Skipping nonlast addifexit:Priority 4994
At location src/dfa.c:1117
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(c, c1, c2, case_fold, lexptr, lexleft, lasttok, hard_LC_COLLATE, invert, syntax_bits, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
        break;
    setbit_case_fold(c, ccl);
}

....
Skipping nonlast addifexit:Priority 5194
At location src/dfa.c:1117
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(c, c1, c2, case_fold, lexptr, lexleft, lasttok, hard_LC_COLLATE, invert, syntax_bits, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
        goto skip;
    setbit_case_fold(c, ccl);
}

....
Skipping nonlast addifexit:Priority 5194
At location src/dfa.c:1117
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(c, c1, c2, case_fold, lexptr, lexleft, lasttok, hard_LC_COLLATE, invert, syntax_bits, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
        goto normal_char;
    setbit_case_fold(c, ccl);
}

....
Skipping nonlast:Priority -5
At location src/dfa.c:1120
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority -5
At location src/dfa.c:1120
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority -5
At location src/dfa.c:1120
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority -5
At location src/dfa.c:1120
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGLINE;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority -5
At location src/dfa.c:1120
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGWORD;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority -5
At location src/dfa.c:1120
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDLINE;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority -5
At location src/dfa.c:1120
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDWORD;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority -5
At location src/dfa.c:1120
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = LIMWORD;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority -5
At location src/dfa.c:1120
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = NOTLIMWORD;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority -5
At location src/dfa.c:1120
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    laststart = 0;
    return lasttok = BACKREF;
}
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority -5
At location src/dfa.c:1120
--Src File: src/dfa.c
Fragment 0:
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority -5
At location src/dfa.c:1120
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority -5
At location src/dfa.c:1120
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority -5
At location src/dfa.c:1120
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 4995
At location src/dfa.c:1120
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c1, lexptr, lexleft, lasttok, c, c2, case_fold, invert, syntax_bits, eolbyte, hard_LC_COLLATE, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return -128;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 4995
At location src/dfa.c:1120
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c1, lexptr, lexleft, lasttok, c, c2, case_fold, invert, syntax_bits, eolbyte, hard_LC_COLLATE, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return -1;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 4995
At location src/dfa.c:1120
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c1, lexptr, lexleft, lasttok, c, c2, case_fold, invert, syntax_bits, eolbyte, hard_LC_COLLATE, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 0;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 4995
At location src/dfa.c:1120
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c1, lexptr, lexleft, lasttok, c, c2, case_fold, invert, syntax_bits, eolbyte, hard_LC_COLLATE, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 1;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 4995
At location src/dfa.c:1120
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c1, lexptr, lexleft, lasttok, c, c2, case_fold, invert, syntax_bits, eolbyte, hard_LC_COLLATE, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 2;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 4995
At location src/dfa.c:1120
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c1, lexptr, lexleft, lasttok, c, c2, case_fold, invert, syntax_bits, eolbyte, hard_LC_COLLATE, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 5;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 4995
At location src/dfa.c:1120
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c1, lexptr, lexleft, lasttok, c, c2, case_fold, invert, syntax_bits, eolbyte, hard_LC_COLLATE, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 8;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 4995
At location src/dfa.c:1120
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c1, lexptr, lexleft, lasttok, c, c2, case_fold, invert, syntax_bits, eolbyte, hard_LC_COLLATE, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 9;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 4995
At location src/dfa.c:1120
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c1, lexptr, lexleft, lasttok, c, c2, case_fold, invert, syntax_bits, eolbyte, hard_LC_COLLATE, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 10;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 4995
At location src/dfa.c:1120
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c1, lexptr, lexleft, lasttok, c, c2, case_fold, invert, syntax_bits, eolbyte, hard_LC_COLLATE, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 128;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 4995
At location src/dfa.c:1120
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c1, lexptr, lexleft, lasttok, c, c2, case_fold, invert, syntax_bits, eolbyte, hard_LC_COLLATE, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 255;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 4995
At location src/dfa.c:1120
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c1, lexptr, lexleft, lasttok, c, c2, case_fold, invert, syntax_bits, eolbyte, hard_LC_COLLATE, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 256;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 4995
At location src/dfa.c:1120
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c1, lexptr, lexleft, lasttok, c, c2, case_fold, invert, syntax_bits, eolbyte, hard_LC_COLLATE, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 32767;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 4995
At location src/dfa.c:1120
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c1, lexptr, lexleft, lasttok, c, c2, case_fold, invert, syntax_bits, eolbyte, hard_LC_COLLATE, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    break;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 5195
At location src/dfa.c:1120
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c1, lexptr, lexleft, lasttok, c, c2, case_fold, invert, syntax_bits, eolbyte, hard_LC_COLLATE, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    goto skip;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast addifexit:Priority 5195
At location src/dfa.c:1120
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c1, lexptr, lexleft, lasttok, c, c2, case_fold, invert, syntax_bits, eolbyte, hard_LC_COLLATE, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    goto normal_char;
do {
    if (!lexleft) {
        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
        else
            return lasttok = END;
    }
    if ((__ctype_get_mb_cur_max()) > 1)
        update_mb_len_index(lexptr, lexleft);
    (c1) = (unsigned char)*lexptr++;
    --lexleft;
} while (0);

....
Skipping nonlast:Priority -358
At location src/dfa.c:1131
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (invert) {
    notset(ccl);
    if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit(eolbyte, ccl);
}

....
Skipping nonlast:Priority -358
At location src/dfa.c:1131
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (invert) {
    notset(ccl);
    if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit(eolbyte, ccl);
}

....
Skipping nonlast:Priority -358
At location src/dfa.c:1131
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if (invert) {
    notset(ccl);
    if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit(eolbyte, ccl);
}

....
Skipping nonlast:Priority -358
At location src/dfa.c:1131
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGLINE;
if (invert) {
    notset(ccl);
    if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit(eolbyte, ccl);
}

....
Skipping nonlast:Priority -358
At location src/dfa.c:1131
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGWORD;
if (invert) {
    notset(ccl);
    if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit(eolbyte, ccl);
}

....
Skipping nonlast:Priority -358
At location src/dfa.c:1131
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDLINE;
if (invert) {
    notset(ccl);
    if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit(eolbyte, ccl);
}

....
Skipping nonlast:Priority -358
At location src/dfa.c:1131
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDWORD;
if (invert) {
    notset(ccl);
    if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit(eolbyte, ccl);
}

....
Skipping nonlast:Priority -358
At location src/dfa.c:1131
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = LIMWORD;
if (invert) {
    notset(ccl);
    if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit(eolbyte, ccl);
}

....
Skipping nonlast:Priority -358
At location src/dfa.c:1131
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = NOTLIMWORD;
if (invert) {
    notset(ccl);
    if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit(eolbyte, ccl);
}

....
Skipping nonlast:Priority -358
At location src/dfa.c:1131
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    laststart = 0;
    return lasttok = BACKREF;
}
if (invert) {
    notset(ccl);
    if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit(eolbyte, ccl);
}

....
Skipping nonlast:Priority -358
At location src/dfa.c:1131
--Src File: src/dfa.c
Fragment 0:
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}
if (invert) {
    notset(ccl);
    if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit(eolbyte, ccl);
}

....
Skipping nonlast:Priority -358
At location src/dfa.c:1131
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (invert) {
    notset(ccl);
    if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit(eolbyte, ccl);
}

....
Skipping nonlast:Priority -358
At location src/dfa.c:1131
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (invert) {
    notset(ccl);
    if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit(eolbyte, ccl);
}

....
Skipping nonlast:Priority -358
At location src/dfa.c:1131
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (invert) {
    notset(ccl);
    if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit(eolbyte, ccl);
}

....
Skipping nonlast addifexit:Priority 3392
At location src/dfa.c:1131
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(invert, c, c1, syntax_bits, eolbyte, lasttok, laststart, case_fold, lexptr, lexleft, c2, hard_LC_COLLATE, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return -128;
if (invert) {
    notset(ccl);
    if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit(eolbyte, ccl);
}

....
Skipping nonlast addifexit:Priority 3392
At location src/dfa.c:1131
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(invert, c, c1, syntax_bits, eolbyte, lasttok, laststart, case_fold, lexptr, lexleft, c2, hard_LC_COLLATE, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return -1;
if (invert) {
    notset(ccl);
    if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit(eolbyte, ccl);
}

....
Skipping nonlast addifexit:Priority 3392
At location src/dfa.c:1131
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(invert, c, c1, syntax_bits, eolbyte, lasttok, laststart, case_fold, lexptr, lexleft, c2, hard_LC_COLLATE, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 0;
if (invert) {
    notset(ccl);
    if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit(eolbyte, ccl);
}

....
Skipping nonlast addifexit:Priority 3392
At location src/dfa.c:1131
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(invert, c, c1, syntax_bits, eolbyte, lasttok, laststart, case_fold, lexptr, lexleft, c2, hard_LC_COLLATE, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 1;
if (invert) {
    notset(ccl);
    if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit(eolbyte, ccl);
}

....
Skipping nonlast addifexit:Priority 3392
At location src/dfa.c:1131
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(invert, c, c1, syntax_bits, eolbyte, lasttok, laststart, case_fold, lexptr, lexleft, c2, hard_LC_COLLATE, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 2;
if (invert) {
    notset(ccl);
    if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit(eolbyte, ccl);
}

....
Skipping nonlast addifexit:Priority 3392
At location src/dfa.c:1131
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(invert, c, c1, syntax_bits, eolbyte, lasttok, laststart, case_fold, lexptr, lexleft, c2, hard_LC_COLLATE, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 5;
if (invert) {
    notset(ccl);
    if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit(eolbyte, ccl);
}

....
Skipping nonlast addifexit:Priority 3392
At location src/dfa.c:1131
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(invert, c, c1, syntax_bits, eolbyte, lasttok, laststart, case_fold, lexptr, lexleft, c2, hard_LC_COLLATE, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 8;
if (invert) {
    notset(ccl);
    if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit(eolbyte, ccl);
}

....
Skipping nonlast addifexit:Priority 3392
At location src/dfa.c:1131
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(invert, c, c1, syntax_bits, eolbyte, lasttok, laststart, case_fold, lexptr, lexleft, c2, hard_LC_COLLATE, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 9;
if (invert) {
    notset(ccl);
    if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit(eolbyte, ccl);
}

....
Skipping nonlast addifexit:Priority 3392
At location src/dfa.c:1131
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(invert, c, c1, syntax_bits, eolbyte, lasttok, laststart, case_fold, lexptr, lexleft, c2, hard_LC_COLLATE, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 10;
if (invert) {
    notset(ccl);
    if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit(eolbyte, ccl);
}

....
Skipping nonlast addifexit:Priority 3392
At location src/dfa.c:1131
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(invert, c, c1, syntax_bits, eolbyte, lasttok, laststart, case_fold, lexptr, lexleft, c2, hard_LC_COLLATE, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 128;
if (invert) {
    notset(ccl);
    if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit(eolbyte, ccl);
}

....
Skipping nonlast addifexit:Priority 3392
At location src/dfa.c:1131
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(invert, c, c1, syntax_bits, eolbyte, lasttok, laststart, case_fold, lexptr, lexleft, c2, hard_LC_COLLATE, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 255;
if (invert) {
    notset(ccl);
    if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit(eolbyte, ccl);
}

....
Skipping nonlast addifexit:Priority 3392
At location src/dfa.c:1131
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(invert, c, c1, syntax_bits, eolbyte, lasttok, laststart, case_fold, lexptr, lexleft, c2, hard_LC_COLLATE, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 256;
if (invert) {
    notset(ccl);
    if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit(eolbyte, ccl);
}

....
Skipping nonlast addifexit:Priority 3392
At location src/dfa.c:1131
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(invert, c, c1, syntax_bits, eolbyte, lasttok, laststart, case_fold, lexptr, lexleft, c2, hard_LC_COLLATE, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 32767;
if (invert) {
    notset(ccl);
    if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit(eolbyte, ccl);
}

....
Skipping nonlast addifexit:Priority 3392
At location src/dfa.c:1131
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(invert, c, c1, syntax_bits, eolbyte, lasttok, laststart, case_fold, lexptr, lexleft, c2, hard_LC_COLLATE, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    break;
if (invert) {
    notset(ccl);
    if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit(eolbyte, ccl);
}

....
Skipping nonlast addifexit:Priority 3592
At location src/dfa.c:1131
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(invert, c, c1, syntax_bits, eolbyte, lasttok, laststart, case_fold, lexptr, lexleft, c2, hard_LC_COLLATE, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    goto skip;
if (invert) {
    notset(ccl);
    if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit(eolbyte, ccl);
}

....
Skipping nonlast addifexit:Priority 3592
At location src/dfa.c:1131
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(invert, c, c1, syntax_bits, eolbyte, lasttok, laststart, case_fold, lexptr, lexleft, c2, hard_LC_COLLATE, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    goto normal_char;
if (invert) {
    notset(ccl);
    if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit(eolbyte, ccl);
}

....
Skipping nonlast:Priority -357
At location src/dfa.c:1137
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
return lasttok = CSET + charclass_index(ccl);

....
Skipping nonlast:Priority -357
At location src/dfa.c:1137
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
return lasttok = CSET + charclass_index(ccl);

....
Skipping nonlast:Priority -357
At location src/dfa.c:1137
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
return lasttok = CSET + charclass_index(ccl);

....
Skipping nonlast:Priority -357
At location src/dfa.c:1137
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGLINE;
return lasttok = CSET + charclass_index(ccl);

....
Skipping nonlast:Priority -357
At location src/dfa.c:1137
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGWORD;
return lasttok = CSET + charclass_index(ccl);

....
Skipping nonlast:Priority -357
At location src/dfa.c:1137
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDLINE;
return lasttok = CSET + charclass_index(ccl);

....
Skipping nonlast:Priority -357
At location src/dfa.c:1137
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDWORD;
return lasttok = CSET + charclass_index(ccl);

....
Skipping nonlast:Priority -357
At location src/dfa.c:1137
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = LIMWORD;
return lasttok = CSET + charclass_index(ccl);

....
Skipping nonlast:Priority -357
At location src/dfa.c:1137
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = NOTLIMWORD;
return lasttok = CSET + charclass_index(ccl);

....
Skipping nonlast:Priority -357
At location src/dfa.c:1137
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    laststart = 0;
    return lasttok = BACKREF;
}
return lasttok = CSET + charclass_index(ccl);

....
Skipping nonlast:Priority -357
At location src/dfa.c:1137
--Src File: src/dfa.c
Fragment 0:
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}
return lasttok = CSET + charclass_index(ccl);

....
Skipping nonlast:Priority -357
At location src/dfa.c:1137
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
return lasttok = CSET + charclass_index(ccl);

....
Skipping nonlast:Priority -357
At location src/dfa.c:1137
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
return lasttok = CSET + charclass_index(ccl);

....
Skipping nonlast:Priority -357
At location src/dfa.c:1137
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
return lasttok = CSET + charclass_index(ccl);

....
Skipping nonlast addifexit:Priority 4643
At location src/dfa.c:1137
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, eolbyte, syntax_bits, laststart, c, case_fold, invert, c1, lexptr, lexleft, c2, hard_LC_COLLATE, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return -128;
return lasttok = CSET + charclass_index(ccl);

....
Skipping nonlast addifexit:Priority 4643
At location src/dfa.c:1137
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, eolbyte, syntax_bits, laststart, c, case_fold, invert, c1, lexptr, lexleft, c2, hard_LC_COLLATE, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return -1;
return lasttok = CSET + charclass_index(ccl);

....
Skipping nonlast addifexit:Priority 4643
At location src/dfa.c:1137
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, eolbyte, syntax_bits, laststart, c, case_fold, invert, c1, lexptr, lexleft, c2, hard_LC_COLLATE, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 0;
return lasttok = CSET + charclass_index(ccl);

....
Skipping nonlast addifexit:Priority 4643
At location src/dfa.c:1137
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, eolbyte, syntax_bits, laststart, c, case_fold, invert, c1, lexptr, lexleft, c2, hard_LC_COLLATE, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 1;
return lasttok = CSET + charclass_index(ccl);

....
Skipping nonlast addifexit:Priority 4643
At location src/dfa.c:1137
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, eolbyte, syntax_bits, laststart, c, case_fold, invert, c1, lexptr, lexleft, c2, hard_LC_COLLATE, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 2;
return lasttok = CSET + charclass_index(ccl);

....
Skipping nonlast addifexit:Priority 4643
At location src/dfa.c:1137
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, eolbyte, syntax_bits, laststart, c, case_fold, invert, c1, lexptr, lexleft, c2, hard_LC_COLLATE, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 5;
return lasttok = CSET + charclass_index(ccl);

....
Skipping nonlast addifexit:Priority 4643
At location src/dfa.c:1137
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, eolbyte, syntax_bits, laststart, c, case_fold, invert, c1, lexptr, lexleft, c2, hard_LC_COLLATE, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 8;
return lasttok = CSET + charclass_index(ccl);

....
Skipping nonlast addifexit:Priority 4643
At location src/dfa.c:1137
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, eolbyte, syntax_bits, laststart, c, case_fold, invert, c1, lexptr, lexleft, c2, hard_LC_COLLATE, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 9;
return lasttok = CSET + charclass_index(ccl);

....
Skipping nonlast addifexit:Priority 4643
At location src/dfa.c:1137
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, eolbyte, syntax_bits, laststart, c, case_fold, invert, c1, lexptr, lexleft, c2, hard_LC_COLLATE, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 10;
return lasttok = CSET + charclass_index(ccl);

....
Skipping nonlast addifexit:Priority 4643
At location src/dfa.c:1137
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, eolbyte, syntax_bits, laststart, c, case_fold, invert, c1, lexptr, lexleft, c2, hard_LC_COLLATE, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 128;
return lasttok = CSET + charclass_index(ccl);

....
Skipping nonlast addifexit:Priority 4643
At location src/dfa.c:1137
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, eolbyte, syntax_bits, laststart, c, case_fold, invert, c1, lexptr, lexleft, c2, hard_LC_COLLATE, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 255;
return lasttok = CSET + charclass_index(ccl);

....
Skipping nonlast addifexit:Priority 4643
At location src/dfa.c:1137
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, eolbyte, syntax_bits, laststart, c, case_fold, invert, c1, lexptr, lexleft, c2, hard_LC_COLLATE, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 256;
return lasttok = CSET + charclass_index(ccl);

....
Skipping nonlast addifexit:Priority 4643
At location src/dfa.c:1137
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, eolbyte, syntax_bits, laststart, c, case_fold, invert, c1, lexptr, lexleft, c2, hard_LC_COLLATE, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 32767;
return lasttok = CSET + charclass_index(ccl);

....
Skipping nonlast addifexit:Priority 4643
At location src/dfa.c:1137
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, eolbyte, syntax_bits, laststart, c, case_fold, invert, c1, lexptr, lexleft, c2, hard_LC_COLLATE, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    break;
return lasttok = CSET + charclass_index(ccl);

....
Skipping nonlast addifexit:Priority 4843
At location src/dfa.c:1137
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, eolbyte, syntax_bits, laststart, c, case_fold, invert, c1, lexptr, lexleft, c2, hard_LC_COLLATE, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    goto skip;
return lasttok = CSET + charclass_index(ccl);

....
Skipping nonlast addifexit:Priority 4843
At location src/dfa.c:1137
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, eolbyte, syntax_bits, laststart, c, case_fold, invert, c1, lexptr, lexleft, c2, hard_LC_COLLATE, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    goto normal_char;
return lasttok = CSET + charclass_index(ccl);

....
Skipping nonlast:Priority 6818
At location src/dfa.c:1173
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if ((__ctype_get_mb_cur_max()) > 1) {
    if ((dfa->tindex) >= (dfa->nmultibyte_prop)) {
        do 
            (dfa->nmultibyte_prop) *= 2;
        while ((dfa->tindex) >= (dfa->nmultibyte_prop));
        ((dfa->multibyte_prop) = xrealloc((ptr_t)(dfa->multibyte_prop), (dfa->nmultibyte_prop) * sizeof(int)));
    }
    ;
    if (t == MBCSET)
        dfa->multibyte_prop[dfa->tindex] = ((dfa->nmbcsets - 1) << 2) + 3;
    else if (t < (1 << 8))
        dfa->multibyte_prop[dfa->tindex] = (cur_mb_len == 1) ? 3 : (((cur_mb_index == 1) ? 1 : 0) + ((cur_mb_index == cur_mb_len) ? 2 : 0));
    else
        dfa->multibyte_prop[dfa->tindex] = 3;
}

....
Skipping nonlast:Priority 6818
At location src/dfa.c:1173
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if ((__ctype_get_mb_cur_max()) > 1) {
    if ((dfa->tindex) >= (dfa->nmultibyte_prop)) {
        do 
            (dfa->nmultibyte_prop) *= 2;
        while ((dfa->tindex) >= (dfa->nmultibyte_prop));
        ((dfa->multibyte_prop) = xrealloc((ptr_t)(dfa->multibyte_prop), (dfa->nmultibyte_prop) * sizeof(int)));
    }
    ;
    if (t == MBCSET)
        dfa->multibyte_prop[dfa->tindex] = ((dfa->nmbcsets - 1) << 2) + 3;
    else if (t < (1 << 8))
        dfa->multibyte_prop[dfa->tindex] = (cur_mb_len == 1) ? 3 : (((cur_mb_index == 1) ? 1 : 0) + ((cur_mb_index == cur_mb_len) ? 2 : 0));
    else
        dfa->multibyte_prop[dfa->tindex] = 3;
}

....
Skipping nonlast:Priority 6818
At location src/dfa.c:1173
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if ((__ctype_get_mb_cur_max()) > 1) {
    if ((dfa->tindex) >= (dfa->nmultibyte_prop)) {
        do 
            (dfa->nmultibyte_prop) *= 2;
        while ((dfa->tindex) >= (dfa->nmultibyte_prop));
        ((dfa->multibyte_prop) = xrealloc((ptr_t)(dfa->multibyte_prop), (dfa->nmultibyte_prop) * sizeof(int)));
    }
    ;
    if (t == MBCSET)
        dfa->multibyte_prop[dfa->tindex] = ((dfa->nmbcsets - 1) << 2) + 3;
    else if (t < (1 << 8))
        dfa->multibyte_prop[dfa->tindex] = (cur_mb_len == 1) ? 3 : (((cur_mb_index == 1) ? 1 : 0) + ((cur_mb_index == cur_mb_len) ? 2 : 0));
    else
        dfa->multibyte_prop[dfa->tindex] = 3;
}

....
Skipping nonlast:Priority 6818
At location src/dfa.c:1173
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if ((__ctype_get_mb_cur_max()) > 1) {
    if ((dfa->tindex) >= (dfa->nmultibyte_prop)) {
        do 
            (dfa->nmultibyte_prop) *= 2;
        while ((dfa->tindex) >= (dfa->nmultibyte_prop));
        ((dfa->multibyte_prop) = xrealloc((ptr_t)(dfa->multibyte_prop), (dfa->nmultibyte_prop) * sizeof(int)));
    }
    ;
    if (t == MBCSET)
        dfa->multibyte_prop[dfa->tindex] = ((dfa->nmbcsets - 1) << 2) + 3;
    else if (t < (1 << 8))
        dfa->multibyte_prop[dfa->tindex] = (cur_mb_len == 1) ? 3 : (((cur_mb_index == 1) ? 1 : 0) + ((cur_mb_index == cur_mb_len) ? 2 : 0));
    else
        dfa->multibyte_prop[dfa->tindex] = 3;
}

....
Skipping nonlast:Priority 6818
At location src/dfa.c:1173
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if ((__ctype_get_mb_cur_max()) > 1) {
    if ((dfa->tindex) >= (dfa->nmultibyte_prop)) {
        do 
            (dfa->nmultibyte_prop) *= 2;
        while ((dfa->tindex) >= (dfa->nmultibyte_prop));
        ((dfa->multibyte_prop) = xrealloc((ptr_t)(dfa->multibyte_prop), (dfa->nmultibyte_prop) * sizeof(int)));
    }
    ;
    if (t == MBCSET)
        dfa->multibyte_prop[dfa->tindex] = ((dfa->nmbcsets - 1) << 2) + 3;
    else if (t < (1 << 8))
        dfa->multibyte_prop[dfa->tindex] = (cur_mb_len == 1) ? 3 : (((cur_mb_index == 1) ? 1 : 0) + ((cur_mb_index == cur_mb_len) ? 2 : 0));
    else
        dfa->multibyte_prop[dfa->tindex] = 3;
}

....
Skipping nonlast:Priority 6818
At location src/dfa.c:1173
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if ((__ctype_get_mb_cur_max()) > 1) {
    if ((dfa->tindex) >= (dfa->nmultibyte_prop)) {
        do 
            (dfa->nmultibyte_prop) *= 2;
        while ((dfa->tindex) >= (dfa->nmultibyte_prop));
        ((dfa->multibyte_prop) = xrealloc((ptr_t)(dfa->multibyte_prop), (dfa->nmultibyte_prop) * sizeof(int)));
    }
    ;
    if (t == MBCSET)
        dfa->multibyte_prop[dfa->tindex] = ((dfa->nmbcsets - 1) << 2) + 3;
    else if (t < (1 << 8))
        dfa->multibyte_prop[dfa->tindex] = (cur_mb_len == 1) ? 3 : (((cur_mb_index == 1) ? 1 : 0) + ((cur_mb_index == cur_mb_len) ? 2 : 0));
    else
        dfa->multibyte_prop[dfa->tindex] = 3;
}

....
Skipping nonlast addifexit:Priority 10568
At location src/dfa.c:1173
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(dfa, t, cur_mb_len, cur_mb_index, depth)))
    return;
if ((__ctype_get_mb_cur_max()) > 1) {
    if ((dfa->tindex) >= (dfa->nmultibyte_prop)) {
        do 
            (dfa->nmultibyte_prop) *= 2;
        while ((dfa->tindex) >= (dfa->nmultibyte_prop));
        ((dfa->multibyte_prop) = xrealloc((ptr_t)(dfa->multibyte_prop), (dfa->nmultibyte_prop) * sizeof(int)));
    }
    ;
    if (t == MBCSET)
        dfa->multibyte_prop[dfa->tindex] = ((dfa->nmbcsets - 1) << 2) + 3;
    else if (t < (1 << 8))
        dfa->multibyte_prop[dfa->tindex] = (cur_mb_len == 1) ? 3 : (((cur_mb_index == 1) ? 1 : 0) + ((cur_mb_index == cur_mb_len) ? 2 : 0));
    else
        dfa->multibyte_prop[dfa->tindex] = 3;
}

....
Skipping nonlast:Priority -679
At location src/dfa.c:1192
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if ((dfa->tindex) >= (dfa->talloc)) {
    do 
        (dfa->talloc) *= 2;
    while ((dfa->tindex) >= (dfa->talloc));
    ((dfa->tokens) = xrealloc((ptr_t)(dfa->tokens), (dfa->talloc) * sizeof(token)));
}

....
Skipping nonlast:Priority -679
At location src/dfa.c:1192
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if ((dfa->tindex) >= (dfa->talloc)) {
    do 
        (dfa->talloc) *= 2;
    while ((dfa->tindex) >= (dfa->talloc));
    ((dfa->tokens) = xrealloc((ptr_t)(dfa->tokens), (dfa->talloc) * sizeof(token)));
}

....
Skipping nonlast:Priority -679
At location src/dfa.c:1192
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if ((dfa->tindex) >= (dfa->talloc)) {
    do 
        (dfa->talloc) *= 2;
    while ((dfa->tindex) >= (dfa->talloc));
    ((dfa->tokens) = xrealloc((ptr_t)(dfa->tokens), (dfa->talloc) * sizeof(token)));
}

....
Skipping nonlast:Priority -679
At location src/dfa.c:1192
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if ((dfa->tindex) >= (dfa->talloc)) {
    do 
        (dfa->talloc) *= 2;
    while ((dfa->tindex) >= (dfa->talloc));
    ((dfa->tokens) = xrealloc((ptr_t)(dfa->tokens), (dfa->talloc) * sizeof(token)));
}

....
Skipping nonlast:Priority -679
At location src/dfa.c:1192
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if ((dfa->tindex) >= (dfa->talloc)) {
    do 
        (dfa->talloc) *= 2;
    while ((dfa->tindex) >= (dfa->talloc));
    ((dfa->tokens) = xrealloc((ptr_t)(dfa->tokens), (dfa->talloc) * sizeof(token)));
}

....
Skipping nonlast:Priority -679
At location src/dfa.c:1192
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if ((dfa->tindex) >= (dfa->talloc)) {
    do 
        (dfa->talloc) *= 2;
    while ((dfa->tindex) >= (dfa->talloc));
    ((dfa->tokens) = xrealloc((ptr_t)(dfa->tokens), (dfa->talloc) * sizeof(token)));
}

....
Skipping nonlast addifexit:Priority 3071
At location src/dfa.c:1192
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(dfa, dfa->tokens, dfa->tindex, dfa->talloc, dfa->tokens, dfa->tindex, dfa->talloc, t, dfa->multibyte_prop, dfa->multibyte_prop, cur_mb_len, cur_mb_index, depth, dfa->nmbcsets, dfa->nmbcsets, dfa->nleaves, dfa->nmultibyte_prop, dfa->nleaves, dfa->nmultibyte_prop, dfa->depth, dfa->depth, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts)))
    return;
if ((dfa->tindex) >= (dfa->talloc)) {
    do 
        (dfa->talloc) *= 2;
    while ((dfa->tindex) >= (dfa->talloc));
    ((dfa->tokens) = xrealloc((ptr_t)(dfa->tokens), (dfa->talloc) * sizeof(token)));
}

....
Skipping nonlast:Priority -677
At location src/dfa.c:1193
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
dfa->tokens[dfa->tindex++] = t;

....
Skipping nonlast:Priority -677
At location src/dfa.c:1193
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
dfa->tokens[dfa->tindex++] = t;

....
Skipping nonlast:Priority -677
At location src/dfa.c:1193
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
dfa->tokens[dfa->tindex++] = t;

....
Skipping nonlast:Priority -677
At location src/dfa.c:1193
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
dfa->tokens[dfa->tindex++] = t;

....
Skipping nonlast:Priority -677
At location src/dfa.c:1193
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
dfa->tokens[dfa->tindex++] = t;

....
Skipping nonlast:Priority -677
At location src/dfa.c:1193
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
dfa->tokens[dfa->tindex++] = t;

....
Skipping nonlast addifexit:Priority 4323
At location src/dfa.c:1193
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(t, dfa, dfa->tokens, dfa->tindex, dfa->tokens, dfa->tindex, dfa->talloc, dfa->talloc, dfa->multibyte_prop, dfa->multibyte_prop, cur_mb_len, cur_mb_index, depth, dfa->nmbcsets, dfa->nmbcsets, dfa->nleaves, dfa->nleaves, dfa->nmultibyte_prop, dfa->nmultibyte_prop, dfa->depth, dfa->depth, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts)))
    return;
dfa->tokens[dfa->tindex++] = t;

....
Skipping nonlast:Priority -676
At location src/dfa.c:1195
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
switch (t) {
  case QMARK:
  case STAR:
  case PLUS:
    break;
  case CAT:
  case OR:
  case ORTOP:
    --depth;
    break;
  default:
    ++dfa->nleaves;
  case EMPTY:
    ++depth;
    break;
}

....
Skipping nonlast:Priority -676
At location src/dfa.c:1195
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
switch (t) {
  case QMARK:
  case STAR:
  case PLUS:
    break;
  case CAT:
  case OR:
  case ORTOP:
    --depth;
    break;
  default:
    ++dfa->nleaves;
  case EMPTY:
    ++depth;
    break;
}

....
Skipping nonlast:Priority -676
At location src/dfa.c:1195
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
switch (t) {
  case QMARK:
  case STAR:
  case PLUS:
    break;
  case CAT:
  case OR:
  case ORTOP:
    --depth;
    break;
  default:
    ++dfa->nleaves;
  case EMPTY:
    ++depth;
    break;
}

....
Skipping nonlast:Priority -676
At location src/dfa.c:1195
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
switch (t) {
  case QMARK:
  case STAR:
  case PLUS:
    break;
  case CAT:
  case OR:
  case ORTOP:
    --depth;
    break;
  default:
    ++dfa->nleaves;
  case EMPTY:
    ++depth;
    break;
}

....
Skipping nonlast:Priority -676
At location src/dfa.c:1195
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
switch (t) {
  case QMARK:
  case STAR:
  case PLUS:
    break;
  case CAT:
  case OR:
  case ORTOP:
    --depth;
    break;
  default:
    ++dfa->nleaves;
  case EMPTY:
    ++depth;
    break;
}

....
Skipping nonlast:Priority -676
At location src/dfa.c:1195
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
switch (t) {
  case QMARK:
  case STAR:
  case PLUS:
    break;
  case CAT:
  case OR:
  case ORTOP:
    --depth;
    break;
  default:
    ++dfa->nleaves;
  case EMPTY:
    ++depth;
    break;
}

....
Skipping nonlast addifexit:Priority 4324
At location src/dfa.c:1195
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(t, dfa, depth, cur_mb_len, cur_mb_index)))
    return;
switch (t) {
  case QMARK:
  case STAR:
  case PLUS:
    break;
  case CAT:
  case OR:
  case ORTOP:
    --depth;
    break;
  default:
    ++dfa->nleaves;
  case EMPTY:
    ++depth;
    break;
}

....
Skipping nonlast:Priority -675
At location src/dfa.c:1206
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
break;

....
Skipping nonlast:Priority -675
At location src/dfa.c:1206
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
break;

....
Skipping nonlast:Priority -675
At location src/dfa.c:1206
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
break;

....
Skipping nonlast:Priority -675
At location src/dfa.c:1206
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
break;

....
Skipping nonlast:Priority -675
At location src/dfa.c:1206
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
break;

....
Skipping nonlast:Priority -675
At location src/dfa.c:1206
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
break;

....
Skipping nonlast addifexit:Priority 4325
At location src/dfa.c:1206
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(depth, dfa, t, cur_mb_len, cur_mb_index)))
    return;
break;

....
Skipping nonlast:Priority -686
At location src/dfa.c:1210
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
case EMPTY:
++depth;

....
Skipping nonlast:Priority -686
At location src/dfa.c:1210
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
case EMPTY:
++depth;

....
Skipping nonlast:Priority -686
At location src/dfa.c:1210
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
case EMPTY:
++depth;

....
Skipping nonlast:Priority -686
At location src/dfa.c:1210
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
case EMPTY:
++depth;

....
Skipping nonlast:Priority -686
At location src/dfa.c:1210
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
case EMPTY:
++depth;

....
Skipping nonlast:Priority -686
At location src/dfa.c:1210
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
case EMPTY:
++depth;

....
Skipping nonlast addifexit:Priority 4314
At location src/dfa.c:1210
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(dfa, depth, dfa->nleaves, dfa->nleaves, dfa->depth, dfa->depth, t, dfa->tokens, dfa->tindex, dfa->tokens, dfa->tindex, dfa->talloc, dfa->talloc, dfa->multibyte_prop, dfa->multibyte_prop, cur_mb_len, cur_mb_index, dfa->nmbcsets, dfa->nmbcsets, dfa->nmultibyte_prop, dfa->nmultibyte_prop, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts)))
    return;
case EMPTY:
++depth;

....
Skipping isstmt addifexit:Priority 3076
At location src/dfa.c:1214
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(dfa, depth, dfa->depth, dfa->depth, dfa->nleaves, dfa->nleaves, t, dfa->tokens, dfa->tindex, dfa->tokens, dfa->tindex, dfa->talloc, dfa->talloc, dfa->multibyte_prop, dfa->multibyte_prop, cur_mb_len, cur_mb_index, dfa->nmbcsets, dfa->nmbcsets, dfa->nmultibyte_prop, dfa->nmultibyte_prop, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts)))
    return;
if (depth > dfa->depth)
    dfa->depth = depth;

....
Skipping nonlast:Priority -684
At location src/dfa.c:1215
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    dfa->depth = depth;
}

....
Skipping nonlast:Priority -684
At location src/dfa.c:1215
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    dfa->depth = depth;
}

....
Skipping nonlast:Priority -684
At location src/dfa.c:1215
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        return lasttok = parse_bracket_exp_mb();
    }
    dfa->depth = depth;
}

....
Skipping nonlast:Priority -684
At location src/dfa.c:1215
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    dfa->depth = depth;
}

....
Skipping nonlast:Priority -684
At location src/dfa.c:1215
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    dfa->depth = depth;
}

....
Skipping nonlast:Priority -684
At location src/dfa.c:1215
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    dfa->depth = depth;
}

....
Skipping nonlast addifexit:Priority 4316
At location src/dfa.c:1215
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(dfa, depth, dfa->depth, dfa->depth, dfa->nleaves, dfa->nleaves, t, dfa->tokens, dfa->tindex, dfa->tokens, dfa->tindex, dfa->talloc, dfa->talloc, dfa->multibyte_prop, dfa->multibyte_prop, cur_mb_len, cur_mb_index, dfa->nmbcsets, dfa->nmbcsets, dfa->nmultibyte_prop, dfa->nmultibyte_prop, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts)))
        return;
    dfa->depth = depth;
}

....
IsErr:priority 4296
at location src/dfa.c:1257
--src file: src/dfa.c
fragment 0:
if (!(__abst_hole(tok, cur_mb_index)))
    if ((tok >= 0 && tok < (1 << 8)) || tok >= cset || tok == backref || tok == begline || tok == endline || tok == begword || tok == anychar || tok == mbcset || tok == endword || tok == limword || tok == notlimword) {
        addtok(tok);
        tok = lex();
        if ((__ctype_get_mb_cur_max()) > 1) {
            while (cur_mb_index > 1 && tok >= 0 && tok < (1 << 8))
                {
                    addtok(tok);
                    addtok(cat);
                    tok = lex();
                }
        }
    } else if (tok == crange) {
        charclass ccl;
        zeroset(ccl);
        notset(ccl);
        addtok(cset + charclass_index(ccl));
        addtok(backref);
        addtok(cat);
        tok = lex();
    } else if (tok == lparen) {
        tok = lex();
        regexp(0);
        if (tok != rparen)
            dfaerror(dcgettext(((void *)0), "unbalanced (", 5));
        tok = lex();
    } else
        addtok(empty);

....
Skipping error ifguard:Priority 4296
At location src/dfa.c:1257
--Src File: src/dfa.c
Fragment 0:
if (!(__abst_hole(tok, cur_mb_index)))
    if ((tok >= 0 && tok < (1 << 8)) || tok >= CSET || tok == BACKREF || tok == BEGLINE || tok == ENDLINE || tok == BEGWORD || tok == ANYCHAR || tok == MBCSET || tok == ENDWORD || tok == LIMWORD || tok == NOTLIMWORD) {
        addtok(tok);
        tok = lex();
        if ((__ctype_get_mb_cur_max()) > 1) {
            while (cur_mb_index > 1 && tok >= 0 && tok < (1 << 8))
                {
                    addtok(tok);
                    addtok(CAT);
                    tok = lex();
                }
        }
    } else if (tok == CRANGE) {
        charclass ccl;
        zeroset(ccl);
        notset(ccl);
        addtok(CSET + charclass_index(ccl));
        addtok(BACKREF);
        addtok(CAT);
        tok = lex();
    } else if (tok == LPAREN) {
        tok = lex();
        regexp(0);
        if (tok != RPAREN)
            dfaerror(dcgettext(((void *)0), "Unbalanced (", 5));
        tok = lex();
    } else
        addtok(EMPTY);

....
Skipping isstmt addifexit:Priority 10546
At location src/dfa.c:1257
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(tok, cur_mb_index)))
    return;
if ((tok >= 0 && tok < (1 << 8)) || tok >= CSET || tok == BACKREF || tok == BEGLINE || tok == ENDLINE || tok == BEGWORD || tok == ANYCHAR || tok == MBCSET || tok == ENDWORD || tok == LIMWORD || tok == NOTLIMWORD) {
    addtok(tok);
    tok = lex();
    if ((__ctype_get_mb_cur_max()) > 1) {
        while (cur_mb_index > 1 && tok >= 0 && tok < (1 << 8))
            {
                addtok(tok);
                addtok(CAT);
                tok = lex();
            }
    }
} else if (tok == CRANGE) {
    charclass ccl;
    zeroset(ccl);
    notset(ccl);
    addtok(CSET + charclass_index(ccl));
    addtok(BACKREF);
    addtok(CAT);
    tok = lex();
} else if (tok == LPAREN) {
    tok = lex();
    regexp(0);
    if (tok != RPAREN)
        dfaerror(dcgettext(((void *)0), "Unbalanced (", 5));
    tok = lex();
} else
    addtok(EMPTY);

....
Skipping nonlast:Priority 4297
At location src/dfa.c:1264
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
addtok(tok);

....
Skipping nonlast:Priority 4297
At location src/dfa.c:1264
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
addtok(tok);

....
Skipping nonlast:Priority 4297
At location src/dfa.c:1264
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
addtok(tok);

....
Skipping nonlast:Priority 4297
At location src/dfa.c:1264
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
addtok(tok);

....
Skipping nonlast:Priority 4297
At location src/dfa.c:1264
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
addtok(tok);

....
Skipping nonlast:Priority 4297
At location src/dfa.c:1264
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
addtok(tok);

....
Skipping nonlast addifexit:Priority 9297
At location src/dfa.c:1264
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(tok, cur_mb_index)))
    return;
addtok(tok);

....
Skipping nonlast:Priority -702
At location src/dfa.c:1265
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
tok = lex();

....
Skipping nonlast:Priority -702
At location src/dfa.c:1265
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
tok = lex();

....
Skipping nonlast:Priority -702
At location src/dfa.c:1265
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
tok = lex();

....
Skipping nonlast:Priority -702
At location src/dfa.c:1265
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
tok = lex();

....
Skipping nonlast:Priority -702
At location src/dfa.c:1265
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
tok = lex();

....
Skipping nonlast:Priority -702
At location src/dfa.c:1265
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
tok = lex();

....
Skipping nonlast addifexit:Priority 4298
At location src/dfa.c:1265
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(tok, cur_mb_index)))
    return;
tok = lex();

....
Skipping isstmt addifexit:Priority 3058
At location src/dfa.c:1274
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cur_mb_index, tok)))
    return;
if ((__ctype_get_mb_cur_max()) > 1) {
    while (cur_mb_index > 1 && tok >= 0 && tok < (1 << 8))
        {
            addtok(tok);
            addtok(CAT);
            tok = lex();
        }
}

....
Skipping nonlast:Priority -706
At location src/dfa.c:1348
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int tindex, ntokens, i;

....
Skipping nonlast:Priority -706
At location src/dfa.c:1348
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int tindex, ntokens, i;

....
Skipping nonlast:Priority -706
At location src/dfa.c:1348
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
int tindex, ntokens, i;

....
Skipping nonlast:Priority -706
At location src/dfa.c:1348
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int tindex, ntokens, i;

....
Skipping nonlast:Priority -706
At location src/dfa.c:1348
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int tindex, ntokens, i;

....
Skipping nonlast:Priority -706
At location src/dfa.c:1348
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int tindex, ntokens, i;

....
Skipping nonlast addifexit:Priority 4294
At location src/dfa.c:1348
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(tok, dfa, maxrep, minrep)))
    return;
int tindex, ntokens, i;

....
Skipping nonlast:Priority 6795
At location src/dfa.c:1350
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
atom();

....
Skipping nonlast:Priority 6795
At location src/dfa.c:1350
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
atom();

....
Skipping nonlast:Priority 6795
At location src/dfa.c:1350
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
atom();

....
Skipping nonlast:Priority 6795
At location src/dfa.c:1350
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
atom();

....
Skipping nonlast:Priority 6795
At location src/dfa.c:1350
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
atom();

....
Skipping nonlast:Priority 6795
At location src/dfa.c:1350
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
atom();

....
Skipping nonlast addifexit:Priority 11795
At location src/dfa.c:1350
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(tok, ntokens, dfa, tindex, maxrep, minrep, i)))
    return;
atom();

....
Skipping isstmt addifexit:Priority 4309
At location src/dfa.c:1351
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(tok, ntokens, dfa, tindex, maxrep, minrep, i)))
    return;
while (tok == QMARK || tok == STAR || tok == PLUS || tok == REPMN)
    if (tok == REPMN) {
        ntokens = nsubtoks(dfa->tindex);
        tindex = dfa->tindex - ntokens;
        if (maxrep < 0)
            addtok(PLUS);
        if (minrep == 0)
            addtok(QMARK);
        for (i = 1; i < minrep; ++i) {
            copytoks(tindex, ntokens);
            addtok(CAT);
        }
        for (; i < maxrep; ++i) {
            copytoks(tindex, ntokens);
            addtok(QMARK);
            addtok(CAT);
        }
        tok = lex();
    } else {
        addtok(tok);
        tok = lex();
    }

....
Skipping nonlast:Priority 6793
At location src/dfa.c:1383
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
closure();

....
Skipping nonlast:Priority 6793
At location src/dfa.c:1383
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
closure();

....
Skipping nonlast:Priority 6793
At location src/dfa.c:1383
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
closure();

....
Skipping nonlast:Priority 6793
At location src/dfa.c:1383
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
closure();

....
Skipping nonlast:Priority 6793
At location src/dfa.c:1383
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
closure();

....
Skipping nonlast:Priority 6793
At location src/dfa.c:1383
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
closure();

....
Skipping nonlast addifexit:Priority 11793
At location src/dfa.c:1383
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(tok)))
    return;
closure();

....
Skipping isstmt addifexit:Priority 4310
At location src/dfa.c:1384
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(tok)))
    return;
while (tok != RPAREN && tok != OR && tok >= 0)
    {
        closure();
        addtok(CAT);
    }

....
Skipping nonlast:Priority 6792
At location src/dfa.c:1394
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
branch();

....
Skipping nonlast:Priority 6792
At location src/dfa.c:1394
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
branch();

....
Skipping nonlast:Priority 6792
At location src/dfa.c:1394
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
branch();

....
Skipping nonlast:Priority 6792
At location src/dfa.c:1394
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
branch();

....
Skipping nonlast:Priority 6792
At location src/dfa.c:1394
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
branch();

....
Skipping nonlast:Priority 6792
At location src/dfa.c:1394
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
branch();

....
Skipping nonlast addifexit:Priority 11792
At location src/dfa.c:1394
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(tok, toplevel)))
    return;
branch();

....
Skipping isstmt addifexit:Priority 4311
At location src/dfa.c:1395
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(tok, toplevel)))
    return;
while (tok == OR)
    {
        tok = lex();
        branch();
        if (toplevel)
            addtok(ORTOP);
        else
            addtok(OR);
    }

....
Skipping nonlast:Priority 6763
At location src/dfa.c:1412
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
dfa = d;

....
Skipping nonlast:Priority 6763
At location src/dfa.c:1412
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
dfa = d;

....
Skipping nonlast:Priority 6763
At location src/dfa.c:1412
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
dfa = d;

....
Skipping nonlast:Priority 6763
At location src/dfa.c:1412
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
dfa = d;

....
Skipping nonlast:Priority 6763
At location src/dfa.c:1412
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
dfa = d;

....
Skipping nonlast:Priority 6763
At location src/dfa.c:1412
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
dfa = d;

....
Skipping nonlast addifexit:Priority 11763
At location src/dfa.c:1412
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, dfa, s, lexptr, len, lexleft, lasttok, laststart, parens, hard_LC_COLLATE, cur_mb_index, cur_mb_len, syntax_bits_set, tok, depth, d->depth, d->nregexps, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->nleaves, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->tokens, dfa->tindex, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts)))
    return;
dfa = d;

....
Skipping nonlast:Priority -736
At location src/dfa.c:1413
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
lexptr = s;

....
Skipping nonlast:Priority -736
At location src/dfa.c:1413
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
lexptr = s;

....
Skipping nonlast:Priority -736
At location src/dfa.c:1413
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
lexptr = s;

....
Skipping nonlast:Priority -736
At location src/dfa.c:1413
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
lexptr = s;

....
Skipping nonlast:Priority -736
At location src/dfa.c:1413
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
lexptr = s;

....
Skipping nonlast:Priority -736
At location src/dfa.c:1413
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
lexptr = s;

....
Skipping nonlast addifexit:Priority 4264
At location src/dfa.c:1413
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, lexptr, len, d, lexleft, dfa, lasttok, laststart, parens, hard_LC_COLLATE, cur_mb_index, cur_mb_len, syntax_bits_set, tok, depth, d->depth, d->nregexps, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->nleaves, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->tokens, dfa->tindex, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts)))
    return;
lexptr = s;

....
Skipping nonlast:Priority -735
At location src/dfa.c:1414
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
lexleft = len;

....
Skipping nonlast:Priority -735
At location src/dfa.c:1414
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
lexleft = len;

....
Skipping nonlast:Priority -735
At location src/dfa.c:1414
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
lexleft = len;

....
Skipping nonlast:Priority -735
At location src/dfa.c:1414
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
lexleft = len;

....
Skipping nonlast:Priority -735
At location src/dfa.c:1414
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
lexleft = len;

....
Skipping nonlast:Priority -735
At location src/dfa.c:1414
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
lexleft = len;

....
Skipping nonlast addifexit:Priority 4265
At location src/dfa.c:1414
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(len, lexleft, s, lexptr, lasttok, d, laststart, dfa, parens, hard_LC_COLLATE, cur_mb_index, cur_mb_len, syntax_bits_set, tok, depth)))
    return;
lexleft = len;

....
Skipping nonlast:Priority -734
At location src/dfa.c:1415
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
lasttok = END;

....
Skipping nonlast:Priority -734
At location src/dfa.c:1415
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
lasttok = END;

....
Skipping nonlast:Priority -734
At location src/dfa.c:1415
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
lasttok = END;

....
Skipping nonlast:Priority -734
At location src/dfa.c:1415
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
lasttok = END;

....
Skipping nonlast:Priority -734
At location src/dfa.c:1415
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
lasttok = END;

....
Skipping nonlast:Priority -734
At location src/dfa.c:1415
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
lasttok = END;

....
Skipping nonlast addifexit:Priority 4266
At location src/dfa.c:1415
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, len, lexleft, laststart, s, lexptr, parens, d, dfa, hard_LC_COLLATE, cur_mb_index, cur_mb_len, syntax_bits_set, tok, depth)))
    return;
lasttok = END;

....
Skipping nonlast:Priority -733
At location src/dfa.c:1416
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
laststart = 1;

....
Skipping nonlast:Priority -733
At location src/dfa.c:1416
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
laststart = 1;

....
Skipping nonlast:Priority -733
At location src/dfa.c:1416
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
laststart = 1;

....
Skipping nonlast:Priority -733
At location src/dfa.c:1416
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
laststart = 1;

....
Skipping nonlast:Priority -733
At location src/dfa.c:1416
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
laststart = 1;

....
Skipping nonlast:Priority -733
At location src/dfa.c:1416
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
laststart = 1;

....
Skipping nonlast addifexit:Priority 4267
At location src/dfa.c:1416
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, lasttok, parens, len, lexleft, s, lexptr, hard_LC_COLLATE, d, dfa, cur_mb_index, cur_mb_len, syntax_bits_set, tok, depth)))
    return;
laststart = 1;

....
Skipping nonlast:Priority -732
At location src/dfa.c:1417
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
parens = 0;

....
Skipping nonlast:Priority -732
At location src/dfa.c:1417
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
parens = 0;

....
Skipping nonlast:Priority -732
At location src/dfa.c:1417
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
parens = 0;

....
Skipping nonlast:Priority -732
At location src/dfa.c:1417
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
parens = 0;

....
Skipping nonlast:Priority -732
At location src/dfa.c:1417
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
parens = 0;

....
Skipping nonlast:Priority -732
At location src/dfa.c:1417
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
parens = 0;

....
Skipping nonlast addifexit:Priority 4268
At location src/dfa.c:1417
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(parens, laststart, lasttok, hard_LC_COLLATE, len, lexleft, s, lexptr, d, dfa, cur_mb_index, cur_mb_len, syntax_bits_set, tok, depth)))
    return;
parens = 0;

....
Skipping nonlast:Priority -731
At location src/dfa.c:1419
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
hard_LC_COLLATE = hard_locale(3);

....
Skipping nonlast:Priority -731
At location src/dfa.c:1419
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
hard_LC_COLLATE = hard_locale(3);

....
Skipping nonlast:Priority -731
At location src/dfa.c:1419
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
hard_LC_COLLATE = hard_locale(3);

....
Skipping nonlast:Priority -731
At location src/dfa.c:1419
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
hard_LC_COLLATE = hard_locale(3);

....
Skipping nonlast:Priority -731
At location src/dfa.c:1419
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
hard_LC_COLLATE = hard_locale(3);

....
Skipping nonlast:Priority -731
At location src/dfa.c:1419
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
hard_LC_COLLATE = hard_locale(3);

....
Skipping nonlast addifexit:Priority 4269
At location src/dfa.c:1419
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(hard_LC_COLLATE, parens, laststart, lasttok, len, lexleft, cur_mb_index, s, lexptr, cur_mb_len, d, dfa, syntax_bits_set, tok, depth)))
    return;
hard_LC_COLLATE = hard_locale(3);

....
Skipping nonlast:Priority -718
At location src/dfa.c:1422
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if ((__ctype_get_mb_cur_max()) > 1) {
    cur_mb_index = 0;
    cur_mb_len = 0;
    memset(&mbs, 0, sizeof(mbstate_t));
}

....
Skipping nonlast:Priority -718
At location src/dfa.c:1422
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if ((__ctype_get_mb_cur_max()) > 1) {
    cur_mb_index = 0;
    cur_mb_len = 0;
    memset(&mbs, 0, sizeof(mbstate_t));
}

....
Skipping nonlast:Priority -718
At location src/dfa.c:1422
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if ((__ctype_get_mb_cur_max()) > 1) {
    cur_mb_index = 0;
    cur_mb_len = 0;
    memset(&mbs, 0, sizeof(mbstate_t));
}

....
Skipping nonlast:Priority -718
At location src/dfa.c:1422
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if ((__ctype_get_mb_cur_max()) > 1) {
    cur_mb_index = 0;
    cur_mb_len = 0;
    memset(&mbs, 0, sizeof(mbstate_t));
}

....
Skipping nonlast:Priority -718
At location src/dfa.c:1422
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if ((__ctype_get_mb_cur_max()) > 1) {
    cur_mb_index = 0;
    cur_mb_len = 0;
    memset(&mbs, 0, sizeof(mbstate_t));
}

....
Skipping nonlast:Priority -718
At location src/dfa.c:1422
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if ((__ctype_get_mb_cur_max()) > 1) {
    cur_mb_index = 0;
    cur_mb_len = 0;
    memset(&mbs, 0, sizeof(mbstate_t));
}

....
Skipping nonlast addifexit:Priority 3032
At location src/dfa.c:1422
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cur_mb_index, hard_LC_COLLATE, cur_mb_len, parens, laststart, lasttok, len, syntax_bits_set, lexleft, s, lexptr, d, dfa, tok, depth)))
    return;
if ((__ctype_get_mb_cur_max()) > 1) {
    cur_mb_index = 0;
    cur_mb_len = 0;
    memset(&mbs, 0, sizeof(mbstate_t));
}

....
IsErr:priority 4283
at location src/dfa.c:1430
--src file: src/dfa.c
fragment 0:
if (!(__abst_hole(syntax_bits_set, tok, d, depth, cur_mb_len, cur_mb_index, hard_lc_collate, parens, laststart, lasttok, len, lexleft, s, lexptr, dfa)))
    if (!syntax_bits_set)
        dfaerror(dcgettext(((void *)0), "no syntax specified", 5));

....
Skipping error ifguard:Priority 4283
At location src/dfa.c:1430
--Src File: src/dfa.c
Fragment 0:
if (!(__abst_hole(syntax_bits_set, tok, d, depth, cur_mb_len, cur_mb_index, hard_LC_COLLATE, parens, laststart, lasttok, len, lexleft, s, lexptr, dfa)))
    if (!syntax_bits_set)
        dfaerror(dcgettext(((void *)0), "No syntax specified", 5));

....
Skipping nonlast:Priority -717
At location src/dfa.c:1430
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (!syntax_bits_set)
    dfaerror(dcgettext(((void *)0), "No syntax specified", 5));

....
Skipping nonlast:Priority -717
At location src/dfa.c:1430
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (!syntax_bits_set)
    dfaerror(dcgettext(((void *)0), "No syntax specified", 5));

....
Skipping nonlast:Priority -717
At location src/dfa.c:1430
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if (!syntax_bits_set)
    dfaerror(dcgettext(((void *)0), "No syntax specified", 5));

....
Skipping nonlast:Priority -717
At location src/dfa.c:1430
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (!syntax_bits_set)
    dfaerror(dcgettext(((void *)0), "No syntax specified", 5));

....
Skipping nonlast:Priority -717
At location src/dfa.c:1430
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (!syntax_bits_set)
    dfaerror(dcgettext(((void *)0), "No syntax specified", 5));

....
Skipping nonlast:Priority -717
At location src/dfa.c:1430
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (!syntax_bits_set)
    dfaerror(dcgettext(((void *)0), "No syntax specified", 5));

....
Skipping nonlast addifexit:Priority 3033
At location src/dfa.c:1430
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits_set, tok, d, depth, cur_mb_len, cur_mb_index, hard_LC_COLLATE, parens, laststart, lasttok, len, lexleft, s, lexptr, dfa)))
    return;
if (!syntax_bits_set)
    dfaerror(dcgettext(((void *)0), "No syntax specified", 5));

....
Skipping nonlast:Priority -716
At location src/dfa.c:1433
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
tok = lex();

....
Skipping nonlast:Priority -716
At location src/dfa.c:1433
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
tok = lex();

....
Skipping nonlast:Priority -716
At location src/dfa.c:1433
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
tok = lex();

....
Skipping nonlast:Priority -716
At location src/dfa.c:1433
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
tok = lex();

....
Skipping nonlast:Priority -716
At location src/dfa.c:1433
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
tok = lex();

....
Skipping nonlast:Priority -716
At location src/dfa.c:1433
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
tok = lex();

....
Skipping nonlast addifexit:Priority 4284
At location src/dfa.c:1433
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(tok, d, depth, d->depth, syntax_bits_set, cur_mb_len, d->nregexps, cur_mb_index, hard_LC_COLLATE, parens, laststart, lasttok, len, lexleft, s, lexptr, dfa, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->nleaves, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
tok = lex();

....
Skipping nonlast:Priority -710
At location src/dfa.c:1434
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
depth = d->depth;

....
Skipping nonlast:Priority -710
At location src/dfa.c:1434
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
depth = d->depth;

....
Skipping nonlast:Priority -710
At location src/dfa.c:1434
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
depth = d->depth;

....
Skipping nonlast:Priority -710
At location src/dfa.c:1434
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
depth = d->depth;

....
Skipping nonlast:Priority -710
At location src/dfa.c:1434
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
depth = d->depth;

....
Skipping nonlast:Priority -710
At location src/dfa.c:1434
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
depth = d->depth;

....
Skipping nonlast addifexit:Priority 4290
At location src/dfa.c:1434
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, depth, d->depth, tok, syntax_bits_set, d->nregexps, cur_mb_len, cur_mb_index, hard_LC_COLLATE, parens, laststart, lasttok, len, lexleft, s, lexptr, dfa, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->nleaves, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
depth = d->depth;

....
Skipping nonlast:Priority -709
At location src/dfa.c:1436
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
regexp(1);

....
Skipping nonlast:Priority -709
At location src/dfa.c:1436
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
regexp(1);

....
Skipping nonlast:Priority -709
At location src/dfa.c:1436
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
regexp(1);

....
Skipping nonlast:Priority -709
At location src/dfa.c:1436
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
regexp(1);

....
Skipping nonlast:Priority -709
At location src/dfa.c:1436
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
regexp(1);

....
Skipping nonlast:Priority -709
At location src/dfa.c:1436
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
regexp(1);

....
Skipping nonlast addifexit:Priority 4291
At location src/dfa.c:1436
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, tok, depth, syntax_bits_set, cur_mb_len, cur_mb_index, hard_LC_COLLATE, parens, laststart, lasttok, len, lexleft, s, lexptr, dfa)))
    return;
regexp(1);

....
IsErr:priority 4312
at location src/dfa.c:1438
--src file: src/dfa.c
fragment 0:
if (!(__abst_hole(tok, d, depth, syntax_bits_set, cur_mb_len, cur_mb_index, hard_lc_collate, parens, laststart, lasttok, len, lexleft, s, lexptr, dfa)))
    if (tok != end)
        dfaerror(dcgettext(((void *)0), "unbalanced )", 5));

....
Skipping error ifguard:Priority 4312
At location src/dfa.c:1438
--Src File: src/dfa.c
Fragment 0:
if (!(__abst_hole(tok, d, depth, syntax_bits_set, cur_mb_len, cur_mb_index, hard_LC_COLLATE, parens, laststart, lasttok, len, lexleft, s, lexptr, dfa)))
    if (tok != END)
        dfaerror(dcgettext(((void *)0), "Unbalanced )", 5));

....
Skipping nonlast:Priority -688
At location src/dfa.c:1438
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (tok != END)
    dfaerror(dcgettext(((void *)0), "Unbalanced )", 5));

....
Skipping nonlast:Priority -688
At location src/dfa.c:1438
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (tok != END)
    dfaerror(dcgettext(((void *)0), "Unbalanced )", 5));

....
Skipping nonlast:Priority -688
At location src/dfa.c:1438
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if (tok != END)
    dfaerror(dcgettext(((void *)0), "Unbalanced )", 5));

....
Skipping nonlast:Priority -688
At location src/dfa.c:1438
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (tok != END)
    dfaerror(dcgettext(((void *)0), "Unbalanced )", 5));

....
Skipping nonlast:Priority -688
At location src/dfa.c:1438
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (tok != END)
    dfaerror(dcgettext(((void *)0), "Unbalanced )", 5));

....
Skipping nonlast:Priority -688
At location src/dfa.c:1438
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (tok != END)
    dfaerror(dcgettext(((void *)0), "Unbalanced )", 5));

....
Skipping nonlast addifexit:Priority 3062
At location src/dfa.c:1438
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(tok, d, depth, syntax_bits_set, cur_mb_len, cur_mb_index, hard_LC_COLLATE, parens, laststart, lasttok, len, lexleft, s, lexptr, dfa)))
    return;
if (tok != END)
    dfaerror(dcgettext(((void *)0), "Unbalanced )", 5));

....
Skipping nonlast:Priority -687
At location src/dfa.c:1441
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
addtok(END - d->nregexps);

....
Skipping nonlast:Priority -687
At location src/dfa.c:1441
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
addtok(END - d->nregexps);

....
Skipping nonlast:Priority -687
At location src/dfa.c:1441
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
addtok(END - d->nregexps);

....
Skipping nonlast:Priority -687
At location src/dfa.c:1441
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
addtok(END - d->nregexps);

....
Skipping nonlast:Priority -687
At location src/dfa.c:1441
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
addtok(END - d->nregexps);

....
Skipping nonlast:Priority -687
At location src/dfa.c:1441
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
addtok(END - d->nregexps);

....
Skipping nonlast addifexit:Priority 4313
At location src/dfa.c:1441
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->nregexps, tok, depth, d->depth, syntax_bits_set, cur_mb_len, cur_mb_index, hard_LC_COLLATE, parens, laststart, lasttok, len, lexleft, s, lexptr, dfa, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->nleaves, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
addtok(END - d->nregexps);

....
Skipping nonlast:Priority -683
At location src/dfa.c:1442
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
addtok(CAT);

....
Skipping nonlast:Priority -683
At location src/dfa.c:1442
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
addtok(CAT);

....
Skipping nonlast:Priority -683
At location src/dfa.c:1442
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
addtok(CAT);

....
Skipping nonlast:Priority -683
At location src/dfa.c:1442
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
addtok(CAT);

....
Skipping nonlast:Priority -683
At location src/dfa.c:1442
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
addtok(CAT);

....
Skipping nonlast:Priority -683
At location src/dfa.c:1442
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
addtok(CAT);

....
Skipping nonlast addifexit:Priority 4317
At location src/dfa.c:1442
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->nregexps, tok, depth, d->depth, syntax_bits_set, cur_mb_len, cur_mb_index, hard_LC_COLLATE, parens, laststart, lasttok, len, lexleft, s, lexptr, dfa, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->nleaves, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
addtok(CAT);

....
Skipping nonlast:Priority -673
At location src/dfa.c:1444
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (d->nregexps)
    addtok(ORTOP);

....
Skipping nonlast:Priority -673
At location src/dfa.c:1444
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (d->nregexps)
    addtok(ORTOP);

....
Skipping nonlast:Priority -673
At location src/dfa.c:1444
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if (d->nregexps)
    addtok(ORTOP);

....
Skipping nonlast:Priority -673
At location src/dfa.c:1444
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (d->nregexps)
    addtok(ORTOP);

....
Skipping nonlast:Priority -673
At location src/dfa.c:1444
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (d->nregexps)
    addtok(ORTOP);

....
Skipping nonlast:Priority -673
At location src/dfa.c:1444
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (d->nregexps)
    addtok(ORTOP);

....
Skipping nonlast addifexit:Priority 3077
At location src/dfa.c:1444
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->nregexps, tok, depth, d->depth, syntax_bits_set, cur_mb_len, cur_mb_index, hard_LC_COLLATE, parens, laststart, lasttok, len, lexleft, s, lexptr, dfa, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->nleaves, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
if (d->nregexps)
    addtok(ORTOP);

....
Skipping nonlast:Priority -428
At location src/dfa.c:1456
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int i;

....
Skipping nonlast:Priority -428
At location src/dfa.c:1456
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int i;

....
Skipping nonlast:Priority -428
At location src/dfa.c:1456
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
int i;

....
Skipping nonlast:Priority -428
At location src/dfa.c:1456
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int i;

....
Skipping nonlast:Priority -428
At location src/dfa.c:1456
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int i;

....
Skipping nonlast:Priority -428
At location src/dfa.c:1456
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int i;

....
Skipping nonlast addifexit:Priority 4572
At location src/dfa.c:1456
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(src, dst)))
    return;
int i;

....
Skipping nonlast:Priority 7073
At location src/dfa.c:1458
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
for (i = 0; i < src->nelem; ++i) 
    dst->elems[i] = src->elems[i];

....
Skipping nonlast:Priority 7073
At location src/dfa.c:1458
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
for (i = 0; i < src->nelem; ++i) 
    dst->elems[i] = src->elems[i];

....
Skipping nonlast:Priority 7073
At location src/dfa.c:1458
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
for (i = 0; i < src->nelem; ++i) 
    dst->elems[i] = src->elems[i];

....
Skipping nonlast:Priority 7073
At location src/dfa.c:1458
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
for (i = 0; i < src->nelem; ++i) 
    dst->elems[i] = src->elems[i];

....
Skipping nonlast:Priority 7073
At location src/dfa.c:1458
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
for (i = 0; i < src->nelem; ++i) 
    dst->elems[i] = src->elems[i];

....
Skipping nonlast:Priority 7073
At location src/dfa.c:1458
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
for (i = 0; i < src->nelem; ++i) 
    dst->elems[i] = src->elems[i];

....
Skipping nonlast addifexit:Priority 12073
At location src/dfa.c:1458
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(src, i, src->nelem, dst, dst->elems, src->elems, dst->nelem)))
    return;
for (i = 0; i < src->nelem; ++i) 
    dst->elems[i] = src->elems[i];

....
Skipping nonlast:Priority -452
At location src/dfa.c:1470
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int count = s->nelem;

....
Skipping nonlast:Priority -452
At location src/dfa.c:1470
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int count = s->nelem;

....
Skipping nonlast:Priority -452
At location src/dfa.c:1470
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
int count = s->nelem;

....
Skipping nonlast:Priority -452
At location src/dfa.c:1470
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int count = s->nelem;

....
Skipping nonlast:Priority -452
At location src/dfa.c:1470
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int count = s->nelem;

....
Skipping nonlast:Priority -452
At location src/dfa.c:1470
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int count = s->nelem;

....
Skipping nonlast addifexit:Priority 4548
At location src/dfa.c:1470
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, s->nelem, s->elems)))
    return;
int count = s->nelem;

....
Skipping nonlast:Priority -451
At location src/dfa.c:1471
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int lo = 0, hi = count;

....
Skipping nonlast:Priority -451
At location src/dfa.c:1471
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int lo = 0, hi = count;

....
Skipping nonlast:Priority -451
At location src/dfa.c:1471
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
int lo = 0, hi = count;

....
Skipping nonlast:Priority -451
At location src/dfa.c:1471
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int lo = 0, hi = count;

....
Skipping nonlast:Priority -451
At location src/dfa.c:1471
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int lo = 0, hi = count;

....
Skipping nonlast:Priority -451
At location src/dfa.c:1471
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int lo = 0, hi = count;

....
Skipping nonlast addifexit:Priority 4549
At location src/dfa.c:1471
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(count, s, s->nelem, s->elems)))
    return;
int lo = 0, hi = count;

....
Skipping nonlast:Priority 7050
At location src/dfa.c:1472
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
while (lo < hi)
    {
        int mid = ((unsigned int)lo + (unsigned int)hi) >> 1;
        if (s->elems[mid].index < p.index)
            lo = mid + 1;
        else
            hi = mid;
    }

....
Skipping nonlast:Priority 7050
At location src/dfa.c:1472
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
while (lo < hi)
    {
        int mid = ((unsigned int)lo + (unsigned int)hi) >> 1;
        if (s->elems[mid].index < p.index)
            lo = mid + 1;
        else
            hi = mid;
    }

....
Skipping nonlast:Priority 7050
At location src/dfa.c:1472
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
while (lo < hi)
    {
        int mid = ((unsigned int)lo + (unsigned int)hi) >> 1;
        if (s->elems[mid].index < p.index)
            lo = mid + 1;
        else
            hi = mid;
    }

....
Skipping nonlast:Priority 7050
At location src/dfa.c:1472
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
while (lo < hi)
    {
        int mid = ((unsigned int)lo + (unsigned int)hi) >> 1;
        if (s->elems[mid].index < p.index)
            lo = mid + 1;
        else
            hi = mid;
    }

....
Skipping nonlast:Priority 7050
At location src/dfa.c:1472
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
while (lo < hi)
    {
        int mid = ((unsigned int)lo + (unsigned int)hi) >> 1;
        if (s->elems[mid].index < p.index)
            lo = mid + 1;
        else
            hi = mid;
    }

....
Skipping nonlast:Priority 7050
At location src/dfa.c:1472
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
while (lo < hi)
    {
        int mid = ((unsigned int)lo + (unsigned int)hi) >> 1;
        if (s->elems[mid].index < p.index)
            lo = mid + 1;
        else
            hi = mid;
    }

....
Skipping nonlast addifexit:Priority 12050
At location src/dfa.c:1472
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lo, hi, count, s)))
    return;
while (lo < hi)
    {
        int mid = ((unsigned int)lo + (unsigned int)hi) >> 1;
        if (s->elems[mid].index < p.index)
            lo = mid + 1;
        else
            hi = mid;
    }

....
Skipping nonlast:Priority -248
At location src/dfa.c:1474
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int mid = ((unsigned int)lo + (unsigned int)hi) >> 1;

....
Skipping nonlast:Priority -248
At location src/dfa.c:1474
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int mid = ((unsigned int)lo + (unsigned int)hi) >> 1;

....
Skipping nonlast:Priority -248
At location src/dfa.c:1474
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
int mid = ((unsigned int)lo + (unsigned int)hi) >> 1;

....
Skipping nonlast:Priority -248
At location src/dfa.c:1474
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int mid = ((unsigned int)lo + (unsigned int)hi) >> 1;

....
Skipping nonlast:Priority -248
At location src/dfa.c:1474
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int mid = ((unsigned int)lo + (unsigned int)hi) >> 1;

....
Skipping nonlast:Priority -248
At location src/dfa.c:1474
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int mid = ((unsigned int)lo + (unsigned int)hi) >> 1;

....
Skipping nonlast addifexit:Priority 4752
At location src/dfa.c:1474
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lo, hi, s, p.index, s->elems, count, s->nelem, p.constraint)))
    return;
int mid = ((unsigned int)lo + (unsigned int)hi) >> 1;

....
Skipping nonlast addifexit:Priority 4752
At location src/dfa.c:1474
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lo, hi, s, p.index, s->elems, count, s->nelem, p.constraint)))
    break;
int mid = ((unsigned int)lo + (unsigned int)hi) >> 1;

....
Skipping isstmt addifexit:Priority 8503
At location src/dfa.c:1475
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, mid, s->elems[mid].index, p.index, s->elems, lo, hi, count, s->nelem, p.constraint, s->elems[mid].constraint)))
    return;
if (s->elems[mid].index < p.index)
    lo = mid + 1;
else
    hi = mid;

....
Skipping isstmt addifexit:Priority 8503
At location src/dfa.c:1475
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, mid, s->elems[mid].index, p.index, s->elems, lo, hi, count, s->nelem, p.constraint, s->elems[mid].constraint)))
    break;
if (s->elems[mid].index < p.index)
    lo = mid + 1;
else
    hi = mid;

....
Skipping nonlast:Priority -246
At location src/dfa.c:1478
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    hi = mid;
}

....
Skipping nonlast:Priority -246
At location src/dfa.c:1478
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    hi = mid;
}

....
Skipping nonlast:Priority -246
At location src/dfa.c:1478
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        return lasttok = parse_bracket_exp_mb();
    }
    hi = mid;
}

....
Skipping nonlast:Priority -246
At location src/dfa.c:1478
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    hi = mid;
}

....
Skipping nonlast:Priority -246
At location src/dfa.c:1478
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    hi = mid;
}

....
Skipping nonlast:Priority -246
At location src/dfa.c:1478
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    hi = mid;
}

....
Skipping nonlast addifexit:Priority 4754
At location src/dfa.c:1478
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(hi, mid, lo, s, count)))
        return;
    hi = mid;
}

....
Skipping nonlast addifexit:Priority 4754
At location src/dfa.c:1478
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(hi, mid, lo, s, count)))
        break;
    hi = mid;
}

....
Skipping isstmt addifexit:Priority 3301
At location src/dfa.c:1481
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, count, lo, s->elems[lo].index, p.index, s->elems, s->elems[lo].constraint, p.constraint, hi, s->nelem)))
    return;
if (lo < count && p.index == s->elems[lo].index)
    s->elems[lo].constraint |= p.constraint;
else {
    int i;
    for (i = count; i > lo; i--) 
        s->elems[i] = s->elems[i - 1];
    s->elems[lo] = p;
    ++s->nelem;
}

....
Skipping nonlast:Priority -448
At location src/dfa.c:1485
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int i;

....
Skipping nonlast:Priority -448
At location src/dfa.c:1485
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int i;

....
Skipping nonlast:Priority -448
At location src/dfa.c:1485
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
int i;

....
Skipping nonlast:Priority -448
At location src/dfa.c:1485
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int i;

....
Skipping nonlast:Priority -448
At location src/dfa.c:1485
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int i;

....
Skipping nonlast:Priority -448
At location src/dfa.c:1485
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int i;

....
Skipping nonlast addifexit:Priority 4552
At location src/dfa.c:1485
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(count, lo, s, hi)))
    return;
int i;

....
Skipping nonlast:Priority 4553
At location src/dfa.c:1486
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
for (i = count; i > lo; i--) 
    s->elems[i] = s->elems[i - 1];

....
Skipping nonlast:Priority 4553
At location src/dfa.c:1486
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
for (i = count; i > lo; i--) 
    s->elems[i] = s->elems[i - 1];

....
Skipping nonlast:Priority 4553
At location src/dfa.c:1486
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
for (i = count; i > lo; i--) 
    s->elems[i] = s->elems[i - 1];

....
Skipping nonlast:Priority 4553
At location src/dfa.c:1486
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
for (i = count; i > lo; i--) 
    s->elems[i] = s->elems[i - 1];

....
Skipping nonlast:Priority 4553
At location src/dfa.c:1486
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
for (i = count; i > lo; i--) 
    s->elems[i] = s->elems[i - 1];

....
Skipping nonlast:Priority 4553
At location src/dfa.c:1486
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
for (i = count; i > lo; i--) 
    s->elems[i] = s->elems[i - 1];

....
Skipping nonlast addifexit:Priority 9553
At location src/dfa.c:1486
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(count, lo, i, s, s->elems, s->nelem, hi)))
    return;
for (i = count; i > lo; i--) 
    s->elems[i] = s->elems[i - 1];

....
Skipping nonlast:Priority -446
At location src/dfa.c:1488
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
s->elems[lo] = p;

....
Skipping nonlast:Priority -446
At location src/dfa.c:1488
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
s->elems[lo] = p;

....
Skipping nonlast:Priority -446
At location src/dfa.c:1488
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
s->elems[lo] = p;

....
Skipping nonlast:Priority -446
At location src/dfa.c:1488
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
s->elems[lo] = p;

....
Skipping nonlast:Priority -446
At location src/dfa.c:1488
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
s->elems[lo] = p;

....
Skipping nonlast:Priority -446
At location src/dfa.c:1488
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
s->elems[lo] = p;

....
Skipping nonlast addifexit:Priority 4554
At location src/dfa.c:1488
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, lo, s->elems, i, s->nelem, count, s->elems[lo].constraint, p.constraint, s->elems[lo].index, p.index, hi)))
    return;
s->elems[lo] = p;

....
Skipping nonlast:Priority -581
At location src/dfa.c:1498
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int i = 0, j = 0;

....
Skipping nonlast:Priority -581
At location src/dfa.c:1498
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int i = 0, j = 0;

....
Skipping nonlast:Priority -581
At location src/dfa.c:1498
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
int i = 0, j = 0;

....
Skipping nonlast:Priority -581
At location src/dfa.c:1498
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int i = 0, j = 0;

....
Skipping nonlast:Priority -581
At location src/dfa.c:1498
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int i = 0, j = 0;

....
Skipping nonlast:Priority -581
At location src/dfa.c:1498
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int i = 0, j = 0;

....
Skipping nonlast addifexit:Priority 4419
At location src/dfa.c:1498
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(m, s1, s2)))
    return;
int i = 0, j = 0;

....
Skipping nonlast:Priority 6920
At location src/dfa.c:1500
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
m->nelem = 0;

....
Skipping nonlast:Priority 6920
At location src/dfa.c:1500
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
m->nelem = 0;

....
Skipping nonlast:Priority 6920
At location src/dfa.c:1500
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
m->nelem = 0;

....
Skipping nonlast:Priority 6920
At location src/dfa.c:1500
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
m->nelem = 0;

....
Skipping nonlast:Priority 6920
At location src/dfa.c:1500
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
m->nelem = 0;

....
Skipping nonlast:Priority 6920
At location src/dfa.c:1500
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
m->nelem = 0;

....
Skipping nonlast addifexit:Priority 11920
At location src/dfa.c:1500
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(m, m->nelem, s1, s2, i, j, s1->nelem, s2->nelem, s1->elems, s2->elems, m->elems)))
    return;
m->nelem = 0;

....
Skipping nonlast:Priority -579
At location src/dfa.c:1501
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
while (i < s1->nelem && j < s2->nelem)
    if (s1->elems[i].index > s2->elems[j].index)
        m->elems[m->nelem++] = s1->elems[i++];
    else if (s1->elems[i].index < s2->elems[j].index)
        m->elems[m->nelem++] = s2->elems[j++];
    else {
        m->elems[m->nelem] = s1->elems[i++];
        m->elems[m->nelem++].constraint |= s2->elems[j++].constraint;
    }

....
Skipping nonlast:Priority -579
At location src/dfa.c:1501
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
while (i < s1->nelem && j < s2->nelem)
    if (s1->elems[i].index > s2->elems[j].index)
        m->elems[m->nelem++] = s1->elems[i++];
    else if (s1->elems[i].index < s2->elems[j].index)
        m->elems[m->nelem++] = s2->elems[j++];
    else {
        m->elems[m->nelem] = s1->elems[i++];
        m->elems[m->nelem++].constraint |= s2->elems[j++].constraint;
    }

....
Skipping nonlast:Priority -579
At location src/dfa.c:1501
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
while (i < s1->nelem && j < s2->nelem)
    if (s1->elems[i].index > s2->elems[j].index)
        m->elems[m->nelem++] = s1->elems[i++];
    else if (s1->elems[i].index < s2->elems[j].index)
        m->elems[m->nelem++] = s2->elems[j++];
    else {
        m->elems[m->nelem] = s1->elems[i++];
        m->elems[m->nelem++].constraint |= s2->elems[j++].constraint;
    }

....
Skipping nonlast:Priority -579
At location src/dfa.c:1501
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
while (i < s1->nelem && j < s2->nelem)
    if (s1->elems[i].index > s2->elems[j].index)
        m->elems[m->nelem++] = s1->elems[i++];
    else if (s1->elems[i].index < s2->elems[j].index)
        m->elems[m->nelem++] = s2->elems[j++];
    else {
        m->elems[m->nelem] = s1->elems[i++];
        m->elems[m->nelem++].constraint |= s2->elems[j++].constraint;
    }

....
Skipping nonlast:Priority -579
At location src/dfa.c:1501
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
while (i < s1->nelem && j < s2->nelem)
    if (s1->elems[i].index > s2->elems[j].index)
        m->elems[m->nelem++] = s1->elems[i++];
    else if (s1->elems[i].index < s2->elems[j].index)
        m->elems[m->nelem++] = s2->elems[j++];
    else {
        m->elems[m->nelem] = s1->elems[i++];
        m->elems[m->nelem++].constraint |= s2->elems[j++].constraint;
    }

....
Skipping nonlast:Priority -579
At location src/dfa.c:1501
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
while (i < s1->nelem && j < s2->nelem)
    if (s1->elems[i].index > s2->elems[j].index)
        m->elems[m->nelem++] = s1->elems[i++];
    else if (s1->elems[i].index < s2->elems[j].index)
        m->elems[m->nelem++] = s2->elems[j++];
    else {
        m->elems[m->nelem] = s1->elems[i++];
        m->elems[m->nelem++].constraint |= s2->elems[j++].constraint;
    }

....
Skipping nonlast addifexit:Priority 4421
At location src/dfa.c:1501
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s1, s2, i, j, s1->nelem, s2->nelem, m, s1->elems[i].index, s2->elems[j].index, s1->elems, m->nelem, s2->elems, m->elems, s1->elems[i].constraint, s2->elems[j].constraint)))
    return;
while (i < s1->nelem && j < s2->nelem)
    if (s1->elems[i].index > s2->elems[j].index)
        m->elems[m->nelem++] = s1->elems[i++];
    else if (s1->elems[i].index < s2->elems[j].index)
        m->elems[m->nelem++] = s2->elems[j++];
    else {
        m->elems[m->nelem] = s1->elems[i++];
        m->elems[m->nelem++].constraint |= s2->elems[j++].constraint;
    }

....
Skipping nonlast:Priority -578
At location src/dfa.c:1511
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
while (i < s1->nelem)
    m->elems[m->nelem++] = s1->elems[i++];

....
Skipping nonlast:Priority -578
At location src/dfa.c:1511
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
while (i < s1->nelem)
    m->elems[m->nelem++] = s1->elems[i++];

....
Skipping nonlast:Priority -578
At location src/dfa.c:1511
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
while (i < s1->nelem)
    m->elems[m->nelem++] = s1->elems[i++];

....
Skipping nonlast:Priority -578
At location src/dfa.c:1511
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
while (i < s1->nelem)
    m->elems[m->nelem++] = s1->elems[i++];

....
Skipping nonlast:Priority -578
At location src/dfa.c:1511
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
while (i < s1->nelem)
    m->elems[m->nelem++] = s1->elems[i++];

....
Skipping nonlast:Priority -578
At location src/dfa.c:1511
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
while (i < s1->nelem)
    m->elems[m->nelem++] = s1->elems[i++];

....
Skipping nonlast addifexit:Priority 4422
At location src/dfa.c:1511
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s1, i, s1->nelem, m, s1->elems, m->elems, m->nelem, s2, j, m->elems[m->nelem++].constraint, m->elems[m->nelem++].index)))
    return;
while (i < s1->nelem)
    m->elems[m->nelem++] = s1->elems[i++];

....
Skipping isstmt addifexit:Priority 4423
At location src/dfa.c:1513
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s2, j, s2->nelem, s1, m, i, s1->elems, m->elems, m->nelem, s2->elems, s1->nelem, m->elems[m->nelem++].constraint, s2->elems[j++].constraint, m->elems[m->nelem++].index, s2->elems[j++].index)))
    return;
while (j < s2->nelem)
    m->elems[m->nelem++] = s2->elems[j++];

....
Skipping nonlast:Priority -444
At location src/dfa.c:1538
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int hash = 0;

....
Skipping nonlast:Priority -444
At location src/dfa.c:1538
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int hash = 0;

....
Skipping nonlast:Priority -444
At location src/dfa.c:1538
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
int hash = 0;

....
Skipping nonlast:Priority -444
At location src/dfa.c:1538
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int hash = 0;

....
Skipping nonlast:Priority -444
At location src/dfa.c:1538
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int hash = 0;

....
Skipping nonlast:Priority -444
At location src/dfa.c:1538
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int hash = 0;

....
Skipping nonlast addifexit:Priority 4556
At location src/dfa.c:1538
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(newline, letter, s, d)))
    return 0;
int hash = 0;

....
Skipping nonlast addifexit:Priority 4556
At location src/dfa.c:1538
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(newline, letter, s, d)))
    return 1;
int hash = 0;

....
Skipping nonlast addifexit:Priority 4556
At location src/dfa.c:1538
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(newline, letter, s, d)))
    return 2;
int hash = 0;

....
Skipping nonlast addifexit:Priority 4556
At location src/dfa.c:1538
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(newline, letter, s, d)))
    return 4;
int hash = 0;

....
Skipping nonlast addifexit:Priority 4556
At location src/dfa.c:1538
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(newline, letter, s, d)))
    return 255;
int hash = 0;

....
Skipping nonlast:Priority -443
At location src/dfa.c:1539
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int constraint;

....
Skipping nonlast:Priority -443
At location src/dfa.c:1539
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int constraint;

....
Skipping nonlast:Priority -443
At location src/dfa.c:1539
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
int constraint;

....
Skipping nonlast:Priority -443
At location src/dfa.c:1539
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int constraint;

....
Skipping nonlast:Priority -443
At location src/dfa.c:1539
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int constraint;

....
Skipping nonlast:Priority -443
At location src/dfa.c:1539
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int constraint;

....
Skipping nonlast addifexit:Priority 4557
At location src/dfa.c:1539
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(newline, letter, s, hash, d)))
    return 0;
int constraint;

....
Skipping nonlast addifexit:Priority 4557
At location src/dfa.c:1539
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(newline, letter, s, hash, d)))
    return 1;
int constraint;

....
Skipping nonlast addifexit:Priority 4557
At location src/dfa.c:1539
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(newline, letter, s, hash, d)))
    return 2;
int constraint;

....
Skipping nonlast addifexit:Priority 4557
At location src/dfa.c:1539
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(newline, letter, s, hash, d)))
    return 4;
int constraint;

....
Skipping nonlast addifexit:Priority 4557
At location src/dfa.c:1539
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(newline, letter, s, hash, d)))
    return 255;
int constraint;

....
Skipping nonlast:Priority -442
At location src/dfa.c:1540
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int i, j;

....
Skipping nonlast:Priority -442
At location src/dfa.c:1540
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int i, j;

....
Skipping nonlast:Priority -442
At location src/dfa.c:1540
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
int i, j;

....
Skipping nonlast:Priority -442
At location src/dfa.c:1540
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int i, j;

....
Skipping nonlast:Priority -442
At location src/dfa.c:1540
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int i, j;

....
Skipping nonlast:Priority -442
At location src/dfa.c:1540
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int i, j;

....
Skipping nonlast addifexit:Priority 4558
At location src/dfa.c:1540
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(newline, letter, s, hash, d, constraint)))
    return 0;
int i, j;

....
Skipping nonlast addifexit:Priority 4558
At location src/dfa.c:1540
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(newline, letter, s, hash, d, constraint)))
    return 1;
int i, j;

....
Skipping nonlast addifexit:Priority 4558
At location src/dfa.c:1540
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(newline, letter, s, hash, d, constraint)))
    return 2;
int i, j;

....
Skipping nonlast addifexit:Priority 4558
At location src/dfa.c:1540
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(newline, letter, s, hash, d, constraint)))
    return 4;
int i, j;

....
Skipping nonlast addifexit:Priority 4558
At location src/dfa.c:1540
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(newline, letter, s, hash, d, constraint)))
    return 255;
int i, j;

....
Skipping nonlast:Priority 7059
At location src/dfa.c:1542
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
newline = newline ? 1 : 0;

....
Skipping nonlast:Priority 7059
At location src/dfa.c:1542
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
newline = newline ? 1 : 0;

....
Skipping nonlast:Priority 7059
At location src/dfa.c:1542
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
newline = newline ? 1 : 0;

....
Skipping nonlast:Priority 7059
At location src/dfa.c:1542
--Src File: src/dfa.c
Fragment 0:
if (j == s->nelem)
    return i;
newline = newline ? 1 : 0;

....
Skipping nonlast:Priority 7059
At location src/dfa.c:1542
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
newline = newline ? 1 : 0;

....
Skipping nonlast:Priority 7059
At location src/dfa.c:1542
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
newline = newline ? 1 : 0;

....
Skipping nonlast:Priority 7059
At location src/dfa.c:1542
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
newline = newline ? 1 : 0;

....
Skipping nonlast addifexit:Priority 12059
At location src/dfa.c:1542
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(newline, letter, s, i, hash, d, j, constraint)))
    return 0;
newline = newline ? 1 : 0;

....
Skipping nonlast addifexit:Priority 12059
At location src/dfa.c:1542
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(newline, letter, s, i, hash, d, j, constraint)))
    return 1;
newline = newline ? 1 : 0;

....
Skipping nonlast addifexit:Priority 12059
At location src/dfa.c:1542
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(newline, letter, s, i, hash, d, j, constraint)))
    return 2;
newline = newline ? 1 : 0;

....
Skipping nonlast addifexit:Priority 12059
At location src/dfa.c:1542
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(newline, letter, s, i, hash, d, j, constraint)))
    return 4;
newline = newline ? 1 : 0;

....
Skipping nonlast addifexit:Priority 12059
At location src/dfa.c:1542
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(newline, letter, s, i, hash, d, j, constraint)))
    return 255;
newline = newline ? 1 : 0;

....
Skipping nonlast:Priority -440
At location src/dfa.c:1543
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
letter = letter ? 1 : 0;

....
Skipping nonlast:Priority -440
At location src/dfa.c:1543
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
letter = letter ? 1 : 0;

....
Skipping nonlast:Priority -440
At location src/dfa.c:1543
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
letter = letter ? 1 : 0;

....
Skipping nonlast:Priority -440
At location src/dfa.c:1543
--Src File: src/dfa.c
Fragment 0:
if (j == s->nelem)
    return i;
letter = letter ? 1 : 0;

....
Skipping nonlast:Priority -440
At location src/dfa.c:1543
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
letter = letter ? 1 : 0;

....
Skipping nonlast:Priority -440
At location src/dfa.c:1543
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
letter = letter ? 1 : 0;

....
Skipping nonlast:Priority -440
At location src/dfa.c:1543
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
letter = letter ? 1 : 0;

....
Skipping nonlast addifexit:Priority 4560
At location src/dfa.c:1543
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(letter, newline, s, i, hash, d, j, constraint)))
    return 0;
letter = letter ? 1 : 0;

....
Skipping nonlast addifexit:Priority 4560
At location src/dfa.c:1543
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(letter, newline, s, i, hash, d, j, constraint)))
    return 1;
letter = letter ? 1 : 0;

....
Skipping nonlast addifexit:Priority 4560
At location src/dfa.c:1543
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(letter, newline, s, i, hash, d, j, constraint)))
    return 2;
letter = letter ? 1 : 0;

....
Skipping nonlast addifexit:Priority 4560
At location src/dfa.c:1543
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(letter, newline, s, i, hash, d, j, constraint)))
    return 4;
letter = letter ? 1 : 0;

....
Skipping nonlast addifexit:Priority 4560
At location src/dfa.c:1543
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(letter, newline, s, i, hash, d, j, constraint)))
    return 255;
letter = letter ? 1 : 0;

....
Skipping nonlast:Priority -439
At location src/dfa.c:1545
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
for (i = 0; i < s->nelem; ++i) 
    hash ^= s->elems[i].index + s->elems[i].constraint;

....
Skipping nonlast:Priority -439
At location src/dfa.c:1545
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
for (i = 0; i < s->nelem; ++i) 
    hash ^= s->elems[i].index + s->elems[i].constraint;

....
Skipping nonlast:Priority -439
At location src/dfa.c:1545
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
for (i = 0; i < s->nelem; ++i) 
    hash ^= s->elems[i].index + s->elems[i].constraint;

....
Skipping nonlast:Priority -439
At location src/dfa.c:1545
--Src File: src/dfa.c
Fragment 0:
if (j == s->nelem)
    return i;
for (i = 0; i < s->nelem; ++i) 
    hash ^= s->elems[i].index + s->elems[i].constraint;

....
Skipping nonlast:Priority -439
At location src/dfa.c:1545
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
for (i = 0; i < s->nelem; ++i) 
    hash ^= s->elems[i].index + s->elems[i].constraint;

....
Skipping nonlast:Priority -439
At location src/dfa.c:1545
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
for (i = 0; i < s->nelem; ++i) 
    hash ^= s->elems[i].index + s->elems[i].constraint;

....
Skipping nonlast:Priority -439
At location src/dfa.c:1545
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
for (i = 0; i < s->nelem; ++i) 
    hash ^= s->elems[i].index + s->elems[i].constraint;

....
Skipping nonlast addifexit:Priority 4561
At location src/dfa.c:1545
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, i, s->nelem, hash, s->elems[i].index, s->elems[i].constraint, s->elems, letter, newline, d, j, constraint)))
    return 0;
for (i = 0; i < s->nelem; ++i) 
    hash ^= s->elems[i].index + s->elems[i].constraint;

....
Skipping nonlast addifexit:Priority 4561
At location src/dfa.c:1545
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, i, s->nelem, hash, s->elems[i].index, s->elems[i].constraint, s->elems, letter, newline, d, j, constraint)))
    return 1;
for (i = 0; i < s->nelem; ++i) 
    hash ^= s->elems[i].index + s->elems[i].constraint;

....
Skipping nonlast addifexit:Priority 4561
At location src/dfa.c:1545
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, i, s->nelem, hash, s->elems[i].index, s->elems[i].constraint, s->elems, letter, newline, d, j, constraint)))
    return 2;
for (i = 0; i < s->nelem; ++i) 
    hash ^= s->elems[i].index + s->elems[i].constraint;

....
Skipping nonlast addifexit:Priority 4561
At location src/dfa.c:1545
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, i, s->nelem, hash, s->elems[i].index, s->elems[i].constraint, s->elems, letter, newline, d, j, constraint)))
    return 4;
for (i = 0; i < s->nelem; ++i) 
    hash ^= s->elems[i].index + s->elems[i].constraint;

....
Skipping nonlast addifexit:Priority 4561
At location src/dfa.c:1545
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, i, s->nelem, hash, s->elems[i].index, s->elems[i].constraint, s->elems, letter, newline, d, j, constraint)))
    return 255;
for (i = 0; i < s->nelem; ++i) 
    hash ^= s->elems[i].index + s->elems[i].constraint;

....
Skipping nonlast:Priority -438
At location src/dfa.c:1549
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
for (i = 0; i < d->sindex; ++i) {
    if (hash != d->states[i].hash || s->nelem != d->states[i].elems.nelem || newline != d->states[i].newline || letter != d->states[i].letter)
        continue;
    for (j = 0; j < s->nelem; ++j) 
        if (s->elems[j].constraint != d->states[i].elems.elems[j].constraint || s->elems[j].index != d->states[i].elems.elems[j].index)
            break;
    if (j == s->nelem)
        return i;
}

....
Skipping nonlast:Priority -438
At location src/dfa.c:1549
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
for (i = 0; i < d->sindex; ++i) {
    if (hash != d->states[i].hash || s->nelem != d->states[i].elems.nelem || newline != d->states[i].newline || letter != d->states[i].letter)
        continue;
    for (j = 0; j < s->nelem; ++j) 
        if (s->elems[j].constraint != d->states[i].elems.elems[j].constraint || s->elems[j].index != d->states[i].elems.elems[j].index)
            break;
    if (j == s->nelem)
        return i;
}

....
Skipping nonlast:Priority -438
At location src/dfa.c:1549
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
for (i = 0; i < d->sindex; ++i) {
    if (hash != d->states[i].hash || s->nelem != d->states[i].elems.nelem || newline != d->states[i].newline || letter != d->states[i].letter)
        continue;
    for (j = 0; j < s->nelem; ++j) 
        if (s->elems[j].constraint != d->states[i].elems.elems[j].constraint || s->elems[j].index != d->states[i].elems.elems[j].index)
            break;
    if (j == s->nelem)
        return i;
}

....
Skipping nonlast:Priority -438
At location src/dfa.c:1549
--Src File: src/dfa.c
Fragment 0:
if (j == s->nelem)
    return i;
for (i = 0; i < d->sindex; ++i) {
    if (hash != d->states[i].hash || s->nelem != d->states[i].elems.nelem || newline != d->states[i].newline || letter != d->states[i].letter)
        continue;
    for (j = 0; j < s->nelem; ++j) 
        if (s->elems[j].constraint != d->states[i].elems.elems[j].constraint || s->elems[j].index != d->states[i].elems.elems[j].index)
            break;
    if (j == s->nelem)
        return i;
}

....
Skipping nonlast:Priority -438
At location src/dfa.c:1549
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
for (i = 0; i < d->sindex; ++i) {
    if (hash != d->states[i].hash || s->nelem != d->states[i].elems.nelem || newline != d->states[i].newline || letter != d->states[i].letter)
        continue;
    for (j = 0; j < s->nelem; ++j) 
        if (s->elems[j].constraint != d->states[i].elems.elems[j].constraint || s->elems[j].index != d->states[i].elems.elems[j].index)
            break;
    if (j == s->nelem)
        return i;
}

....
Skipping nonlast:Priority -438
At location src/dfa.c:1549
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
for (i = 0; i < d->sindex; ++i) {
    if (hash != d->states[i].hash || s->nelem != d->states[i].elems.nelem || newline != d->states[i].newline || letter != d->states[i].letter)
        continue;
    for (j = 0; j < s->nelem; ++j) 
        if (s->elems[j].constraint != d->states[i].elems.elems[j].constraint || s->elems[j].index != d->states[i].elems.elems[j].index)
            break;
    if (j == s->nelem)
        return i;
}

....
Skipping nonlast:Priority -438
At location src/dfa.c:1549
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
for (i = 0; i < d->sindex; ++i) {
    if (hash != d->states[i].hash || s->nelem != d->states[i].elems.nelem || newline != d->states[i].newline || letter != d->states[i].letter)
        continue;
    for (j = 0; j < s->nelem; ++j) 
        if (s->elems[j].constraint != d->states[i].elems.elems[j].constraint || s->elems[j].index != d->states[i].elems.elems[j].index)
            break;
    if (j == s->nelem)
        return i;
}

....
Skipping nonlast addifexit:Priority 4562
At location src/dfa.c:1549
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->sindex, s, hash, d->states, newline, letter, j, d->salloc, d->tokens, constraint, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 0;
for (i = 0; i < d->sindex; ++i) {
    if (hash != d->states[i].hash || s->nelem != d->states[i].elems.nelem || newline != d->states[i].newline || letter != d->states[i].letter)
        continue;
    for (j = 0; j < s->nelem; ++j) 
        if (s->elems[j].constraint != d->states[i].elems.elems[j].constraint || s->elems[j].index != d->states[i].elems.elems[j].index)
            break;
    if (j == s->nelem)
        return i;
}

....
Skipping nonlast addifexit:Priority 4562
At location src/dfa.c:1549
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->sindex, s, hash, d->states, newline, letter, j, d->salloc, d->tokens, constraint, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 1;
for (i = 0; i < d->sindex; ++i) {
    if (hash != d->states[i].hash || s->nelem != d->states[i].elems.nelem || newline != d->states[i].newline || letter != d->states[i].letter)
        continue;
    for (j = 0; j < s->nelem; ++j) 
        if (s->elems[j].constraint != d->states[i].elems.elems[j].constraint || s->elems[j].index != d->states[i].elems.elems[j].index)
            break;
    if (j == s->nelem)
        return i;
}

....
Skipping nonlast addifexit:Priority 4562
At location src/dfa.c:1549
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->sindex, s, hash, d->states, newline, letter, j, d->salloc, d->tokens, constraint, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 2;
for (i = 0; i < d->sindex; ++i) {
    if (hash != d->states[i].hash || s->nelem != d->states[i].elems.nelem || newline != d->states[i].newline || letter != d->states[i].letter)
        continue;
    for (j = 0; j < s->nelem; ++j) 
        if (s->elems[j].constraint != d->states[i].elems.elems[j].constraint || s->elems[j].index != d->states[i].elems.elems[j].index)
            break;
    if (j == s->nelem)
        return i;
}

....
Skipping nonlast addifexit:Priority 4562
At location src/dfa.c:1549
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->sindex, s, hash, d->states, newline, letter, j, d->salloc, d->tokens, constraint, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 4;
for (i = 0; i < d->sindex; ++i) {
    if (hash != d->states[i].hash || s->nelem != d->states[i].elems.nelem || newline != d->states[i].newline || letter != d->states[i].letter)
        continue;
    for (j = 0; j < s->nelem; ++j) 
        if (s->elems[j].constraint != d->states[i].elems.elems[j].constraint || s->elems[j].index != d->states[i].elems.elems[j].index)
            break;
    if (j == s->nelem)
        return i;
}

....
Skipping nonlast addifexit:Priority 4562
At location src/dfa.c:1549
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->sindex, s, hash, d->states, newline, letter, j, d->salloc, d->tokens, constraint, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 255;
for (i = 0; i < d->sindex; ++i) {
    if (hash != d->states[i].hash || s->nelem != d->states[i].elems.nelem || newline != d->states[i].newline || letter != d->states[i].letter)
        continue;
    for (j = 0; j < s->nelem; ++j) 
        if (s->elems[j].constraint != d->states[i].elems.elems[j].constraint || s->elems[j].index != d->states[i].elems.elems[j].index)
            break;
    if (j == s->nelem)
        return i;
}

....
Skipping nonlast:Priority 4764
At location src/dfa.c:1551
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (hash != d->states[i].hash || s->nelem != d->states[i].elems.nelem || newline != d->states[i].newline || letter != d->states[i].letter)
    continue;

....
Skipping nonlast:Priority 4764
At location src/dfa.c:1551
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (hash != d->states[i].hash || s->nelem != d->states[i].elems.nelem || newline != d->states[i].newline || letter != d->states[i].letter)
    continue;

....
Skipping nonlast:Priority 4764
At location src/dfa.c:1551
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if (hash != d->states[i].hash || s->nelem != d->states[i].elems.nelem || newline != d->states[i].newline || letter != d->states[i].letter)
    continue;

....
Skipping nonlast:Priority 4764
At location src/dfa.c:1551
--Src File: src/dfa.c
Fragment 0:
if (j == s->nelem)
    return i;
if (hash != d->states[i].hash || s->nelem != d->states[i].elems.nelem || newline != d->states[i].newline || letter != d->states[i].letter)
    continue;

....
Skipping nonlast:Priority 4764
At location src/dfa.c:1551
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (hash != d->states[i].hash || s->nelem != d->states[i].elems.nelem || newline != d->states[i].newline || letter != d->states[i].letter)
    continue;

....
Skipping nonlast:Priority 4764
At location src/dfa.c:1551
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (hash != d->states[i].hash || s->nelem != d->states[i].elems.nelem || newline != d->states[i].newline || letter != d->states[i].letter)
    continue;

....
Skipping nonlast:Priority 4764
At location src/dfa.c:1551
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (hash != d->states[i].hash || s->nelem != d->states[i].elems.nelem || newline != d->states[i].newline || letter != d->states[i].letter)
    continue;

....
Skipping nonlast addifexit:Priority 8514
At location src/dfa.c:1551
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, s, hash, i, d->states[i].elems.nelem, s->nelem, d->states[i].hash, d->states, newline, letter, d->states[i].newline, d->states[i].letter, d->sindex, j, s->elems, d->states[i].elems.elems, d->salloc, d->states[i].backref, d->states[i].constraint, d->states[i].first_end, d->tokens, constraint, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 0;
if (hash != d->states[i].hash || s->nelem != d->states[i].elems.nelem || newline != d->states[i].newline || letter != d->states[i].letter)
    continue;

....
Skipping nonlast addifexit:Priority 8514
At location src/dfa.c:1551
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, s, hash, i, d->states[i].elems.nelem, s->nelem, d->states[i].hash, d->states, newline, letter, d->states[i].newline, d->states[i].letter, d->sindex, j, s->elems, d->states[i].elems.elems, d->salloc, d->states[i].backref, d->states[i].constraint, d->states[i].first_end, d->tokens, constraint, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 1;
if (hash != d->states[i].hash || s->nelem != d->states[i].elems.nelem || newline != d->states[i].newline || letter != d->states[i].letter)
    continue;

....
Skipping nonlast addifexit:Priority 8514
At location src/dfa.c:1551
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, s, hash, i, d->states[i].elems.nelem, s->nelem, d->states[i].hash, d->states, newline, letter, d->states[i].newline, d->states[i].letter, d->sindex, j, s->elems, d->states[i].elems.elems, d->salloc, d->states[i].backref, d->states[i].constraint, d->states[i].first_end, d->tokens, constraint, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 2;
if (hash != d->states[i].hash || s->nelem != d->states[i].elems.nelem || newline != d->states[i].newline || letter != d->states[i].letter)
    continue;

....
Skipping nonlast addifexit:Priority 8514
At location src/dfa.c:1551
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, s, hash, i, d->states[i].elems.nelem, s->nelem, d->states[i].hash, d->states, newline, letter, d->states[i].newline, d->states[i].letter, d->sindex, j, s->elems, d->states[i].elems.elems, d->salloc, d->states[i].backref, d->states[i].constraint, d->states[i].first_end, d->tokens, constraint, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 4;
if (hash != d->states[i].hash || s->nelem != d->states[i].elems.nelem || newline != d->states[i].newline || letter != d->states[i].letter)
    continue;

....
Skipping nonlast addifexit:Priority 8514
At location src/dfa.c:1551
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, s, hash, i, d->states[i].elems.nelem, s->nelem, d->states[i].hash, d->states, newline, letter, d->states[i].newline, d->states[i].letter, d->sindex, j, s->elems, d->states[i].elems.elems, d->salloc, d->states[i].backref, d->states[i].constraint, d->states[i].first_end, d->tokens, constraint, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 255;
if (hash != d->states[i].hash || s->nelem != d->states[i].elems.nelem || newline != d->states[i].newline || letter != d->states[i].letter)
    continue;

....
Skipping nonlast addifexit:Priority 8514
At location src/dfa.c:1551
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, s, hash, i, d->states[i].elems.nelem, s->nelem, d->states[i].hash, d->states, newline, letter, d->states[i].newline, d->states[i].letter, d->sindex, j, s->elems, d->states[i].elems.elems, d->salloc, d->states[i].backref, d->states[i].constraint, d->states[i].first_end, d->tokens, constraint, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    break;
if (hash != d->states[i].hash || s->nelem != d->states[i].elems.nelem || newline != d->states[i].newline || letter != d->states[i].letter)
    continue;

....
Skipping nonlast:Priority -235
At location src/dfa.c:1553
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    continue;
}

....
Skipping nonlast:Priority -235
At location src/dfa.c:1553
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    continue;
}

....
Skipping nonlast:Priority -235
At location src/dfa.c:1553
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        return lasttok = parse_bracket_exp_mb();
    }
    continue;
}

....
Skipping nonlast:Priority -235
At location src/dfa.c:1553
--Src File: src/dfa.c
Fragment 0:
{
    if (j == s->nelem)
        return i;
    continue;
}

....
Skipping nonlast:Priority -235
At location src/dfa.c:1553
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    continue;
}

....
Skipping nonlast:Priority -235
At location src/dfa.c:1553
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    continue;
}

....
Skipping nonlast:Priority -235
At location src/dfa.c:1553
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    continue;
}

....
Skipping nonlast addifexit:Priority 4765
At location src/dfa.c:1553
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(d, s, newline, letter, i, j, s->nelem, d->states[i].newline, d->states[i].letter, d->states, hash, s->elems, d->states[i].hash, d->sindex, d->salloc, d->states[i].backref, d->states[i].constraint, d->states[i].first_end, d->tokens, constraint, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
        return 0;
    continue;
}

....
Skipping nonlast addifexit:Priority 4765
At location src/dfa.c:1553
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(d, s, newline, letter, i, j, s->nelem, d->states[i].newline, d->states[i].letter, d->states, hash, s->elems, d->states[i].hash, d->sindex, d->salloc, d->states[i].backref, d->states[i].constraint, d->states[i].first_end, d->tokens, constraint, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
        return 1;
    continue;
}

....
Skipping nonlast addifexit:Priority 4765
At location src/dfa.c:1553
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(d, s, newline, letter, i, j, s->nelem, d->states[i].newline, d->states[i].letter, d->states, hash, s->elems, d->states[i].hash, d->sindex, d->salloc, d->states[i].backref, d->states[i].constraint, d->states[i].first_end, d->tokens, constraint, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
        return 2;
    continue;
}

....
Skipping nonlast addifexit:Priority 4765
At location src/dfa.c:1553
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(d, s, newline, letter, i, j, s->nelem, d->states[i].newline, d->states[i].letter, d->states, hash, s->elems, d->states[i].hash, d->sindex, d->salloc, d->states[i].backref, d->states[i].constraint, d->states[i].first_end, d->tokens, constraint, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
        return 4;
    continue;
}

....
Skipping nonlast addifexit:Priority 4765
At location src/dfa.c:1553
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(d, s, newline, letter, i, j, s->nelem, d->states[i].newline, d->states[i].letter, d->states, hash, s->elems, d->states[i].hash, d->sindex, d->salloc, d->states[i].backref, d->states[i].constraint, d->states[i].first_end, d->tokens, constraint, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
        return 255;
    continue;
}

....
Skipping nonlast addifexit:Priority 4765
At location src/dfa.c:1553
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(d, s, newline, letter, i, j, s->nelem, d->states[i].newline, d->states[i].letter, d->states, hash, s->elems, d->states[i].hash, d->sindex, d->salloc, d->states[i].backref, d->states[i].constraint, d->states[i].first_end, d->tokens, constraint, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
        break;
    continue;
}

....
Skipping nonlast:Priority -262
At location src/dfa.c:1554
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
for (j = 0; j < s->nelem; ++j) 
    if (s->elems[j].constraint != d->states[i].elems.elems[j].constraint || s->elems[j].index != d->states[i].elems.elems[j].index)
        break;

....
Skipping nonlast:Priority -262
At location src/dfa.c:1554
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
for (j = 0; j < s->nelem; ++j) 
    if (s->elems[j].constraint != d->states[i].elems.elems[j].constraint || s->elems[j].index != d->states[i].elems.elems[j].index)
        break;

....
Skipping nonlast:Priority -262
At location src/dfa.c:1554
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
for (j = 0; j < s->nelem; ++j) 
    if (s->elems[j].constraint != d->states[i].elems.elems[j].constraint || s->elems[j].index != d->states[i].elems.elems[j].index)
        break;

....
Skipping nonlast:Priority -262
At location src/dfa.c:1554
--Src File: src/dfa.c
Fragment 0:
if (j == s->nelem)
    return i;
for (j = 0; j < s->nelem; ++j) 
    if (s->elems[j].constraint != d->states[i].elems.elems[j].constraint || s->elems[j].index != d->states[i].elems.elems[j].index)
        break;

....
Skipping nonlast:Priority -262
At location src/dfa.c:1554
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
for (j = 0; j < s->nelem; ++j) 
    if (s->elems[j].constraint != d->states[i].elems.elems[j].constraint || s->elems[j].index != d->states[i].elems.elems[j].index)
        break;

....
Skipping nonlast:Priority -262
At location src/dfa.c:1554
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
for (j = 0; j < s->nelem; ++j) 
    if (s->elems[j].constraint != d->states[i].elems.elems[j].constraint || s->elems[j].index != d->states[i].elems.elems[j].index)
        break;

....
Skipping nonlast:Priority -262
At location src/dfa.c:1554
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
for (j = 0; j < s->nelem; ++j) 
    if (s->elems[j].constraint != d->states[i].elems.elems[j].constraint || s->elems[j].index != d->states[i].elems.elems[j].index)
        break;

....
Skipping nonlast addifexit:Priority 4738
At location src/dfa.c:1554
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, j, s->nelem, s->elems, s->elems[j].constraint, d, newline, letter, i, hash, s->elems[j].index, constraint)))
    return 0;
for (j = 0; j < s->nelem; ++j) 
    if (s->elems[j].constraint != d->states[i].elems.elems[j].constraint || s->elems[j].index != d->states[i].elems.elems[j].index)
        break;

....
Skipping nonlast addifexit:Priority 4738
At location src/dfa.c:1554
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, j, s->nelem, s->elems, s->elems[j].constraint, d, newline, letter, i, hash, s->elems[j].index, constraint)))
    return 1;
for (j = 0; j < s->nelem; ++j) 
    if (s->elems[j].constraint != d->states[i].elems.elems[j].constraint || s->elems[j].index != d->states[i].elems.elems[j].index)
        break;

....
Skipping nonlast addifexit:Priority 4738
At location src/dfa.c:1554
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, j, s->nelem, s->elems, s->elems[j].constraint, d, newline, letter, i, hash, s->elems[j].index, constraint)))
    return 2;
for (j = 0; j < s->nelem; ++j) 
    if (s->elems[j].constraint != d->states[i].elems.elems[j].constraint || s->elems[j].index != d->states[i].elems.elems[j].index)
        break;

....
Skipping nonlast addifexit:Priority 4738
At location src/dfa.c:1554
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, j, s->nelem, s->elems, s->elems[j].constraint, d, newline, letter, i, hash, s->elems[j].index, constraint)))
    return 4;
for (j = 0; j < s->nelem; ++j) 
    if (s->elems[j].constraint != d->states[i].elems.elems[j].constraint || s->elems[j].index != d->states[i].elems.elems[j].index)
        break;

....
Skipping nonlast addifexit:Priority 4738
At location src/dfa.c:1554
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, j, s->nelem, s->elems, s->elems[j].constraint, d, newline, letter, i, hash, s->elems[j].index, constraint)))
    return 255;
for (j = 0; j < s->nelem; ++j) 
    if (s->elems[j].constraint != d->states[i].elems.elems[j].constraint || s->elems[j].index != d->states[i].elems.elems[j].index)
        break;

....
Skipping nonlast addifexit:Priority 4738
At location src/dfa.c:1554
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, j, s->nelem, s->elems, s->elems[j].constraint, d, newline, letter, i, hash, s->elems[j].index, constraint)))
    break;
for (j = 0; j < s->nelem; ++j) 
    if (s->elems[j].constraint != d->states[i].elems.elems[j].constraint || s->elems[j].index != d->states[i].elems.elems[j].index)
        break;

....
Skipping returnreturn addifexit:Priority 3489
At location src/dfa.c:1559
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, j, s->nelem, i, d, s->elems, hash, newline, letter, constraint)))
    return 0;
if (j == s->nelem)
    return i;

....
Skipping returnreturn addifexit:Priority 3489
At location src/dfa.c:1559
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, j, s->nelem, i, d, s->elems, hash, newline, letter, constraint)))
    return 1;
if (j == s->nelem)
    return i;

....
Skipping returnreturn addifexit:Priority 3489
At location src/dfa.c:1559
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, j, s->nelem, i, d, s->elems, hash, newline, letter, constraint)))
    return 2;
if (j == s->nelem)
    return i;

....
Skipping returnreturn addifexit:Priority 3489
At location src/dfa.c:1559
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, j, s->nelem, i, d, s->elems, hash, newline, letter, constraint)))
    return 4;
if (j == s->nelem)
    return i;

....
Skipping returnreturn addifexit:Priority 3489
At location src/dfa.c:1559
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, j, s->nelem, i, d, s->elems, hash, newline, letter, constraint)))
    return 255;
if (j == s->nelem)
    return i;

....
Skipping returnreturn addifexit:Priority 3489
At location src/dfa.c:1559
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, j, s->nelem, i, d, s->elems, hash, newline, letter, constraint)))
    break;
if (j == s->nelem)
    return i;

....
Skipping nonlast:Priority -260
At location src/dfa.c:1560
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    return i;
}

....
Skipping nonlast:Priority -260
At location src/dfa.c:1560
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    return i;
}

....
Skipping nonlast:Priority -260
At location src/dfa.c:1560
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        return lasttok = parse_bracket_exp_mb();
    }
    return i;
}

....
Skipping nonlast:Priority -260
At location src/dfa.c:1560
--Src File: src/dfa.c
Fragment 0:
{
    if (j == s->nelem)
        return i;
    return i;
}

....
Skipping nonlast:Priority -260
At location src/dfa.c:1560
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    return i;
}

....
Skipping nonlast:Priority -260
At location src/dfa.c:1560
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    return i;
}

....
Skipping nonlast:Priority -260
At location src/dfa.c:1560
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    return i;
}

....
Skipping nonlast addifexit:Priority 4740
At location src/dfa.c:1560
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(i, s, j, s->nelem, d, s->elems, hash, newline, letter, constraint)))
        return 0;
    return i;
}

....
Skipping nonlast addifexit:Priority 4740
At location src/dfa.c:1560
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(i, s, j, s->nelem, d, s->elems, hash, newline, letter, constraint)))
        return 1;
    return i;
}

....
Skipping nonlast addifexit:Priority 4740
At location src/dfa.c:1560
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(i, s, j, s->nelem, d, s->elems, hash, newline, letter, constraint)))
        return 2;
    return i;
}

....
Skipping nonlast addifexit:Priority 4740
At location src/dfa.c:1560
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(i, s, j, s->nelem, d, s->elems, hash, newline, letter, constraint)))
        return 4;
    return i;
}

....
Skipping nonlast addifexit:Priority 4740
At location src/dfa.c:1560
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(i, s, j, s->nelem, d, s->elems, hash, newline, letter, constraint)))
        return 255;
    return i;
}

....
Skipping nonlast addifexit:Priority 4740
At location src/dfa.c:1560
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(i, s, j, s->nelem, d, s->elems, hash, newline, letter, constraint)))
        break;
    return i;
}

....
Skipping nonlast:Priority -233
At location src/dfa.c:1564
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if ((d->sindex) >= (d->salloc)) {
    do 
        (d->salloc) *= 2;
    while ((d->sindex) >= (d->salloc));
    ((d->states) = xrealloc((ptr_t)(d->states), (d->salloc) * sizeof(dfa_state)));
}

....
Skipping nonlast:Priority -233
At location src/dfa.c:1564
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if ((d->sindex) >= (d->salloc)) {
    do 
        (d->salloc) *= 2;
    while ((d->sindex) >= (d->salloc));
    ((d->states) = xrealloc((ptr_t)(d->states), (d->salloc) * sizeof(dfa_state)));
}

....
Skipping nonlast:Priority -233
At location src/dfa.c:1564
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if ((d->sindex) >= (d->salloc)) {
    do 
        (d->salloc) *= 2;
    while ((d->sindex) >= (d->salloc));
    ((d->states) = xrealloc((ptr_t)(d->states), (d->salloc) * sizeof(dfa_state)));
}

....
Skipping nonlast:Priority -233
At location src/dfa.c:1564
--Src File: src/dfa.c
Fragment 0:
if (j == s->nelem)
    return i;
if ((d->sindex) >= (d->salloc)) {
    do 
        (d->salloc) *= 2;
    while ((d->sindex) >= (d->salloc));
    ((d->states) = xrealloc((ptr_t)(d->states), (d->salloc) * sizeof(dfa_state)));
}

....
Skipping nonlast:Priority -233
At location src/dfa.c:1564
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if ((d->sindex) >= (d->salloc)) {
    do 
        (d->salloc) *= 2;
    while ((d->sindex) >= (d->salloc));
    ((d->states) = xrealloc((ptr_t)(d->states), (d->salloc) * sizeof(dfa_state)));
}

....
Skipping nonlast:Priority -233
At location src/dfa.c:1564
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if ((d->sindex) >= (d->salloc)) {
    do 
        (d->salloc) *= 2;
    while ((d->sindex) >= (d->salloc));
    ((d->states) = xrealloc((ptr_t)(d->states), (d->salloc) * sizeof(dfa_state)));
}

....
Skipping nonlast:Priority -233
At location src/dfa.c:1564
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if ((d->sindex) >= (d->salloc)) {
    do 
        (d->salloc) *= 2;
    while ((d->sindex) >= (d->salloc));
    ((d->states) = xrealloc((ptr_t)(d->states), (d->salloc) * sizeof(dfa_state)));
}

....
Skipping nonlast addifexit:Priority 3517
At location src/dfa.c:1564
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->states, d->sindex, d->salloc, hash, i, d->states[i].hash, s, newline, d->states[i].newline, letter, j, d->states[i].letter, d->states[i].backref, d->states[i].constraint, d->states[i].first_end, d->tokens, constraint, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 0;
if ((d->sindex) >= (d->salloc)) {
    do 
        (d->salloc) *= 2;
    while ((d->sindex) >= (d->salloc));
    ((d->states) = xrealloc((ptr_t)(d->states), (d->salloc) * sizeof(dfa_state)));
}

....
Skipping nonlast addifexit:Priority 3517
At location src/dfa.c:1564
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->states, d->sindex, d->salloc, hash, i, d->states[i].hash, s, newline, d->states[i].newline, letter, j, d->states[i].letter, d->states[i].backref, d->states[i].constraint, d->states[i].first_end, d->tokens, constraint, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 1;
if ((d->sindex) >= (d->salloc)) {
    do 
        (d->salloc) *= 2;
    while ((d->sindex) >= (d->salloc));
    ((d->states) = xrealloc((ptr_t)(d->states), (d->salloc) * sizeof(dfa_state)));
}

....
Skipping nonlast addifexit:Priority 3517
At location src/dfa.c:1564
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->states, d->sindex, d->salloc, hash, i, d->states[i].hash, s, newline, d->states[i].newline, letter, j, d->states[i].letter, d->states[i].backref, d->states[i].constraint, d->states[i].first_end, d->tokens, constraint, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 2;
if ((d->sindex) >= (d->salloc)) {
    do 
        (d->salloc) *= 2;
    while ((d->sindex) >= (d->salloc));
    ((d->states) = xrealloc((ptr_t)(d->states), (d->salloc) * sizeof(dfa_state)));
}

....
Skipping nonlast addifexit:Priority 3517
At location src/dfa.c:1564
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->states, d->sindex, d->salloc, hash, i, d->states[i].hash, s, newline, d->states[i].newline, letter, j, d->states[i].letter, d->states[i].backref, d->states[i].constraint, d->states[i].first_end, d->tokens, constraint, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 4;
if ((d->sindex) >= (d->salloc)) {
    do 
        (d->salloc) *= 2;
    while ((d->sindex) >= (d->salloc));
    ((d->states) = xrealloc((ptr_t)(d->states), (d->salloc) * sizeof(dfa_state)));
}

....
Skipping nonlast addifexit:Priority 3517
At location src/dfa.c:1564
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->states, d->sindex, d->salloc, hash, i, d->states[i].hash, s, newline, d->states[i].newline, letter, j, d->states[i].letter, d->states[i].backref, d->states[i].constraint, d->states[i].first_end, d->tokens, constraint, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 255;
if ((d->sindex) >= (d->salloc)) {
    do 
        (d->salloc) *= 2;
    while ((d->sindex) >= (d->salloc));
    ((d->states) = xrealloc((ptr_t)(d->states), (d->salloc) * sizeof(dfa_state)));
}

....
Skipping nonlast:Priority -435
At location src/dfa.c:1565
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
d->states[i].hash = hash;

....
Skipping nonlast:Priority -435
At location src/dfa.c:1565
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
d->states[i].hash = hash;

....
Skipping nonlast:Priority -435
At location src/dfa.c:1565
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
d->states[i].hash = hash;

....
Skipping nonlast:Priority -435
At location src/dfa.c:1565
--Src File: src/dfa.c
Fragment 0:
if (j == s->nelem)
    return i;
d->states[i].hash = hash;

....
Skipping nonlast:Priority -435
At location src/dfa.c:1565
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
d->states[i].hash = hash;

....
Skipping nonlast:Priority -435
At location src/dfa.c:1565
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
d->states[i].hash = hash;

....
Skipping nonlast:Priority -435
At location src/dfa.c:1565
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
d->states[i].hash = hash;

....
Skipping nonlast addifexit:Priority 4565
At location src/dfa.c:1565
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, hash, i, d->states[i].hash, d->states, s, d->states[i].elems.elems, s->nelem, d->sindex, d->salloc, newline, d->states[i].newline, letter, d->states[i].letter, d->states[i].backref, j, d->states[i].constraint, d->states[i].first_end, s->elems, d->tokens, d->states[i].elems.nelem, constraint, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 0;
d->states[i].hash = hash;

....
Skipping nonlast addifexit:Priority 4565
At location src/dfa.c:1565
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, hash, i, d->states[i].hash, d->states, s, d->states[i].elems.elems, s->nelem, d->sindex, d->salloc, newline, d->states[i].newline, letter, d->states[i].letter, d->states[i].backref, j, d->states[i].constraint, d->states[i].first_end, s->elems, d->tokens, d->states[i].elems.nelem, constraint, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 1;
d->states[i].hash = hash;

....
Skipping nonlast addifexit:Priority 4565
At location src/dfa.c:1565
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, hash, i, d->states[i].hash, d->states, s, d->states[i].elems.elems, s->nelem, d->sindex, d->salloc, newline, d->states[i].newline, letter, d->states[i].letter, d->states[i].backref, j, d->states[i].constraint, d->states[i].first_end, s->elems, d->tokens, d->states[i].elems.nelem, constraint, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 2;
d->states[i].hash = hash;

....
Skipping nonlast addifexit:Priority 4565
At location src/dfa.c:1565
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, hash, i, d->states[i].hash, d->states, s, d->states[i].elems.elems, s->nelem, d->sindex, d->salloc, newline, d->states[i].newline, letter, d->states[i].letter, d->states[i].backref, j, d->states[i].constraint, d->states[i].first_end, s->elems, d->tokens, d->states[i].elems.nelem, constraint, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 4;
d->states[i].hash = hash;

....
Skipping nonlast addifexit:Priority 4565
At location src/dfa.c:1565
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, hash, i, d->states[i].hash, d->states, s, d->states[i].elems.elems, s->nelem, d->sindex, d->salloc, newline, d->states[i].newline, letter, d->states[i].letter, d->states[i].backref, j, d->states[i].constraint, d->states[i].first_end, s->elems, d->tokens, d->states[i].elems.nelem, constraint, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 255;
d->states[i].hash = hash;

....
Skipping nonlast:Priority -434
At location src/dfa.c:1566
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
((d->states[i].elems.elems) = xmalloc((s->nelem) * sizeof(position)));

....
Skipping nonlast:Priority -434
At location src/dfa.c:1566
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
((d->states[i].elems.elems) = xmalloc((s->nelem) * sizeof(position)));

....
Skipping nonlast:Priority -434
At location src/dfa.c:1566
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
((d->states[i].elems.elems) = xmalloc((s->nelem) * sizeof(position)));

....
Skipping nonlast:Priority -434
At location src/dfa.c:1566
--Src File: src/dfa.c
Fragment 0:
if (j == s->nelem)
    return i;
((d->states[i].elems.elems) = xmalloc((s->nelem) * sizeof(position)));

....
Skipping nonlast:Priority -434
At location src/dfa.c:1566
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
((d->states[i].elems.elems) = xmalloc((s->nelem) * sizeof(position)));

....
Skipping nonlast:Priority -434
At location src/dfa.c:1566
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
((d->states[i].elems.elems) = xmalloc((s->nelem) * sizeof(position)));

....
Skipping nonlast:Priority -434
At location src/dfa.c:1566
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
((d->states[i].elems.elems) = xmalloc((s->nelem) * sizeof(position)));

....
Skipping nonlast addifexit:Priority 4566
At location src/dfa.c:1566
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, s, i, d->states[i].elems.elems, s->nelem, d->states, hash, d->states[i].hash, newline, d->states[i].newline, d->sindex, d->salloc, letter, d->states[i].letter, d->states[i].backref, d->states[i].constraint, d->states[i].first_end, j, s->elems, d->tokens, constraint, d->states[i].elems.nelem, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 0;
((d->states[i].elems.elems) = xmalloc((s->nelem) * sizeof(position)));

....
Skipping nonlast addifexit:Priority 4566
At location src/dfa.c:1566
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, s, i, d->states[i].elems.elems, s->nelem, d->states, hash, d->states[i].hash, newline, d->states[i].newline, d->sindex, d->salloc, letter, d->states[i].letter, d->states[i].backref, d->states[i].constraint, d->states[i].first_end, j, s->elems, d->tokens, constraint, d->states[i].elems.nelem, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 1;
((d->states[i].elems.elems) = xmalloc((s->nelem) * sizeof(position)));

....
Skipping nonlast addifexit:Priority 4566
At location src/dfa.c:1566
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, s, i, d->states[i].elems.elems, s->nelem, d->states, hash, d->states[i].hash, newline, d->states[i].newline, d->sindex, d->salloc, letter, d->states[i].letter, d->states[i].backref, d->states[i].constraint, d->states[i].first_end, j, s->elems, d->tokens, constraint, d->states[i].elems.nelem, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 2;
((d->states[i].elems.elems) = xmalloc((s->nelem) * sizeof(position)));

....
Skipping nonlast addifexit:Priority 4566
At location src/dfa.c:1566
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, s, i, d->states[i].elems.elems, s->nelem, d->states, hash, d->states[i].hash, newline, d->states[i].newline, d->sindex, d->salloc, letter, d->states[i].letter, d->states[i].backref, d->states[i].constraint, d->states[i].first_end, j, s->elems, d->tokens, constraint, d->states[i].elems.nelem, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 4;
((d->states[i].elems.elems) = xmalloc((s->nelem) * sizeof(position)));

....
Skipping nonlast addifexit:Priority 4566
At location src/dfa.c:1566
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, s, i, d->states[i].elems.elems, s->nelem, d->states, hash, d->states[i].hash, newline, d->states[i].newline, d->sindex, d->salloc, letter, d->states[i].letter, d->states[i].backref, d->states[i].constraint, d->states[i].first_end, j, s->elems, d->tokens, constraint, d->states[i].elems.nelem, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 255;
((d->states[i].elems.elems) = xmalloc((s->nelem) * sizeof(position)));

....
Skipping nonlast:Priority -429
At location src/dfa.c:1567
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
copy(s, &d->states[i].elems);

....
Skipping nonlast:Priority -429
At location src/dfa.c:1567
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
copy(s, &d->states[i].elems);

....
Skipping nonlast:Priority -429
At location src/dfa.c:1567
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
copy(s, &d->states[i].elems);

....
Skipping nonlast:Priority -429
At location src/dfa.c:1567
--Src File: src/dfa.c
Fragment 0:
if (j == s->nelem)
    return i;
copy(s, &d->states[i].elems);

....
Skipping nonlast:Priority -429
At location src/dfa.c:1567
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
copy(s, &d->states[i].elems);

....
Skipping nonlast:Priority -429
At location src/dfa.c:1567
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
copy(s, &d->states[i].elems);

....
Skipping nonlast:Priority -429
At location src/dfa.c:1567
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
copy(s, &d->states[i].elems);

....
Skipping nonlast addifexit:Priority 4571
At location src/dfa.c:1567
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, s, i, d->states, newline, d->states[i].elems.elems, s->nelem, d->states[i].newline, letter, hash, d->states[i].hash, d->states[i].letter, d->states[i].backref, d->sindex, d->salloc, d->states[i].constraint, d->states[i].first_end, j, s->elems, d->tokens, constraint, d->states[i].elems.nelem, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 0;
copy(s, &d->states[i].elems);

....
Skipping nonlast addifexit:Priority 4571
At location src/dfa.c:1567
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, s, i, d->states, newline, d->states[i].elems.elems, s->nelem, d->states[i].newline, letter, hash, d->states[i].hash, d->states[i].letter, d->states[i].backref, d->sindex, d->salloc, d->states[i].constraint, d->states[i].first_end, j, s->elems, d->tokens, constraint, d->states[i].elems.nelem, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 1;
copy(s, &d->states[i].elems);

....
Skipping nonlast addifexit:Priority 4571
At location src/dfa.c:1567
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, s, i, d->states, newline, d->states[i].elems.elems, s->nelem, d->states[i].newline, letter, hash, d->states[i].hash, d->states[i].letter, d->states[i].backref, d->sindex, d->salloc, d->states[i].constraint, d->states[i].first_end, j, s->elems, d->tokens, constraint, d->states[i].elems.nelem, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 2;
copy(s, &d->states[i].elems);

....
Skipping nonlast addifexit:Priority 4571
At location src/dfa.c:1567
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, s, i, d->states, newline, d->states[i].elems.elems, s->nelem, d->states[i].newline, letter, hash, d->states[i].hash, d->states[i].letter, d->states[i].backref, d->sindex, d->salloc, d->states[i].constraint, d->states[i].first_end, j, s->elems, d->tokens, constraint, d->states[i].elems.nelem, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 4;
copy(s, &d->states[i].elems);

....
Skipping nonlast addifexit:Priority 4571
At location src/dfa.c:1567
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, s, i, d->states, newline, d->states[i].elems.elems, s->nelem, d->states[i].newline, letter, hash, d->states[i].hash, d->states[i].letter, d->states[i].backref, d->sindex, d->salloc, d->states[i].constraint, d->states[i].first_end, j, s->elems, d->tokens, constraint, d->states[i].elems.nelem, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 255;
copy(s, &d->states[i].elems);

....
Skipping nonlast:Priority -425
At location src/dfa.c:1568
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
d->states[i].newline = newline;

....
Skipping nonlast:Priority -425
At location src/dfa.c:1568
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
d->states[i].newline = newline;

....
Skipping nonlast:Priority -425
At location src/dfa.c:1568
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
d->states[i].newline = newline;

....
Skipping nonlast:Priority -425
At location src/dfa.c:1568
--Src File: src/dfa.c
Fragment 0:
if (j == s->nelem)
    return i;
d->states[i].newline = newline;

....
Skipping nonlast:Priority -425
At location src/dfa.c:1568
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
d->states[i].newline = newline;

....
Skipping nonlast:Priority -425
At location src/dfa.c:1568
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
d->states[i].newline = newline;

....
Skipping nonlast:Priority -425
At location src/dfa.c:1568
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
d->states[i].newline = newline;

....
Skipping nonlast addifexit:Priority 4575
At location src/dfa.c:1568
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, newline, i, d->states[i].newline, d->states, s, letter, d->states[i].letter, d->states[i].elems.elems, s->nelem, d->states[i].backref, hash, d->states[i].hash, d->states[i].constraint, d->states[i].first_end, d->sindex, d->salloc, j, s->elems, d->tokens, constraint, d->states[i].elems.nelem, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 0;
d->states[i].newline = newline;

....
Skipping nonlast addifexit:Priority 4575
At location src/dfa.c:1568
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, newline, i, d->states[i].newline, d->states, s, letter, d->states[i].letter, d->states[i].elems.elems, s->nelem, d->states[i].backref, hash, d->states[i].hash, d->states[i].constraint, d->states[i].first_end, d->sindex, d->salloc, j, s->elems, d->tokens, constraint, d->states[i].elems.nelem, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 1;
d->states[i].newline = newline;

....
Skipping nonlast addifexit:Priority 4575
At location src/dfa.c:1568
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, newline, i, d->states[i].newline, d->states, s, letter, d->states[i].letter, d->states[i].elems.elems, s->nelem, d->states[i].backref, hash, d->states[i].hash, d->states[i].constraint, d->states[i].first_end, d->sindex, d->salloc, j, s->elems, d->tokens, constraint, d->states[i].elems.nelem, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 2;
d->states[i].newline = newline;

....
Skipping nonlast addifexit:Priority 4575
At location src/dfa.c:1568
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, newline, i, d->states[i].newline, d->states, s, letter, d->states[i].letter, d->states[i].elems.elems, s->nelem, d->states[i].backref, hash, d->states[i].hash, d->states[i].constraint, d->states[i].first_end, d->sindex, d->salloc, j, s->elems, d->tokens, constraint, d->states[i].elems.nelem, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 4;
d->states[i].newline = newline;

....
Skipping nonlast addifexit:Priority 4575
At location src/dfa.c:1568
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, newline, i, d->states[i].newline, d->states, s, letter, d->states[i].letter, d->states[i].elems.elems, s->nelem, d->states[i].backref, hash, d->states[i].hash, d->states[i].constraint, d->states[i].first_end, d->sindex, d->salloc, j, s->elems, d->tokens, constraint, d->states[i].elems.nelem, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 255;
d->states[i].newline = newline;

....
Skipping nonlast:Priority -424
At location src/dfa.c:1569
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
d->states[i].letter = letter;

....
Skipping nonlast:Priority -424
At location src/dfa.c:1569
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
d->states[i].letter = letter;

....
Skipping nonlast:Priority -424
At location src/dfa.c:1569
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
d->states[i].letter = letter;

....
Skipping nonlast:Priority -424
At location src/dfa.c:1569
--Src File: src/dfa.c
Fragment 0:
if (j == s->nelem)
    return i;
d->states[i].letter = letter;

....
Skipping nonlast:Priority -424
At location src/dfa.c:1569
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
d->states[i].letter = letter;

....
Skipping nonlast:Priority -424
At location src/dfa.c:1569
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
d->states[i].letter = letter;

....
Skipping nonlast:Priority -424
At location src/dfa.c:1569
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
d->states[i].letter = letter;

....
Skipping nonlast addifexit:Priority 4576
At location src/dfa.c:1569
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, letter, i, d->states[i].letter, d->states, newline, d->states[i].newline, d->states[i].backref, s, d->states[i].constraint, d->states[i].first_end, hash, d->states[i].hash, d->sindex, d->salloc, j, d->tokens, constraint, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 0;
d->states[i].letter = letter;

....
Skipping nonlast addifexit:Priority 4576
At location src/dfa.c:1569
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, letter, i, d->states[i].letter, d->states, newline, d->states[i].newline, d->states[i].backref, s, d->states[i].constraint, d->states[i].first_end, hash, d->states[i].hash, d->sindex, d->salloc, j, d->tokens, constraint, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 1;
d->states[i].letter = letter;

....
Skipping nonlast addifexit:Priority 4576
At location src/dfa.c:1569
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, letter, i, d->states[i].letter, d->states, newline, d->states[i].newline, d->states[i].backref, s, d->states[i].constraint, d->states[i].first_end, hash, d->states[i].hash, d->sindex, d->salloc, j, d->tokens, constraint, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 2;
d->states[i].letter = letter;

....
Skipping nonlast addifexit:Priority 4576
At location src/dfa.c:1569
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, letter, i, d->states[i].letter, d->states, newline, d->states[i].newline, d->states[i].backref, s, d->states[i].constraint, d->states[i].first_end, hash, d->states[i].hash, d->sindex, d->salloc, j, d->tokens, constraint, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 4;
d->states[i].letter = letter;

....
Skipping nonlast addifexit:Priority 4576
At location src/dfa.c:1569
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, letter, i, d->states[i].letter, d->states, newline, d->states[i].newline, d->states[i].backref, s, d->states[i].constraint, d->states[i].first_end, hash, d->states[i].hash, d->sindex, d->salloc, j, d->tokens, constraint, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 255;
d->states[i].letter = letter;

....
Skipping nonlast:Priority -423
At location src/dfa.c:1570
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
d->states[i].backref = 0;

....
Skipping nonlast:Priority -423
At location src/dfa.c:1570
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
d->states[i].backref = 0;

....
Skipping nonlast:Priority -423
At location src/dfa.c:1570
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
d->states[i].backref = 0;

....
Skipping nonlast:Priority -423
At location src/dfa.c:1570
--Src File: src/dfa.c
Fragment 0:
if (j == s->nelem)
    return i;
d->states[i].backref = 0;

....
Skipping nonlast:Priority -423
At location src/dfa.c:1570
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
d->states[i].backref = 0;

....
Skipping nonlast:Priority -423
At location src/dfa.c:1570
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
d->states[i].backref = 0;

....
Skipping nonlast:Priority -423
At location src/dfa.c:1570
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
d->states[i].backref = 0;

....
Skipping nonlast addifexit:Priority 4577
At location src/dfa.c:1570
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->states[i].backref, d->states, letter, d->states[i].letter, d->states[i].constraint, newline, d->states[i].newline, d->states[i].first_end, s, hash, d->states[i].hash, d->sindex, d->salloc, j, d->tokens, constraint, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 0;
d->states[i].backref = 0;

....
Skipping nonlast addifexit:Priority 4577
At location src/dfa.c:1570
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->states[i].backref, d->states, letter, d->states[i].letter, d->states[i].constraint, newline, d->states[i].newline, d->states[i].first_end, s, hash, d->states[i].hash, d->sindex, d->salloc, j, d->tokens, constraint, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 1;
d->states[i].backref = 0;

....
Skipping nonlast addifexit:Priority 4577
At location src/dfa.c:1570
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->states[i].backref, d->states, letter, d->states[i].letter, d->states[i].constraint, newline, d->states[i].newline, d->states[i].first_end, s, hash, d->states[i].hash, d->sindex, d->salloc, j, d->tokens, constraint, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 2;
d->states[i].backref = 0;

....
Skipping nonlast addifexit:Priority 4577
At location src/dfa.c:1570
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->states[i].backref, d->states, letter, d->states[i].letter, d->states[i].constraint, newline, d->states[i].newline, d->states[i].first_end, s, hash, d->states[i].hash, d->sindex, d->salloc, j, d->tokens, constraint, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 4;
d->states[i].backref = 0;

....
Skipping nonlast addifexit:Priority 4577
At location src/dfa.c:1570
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->states[i].backref, d->states, letter, d->states[i].letter, d->states[i].constraint, newline, d->states[i].newline, d->states[i].first_end, s, hash, d->states[i].hash, d->sindex, d->salloc, j, d->tokens, constraint, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 255;
d->states[i].backref = 0;

....
Skipping nonlast:Priority -422
At location src/dfa.c:1571
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
d->states[i].constraint = 0;

....
Skipping nonlast:Priority -422
At location src/dfa.c:1571
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
d->states[i].constraint = 0;

....
Skipping nonlast:Priority -422
At location src/dfa.c:1571
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
d->states[i].constraint = 0;

....
Skipping nonlast:Priority -422
At location src/dfa.c:1571
--Src File: src/dfa.c
Fragment 0:
if (j == s->nelem)
    return i;
d->states[i].constraint = 0;

....
Skipping nonlast:Priority -422
At location src/dfa.c:1571
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
d->states[i].constraint = 0;

....
Skipping nonlast:Priority -422
At location src/dfa.c:1571
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
d->states[i].constraint = 0;

....
Skipping nonlast:Priority -422
At location src/dfa.c:1571
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
d->states[i].constraint = 0;

....
Skipping nonlast addifexit:Priority 4578
At location src/dfa.c:1571
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->states[i].constraint, d->states, d->states[i].backref, d->states[i].first_end, letter, d->states[i].letter, newline, d->states[i].newline, s, hash, j, d->states[i].hash, d->tokens, d->sindex, d->salloc, constraint, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 0;
d->states[i].constraint = 0;

....
Skipping nonlast addifexit:Priority 4578
At location src/dfa.c:1571
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->states[i].constraint, d->states, d->states[i].backref, d->states[i].first_end, letter, d->states[i].letter, newline, d->states[i].newline, s, hash, j, d->states[i].hash, d->tokens, d->sindex, d->salloc, constraint, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 1;
d->states[i].constraint = 0;

....
Skipping nonlast addifexit:Priority 4578
At location src/dfa.c:1571
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->states[i].constraint, d->states, d->states[i].backref, d->states[i].first_end, letter, d->states[i].letter, newline, d->states[i].newline, s, hash, j, d->states[i].hash, d->tokens, d->sindex, d->salloc, constraint, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 2;
d->states[i].constraint = 0;

....
Skipping nonlast addifexit:Priority 4578
At location src/dfa.c:1571
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->states[i].constraint, d->states, d->states[i].backref, d->states[i].first_end, letter, d->states[i].letter, newline, d->states[i].newline, s, hash, j, d->states[i].hash, d->tokens, d->sindex, d->salloc, constraint, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 4;
d->states[i].constraint = 0;

....
Skipping nonlast addifexit:Priority 4578
At location src/dfa.c:1571
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->states[i].constraint, d->states, d->states[i].backref, d->states[i].first_end, letter, d->states[i].letter, newline, d->states[i].newline, s, hash, j, d->states[i].hash, d->tokens, d->sindex, d->salloc, constraint, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 255;
d->states[i].constraint = 0;

....
Skipping nonlast:Priority -421
At location src/dfa.c:1572
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
d->states[i].first_end = 0;

....
Skipping nonlast:Priority -421
At location src/dfa.c:1572
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
d->states[i].first_end = 0;

....
Skipping nonlast:Priority -421
At location src/dfa.c:1572
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
d->states[i].first_end = 0;

....
Skipping nonlast:Priority -421
At location src/dfa.c:1572
--Src File: src/dfa.c
Fragment 0:
if (j == s->nelem)
    return i;
d->states[i].first_end = 0;

....
Skipping nonlast:Priority -421
At location src/dfa.c:1572
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
d->states[i].first_end = 0;

....
Skipping nonlast:Priority -421
At location src/dfa.c:1572
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
d->states[i].first_end = 0;

....
Skipping nonlast:Priority -421
At location src/dfa.c:1572
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
d->states[i].first_end = 0;

....
Skipping nonlast addifexit:Priority 4579
At location src/dfa.c:1572
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->states[i].first_end, d->states, d->states[i].constraint, d->states[i].backref, letter, d->states[i].letter, newline, d->states[i].newline, s, j, d->tokens, hash, d->states[i].hash, constraint, d->sindex, d->salloc, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 0;
d->states[i].first_end = 0;

....
Skipping nonlast addifexit:Priority 4579
At location src/dfa.c:1572
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->states[i].first_end, d->states, d->states[i].constraint, d->states[i].backref, letter, d->states[i].letter, newline, d->states[i].newline, s, j, d->tokens, hash, d->states[i].hash, constraint, d->sindex, d->salloc, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 1;
d->states[i].first_end = 0;

....
Skipping nonlast addifexit:Priority 4579
At location src/dfa.c:1572
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->states[i].first_end, d->states, d->states[i].constraint, d->states[i].backref, letter, d->states[i].letter, newline, d->states[i].newline, s, j, d->tokens, hash, d->states[i].hash, constraint, d->sindex, d->salloc, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 2;
d->states[i].first_end = 0;

....
Skipping nonlast addifexit:Priority 4579
At location src/dfa.c:1572
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->states[i].first_end, d->states, d->states[i].constraint, d->states[i].backref, letter, d->states[i].letter, newline, d->states[i].newline, s, j, d->tokens, hash, d->states[i].hash, constraint, d->sindex, d->salloc, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 4;
d->states[i].first_end = 0;

....
Skipping nonlast addifexit:Priority 4579
At location src/dfa.c:1572
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->states[i].first_end, d->states, d->states[i].constraint, d->states[i].backref, letter, d->states[i].letter, newline, d->states[i].newline, s, j, d->tokens, hash, d->states[i].hash, constraint, d->sindex, d->salloc, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 255;
d->states[i].first_end = 0;

....
Skipping nonlast:Priority -420
At location src/dfa.c:1574
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if ((__ctype_get_mb_cur_max()) > 1)
    d->states[i].mbps.nelem = 0;

....
Skipping nonlast:Priority -420
At location src/dfa.c:1574
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if ((__ctype_get_mb_cur_max()) > 1)
    d->states[i].mbps.nelem = 0;

....
Skipping nonlast:Priority -420
At location src/dfa.c:1574
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if ((__ctype_get_mb_cur_max()) > 1)
    d->states[i].mbps.nelem = 0;

....
Skipping nonlast:Priority -420
At location src/dfa.c:1574
--Src File: src/dfa.c
Fragment 0:
if (j == s->nelem)
    return i;
if ((__ctype_get_mb_cur_max()) > 1)
    d->states[i].mbps.nelem = 0;

....
Skipping nonlast:Priority -420
At location src/dfa.c:1574
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if ((__ctype_get_mb_cur_max()) > 1)
    d->states[i].mbps.nelem = 0;

....
Skipping nonlast:Priority -420
At location src/dfa.c:1574
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if ((__ctype_get_mb_cur_max()) > 1)
    d->states[i].mbps.nelem = 0;

....
Skipping nonlast:Priority -420
At location src/dfa.c:1574
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if ((__ctype_get_mb_cur_max()) > 1)
    d->states[i].mbps.nelem = 0;

....
Skipping nonlast addifexit:Priority 3330
At location src/dfa.c:1574
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->states[i].mbps.nelem, d->states, d->states[i].first_end, s, j, d->states[i].constraint, d->states[i].backref, d->tokens, letter, d->states[i].letter, newline, constraint, d->states[i].newline, hash, d->states[i].hash, d->sindex, d->salloc, d->states[i].mbps.elems, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 0;
if ((__ctype_get_mb_cur_max()) > 1)
    d->states[i].mbps.nelem = 0;

....
Skipping nonlast addifexit:Priority 3330
At location src/dfa.c:1574
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->states[i].mbps.nelem, d->states, d->states[i].first_end, s, j, d->states[i].constraint, d->states[i].backref, d->tokens, letter, d->states[i].letter, newline, constraint, d->states[i].newline, hash, d->states[i].hash, d->sindex, d->salloc, d->states[i].mbps.elems, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 1;
if ((__ctype_get_mb_cur_max()) > 1)
    d->states[i].mbps.nelem = 0;

....
Skipping nonlast addifexit:Priority 3330
At location src/dfa.c:1574
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->states[i].mbps.nelem, d->states, d->states[i].first_end, s, j, d->states[i].constraint, d->states[i].backref, d->tokens, letter, d->states[i].letter, newline, constraint, d->states[i].newline, hash, d->states[i].hash, d->sindex, d->salloc, d->states[i].mbps.elems, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 2;
if ((__ctype_get_mb_cur_max()) > 1)
    d->states[i].mbps.nelem = 0;

....
Skipping nonlast addifexit:Priority 3330
At location src/dfa.c:1574
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->states[i].mbps.nelem, d->states, d->states[i].first_end, s, j, d->states[i].constraint, d->states[i].backref, d->tokens, letter, d->states[i].letter, newline, constraint, d->states[i].newline, hash, d->states[i].hash, d->sindex, d->salloc, d->states[i].mbps.elems, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 4;
if ((__ctype_get_mb_cur_max()) > 1)
    d->states[i].mbps.nelem = 0;

....
Skipping nonlast addifexit:Priority 3330
At location src/dfa.c:1574
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->states[i].mbps.nelem, d->states, d->states[i].first_end, s, j, d->states[i].constraint, d->states[i].backref, d->tokens, letter, d->states[i].letter, newline, constraint, d->states[i].newline, hash, d->states[i].hash, d->sindex, d->salloc, d->states[i].mbps.elems, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 255;
if ((__ctype_get_mb_cur_max()) > 1)
    d->states[i].mbps.nelem = 0;

....
Skipping nonlast:Priority -419
At location src/dfa.c:1577
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
for (j = 0; j < s->nelem; ++j) 
    if (d->tokens[s->elems[j].index] < 0) {
        constraint = s->elems[j].constraint;
        if ((((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))))
            d->states[i].constraint |= constraint;
        if (!d->states[i].first_end)
            d->states[i].first_end = d->tokens[s->elems[j].index];
    } else if (d->tokens[s->elems[j].index] == BACKREF) {
        d->states[i].constraint = 255;
        d->states[i].backref = 1;
    }

....
Skipping nonlast:Priority -419
At location src/dfa.c:1577
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
for (j = 0; j < s->nelem; ++j) 
    if (d->tokens[s->elems[j].index] < 0) {
        constraint = s->elems[j].constraint;
        if ((((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))))
            d->states[i].constraint |= constraint;
        if (!d->states[i].first_end)
            d->states[i].first_end = d->tokens[s->elems[j].index];
    } else if (d->tokens[s->elems[j].index] == BACKREF) {
        d->states[i].constraint = 255;
        d->states[i].backref = 1;
    }

....
Skipping nonlast:Priority -419
At location src/dfa.c:1577
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
for (j = 0; j < s->nelem; ++j) 
    if (d->tokens[s->elems[j].index] < 0) {
        constraint = s->elems[j].constraint;
        if ((((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))))
            d->states[i].constraint |= constraint;
        if (!d->states[i].first_end)
            d->states[i].first_end = d->tokens[s->elems[j].index];
    } else if (d->tokens[s->elems[j].index] == BACKREF) {
        d->states[i].constraint = 255;
        d->states[i].backref = 1;
    }

....
Skipping nonlast:Priority -419
At location src/dfa.c:1577
--Src File: src/dfa.c
Fragment 0:
if (j == s->nelem)
    return i;
for (j = 0; j < s->nelem; ++j) 
    if (d->tokens[s->elems[j].index] < 0) {
        constraint = s->elems[j].constraint;
        if ((((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))))
            d->states[i].constraint |= constraint;
        if (!d->states[i].first_end)
            d->states[i].first_end = d->tokens[s->elems[j].index];
    } else if (d->tokens[s->elems[j].index] == BACKREF) {
        d->states[i].constraint = 255;
        d->states[i].backref = 1;
    }

....
Skipping nonlast:Priority -419
At location src/dfa.c:1577
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
for (j = 0; j < s->nelem; ++j) 
    if (d->tokens[s->elems[j].index] < 0) {
        constraint = s->elems[j].constraint;
        if ((((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))))
            d->states[i].constraint |= constraint;
        if (!d->states[i].first_end)
            d->states[i].first_end = d->tokens[s->elems[j].index];
    } else if (d->tokens[s->elems[j].index] == BACKREF) {
        d->states[i].constraint = 255;
        d->states[i].backref = 1;
    }

....
Skipping nonlast:Priority -419
At location src/dfa.c:1577
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
for (j = 0; j < s->nelem; ++j) 
    if (d->tokens[s->elems[j].index] < 0) {
        constraint = s->elems[j].constraint;
        if ((((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))))
            d->states[i].constraint |= constraint;
        if (!d->states[i].first_end)
            d->states[i].first_end = d->tokens[s->elems[j].index];
    } else if (d->tokens[s->elems[j].index] == BACKREF) {
        d->states[i].constraint = 255;
        d->states[i].backref = 1;
    }

....
Skipping nonlast:Priority -419
At location src/dfa.c:1577
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
for (j = 0; j < s->nelem; ++j) 
    if (d->tokens[s->elems[j].index] < 0) {
        constraint = s->elems[j].constraint;
        if ((((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))))
            d->states[i].constraint |= constraint;
        if (!d->states[i].first_end)
            d->states[i].first_end = d->tokens[s->elems[j].index];
    } else if (d->tokens[s->elems[j].index] == BACKREF) {
        d->states[i].constraint = 255;
        d->states[i].backref = 1;
    }

....
Skipping nonlast addifexit:Priority 4581
At location src/dfa.c:1577
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, j, s->nelem, d, s->elems, s->elems[j].index, d->tokens, i, d->states, constraint, s->elems[j].constraint, newline, letter, hash, d->sindex, d->salloc, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 0;
for (j = 0; j < s->nelem; ++j) 
    if (d->tokens[s->elems[j].index] < 0) {
        constraint = s->elems[j].constraint;
        if ((((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))))
            d->states[i].constraint |= constraint;
        if (!d->states[i].first_end)
            d->states[i].first_end = d->tokens[s->elems[j].index];
    } else if (d->tokens[s->elems[j].index] == BACKREF) {
        d->states[i].constraint = 255;
        d->states[i].backref = 1;
    }

....
Skipping nonlast addifexit:Priority 4581
At location src/dfa.c:1577
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, j, s->nelem, d, s->elems, s->elems[j].index, d->tokens, i, d->states, constraint, s->elems[j].constraint, newline, letter, hash, d->sindex, d->salloc, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 1;
for (j = 0; j < s->nelem; ++j) 
    if (d->tokens[s->elems[j].index] < 0) {
        constraint = s->elems[j].constraint;
        if ((((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))))
            d->states[i].constraint |= constraint;
        if (!d->states[i].first_end)
            d->states[i].first_end = d->tokens[s->elems[j].index];
    } else if (d->tokens[s->elems[j].index] == BACKREF) {
        d->states[i].constraint = 255;
        d->states[i].backref = 1;
    }

....
Skipping nonlast addifexit:Priority 4581
At location src/dfa.c:1577
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, j, s->nelem, d, s->elems, s->elems[j].index, d->tokens, i, d->states, constraint, s->elems[j].constraint, newline, letter, hash, d->sindex, d->salloc, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 2;
for (j = 0; j < s->nelem; ++j) 
    if (d->tokens[s->elems[j].index] < 0) {
        constraint = s->elems[j].constraint;
        if ((((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))))
            d->states[i].constraint |= constraint;
        if (!d->states[i].first_end)
            d->states[i].first_end = d->tokens[s->elems[j].index];
    } else if (d->tokens[s->elems[j].index] == BACKREF) {
        d->states[i].constraint = 255;
        d->states[i].backref = 1;
    }

....
Skipping nonlast addifexit:Priority 4581
At location src/dfa.c:1577
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, j, s->nelem, d, s->elems, s->elems[j].index, d->tokens, i, d->states, constraint, s->elems[j].constraint, newline, letter, hash, d->sindex, d->salloc, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 4;
for (j = 0; j < s->nelem; ++j) 
    if (d->tokens[s->elems[j].index] < 0) {
        constraint = s->elems[j].constraint;
        if ((((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))))
            d->states[i].constraint |= constraint;
        if (!d->states[i].first_end)
            d->states[i].first_end = d->tokens[s->elems[j].index];
    } else if (d->tokens[s->elems[j].index] == BACKREF) {
        d->states[i].constraint = 255;
        d->states[i].backref = 1;
    }

....
Skipping nonlast addifexit:Priority 4581
At location src/dfa.c:1577
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, j, s->nelem, d, s->elems, s->elems[j].index, d->tokens, i, d->states, constraint, s->elems[j].constraint, newline, letter, hash, d->sindex, d->salloc, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 255;
for (j = 0; j < s->nelem; ++j) 
    if (d->tokens[s->elems[j].index] < 0) {
        constraint = s->elems[j].constraint;
        if ((((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))))
            d->states[i].constraint |= constraint;
        if (!d->states[i].first_end)
            d->states[i].first_end = d->tokens[s->elems[j].index];
    } else if (d->tokens[s->elems[j].index] == BACKREF) {
        d->states[i].constraint = 255;
        d->states[i].backref = 1;
    }

....
Skipping nonlast:Priority 4768
At location src/dfa.c:1580
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
constraint = s->elems[j].constraint;

....
Skipping nonlast:Priority 4768
At location src/dfa.c:1580
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
constraint = s->elems[j].constraint;

....
Skipping nonlast:Priority 4768
At location src/dfa.c:1580
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
constraint = s->elems[j].constraint;

....
Skipping nonlast:Priority 4768
At location src/dfa.c:1580
--Src File: src/dfa.c
Fragment 0:
if (j == s->nelem)
    return i;
constraint = s->elems[j].constraint;

....
Skipping nonlast:Priority 4768
At location src/dfa.c:1580
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
constraint = s->elems[j].constraint;

....
Skipping nonlast:Priority 4768
At location src/dfa.c:1580
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
constraint = s->elems[j].constraint;

....
Skipping nonlast:Priority 4768
At location src/dfa.c:1580
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
constraint = s->elems[j].constraint;

....
Skipping nonlast addifexit:Priority 9768
At location src/dfa.c:1580
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, constraint, j, s->elems, s->elems[j].constraint, newline, letter, d, s->elems[j].index, s->nelem, i, hash)))
    return 0;
constraint = s->elems[j].constraint;

....
Skipping nonlast addifexit:Priority 9768
At location src/dfa.c:1580
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, constraint, j, s->elems, s->elems[j].constraint, newline, letter, d, s->elems[j].index, s->nelem, i, hash)))
    return 1;
constraint = s->elems[j].constraint;

....
Skipping nonlast addifexit:Priority 9768
At location src/dfa.c:1580
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, constraint, j, s->elems, s->elems[j].constraint, newline, letter, d, s->elems[j].index, s->nelem, i, hash)))
    return 2;
constraint = s->elems[j].constraint;

....
Skipping nonlast addifexit:Priority 9768
At location src/dfa.c:1580
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, constraint, j, s->elems, s->elems[j].constraint, newline, letter, d, s->elems[j].index, s->nelem, i, hash)))
    return 4;
constraint = s->elems[j].constraint;

....
Skipping nonlast addifexit:Priority 9768
At location src/dfa.c:1580
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, constraint, j, s->elems, s->elems[j].constraint, newline, letter, d, s->elems[j].index, s->nelem, i, hash)))
    return 255;
constraint = s->elems[j].constraint;

....
Skipping nonlast addifexit:Priority 9768
At location src/dfa.c:1580
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, constraint, j, s->elems, s->elems[j].constraint, newline, letter, d, s->elems[j].index, s->nelem, i, hash)))
    break;
constraint = s->elems[j].constraint;

....
Skipping nonlast:Priority -231
At location src/dfa.c:1581
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if ((((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))))
    d->states[i].constraint |= constraint;

....
Skipping nonlast:Priority -231
At location src/dfa.c:1581
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if ((((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))))
    d->states[i].constraint |= constraint;

....
Skipping nonlast:Priority -231
At location src/dfa.c:1581
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if ((((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))))
    d->states[i].constraint |= constraint;

....
Skipping nonlast:Priority -231
At location src/dfa.c:1581
--Src File: src/dfa.c
Fragment 0:
if (j == s->nelem)
    return i;
if ((((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))))
    d->states[i].constraint |= constraint;

....
Skipping nonlast:Priority -231
At location src/dfa.c:1581
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if ((((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))))
    d->states[i].constraint |= constraint;

....
Skipping nonlast:Priority -231
At location src/dfa.c:1581
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if ((((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))))
    d->states[i].constraint |= constraint;

....
Skipping nonlast:Priority -231
At location src/dfa.c:1581
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if ((((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))))
    d->states[i].constraint |= constraint;

....
Skipping nonlast addifexit:Priority 3519
At location src/dfa.c:1581
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(newline, letter, constraint, s, j, s->elems, s->elems[j].constraint, d, s->elems[j].index, i, s->nelem, hash)))
    return 0;
if ((((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))))
    d->states[i].constraint |= constraint;

....
Skipping nonlast addifexit:Priority 3519
At location src/dfa.c:1581
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(newline, letter, constraint, s, j, s->elems, s->elems[j].constraint, d, s->elems[j].index, i, s->nelem, hash)))
    return 1;
if ((((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))))
    d->states[i].constraint |= constraint;

....
Skipping nonlast addifexit:Priority 3519
At location src/dfa.c:1581
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(newline, letter, constraint, s, j, s->elems, s->elems[j].constraint, d, s->elems[j].index, i, s->nelem, hash)))
    return 2;
if ((((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))))
    d->states[i].constraint |= constraint;

....
Skipping nonlast addifexit:Priority 3519
At location src/dfa.c:1581
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(newline, letter, constraint, s, j, s->elems, s->elems[j].constraint, d, s->elems[j].index, i, s->nelem, hash)))
    return 4;
if ((((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))))
    d->states[i].constraint |= constraint;

....
Skipping nonlast addifexit:Priority 3519
At location src/dfa.c:1581
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(newline, letter, constraint, s, j, s->elems, s->elems[j].constraint, d, s->elems[j].index, i, s->nelem, hash)))
    return 255;
if ((((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))))
    d->states[i].constraint |= constraint;

....
Skipping nonlast addifexit:Priority 3519
At location src/dfa.c:1581
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(newline, letter, constraint, s, j, s->elems, s->elems[j].constraint, d, s->elems[j].index, i, s->nelem, hash)))
    break;
if ((((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))))
    d->states[i].constraint |= constraint;

....
Skipping nonlast:Priority -230
At location src/dfa.c:1585
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    d->states[i].constraint |= constraint;
}

....
Skipping nonlast:Priority -230
At location src/dfa.c:1585
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    d->states[i].constraint |= constraint;
}

....
Skipping nonlast:Priority -230
At location src/dfa.c:1585
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        return lasttok = parse_bracket_exp_mb();
    }
    d->states[i].constraint |= constraint;
}

....
Skipping nonlast:Priority -230
At location src/dfa.c:1585
--Src File: src/dfa.c
Fragment 0:
{
    if (j == s->nelem)
        return i;
    d->states[i].constraint |= constraint;
}

....
Skipping nonlast:Priority -230
At location src/dfa.c:1585
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    d->states[i].constraint |= constraint;
}

....
Skipping nonlast:Priority -230
At location src/dfa.c:1585
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    d->states[i].constraint |= constraint;
}

....
Skipping nonlast:Priority -230
At location src/dfa.c:1585
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    d->states[i].constraint |= constraint;
}

....
Skipping nonlast addifexit:Priority 4770
At location src/dfa.c:1585
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(d, constraint, i, d->states[i].constraint, d->states, newline, letter, d->states[i].first_end, s, j, d->tokens, d->states[i].backref, d->sindex, d->states[i].letter, d->states[i].newline, hash, d->states[i].hash, d->salloc, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
        return 0;
    d->states[i].constraint |= constraint;
}

....
Skipping nonlast addifexit:Priority 4770
At location src/dfa.c:1585
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(d, constraint, i, d->states[i].constraint, d->states, newline, letter, d->states[i].first_end, s, j, d->tokens, d->states[i].backref, d->sindex, d->states[i].letter, d->states[i].newline, hash, d->states[i].hash, d->salloc, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
        return 1;
    d->states[i].constraint |= constraint;
}

....
Skipping nonlast addifexit:Priority 4770
At location src/dfa.c:1585
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(d, constraint, i, d->states[i].constraint, d->states, newline, letter, d->states[i].first_end, s, j, d->tokens, d->states[i].backref, d->sindex, d->states[i].letter, d->states[i].newline, hash, d->states[i].hash, d->salloc, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
        return 2;
    d->states[i].constraint |= constraint;
}

....
Skipping nonlast addifexit:Priority 4770
At location src/dfa.c:1585
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(d, constraint, i, d->states[i].constraint, d->states, newline, letter, d->states[i].first_end, s, j, d->tokens, d->states[i].backref, d->sindex, d->states[i].letter, d->states[i].newline, hash, d->states[i].hash, d->salloc, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
        return 4;
    d->states[i].constraint |= constraint;
}

....
Skipping nonlast addifexit:Priority 4770
At location src/dfa.c:1585
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(d, constraint, i, d->states[i].constraint, d->states, newline, letter, d->states[i].first_end, s, j, d->tokens, d->states[i].backref, d->sindex, d->states[i].letter, d->states[i].newline, hash, d->states[i].hash, d->salloc, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
        return 255;
    d->states[i].constraint |= constraint;
}

....
Skipping nonlast addifexit:Priority 4770
At location src/dfa.c:1585
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(d, constraint, i, d->states[i].constraint, d->states, newline, letter, d->states[i].first_end, s, j, d->tokens, d->states[i].backref, d->sindex, d->states[i].letter, d->states[i].newline, hash, d->states[i].hash, d->salloc, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
        break;
    d->states[i].constraint |= constraint;
}

....
Skipping isstmt addifexit:Priority 3521
At location src/dfa.c:1586
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->states[i].first_end, d->states, s, constraint, j, s->elems, s->elems[j].index, d->states[i].constraint, d->tokens, newline, letter, s->elems[j].constraint, d->states[i].backref, s->nelem, d->sindex, d->states[i].letter, d->states[i].newline, hash, d->states[i].hash, d->salloc, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 0;
if (!d->states[i].first_end)
    d->states[i].first_end = d->tokens[s->elems[j].index];

....
Skipping isstmt addifexit:Priority 3521
At location src/dfa.c:1586
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->states[i].first_end, d->states, s, constraint, j, s->elems, s->elems[j].index, d->states[i].constraint, d->tokens, newline, letter, s->elems[j].constraint, d->states[i].backref, s->nelem, d->sindex, d->states[i].letter, d->states[i].newline, hash, d->states[i].hash, d->salloc, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 1;
if (!d->states[i].first_end)
    d->states[i].first_end = d->tokens[s->elems[j].index];

....
Skipping isstmt addifexit:Priority 3521
At location src/dfa.c:1586
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->states[i].first_end, d->states, s, constraint, j, s->elems, s->elems[j].index, d->states[i].constraint, d->tokens, newline, letter, s->elems[j].constraint, d->states[i].backref, s->nelem, d->sindex, d->states[i].letter, d->states[i].newline, hash, d->states[i].hash, d->salloc, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 2;
if (!d->states[i].first_end)
    d->states[i].first_end = d->tokens[s->elems[j].index];

....
Skipping isstmt addifexit:Priority 3521
At location src/dfa.c:1586
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->states[i].first_end, d->states, s, constraint, j, s->elems, s->elems[j].index, d->states[i].constraint, d->tokens, newline, letter, s->elems[j].constraint, d->states[i].backref, s->nelem, d->sindex, d->states[i].letter, d->states[i].newline, hash, d->states[i].hash, d->salloc, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 4;
if (!d->states[i].first_end)
    d->states[i].first_end = d->tokens[s->elems[j].index];

....
Skipping isstmt addifexit:Priority 3521
At location src/dfa.c:1586
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->states[i].first_end, d->states, s, constraint, j, s->elems, s->elems[j].index, d->states[i].constraint, d->tokens, newline, letter, s->elems[j].constraint, d->states[i].backref, s->nelem, d->sindex, d->states[i].letter, d->states[i].newline, hash, d->states[i].hash, d->salloc, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 255;
if (!d->states[i].first_end)
    d->states[i].first_end = d->tokens[s->elems[j].index];

....
Skipping isstmt addifexit:Priority 3521
At location src/dfa.c:1586
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->states[i].first_end, d->states, s, constraint, j, s->elems, s->elems[j].index, d->states[i].constraint, d->tokens, newline, letter, s->elems[j].constraint, d->states[i].backref, s->nelem, d->sindex, d->states[i].letter, d->states[i].newline, hash, d->states[i].hash, d->salloc, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    break;
if (!d->states[i].first_end)
    d->states[i].first_end = d->tokens[s->elems[j].index];

....
Skipping nonlast:Priority -228
At location src/dfa.c:1587
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    d->states[i].first_end = d->tokens[s->elems[j].index];
}

....
Skipping nonlast:Priority -228
At location src/dfa.c:1587
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    d->states[i].first_end = d->tokens[s->elems[j].index];
}

....
Skipping nonlast:Priority -228
At location src/dfa.c:1587
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        return lasttok = parse_bracket_exp_mb();
    }
    d->states[i].first_end = d->tokens[s->elems[j].index];
}

....
Skipping nonlast:Priority -228
At location src/dfa.c:1587
--Src File: src/dfa.c
Fragment 0:
{
    if (j == s->nelem)
        return i;
    d->states[i].first_end = d->tokens[s->elems[j].index];
}

....
Skipping nonlast:Priority -228
At location src/dfa.c:1587
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    d->states[i].first_end = d->tokens[s->elems[j].index];
}

....
Skipping nonlast:Priority -228
At location src/dfa.c:1587
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    d->states[i].first_end = d->tokens[s->elems[j].index];
}

....
Skipping nonlast:Priority -228
At location src/dfa.c:1587
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    d->states[i].first_end = d->tokens[s->elems[j].index];
}

....
Skipping nonlast addifexit:Priority 4772
At location src/dfa.c:1587
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(d, s, i, j, s->elems, s->elems[j].index, d->states[i].first_end, d->tokens, d->states, constraint, d->states[i].constraint, newline, letter, d->states[i].backref, s->elems[j].constraint, d->sindex, s->nelem, d->states[i].letter, d->states[i].newline, hash, d->states[i].hash, d->salloc, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
        return 0;
    d->states[i].first_end = d->tokens[s->elems[j].index];
}

....
Skipping nonlast addifexit:Priority 4772
At location src/dfa.c:1587
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(d, s, i, j, s->elems, s->elems[j].index, d->states[i].first_end, d->tokens, d->states, constraint, d->states[i].constraint, newline, letter, d->states[i].backref, s->elems[j].constraint, d->sindex, s->nelem, d->states[i].letter, d->states[i].newline, hash, d->states[i].hash, d->salloc, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
        return 1;
    d->states[i].first_end = d->tokens[s->elems[j].index];
}

....
Skipping nonlast addifexit:Priority 4772
At location src/dfa.c:1587
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(d, s, i, j, s->elems, s->elems[j].index, d->states[i].first_end, d->tokens, d->states, constraint, d->states[i].constraint, newline, letter, d->states[i].backref, s->elems[j].constraint, d->sindex, s->nelem, d->states[i].letter, d->states[i].newline, hash, d->states[i].hash, d->salloc, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
        return 2;
    d->states[i].first_end = d->tokens[s->elems[j].index];
}

....
Skipping nonlast addifexit:Priority 4772
At location src/dfa.c:1587
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(d, s, i, j, s->elems, s->elems[j].index, d->states[i].first_end, d->tokens, d->states, constraint, d->states[i].constraint, newline, letter, d->states[i].backref, s->elems[j].constraint, d->sindex, s->nelem, d->states[i].letter, d->states[i].newline, hash, d->states[i].hash, d->salloc, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
        return 4;
    d->states[i].first_end = d->tokens[s->elems[j].index];
}

....
Skipping nonlast addifexit:Priority 4772
At location src/dfa.c:1587
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(d, s, i, j, s->elems, s->elems[j].index, d->states[i].first_end, d->tokens, d->states, constraint, d->states[i].constraint, newline, letter, d->states[i].backref, s->elems[j].constraint, d->sindex, s->nelem, d->states[i].letter, d->states[i].newline, hash, d->states[i].hash, d->salloc, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
        return 255;
    d->states[i].first_end = d->tokens[s->elems[j].index];
}

....
Skipping nonlast addifexit:Priority 4772
At location src/dfa.c:1587
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(d, s, i, j, s->elems, s->elems[j].index, d->states[i].first_end, d->tokens, d->states, constraint, d->states[i].constraint, newline, letter, d->states[i].backref, s->elems[j].constraint, d->sindex, s->nelem, d->states[i].letter, d->states[i].newline, hash, d->states[i].hash, d->salloc, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
        break;
    d->states[i].first_end = d->tokens[s->elems[j].index];
}

....
Skipping nonlast:Priority -418
At location src/dfa.c:1589
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    if (d->tokens[s->elems[j].index] == BACKREF) {
        d->states[i].constraint = 255;
        d->states[i].backref = 1;
    }
}

....
Skipping nonlast:Priority -418
At location src/dfa.c:1589
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    if (d->tokens[s->elems[j].index] == BACKREF) {
        d->states[i].constraint = 255;
        d->states[i].backref = 1;
    }
}

....
Skipping nonlast:Priority -418
At location src/dfa.c:1589
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        return lasttok = parse_bracket_exp_mb();
    }
    if (d->tokens[s->elems[j].index] == BACKREF) {
        d->states[i].constraint = 255;
        d->states[i].backref = 1;
    }
}

....
Skipping nonlast:Priority -418
At location src/dfa.c:1589
--Src File: src/dfa.c
Fragment 0:
{
    if (j == s->nelem)
        return i;
    if (d->tokens[s->elems[j].index] == BACKREF) {
        d->states[i].constraint = 255;
        d->states[i].backref = 1;
    }
}

....
Skipping nonlast:Priority -418
At location src/dfa.c:1589
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    if (d->tokens[s->elems[j].index] == BACKREF) {
        d->states[i].constraint = 255;
        d->states[i].backref = 1;
    }
}

....
Skipping nonlast:Priority -418
At location src/dfa.c:1589
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    if (d->tokens[s->elems[j].index] == BACKREF) {
        d->states[i].constraint = 255;
        d->states[i].backref = 1;
    }
}

....
Skipping nonlast:Priority -418
At location src/dfa.c:1589
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    if (d->tokens[s->elems[j].index] == BACKREF) {
        d->states[i].constraint = 255;
        d->states[i].backref = 1;
    }
}

....
Skipping nonlast addifexit:Priority 3332
At location src/dfa.c:1589
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(d, s, j, s->elems, s->elems[j].index, d->tokens, i, d->states, constraint, newline, letter, d->sindex, s->elems[j].constraint, s->nelem, hash, d->salloc, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
        return 0;
    if (d->tokens[s->elems[j].index] == BACKREF) {
        d->states[i].constraint = 255;
        d->states[i].backref = 1;
    }
}

....
Skipping nonlast addifexit:Priority 3332
At location src/dfa.c:1589
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(d, s, j, s->elems, s->elems[j].index, d->tokens, i, d->states, constraint, newline, letter, d->sindex, s->elems[j].constraint, s->nelem, hash, d->salloc, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
        return 1;
    if (d->tokens[s->elems[j].index] == BACKREF) {
        d->states[i].constraint = 255;
        d->states[i].backref = 1;
    }
}

....
Skipping nonlast addifexit:Priority 3332
At location src/dfa.c:1589
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(d, s, j, s->elems, s->elems[j].index, d->tokens, i, d->states, constraint, newline, letter, d->sindex, s->elems[j].constraint, s->nelem, hash, d->salloc, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
        return 2;
    if (d->tokens[s->elems[j].index] == BACKREF) {
        d->states[i].constraint = 255;
        d->states[i].backref = 1;
    }
}

....
Skipping nonlast addifexit:Priority 3332
At location src/dfa.c:1589
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(d, s, j, s->elems, s->elems[j].index, d->tokens, i, d->states, constraint, newline, letter, d->sindex, s->elems[j].constraint, s->nelem, hash, d->salloc, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
        return 4;
    if (d->tokens[s->elems[j].index] == BACKREF) {
        d->states[i].constraint = 255;
        d->states[i].backref = 1;
    }
}

....
Skipping nonlast addifexit:Priority 3332
At location src/dfa.c:1589
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(d, s, j, s->elems, s->elems[j].index, d->tokens, i, d->states, constraint, newline, letter, d->sindex, s->elems[j].constraint, s->nelem, hash, d->salloc, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
        return 255;
    if (d->tokens[s->elems[j].index] == BACKREF) {
        d->states[i].constraint = 255;
        d->states[i].backref = 1;
    }
}

....
Skipping nonlast addifexit:Priority 3332
At location src/dfa.c:1589
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(d, s, j, s->elems, s->elems[j].index, d->tokens, i, d->states, constraint, newline, letter, d->sindex, s->elems[j].constraint, s->nelem, hash, d->salloc, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
        break;
    if (d->tokens[s->elems[j].index] == BACKREF) {
        d->states[i].constraint = 255;
        d->states[i].backref = 1;
    }
}

....
Skipping nonlast:Priority -417
At location src/dfa.c:1595
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
++d->sindex;

....
Skipping nonlast:Priority -417
At location src/dfa.c:1595
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
++d->sindex;

....
Skipping nonlast:Priority -417
At location src/dfa.c:1595
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
++d->sindex;

....
Skipping nonlast:Priority -417
At location src/dfa.c:1595
--Src File: src/dfa.c
Fragment 0:
if (j == s->nelem)
    return i;
++d->sindex;

....
Skipping nonlast:Priority -417
At location src/dfa.c:1595
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
++d->sindex;

....
Skipping nonlast:Priority -417
At location src/dfa.c:1595
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
++d->sindex;

....
Skipping nonlast:Priority -417
At location src/dfa.c:1595
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
++d->sindex;

....
Skipping nonlast addifexit:Priority 4583
At location src/dfa.c:1595
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->sindex, i, d->states, s, j, d->tokens, constraint, newline, letter, hash, d->salloc, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 0;
++d->sindex;

....
Skipping nonlast addifexit:Priority 4583
At location src/dfa.c:1595
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->sindex, i, d->states, s, j, d->tokens, constraint, newline, letter, hash, d->salloc, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 1;
++d->sindex;

....
Skipping nonlast addifexit:Priority 4583
At location src/dfa.c:1595
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->sindex, i, d->states, s, j, d->tokens, constraint, newline, letter, hash, d->salloc, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 2;
++d->sindex;

....
Skipping nonlast addifexit:Priority 4583
At location src/dfa.c:1595
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->sindex, i, d->states, s, j, d->tokens, constraint, newline, letter, hash, d->salloc, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 4;
++d->sindex;

....
Skipping nonlast addifexit:Priority 4583
At location src/dfa.c:1595
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->sindex, i, d->states, s, j, d->tokens, constraint, newline, letter, hash, d->salloc, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return 255;
++d->sindex;

....
Skipping returnreturn addifexit:Priority 4584
At location src/dfa.c:1597
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, d, s, j, constraint, newline, letter, hash)))
    return 0;
return i;

....
Skipping returnreturn addifexit:Priority 4584
At location src/dfa.c:1597
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, d, s, j, constraint, newline, letter, hash)))
    return 1;
return i;

....
Skipping returnreturn addifexit:Priority 4584
At location src/dfa.c:1597
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, d, s, j, constraint, newline, letter, hash)))
    return 2;
return i;

....
Skipping returnreturn addifexit:Priority 4584
At location src/dfa.c:1597
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, d, s, j, constraint, newline, letter, hash)))
    return 4;
return i;

....
Skipping returnreturn addifexit:Priority 4584
At location src/dfa.c:1597
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, d, s, j, constraint, newline, letter, hash)))
    return 255;
return i;

....
Skipping nonlast:Priority -553
At location src/dfa.c:1608
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int i, j;

....
Skipping nonlast:Priority -553
At location src/dfa.c:1608
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int i, j;

....
Skipping nonlast:Priority -553
At location src/dfa.c:1608
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
int i, j;

....
Skipping nonlast:Priority -553
At location src/dfa.c:1608
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int i, j;

....
Skipping nonlast:Priority -553
At location src/dfa.c:1608
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int i, j;

....
Skipping nonlast:Priority -553
At location src/dfa.c:1608
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int i, j;

....
Skipping nonlast addifexit:Priority 4447
At location src/dfa.c:1608
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, s)))
    return;
int i, j;

....
Skipping nonlast:Priority -552
At location src/dfa.c:1609
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
char *visited;

....
Skipping nonlast:Priority -552
At location src/dfa.c:1609
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
char *visited;

....
Skipping nonlast:Priority -552
At location src/dfa.c:1609
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
char *visited;

....
Skipping nonlast:Priority -552
At location src/dfa.c:1609
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
char *visited;

....
Skipping nonlast:Priority -552
At location src/dfa.c:1609
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
char *visited;

....
Skipping nonlast:Priority -552
At location src/dfa.c:1609
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
char *visited;

....
Skipping nonlast addifexit:Priority 4448
At location src/dfa.c:1609
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, s, i, j)))
    return;
char *visited;

....
Skipping nonlast:Priority -551
At location src/dfa.c:1610
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
position p, old;

....
Skipping nonlast:Priority -551
At location src/dfa.c:1610
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
position p, old;

....
Skipping nonlast:Priority -551
At location src/dfa.c:1610
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
position p, old;

....
Skipping nonlast:Priority -551
At location src/dfa.c:1610
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
position p, old;

....
Skipping nonlast:Priority -551
At location src/dfa.c:1610
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
position p, old;

....
Skipping nonlast:Priority -551
At location src/dfa.c:1610
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
position p, old;

....
Skipping nonlast addifexit:Priority 4449
At location src/dfa.c:1610
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, visited, s, i, j)))
    return;
position p, old;

....
Skipping nonlast:Priority 6950
At location src/dfa.c:1612
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
((visited) = xcalloc((size_t)(d->tindex), sizeof(char)));

....
Skipping nonlast:Priority 6950
At location src/dfa.c:1612
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
((visited) = xcalloc((size_t)(d->tindex), sizeof(char)));

....
Skipping nonlast:Priority 6950
At location src/dfa.c:1612
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
((visited) = xcalloc((size_t)(d->tindex), sizeof(char)));

....
Skipping nonlast:Priority 6950
At location src/dfa.c:1612
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
((visited) = xcalloc((size_t)(d->tindex), sizeof(char)));

....
Skipping nonlast:Priority 6950
At location src/dfa.c:1612
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
((visited) = xcalloc((size_t)(d->tindex), sizeof(char)));

....
Skipping nonlast:Priority 6950
At location src/dfa.c:1612
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
((visited) = xcalloc((size_t)(d->tindex), sizeof(char)));

....
Skipping nonlast addifexit:Priority 11950
At location src/dfa.c:1612
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, visited, d->tindex, s, i, d->tokens, j, d->follows, d->charclasses, d->cindex, d->calloc, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
((visited) = xcalloc((size_t)(d->tindex), sizeof(char)));

....
Skipping nonlast:Priority -549
At location src/dfa.c:1614
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
for (i = 0; i < s->nelem; ++i) 
    if (d->tokens[s->elems[i].index] >= (1 << 8) && d->tokens[s->elems[i].index] != BACKREF && d->tokens[s->elems[i].index] != ANYCHAR && d->tokens[s->elems[i].index] != MBCSET && d->tokens[s->elems[i].index] < CSET) {
        old = s->elems[i];
        p.constraint = old.constraint;
        delete(s->elems[i], s);
        if (visited[old.index]) {
            --i;
            continue;
        }
        visited[old.index] = 1;
        switch (d->tokens[old.index]) {
          case BEGLINE:
            p.constraint &= 207;
            break;
          case ENDLINE:
            p.constraint &= 175;
            break;
          case BEGWORD:
            p.constraint &= 242;
            break;
          case ENDWORD:
            p.constraint &= 244;
            break;
          case LIMWORD:
            p.constraint &= 246;
            break;
          case NOTLIMWORD:
            p.constraint &= 249;
            break;
          default:
            break;
        }
        for (j = 0; j < d->follows[old.index].nelem; ++j) {
            p.index = d->follows[old.index].elems[j].index;
            insert(p, s);
        }
        i = -1;
    }

....
Skipping nonlast:Priority -549
At location src/dfa.c:1614
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
for (i = 0; i < s->nelem; ++i) 
    if (d->tokens[s->elems[i].index] >= (1 << 8) && d->tokens[s->elems[i].index] != BACKREF && d->tokens[s->elems[i].index] != ANYCHAR && d->tokens[s->elems[i].index] != MBCSET && d->tokens[s->elems[i].index] < CSET) {
        old = s->elems[i];
        p.constraint = old.constraint;
        delete(s->elems[i], s);
        if (visited[old.index]) {
            --i;
            continue;
        }
        visited[old.index] = 1;
        switch (d->tokens[old.index]) {
          case BEGLINE:
            p.constraint &= 207;
            break;
          case ENDLINE:
            p.constraint &= 175;
            break;
          case BEGWORD:
            p.constraint &= 242;
            break;
          case ENDWORD:
            p.constraint &= 244;
            break;
          case LIMWORD:
            p.constraint &= 246;
            break;
          case NOTLIMWORD:
            p.constraint &= 249;
            break;
          default:
            break;
        }
        for (j = 0; j < d->follows[old.index].nelem; ++j) {
            p.index = d->follows[old.index].elems[j].index;
            insert(p, s);
        }
        i = -1;
    }

....
Skipping nonlast:Priority -549
At location src/dfa.c:1614
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
for (i = 0; i < s->nelem; ++i) 
    if (d->tokens[s->elems[i].index] >= (1 << 8) && d->tokens[s->elems[i].index] != BACKREF && d->tokens[s->elems[i].index] != ANYCHAR && d->tokens[s->elems[i].index] != MBCSET && d->tokens[s->elems[i].index] < CSET) {
        old = s->elems[i];
        p.constraint = old.constraint;
        delete(s->elems[i], s);
        if (visited[old.index]) {
            --i;
            continue;
        }
        visited[old.index] = 1;
        switch (d->tokens[old.index]) {
          case BEGLINE:
            p.constraint &= 207;
            break;
          case ENDLINE:
            p.constraint &= 175;
            break;
          case BEGWORD:
            p.constraint &= 242;
            break;
          case ENDWORD:
            p.constraint &= 244;
            break;
          case LIMWORD:
            p.constraint &= 246;
            break;
          case NOTLIMWORD:
            p.constraint &= 249;
            break;
          default:
            break;
        }
        for (j = 0; j < d->follows[old.index].nelem; ++j) {
            p.index = d->follows[old.index].elems[j].index;
            insert(p, s);
        }
        i = -1;
    }

....
Skipping nonlast:Priority -549
At location src/dfa.c:1614
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
for (i = 0; i < s->nelem; ++i) 
    if (d->tokens[s->elems[i].index] >= (1 << 8) && d->tokens[s->elems[i].index] != BACKREF && d->tokens[s->elems[i].index] != ANYCHAR && d->tokens[s->elems[i].index] != MBCSET && d->tokens[s->elems[i].index] < CSET) {
        old = s->elems[i];
        p.constraint = old.constraint;
        delete(s->elems[i], s);
        if (visited[old.index]) {
            --i;
            continue;
        }
        visited[old.index] = 1;
        switch (d->tokens[old.index]) {
          case BEGLINE:
            p.constraint &= 207;
            break;
          case ENDLINE:
            p.constraint &= 175;
            break;
          case BEGWORD:
            p.constraint &= 242;
            break;
          case ENDWORD:
            p.constraint &= 244;
            break;
          case LIMWORD:
            p.constraint &= 246;
            break;
          case NOTLIMWORD:
            p.constraint &= 249;
            break;
          default:
            break;
        }
        for (j = 0; j < d->follows[old.index].nelem; ++j) {
            p.index = d->follows[old.index].elems[j].index;
            insert(p, s);
        }
        i = -1;
    }

....
Skipping nonlast:Priority -549
At location src/dfa.c:1614
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
for (i = 0; i < s->nelem; ++i) 
    if (d->tokens[s->elems[i].index] >= (1 << 8) && d->tokens[s->elems[i].index] != BACKREF && d->tokens[s->elems[i].index] != ANYCHAR && d->tokens[s->elems[i].index] != MBCSET && d->tokens[s->elems[i].index] < CSET) {
        old = s->elems[i];
        p.constraint = old.constraint;
        delete(s->elems[i], s);
        if (visited[old.index]) {
            --i;
            continue;
        }
        visited[old.index] = 1;
        switch (d->tokens[old.index]) {
          case BEGLINE:
            p.constraint &= 207;
            break;
          case ENDLINE:
            p.constraint &= 175;
            break;
          case BEGWORD:
            p.constraint &= 242;
            break;
          case ENDWORD:
            p.constraint &= 244;
            break;
          case LIMWORD:
            p.constraint &= 246;
            break;
          case NOTLIMWORD:
            p.constraint &= 249;
            break;
          default:
            break;
        }
        for (j = 0; j < d->follows[old.index].nelem; ++j) {
            p.index = d->follows[old.index].elems[j].index;
            insert(p, s);
        }
        i = -1;
    }

....
Skipping nonlast:Priority -549
At location src/dfa.c:1614
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
for (i = 0; i < s->nelem; ++i) 
    if (d->tokens[s->elems[i].index] >= (1 << 8) && d->tokens[s->elems[i].index] != BACKREF && d->tokens[s->elems[i].index] != ANYCHAR && d->tokens[s->elems[i].index] != MBCSET && d->tokens[s->elems[i].index] < CSET) {
        old = s->elems[i];
        p.constraint = old.constraint;
        delete(s->elems[i], s);
        if (visited[old.index]) {
            --i;
            continue;
        }
        visited[old.index] = 1;
        switch (d->tokens[old.index]) {
          case BEGLINE:
            p.constraint &= 207;
            break;
          case ENDLINE:
            p.constraint &= 175;
            break;
          case BEGWORD:
            p.constraint &= 242;
            break;
          case ENDWORD:
            p.constraint &= 244;
            break;
          case LIMWORD:
            p.constraint &= 246;
            break;
          case NOTLIMWORD:
            p.constraint &= 249;
            break;
          default:
            break;
        }
        for (j = 0; j < d->follows[old.index].nelem; ++j) {
            p.index = d->follows[old.index].elems[j].index;
            insert(p, s);
        }
        i = -1;
    }

....
Skipping nonlast addifexit:Priority 4451
At location src/dfa.c:1614
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, i, s->nelem, d, s->elems[i].index, s->elems, d->tokens, visited, d->tindex, j, d->follows, s->elems[i].constraint, d->charclasses, d->cindex, d->calloc, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
for (i = 0; i < s->nelem; ++i) 
    if (d->tokens[s->elems[i].index] >= (1 << 8) && d->tokens[s->elems[i].index] != BACKREF && d->tokens[s->elems[i].index] != ANYCHAR && d->tokens[s->elems[i].index] != MBCSET && d->tokens[s->elems[i].index] < CSET) {
        old = s->elems[i];
        p.constraint = old.constraint;
        delete(s->elems[i], s);
        if (visited[old.index]) {
            --i;
            continue;
        }
        visited[old.index] = 1;
        switch (d->tokens[old.index]) {
          case BEGLINE:
            p.constraint &= 207;
            break;
          case ENDLINE:
            p.constraint &= 175;
            break;
          case BEGWORD:
            p.constraint &= 242;
            break;
          case ENDWORD:
            p.constraint &= 244;
            break;
          case LIMWORD:
            p.constraint &= 246;
            break;
          case NOTLIMWORD:
            p.constraint &= 249;
            break;
          default:
            break;
        }
        for (j = 0; j < d->follows[old.index].nelem; ++j) {
            p.index = d->follows[old.index].elems[j].index;
            insert(p, s);
        }
        i = -1;
    }

....
Skipping nonlast:Priority -621
At location src/dfa.c:1722
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int *nullable;

....
Skipping nonlast:Priority -621
At location src/dfa.c:1722
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int *nullable;

....
Skipping nonlast:Priority -621
At location src/dfa.c:1722
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
int *nullable;

....
Skipping nonlast:Priority -621
At location src/dfa.c:1722
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int *nullable;

....
Skipping nonlast:Priority -621
At location src/dfa.c:1722
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int *nullable;

....
Skipping nonlast:Priority -621
At location src/dfa.c:1722
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int *nullable;

....
Skipping nonlast addifexit:Priority 4379
At location src/dfa.c:1722
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, searchflag)))
    return;
int *nullable;

....
Skipping nonlast:Priority -620
At location src/dfa.c:1723
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int *nfirstpos;

....
Skipping nonlast:Priority -620
At location src/dfa.c:1723
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int *nfirstpos;

....
Skipping nonlast:Priority -620
At location src/dfa.c:1723
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
int *nfirstpos;

....
Skipping nonlast:Priority -620
At location src/dfa.c:1723
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int *nfirstpos;

....
Skipping nonlast:Priority -620
At location src/dfa.c:1723
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int *nfirstpos;

....
Skipping nonlast:Priority -620
At location src/dfa.c:1723
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int *nfirstpos;

....
Skipping nonlast addifexit:Priority 4380
At location src/dfa.c:1723
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, searchflag, nullable)))
    return;
int *nfirstpos;

....
Skipping nonlast:Priority -619
At location src/dfa.c:1724
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
position *firstpos;

....
Skipping nonlast:Priority -619
At location src/dfa.c:1724
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
position *firstpos;

....
Skipping nonlast:Priority -619
At location src/dfa.c:1724
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
position *firstpos;

....
Skipping nonlast:Priority -619
At location src/dfa.c:1724
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
position *firstpos;

....
Skipping nonlast:Priority -619
At location src/dfa.c:1724
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
position *firstpos;

....
Skipping nonlast:Priority -619
At location src/dfa.c:1724
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
position *firstpos;

....
Skipping nonlast addifexit:Priority 4381
At location src/dfa.c:1724
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, searchflag, nullable, nfirstpos)))
    return;
position *firstpos;

....
Skipping nonlast:Priority -618
At location src/dfa.c:1725
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int *nlastpos;

....
Skipping nonlast:Priority -618
At location src/dfa.c:1725
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int *nlastpos;

....
Skipping nonlast:Priority -618
At location src/dfa.c:1725
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
int *nlastpos;

....
Skipping nonlast:Priority -618
At location src/dfa.c:1725
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int *nlastpos;

....
Skipping nonlast:Priority -618
At location src/dfa.c:1725
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int *nlastpos;

....
Skipping nonlast:Priority -618
At location src/dfa.c:1725
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int *nlastpos;

....
Skipping nonlast addifexit:Priority 4382
At location src/dfa.c:1725
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, searchflag, nullable, nfirstpos, firstpos)))
    return;
int *nlastpos;

....
Skipping nonlast:Priority -617
At location src/dfa.c:1726
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
position *lastpos;

....
Skipping nonlast:Priority -617
At location src/dfa.c:1726
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
position *lastpos;

....
Skipping nonlast:Priority -617
At location src/dfa.c:1726
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
position *lastpos;

....
Skipping nonlast:Priority -617
At location src/dfa.c:1726
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
position *lastpos;

....
Skipping nonlast:Priority -617
At location src/dfa.c:1726
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
position *lastpos;

....
Skipping nonlast:Priority -617
At location src/dfa.c:1726
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
position *lastpos;

....
Skipping nonlast addifexit:Priority 4383
At location src/dfa.c:1726
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, searchflag, nullable, nfirstpos, firstpos, nlastpos)))
    return;
position *lastpos;

....
Skipping nonlast:Priority -616
At location src/dfa.c:1727
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int *nalloc;

....
Skipping nonlast:Priority -616
At location src/dfa.c:1727
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int *nalloc;

....
Skipping nonlast:Priority -616
At location src/dfa.c:1727
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
int *nalloc;

....
Skipping nonlast:Priority -616
At location src/dfa.c:1727
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int *nalloc;

....
Skipping nonlast:Priority -616
At location src/dfa.c:1727
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int *nalloc;

....
Skipping nonlast:Priority -616
At location src/dfa.c:1727
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int *nalloc;

....
Skipping nonlast addifexit:Priority 4384
At location src/dfa.c:1727
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, searchflag, nullable, nfirstpos, firstpos, nlastpos, lastpos)))
    return;
int *nalloc;

....
Skipping nonlast:Priority -615
At location src/dfa.c:1728
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
position_set tmp;

....
Skipping nonlast:Priority -615
At location src/dfa.c:1728
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
position_set tmp;

....
Skipping nonlast:Priority -615
At location src/dfa.c:1728
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
position_set tmp;

....
Skipping nonlast:Priority -615
At location src/dfa.c:1728
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
position_set tmp;

....
Skipping nonlast:Priority -615
At location src/dfa.c:1728
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
position_set tmp;

....
Skipping nonlast:Priority -615
At location src/dfa.c:1728
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
position_set tmp;

....
Skipping nonlast addifexit:Priority 4385
At location src/dfa.c:1728
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, searchflag, nullable, nfirstpos, firstpos, nlastpos, lastpos, nalloc)))
    return;
position_set tmp;

....
Skipping nonlast:Priority -614
At location src/dfa.c:1729
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
position_set merged;

....
Skipping nonlast:Priority -614
At location src/dfa.c:1729
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
position_set merged;

....
Skipping nonlast:Priority -614
At location src/dfa.c:1729
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
position_set merged;

....
Skipping nonlast:Priority -614
At location src/dfa.c:1729
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
position_set merged;

....
Skipping nonlast:Priority -614
At location src/dfa.c:1729
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
position_set merged;

....
Skipping nonlast:Priority -614
At location src/dfa.c:1729
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
position_set merged;

....
Skipping nonlast addifexit:Priority 4386
At location src/dfa.c:1729
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, searchflag, nullable, nfirstpos, firstpos, nlastpos, lastpos, nalloc)))
    return;
position_set merged;

....
Skipping nonlast:Priority -613
At location src/dfa.c:1730
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int wants_newline;

....
Skipping nonlast:Priority -613
At location src/dfa.c:1730
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int wants_newline;

....
Skipping nonlast:Priority -613
At location src/dfa.c:1730
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
int wants_newline;

....
Skipping nonlast:Priority -613
At location src/dfa.c:1730
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int wants_newline;

....
Skipping nonlast:Priority -613
At location src/dfa.c:1730
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int wants_newline;

....
Skipping nonlast:Priority -613
At location src/dfa.c:1730
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int wants_newline;

....
Skipping nonlast addifexit:Priority 4387
At location src/dfa.c:1730
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, searchflag, nullable, nfirstpos, firstpos, nlastpos, lastpos, nalloc)))
    return;
int wants_newline;

....
Skipping nonlast:Priority -612
At location src/dfa.c:1731
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int *o_nullable;

....
Skipping nonlast:Priority -612
At location src/dfa.c:1731
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int *o_nullable;

....
Skipping nonlast:Priority -612
At location src/dfa.c:1731
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
int *o_nullable;

....
Skipping nonlast:Priority -612
At location src/dfa.c:1731
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int *o_nullable;

....
Skipping nonlast:Priority -612
At location src/dfa.c:1731
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int *o_nullable;

....
Skipping nonlast:Priority -612
At location src/dfa.c:1731
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int *o_nullable;

....
Skipping nonlast addifexit:Priority 4388
At location src/dfa.c:1731
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, searchflag, nullable, nfirstpos, firstpos, nlastpos, lastpos, nalloc, wants_newline)))
    return;
int *o_nullable;

....
Skipping nonlast:Priority -611
At location src/dfa.c:1732
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int *o_nfirst, *o_nlast;

....
Skipping nonlast:Priority -611
At location src/dfa.c:1732
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int *o_nfirst, *o_nlast;

....
Skipping nonlast:Priority -611
At location src/dfa.c:1732
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
int *o_nfirst, *o_nlast;

....
Skipping nonlast:Priority -611
At location src/dfa.c:1732
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int *o_nfirst, *o_nlast;

....
Skipping nonlast:Priority -611
At location src/dfa.c:1732
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int *o_nfirst, *o_nlast;

....
Skipping nonlast:Priority -611
At location src/dfa.c:1732
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int *o_nfirst, *o_nlast;

....
Skipping nonlast addifexit:Priority 4389
At location src/dfa.c:1732
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, searchflag, nullable, o_nullable, nfirstpos, firstpos, nlastpos, lastpos, nalloc, wants_newline)))
    return;
int *o_nfirst, *o_nlast;

....
Skipping nonlast:Priority -610
At location src/dfa.c:1733
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
position *o_firstpos, *o_lastpos;

....
Skipping nonlast:Priority -610
At location src/dfa.c:1733
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
position *o_firstpos, *o_lastpos;

....
Skipping nonlast:Priority -610
At location src/dfa.c:1733
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
position *o_firstpos, *o_lastpos;

....
Skipping nonlast:Priority -610
At location src/dfa.c:1733
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
position *o_firstpos, *o_lastpos;

....
Skipping nonlast:Priority -610
At location src/dfa.c:1733
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
position *o_firstpos, *o_lastpos;

....
Skipping nonlast:Priority -610
At location src/dfa.c:1733
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
position *o_firstpos, *o_lastpos;

....
Skipping nonlast addifexit:Priority 4390
At location src/dfa.c:1733
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, searchflag, nullable, o_nullable, nfirstpos, o_nfirst, firstpos, nlastpos, o_nlast, lastpos, nalloc, wants_newline)))
    return;
position *o_firstpos, *o_lastpos;

....
Skipping nonlast:Priority -609
At location src/dfa.c:1734
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int i, j;

....
Skipping nonlast:Priority -609
At location src/dfa.c:1734
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int i, j;

....
Skipping nonlast:Priority -609
At location src/dfa.c:1734
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
int i, j;

....
Skipping nonlast:Priority -609
At location src/dfa.c:1734
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int i, j;

....
Skipping nonlast:Priority -609
At location src/dfa.c:1734
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int i, j;

....
Skipping nonlast:Priority -609
At location src/dfa.c:1734
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int i, j;

....
Skipping nonlast addifexit:Priority 4391
At location src/dfa.c:1734
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, searchflag, nullable, o_nullable, nfirstpos, o_nfirst, firstpos, o_firstpos, nlastpos, o_nlast, lastpos, o_lastpos, nalloc, wants_newline)))
    return;
int i, j;

....
Skipping nonlast:Priority -608
At location src/dfa.c:1735
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
position *pos;

....
Skipping nonlast:Priority -608
At location src/dfa.c:1735
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
position *pos;

....
Skipping nonlast:Priority -608
At location src/dfa.c:1735
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
position *pos;

....
Skipping nonlast:Priority -608
At location src/dfa.c:1735
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
position *pos;

....
Skipping nonlast:Priority -608
At location src/dfa.c:1735
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
position *pos;

....
Skipping nonlast:Priority -608
At location src/dfa.c:1735
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
position *pos;

....
Skipping nonlast addifexit:Priority 4392
At location src/dfa.c:1735
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, searchflag, nullable, o_nullable, nfirstpos, o_nfirst, firstpos, o_firstpos, nlastpos, o_nlast, lastpos, o_lastpos, nalloc, i, j, wants_newline)))
    return;
position *pos;

....
Skipping nonlast:Priority 6893
At location src/dfa.c:1747
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
d->searchflag = searchflag;

....
Skipping nonlast:Priority 6893
At location src/dfa.c:1747
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
d->searchflag = searchflag;

....
Skipping nonlast:Priority 6893
At location src/dfa.c:1747
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
d->searchflag = searchflag;

....
Skipping nonlast:Priority 6893
At location src/dfa.c:1747
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
d->searchflag = searchflag;

....
Skipping nonlast:Priority 6893
At location src/dfa.c:1747
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
d->searchflag = searchflag;

....
Skipping nonlast:Priority 6893
At location src/dfa.c:1747
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
d->searchflag = searchflag;

....
Skipping nonlast addifexit:Priority 11893
At location src/dfa.c:1747
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, searchflag, d->searchflag, nullable, d->depth, o_nullable, nfirstpos, o_nfirst, firstpos, d->nleaves, o_firstpos, nlastpos, o_nlast, lastpos, o_lastpos, nalloc, d->tindex, d->follows, i, d->tokens, pos, j, wants_newline, d->salloc, d->sindex, d->states, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
d->searchflag = searchflag;

....
Skipping nonlast:Priority -606
At location src/dfa.c:1749
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
((nullable) = xmalloc((d->depth) * sizeof(int)));

....
Skipping nonlast:Priority -606
At location src/dfa.c:1749
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
((nullable) = xmalloc((d->depth) * sizeof(int)));

....
Skipping nonlast:Priority -606
At location src/dfa.c:1749
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
((nullable) = xmalloc((d->depth) * sizeof(int)));

....
Skipping nonlast:Priority -606
At location src/dfa.c:1749
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
((nullable) = xmalloc((d->depth) * sizeof(int)));

....
Skipping nonlast:Priority -606
At location src/dfa.c:1749
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
((nullable) = xmalloc((d->depth) * sizeof(int)));

....
Skipping nonlast:Priority -606
At location src/dfa.c:1749
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
((nullable) = xmalloc((d->depth) * sizeof(int)));

....
Skipping nonlast addifexit:Priority 4394
At location src/dfa.c:1749
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, nullable, d->depth, o_nullable, searchflag, nfirstpos, d->searchflag, o_nfirst, firstpos, d->nleaves, o_firstpos, nlastpos, o_nlast, lastpos, o_lastpos, nalloc, d->tindex, d->follows, i, d->tokens, pos, j, wants_newline, d->salloc, d->sindex, d->states, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
((nullable) = xmalloc((d->depth) * sizeof(int)));

....
Skipping nonlast:Priority -605
At location src/dfa.c:1750
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
o_nullable = nullable;

....
Skipping nonlast:Priority -605
At location src/dfa.c:1750
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
o_nullable = nullable;

....
Skipping nonlast:Priority -605
At location src/dfa.c:1750
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
o_nullable = nullable;

....
Skipping nonlast:Priority -605
At location src/dfa.c:1750
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
o_nullable = nullable;

....
Skipping nonlast:Priority -605
At location src/dfa.c:1750
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
o_nullable = nullable;

....
Skipping nonlast:Priority -605
At location src/dfa.c:1750
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
o_nullable = nullable;

....
Skipping nonlast addifexit:Priority 4395
At location src/dfa.c:1750
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nullable, o_nullable, d, nfirstpos, d->depth, o_nfirst, searchflag, firstpos, d->nleaves, d->searchflag, o_firstpos, nlastpos, o_nlast, lastpos, o_lastpos, nalloc, d->tindex, d->follows, i, d->tokens, pos, j, wants_newline, d->salloc, d->sindex, d->states, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
o_nullable = nullable;

....
Skipping nonlast:Priority -604
At location src/dfa.c:1751
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
((nfirstpos) = xmalloc((d->depth) * sizeof(int)));

....
Skipping nonlast:Priority -604
At location src/dfa.c:1751
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
((nfirstpos) = xmalloc((d->depth) * sizeof(int)));

....
Skipping nonlast:Priority -604
At location src/dfa.c:1751
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
((nfirstpos) = xmalloc((d->depth) * sizeof(int)));

....
Skipping nonlast:Priority -604
At location src/dfa.c:1751
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
((nfirstpos) = xmalloc((d->depth) * sizeof(int)));

....
Skipping nonlast:Priority -604
At location src/dfa.c:1751
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
((nfirstpos) = xmalloc((d->depth) * sizeof(int)));

....
Skipping nonlast:Priority -604
At location src/dfa.c:1751
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
((nfirstpos) = xmalloc((d->depth) * sizeof(int)));

....
Skipping nonlast addifexit:Priority 4396
At location src/dfa.c:1751
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, nfirstpos, d->depth, nullable, o_nullable, o_nfirst, firstpos, d->nleaves, o_firstpos, searchflag, nlastpos, d->searchflag, o_nlast, lastpos, o_lastpos, nalloc, d->tindex, d->follows, i, d->tokens, pos, j, wants_newline, d->salloc, d->sindex, d->states, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
((nfirstpos) = xmalloc((d->depth) * sizeof(int)));

....
Skipping nonlast:Priority -603
At location src/dfa.c:1752
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
o_nfirst = nfirstpos;

....
Skipping nonlast:Priority -603
At location src/dfa.c:1752
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
o_nfirst = nfirstpos;

....
Skipping nonlast:Priority -603
At location src/dfa.c:1752
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
o_nfirst = nfirstpos;

....
Skipping nonlast:Priority -603
At location src/dfa.c:1752
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
o_nfirst = nfirstpos;

....
Skipping nonlast:Priority -603
At location src/dfa.c:1752
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
o_nfirst = nfirstpos;

....
Skipping nonlast:Priority -603
At location src/dfa.c:1752
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
o_nfirst = nfirstpos;

....
Skipping nonlast addifexit:Priority 4397
At location src/dfa.c:1752
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nfirstpos, o_nfirst, d, firstpos, d->depth, d->nleaves, nullable, o_nullable, o_firstpos, nlastpos, o_nlast, searchflag, lastpos, d->searchflag, o_lastpos, nalloc, d->tindex, d->follows, i, d->tokens, pos, j, firstpos->index, firstpos->constraint, wants_newline, d->salloc, d->sindex, d->states, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
o_nfirst = nfirstpos;

....
Skipping nonlast:Priority -602
At location src/dfa.c:1753
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
((firstpos) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -602
At location src/dfa.c:1753
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
((firstpos) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -602
At location src/dfa.c:1753
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
((firstpos) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -602
At location src/dfa.c:1753
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
((firstpos) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -602
At location src/dfa.c:1753
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
((firstpos) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -602
At location src/dfa.c:1753
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
((firstpos) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast addifexit:Priority 4398
At location src/dfa.c:1753
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, firstpos, d->nleaves, nfirstpos, o_nfirst, o_firstpos, nlastpos, d->depth, nullable, o_nullable, o_nlast, lastpos, o_lastpos, searchflag, nalloc, d->tindex, d->searchflag, d->follows, i, d->tokens, pos, j, firstpos->index, firstpos->constraint, wants_newline, d->salloc, d->sindex, d->states, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
((firstpos) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -601
At location src/dfa.c:1754
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
o_firstpos = firstpos , firstpos += d->nleaves;

....
Skipping nonlast:Priority -601
At location src/dfa.c:1754
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
o_firstpos = firstpos , firstpos += d->nleaves;

....
Skipping nonlast:Priority -601
At location src/dfa.c:1754
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
o_firstpos = firstpos , firstpos += d->nleaves;

....
Skipping nonlast:Priority -601
At location src/dfa.c:1754
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
o_firstpos = firstpos , firstpos += d->nleaves;

....
Skipping nonlast:Priority -601
At location src/dfa.c:1754
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
o_firstpos = firstpos , firstpos += d->nleaves;

....
Skipping nonlast:Priority -601
At location src/dfa.c:1754
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
o_firstpos = firstpos , firstpos += d->nleaves;

....
Skipping nonlast addifexit:Priority 4399
At location src/dfa.c:1754
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, firstpos, o_firstpos, d->nleaves, nlastpos, d->depth, nfirstpos, o_nfirst, o_nlast, lastpos, nullable, o_nullable, o_lastpos, nalloc, d->tindex, searchflag, d->searchflag, d->follows, i, d->tokens, pos, j, firstpos->index, firstpos->constraint, wants_newline, d->salloc, d->sindex, d->states, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
o_firstpos = firstpos , firstpos += d->nleaves;

....
Skipping nonlast:Priority -600
At location src/dfa.c:1755
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
((nlastpos) = xmalloc((d->depth) * sizeof(int)));

....
Skipping nonlast:Priority -600
At location src/dfa.c:1755
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
((nlastpos) = xmalloc((d->depth) * sizeof(int)));

....
Skipping nonlast:Priority -600
At location src/dfa.c:1755
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
((nlastpos) = xmalloc((d->depth) * sizeof(int)));

....
Skipping nonlast:Priority -600
At location src/dfa.c:1755
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
((nlastpos) = xmalloc((d->depth) * sizeof(int)));

....
Skipping nonlast:Priority -600
At location src/dfa.c:1755
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
((nlastpos) = xmalloc((d->depth) * sizeof(int)));

....
Skipping nonlast:Priority -600
At location src/dfa.c:1755
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
((nlastpos) = xmalloc((d->depth) * sizeof(int)));

....
Skipping nonlast addifexit:Priority 4400
At location src/dfa.c:1755
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, nlastpos, d->depth, firstpos, o_nlast, o_firstpos, d->nleaves, lastpos, nfirstpos, o_nfirst, o_lastpos, nalloc, d->tindex, nullable, o_nullable, d->follows, searchflag, d->searchflag, i, d->tokens, pos, j, firstpos->index, firstpos->constraint, wants_newline, d->salloc, d->sindex, d->states, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
((nlastpos) = xmalloc((d->depth) * sizeof(int)));

....
Skipping nonlast:Priority -599
At location src/dfa.c:1756
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
o_nlast = nlastpos;

....
Skipping nonlast:Priority -599
At location src/dfa.c:1756
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
o_nlast = nlastpos;

....
Skipping nonlast:Priority -599
At location src/dfa.c:1756
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
o_nlast = nlastpos;

....
Skipping nonlast:Priority -599
At location src/dfa.c:1756
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
o_nlast = nlastpos;

....
Skipping nonlast:Priority -599
At location src/dfa.c:1756
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
o_nlast = nlastpos;

....
Skipping nonlast:Priority -599
At location src/dfa.c:1756
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
o_nlast = nlastpos;

....
Skipping nonlast addifexit:Priority 4401
At location src/dfa.c:1756
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nlastpos, o_nlast, d, lastpos, d->depth, d->nleaves, firstpos, o_firstpos, o_lastpos, nalloc, d->tindex, nfirstpos, o_nfirst, nullable, o_nullable, d->follows, i, searchflag, d->searchflag, d->tokens, pos, j, lastpos->index, lastpos->constraint, wants_newline, d->salloc, d->sindex, d->states, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
o_nlast = nlastpos;

....
Skipping nonlast:Priority -598
At location src/dfa.c:1757
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
((lastpos) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -598
At location src/dfa.c:1757
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
((lastpos) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -598
At location src/dfa.c:1757
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
((lastpos) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -598
At location src/dfa.c:1757
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
((lastpos) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -598
At location src/dfa.c:1757
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
((lastpos) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -598
At location src/dfa.c:1757
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
((lastpos) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast addifexit:Priority 4402
At location src/dfa.c:1757
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, lastpos, d->nleaves, nlastpos, o_nlast, o_lastpos, nalloc, d->tindex, d->depth, firstpos, o_firstpos, nfirstpos, o_nfirst, d->follows, nullable, o_nullable, i, searchflag, d->searchflag, d->tokens, pos, j, lastpos->index, lastpos->constraint, wants_newline, d->salloc, d->sindex, d->states, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
((lastpos) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -597
At location src/dfa.c:1758
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
o_lastpos = lastpos , lastpos += d->nleaves;

....
Skipping nonlast:Priority -597
At location src/dfa.c:1758
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
o_lastpos = lastpos , lastpos += d->nleaves;

....
Skipping nonlast:Priority -597
At location src/dfa.c:1758
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
o_lastpos = lastpos , lastpos += d->nleaves;

....
Skipping nonlast:Priority -597
At location src/dfa.c:1758
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
o_lastpos = lastpos , lastpos += d->nleaves;

....
Skipping nonlast:Priority -597
At location src/dfa.c:1758
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
o_lastpos = lastpos , lastpos += d->nleaves;

....
Skipping nonlast:Priority -597
At location src/dfa.c:1758
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
o_lastpos = lastpos , lastpos += d->nleaves;

....
Skipping nonlast addifexit:Priority 4403
At location src/dfa.c:1758
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, lastpos, o_lastpos, d->nleaves, nalloc, d->tindex, nlastpos, o_nlast, d->depth, firstpos, o_firstpos, d->follows, nfirstpos, o_nfirst, i, nullable, o_nullable, d->tokens, searchflag, d->searchflag, pos, j, lastpos->index, lastpos->constraint, wants_newline, d->salloc, d->sindex, d->states, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
o_lastpos = lastpos , lastpos += d->nleaves;

....
Skipping nonlast:Priority -596
At location src/dfa.c:1759
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
((nalloc) = xcalloc((size_t)(d->tindex), sizeof(int)));

....
Skipping nonlast:Priority -596
At location src/dfa.c:1759
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
((nalloc) = xcalloc((size_t)(d->tindex), sizeof(int)));

....
Skipping nonlast:Priority -596
At location src/dfa.c:1759
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
((nalloc) = xcalloc((size_t)(d->tindex), sizeof(int)));

....
Skipping nonlast:Priority -596
At location src/dfa.c:1759
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
((nalloc) = xcalloc((size_t)(d->tindex), sizeof(int)));

....
Skipping nonlast:Priority -596
At location src/dfa.c:1759
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
((nalloc) = xcalloc((size_t)(d->tindex), sizeof(int)));

....
Skipping nonlast:Priority -596
At location src/dfa.c:1759
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
((nalloc) = xcalloc((size_t)(d->tindex), sizeof(int)));

....
Skipping nonlast addifexit:Priority 4404
At location src/dfa.c:1759
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, nalloc, d->tindex, lastpos, o_lastpos, d->nleaves, merged.elems, nlastpos, o_nlast, d->follows, d->depth, firstpos, o_firstpos, i, nfirstpos, o_nfirst, nullable, o_nullable, d->tokens, searchflag, d->searchflag, pos, j, merged.nelem, lastpos->index, lastpos->constraint, wants_newline, d->salloc, d->sindex, d->states, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
((nalloc) = xcalloc((size_t)(d->tindex), sizeof(int)));

....
Skipping nonlast:Priority -595
At location src/dfa.c:1760
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
((merged.elems) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -595
At location src/dfa.c:1760
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
((merged.elems) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -595
At location src/dfa.c:1760
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
((merged.elems) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -595
At location src/dfa.c:1760
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
((merged.elems) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -595
At location src/dfa.c:1760
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
((merged.elems) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -595
At location src/dfa.c:1760
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
((merged.elems) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast addifexit:Priority 4405
At location src/dfa.c:1760
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->nleaves, merged.elems, nalloc, d->tindex, lastpos, o_lastpos, d->follows, nlastpos, o_nlast, i, d->depth, firstpos, o_firstpos, nfirstpos, o_nfirst, d->tokens, nullable, o_nullable, searchflag, d->searchflag, pos, j, merged.nelem, wants_newline, d->salloc, d->sindex, d->states, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
((merged.elems) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -594
At location src/dfa.c:1762
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
((d->follows) = xcalloc((size_t)(d->tindex), sizeof(position_set)));

....
Skipping nonlast:Priority -594
At location src/dfa.c:1762
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
((d->follows) = xcalloc((size_t)(d->tindex), sizeof(position_set)));

....
Skipping nonlast:Priority -594
At location src/dfa.c:1762
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
((d->follows) = xcalloc((size_t)(d->tindex), sizeof(position_set)));

....
Skipping nonlast:Priority -594
At location src/dfa.c:1762
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
((d->follows) = xcalloc((size_t)(d->tindex), sizeof(position_set)));

....
Skipping nonlast:Priority -594
At location src/dfa.c:1762
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
((d->follows) = xcalloc((size_t)(d->tindex), sizeof(position_set)));

....
Skipping nonlast:Priority -594
At location src/dfa.c:1762
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
((d->follows) = xcalloc((size_t)(d->tindex), sizeof(position_set)));

....
Skipping nonlast addifexit:Priority 4406
At location src/dfa.c:1762
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->tindex, d->follows, i, d->nleaves, nalloc, lastpos, o_lastpos, nlastpos, o_nlast, d->tokens, d->depth, firstpos, o_firstpos, nullable, nfirstpos, o_nfirst, o_nullable, searchflag, d->searchflag, pos, j, wants_newline, d->salloc, d->sindex, d->states, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
((d->follows) = xcalloc((size_t)(d->tindex), sizeof(position_set)));

....
Skipping nonlast:Priority -593
At location src/dfa.c:1764
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
for (i = 0; i < d->tindex; ++i) 
    switch (d->tokens[i]) {
      case EMPTY:
        *nullable++ = 1;
        *nfirstpos++ = *nlastpos++ = 0;
        break;
      case STAR:
      case PLUS:
        tmp.nelem = nfirstpos[-1];
        tmp.elems = firstpos;
        pos = lastpos;
        for (j = 0; j < nlastpos[-1]; ++j) {
            merge(&tmp, &d->follows[pos[j].index], &merged);
            if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
                do 
                    (nalloc[pos[j].index]) *= 2;
                while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
                ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
            }
            ;
            copy(&merged, &d->follows[pos[j].index]);
        }
      case QMARK:
        if (d->tokens[i] != PLUS)
            nullable[-1] = 1;
        break;
      case CAT:
        tmp.nelem = nfirstpos[-1];
        tmp.elems = firstpos;
        pos = lastpos + nlastpos[-1];
        for (j = 0; j < nlastpos[-2]; ++j) {
            merge(&tmp, &d->follows[pos[j].index], &merged);
            if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
                do 
                    (nalloc[pos[j].index]) *= 2;
                while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
                ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
            }
            ;
            copy(&merged, &d->follows[pos[j].index]);
        }
        if (nullable[-2])
            nfirstpos[-2] += nfirstpos[-1];
        else
            firstpos += nfirstpos[-1];
        --nfirstpos;
        if (nullable[-1])
            nlastpos[-2] += nlastpos[-1];
        else {
            pos = lastpos + nlastpos[-2];
            for (j = nlastpos[-1] - 1; j >= 0; --j) 
                pos[j] = lastpos[j];
            lastpos += nlastpos[-2];
            nlastpos[-2] = nlastpos[-1];
        }
        --nlastpos;
        nullable[-2] = nullable[-1] && nullable[-2];
        --nullable;
        break;
      case OR:
      case ORTOP:
        nfirstpos[-2] += nfirstpos[-1];
        --nfirstpos;
        nlastpos[-2] += nlastpos[-1];
        --nlastpos;
        nullable[-2] = nullable[-1] || nullable[-2];
        --nullable;
        break;
      default:
        *nullable++ = d->tokens[i] == BACKREF;
        *nfirstpos++ = *nlastpos++ = 1;
        --firstpos , --lastpos;
        firstpos->index = lastpos->index = i;
        firstpos->constraint = lastpos->constraint = 255;
        nalloc[i] = 1;
        ((d->follows[i].elems) = xmalloc((nalloc[i]) * sizeof(position)));
        break;
    }

....
Skipping nonlast:Priority -593
At location src/dfa.c:1764
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
for (i = 0; i < d->tindex; ++i) 
    switch (d->tokens[i]) {
      case EMPTY:
        *nullable++ = 1;
        *nfirstpos++ = *nlastpos++ = 0;
        break;
      case STAR:
      case PLUS:
        tmp.nelem = nfirstpos[-1];
        tmp.elems = firstpos;
        pos = lastpos;
        for (j = 0; j < nlastpos[-1]; ++j) {
            merge(&tmp, &d->follows[pos[j].index], &merged);
            if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
                do 
                    (nalloc[pos[j].index]) *= 2;
                while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
                ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
            }
            ;
            copy(&merged, &d->follows[pos[j].index]);
        }
      case QMARK:
        if (d->tokens[i] != PLUS)
            nullable[-1] = 1;
        break;
      case CAT:
        tmp.nelem = nfirstpos[-1];
        tmp.elems = firstpos;
        pos = lastpos + nlastpos[-1];
        for (j = 0; j < nlastpos[-2]; ++j) {
            merge(&tmp, &d->follows[pos[j].index], &merged);
            if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
                do 
                    (nalloc[pos[j].index]) *= 2;
                while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
                ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
            }
            ;
            copy(&merged, &d->follows[pos[j].index]);
        }
        if (nullable[-2])
            nfirstpos[-2] += nfirstpos[-1];
        else
            firstpos += nfirstpos[-1];
        --nfirstpos;
        if (nullable[-1])
            nlastpos[-2] += nlastpos[-1];
        else {
            pos = lastpos + nlastpos[-2];
            for (j = nlastpos[-1] - 1; j >= 0; --j) 
                pos[j] = lastpos[j];
            lastpos += nlastpos[-2];
            nlastpos[-2] = nlastpos[-1];
        }
        --nlastpos;
        nullable[-2] = nullable[-1] && nullable[-2];
        --nullable;
        break;
      case OR:
      case ORTOP:
        nfirstpos[-2] += nfirstpos[-1];
        --nfirstpos;
        nlastpos[-2] += nlastpos[-1];
        --nlastpos;
        nullable[-2] = nullable[-1] || nullable[-2];
        --nullable;
        break;
      default:
        *nullable++ = d->tokens[i] == BACKREF;
        *nfirstpos++ = *nlastpos++ = 1;
        --firstpos , --lastpos;
        firstpos->index = lastpos->index = i;
        firstpos->constraint = lastpos->constraint = 255;
        nalloc[i] = 1;
        ((d->follows[i].elems) = xmalloc((nalloc[i]) * sizeof(position)));
        break;
    }

....
Skipping nonlast:Priority -593
At location src/dfa.c:1764
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
for (i = 0; i < d->tindex; ++i) 
    switch (d->tokens[i]) {
      case EMPTY:
        *nullable++ = 1;
        *nfirstpos++ = *nlastpos++ = 0;
        break;
      case STAR:
      case PLUS:
        tmp.nelem = nfirstpos[-1];
        tmp.elems = firstpos;
        pos = lastpos;
        for (j = 0; j < nlastpos[-1]; ++j) {
            merge(&tmp, &d->follows[pos[j].index], &merged);
            if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
                do 
                    (nalloc[pos[j].index]) *= 2;
                while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
                ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
            }
            ;
            copy(&merged, &d->follows[pos[j].index]);
        }
      case QMARK:
        if (d->tokens[i] != PLUS)
            nullable[-1] = 1;
        break;
      case CAT:
        tmp.nelem = nfirstpos[-1];
        tmp.elems = firstpos;
        pos = lastpos + nlastpos[-1];
        for (j = 0; j < nlastpos[-2]; ++j) {
            merge(&tmp, &d->follows[pos[j].index], &merged);
            if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
                do 
                    (nalloc[pos[j].index]) *= 2;
                while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
                ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
            }
            ;
            copy(&merged, &d->follows[pos[j].index]);
        }
        if (nullable[-2])
            nfirstpos[-2] += nfirstpos[-1];
        else
            firstpos += nfirstpos[-1];
        --nfirstpos;
        if (nullable[-1])
            nlastpos[-2] += nlastpos[-1];
        else {
            pos = lastpos + nlastpos[-2];
            for (j = nlastpos[-1] - 1; j >= 0; --j) 
                pos[j] = lastpos[j];
            lastpos += nlastpos[-2];
            nlastpos[-2] = nlastpos[-1];
        }
        --nlastpos;
        nullable[-2] = nullable[-1] && nullable[-2];
        --nullable;
        break;
      case OR:
      case ORTOP:
        nfirstpos[-2] += nfirstpos[-1];
        --nfirstpos;
        nlastpos[-2] += nlastpos[-1];
        --nlastpos;
        nullable[-2] = nullable[-1] || nullable[-2];
        --nullable;
        break;
      default:
        *nullable++ = d->tokens[i] == BACKREF;
        *nfirstpos++ = *nlastpos++ = 1;
        --firstpos , --lastpos;
        firstpos->index = lastpos->index = i;
        firstpos->constraint = lastpos->constraint = 255;
        nalloc[i] = 1;
        ((d->follows[i].elems) = xmalloc((nalloc[i]) * sizeof(position)));
        break;
    }

....
Skipping nonlast:Priority -593
At location src/dfa.c:1764
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
for (i = 0; i < d->tindex; ++i) 
    switch (d->tokens[i]) {
      case EMPTY:
        *nullable++ = 1;
        *nfirstpos++ = *nlastpos++ = 0;
        break;
      case STAR:
      case PLUS:
        tmp.nelem = nfirstpos[-1];
        tmp.elems = firstpos;
        pos = lastpos;
        for (j = 0; j < nlastpos[-1]; ++j) {
            merge(&tmp, &d->follows[pos[j].index], &merged);
            if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
                do 
                    (nalloc[pos[j].index]) *= 2;
                while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
                ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
            }
            ;
            copy(&merged, &d->follows[pos[j].index]);
        }
      case QMARK:
        if (d->tokens[i] != PLUS)
            nullable[-1] = 1;
        break;
      case CAT:
        tmp.nelem = nfirstpos[-1];
        tmp.elems = firstpos;
        pos = lastpos + nlastpos[-1];
        for (j = 0; j < nlastpos[-2]; ++j) {
            merge(&tmp, &d->follows[pos[j].index], &merged);
            if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
                do 
                    (nalloc[pos[j].index]) *= 2;
                while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
                ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
            }
            ;
            copy(&merged, &d->follows[pos[j].index]);
        }
        if (nullable[-2])
            nfirstpos[-2] += nfirstpos[-1];
        else
            firstpos += nfirstpos[-1];
        --nfirstpos;
        if (nullable[-1])
            nlastpos[-2] += nlastpos[-1];
        else {
            pos = lastpos + nlastpos[-2];
            for (j = nlastpos[-1] - 1; j >= 0; --j) 
                pos[j] = lastpos[j];
            lastpos += nlastpos[-2];
            nlastpos[-2] = nlastpos[-1];
        }
        --nlastpos;
        nullable[-2] = nullable[-1] && nullable[-2];
        --nullable;
        break;
      case OR:
      case ORTOP:
        nfirstpos[-2] += nfirstpos[-1];
        --nfirstpos;
        nlastpos[-2] += nlastpos[-1];
        --nlastpos;
        nullable[-2] = nullable[-1] || nullable[-2];
        --nullable;
        break;
      default:
        *nullable++ = d->tokens[i] == BACKREF;
        *nfirstpos++ = *nlastpos++ = 1;
        --firstpos , --lastpos;
        firstpos->index = lastpos->index = i;
        firstpos->constraint = lastpos->constraint = 255;
        nalloc[i] = 1;
        ((d->follows[i].elems) = xmalloc((nalloc[i]) * sizeof(position)));
        break;
    }

....
Skipping nonlast:Priority -593
At location src/dfa.c:1764
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
for (i = 0; i < d->tindex; ++i) 
    switch (d->tokens[i]) {
      case EMPTY:
        *nullable++ = 1;
        *nfirstpos++ = *nlastpos++ = 0;
        break;
      case STAR:
      case PLUS:
        tmp.nelem = nfirstpos[-1];
        tmp.elems = firstpos;
        pos = lastpos;
        for (j = 0; j < nlastpos[-1]; ++j) {
            merge(&tmp, &d->follows[pos[j].index], &merged);
            if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
                do 
                    (nalloc[pos[j].index]) *= 2;
                while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
                ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
            }
            ;
            copy(&merged, &d->follows[pos[j].index]);
        }
      case QMARK:
        if (d->tokens[i] != PLUS)
            nullable[-1] = 1;
        break;
      case CAT:
        tmp.nelem = nfirstpos[-1];
        tmp.elems = firstpos;
        pos = lastpos + nlastpos[-1];
        for (j = 0; j < nlastpos[-2]; ++j) {
            merge(&tmp, &d->follows[pos[j].index], &merged);
            if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
                do 
                    (nalloc[pos[j].index]) *= 2;
                while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
                ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
            }
            ;
            copy(&merged, &d->follows[pos[j].index]);
        }
        if (nullable[-2])
            nfirstpos[-2] += nfirstpos[-1];
        else
            firstpos += nfirstpos[-1];
        --nfirstpos;
        if (nullable[-1])
            nlastpos[-2] += nlastpos[-1];
        else {
            pos = lastpos + nlastpos[-2];
            for (j = nlastpos[-1] - 1; j >= 0; --j) 
                pos[j] = lastpos[j];
            lastpos += nlastpos[-2];
            nlastpos[-2] = nlastpos[-1];
        }
        --nlastpos;
        nullable[-2] = nullable[-1] && nullable[-2];
        --nullable;
        break;
      case OR:
      case ORTOP:
        nfirstpos[-2] += nfirstpos[-1];
        --nfirstpos;
        nlastpos[-2] += nlastpos[-1];
        --nlastpos;
        nullable[-2] = nullable[-1] || nullable[-2];
        --nullable;
        break;
      default:
        *nullable++ = d->tokens[i] == BACKREF;
        *nfirstpos++ = *nlastpos++ = 1;
        --firstpos , --lastpos;
        firstpos->index = lastpos->index = i;
        firstpos->constraint = lastpos->constraint = 255;
        nalloc[i] = 1;
        ((d->follows[i].elems) = xmalloc((nalloc[i]) * sizeof(position)));
        break;
    }

....
Skipping nonlast:Priority -593
At location src/dfa.c:1764
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
for (i = 0; i < d->tindex; ++i) 
    switch (d->tokens[i]) {
      case EMPTY:
        *nullable++ = 1;
        *nfirstpos++ = *nlastpos++ = 0;
        break;
      case STAR:
      case PLUS:
        tmp.nelem = nfirstpos[-1];
        tmp.elems = firstpos;
        pos = lastpos;
        for (j = 0; j < nlastpos[-1]; ++j) {
            merge(&tmp, &d->follows[pos[j].index], &merged);
            if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
                do 
                    (nalloc[pos[j].index]) *= 2;
                while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
                ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
            }
            ;
            copy(&merged, &d->follows[pos[j].index]);
        }
      case QMARK:
        if (d->tokens[i] != PLUS)
            nullable[-1] = 1;
        break;
      case CAT:
        tmp.nelem = nfirstpos[-1];
        tmp.elems = firstpos;
        pos = lastpos + nlastpos[-1];
        for (j = 0; j < nlastpos[-2]; ++j) {
            merge(&tmp, &d->follows[pos[j].index], &merged);
            if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
                do 
                    (nalloc[pos[j].index]) *= 2;
                while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
                ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
            }
            ;
            copy(&merged, &d->follows[pos[j].index]);
        }
        if (nullable[-2])
            nfirstpos[-2] += nfirstpos[-1];
        else
            firstpos += nfirstpos[-1];
        --nfirstpos;
        if (nullable[-1])
            nlastpos[-2] += nlastpos[-1];
        else {
            pos = lastpos + nlastpos[-2];
            for (j = nlastpos[-1] - 1; j >= 0; --j) 
                pos[j] = lastpos[j];
            lastpos += nlastpos[-2];
            nlastpos[-2] = nlastpos[-1];
        }
        --nlastpos;
        nullable[-2] = nullable[-1] && nullable[-2];
        --nullable;
        break;
      case OR:
      case ORTOP:
        nfirstpos[-2] += nfirstpos[-1];
        --nfirstpos;
        nlastpos[-2] += nlastpos[-1];
        --nlastpos;
        nullable[-2] = nullable[-1] || nullable[-2];
        --nullable;
        break;
      default:
        *nullable++ = d->tokens[i] == BACKREF;
        *nfirstpos++ = *nlastpos++ = 1;
        --firstpos , --lastpos;
        firstpos->index = lastpos->index = i;
        firstpos->constraint = lastpos->constraint = 255;
        nalloc[i] = 1;
        ((d->follows[i].elems) = xmalloc((nalloc[i]) * sizeof(position)));
        break;
    }

....
Skipping nonlast addifexit:Priority 4407
At location src/dfa.c:1764
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->tindex, d->follows, d->tokens, d->nleaves, nalloc, lastpos, o_lastpos, nullable, nlastpos, o_nlast, d->depth, firstpos, o_firstpos, nfirstpos, o_nfirst, o_nullable, searchflag, d->searchflag, pos, j, wants_newline, d->salloc, d->sindex, d->states, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
for (i = 0; i < d->tindex; ++i) 
    switch (d->tokens[i]) {
      case EMPTY:
        *nullable++ = 1;
        *nfirstpos++ = *nlastpos++ = 0;
        break;
      case STAR:
      case PLUS:
        tmp.nelem = nfirstpos[-1];
        tmp.elems = firstpos;
        pos = lastpos;
        for (j = 0; j < nlastpos[-1]; ++j) {
            merge(&tmp, &d->follows[pos[j].index], &merged);
            if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
                do 
                    (nalloc[pos[j].index]) *= 2;
                while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
                ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
            }
            ;
            copy(&merged, &d->follows[pos[j].index]);
        }
      case QMARK:
        if (d->tokens[i] != PLUS)
            nullable[-1] = 1;
        break;
      case CAT:
        tmp.nelem = nfirstpos[-1];
        tmp.elems = firstpos;
        pos = lastpos + nlastpos[-1];
        for (j = 0; j < nlastpos[-2]; ++j) {
            merge(&tmp, &d->follows[pos[j].index], &merged);
            if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
                do 
                    (nalloc[pos[j].index]) *= 2;
                while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
                ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
            }
            ;
            copy(&merged, &d->follows[pos[j].index]);
        }
        if (nullable[-2])
            nfirstpos[-2] += nfirstpos[-1];
        else
            firstpos += nfirstpos[-1];
        --nfirstpos;
        if (nullable[-1])
            nlastpos[-2] += nlastpos[-1];
        else {
            pos = lastpos + nlastpos[-2];
            for (j = nlastpos[-1] - 1; j >= 0; --j) 
                pos[j] = lastpos[j];
            lastpos += nlastpos[-2];
            nlastpos[-2] = nlastpos[-1];
        }
        --nlastpos;
        nullable[-2] = nullable[-1] && nullable[-2];
        --nullable;
        break;
      case OR:
      case ORTOP:
        nfirstpos[-2] += nfirstpos[-1];
        --nfirstpos;
        nlastpos[-2] += nlastpos[-1];
        --nlastpos;
        nullable[-2] = nullable[-1] || nullable[-2];
        --nullable;
        break;
      default:
        *nullable++ = d->tokens[i] == BACKREF;
        *nfirstpos++ = *nlastpos++ = 1;
        --firstpos , --lastpos;
        firstpos->index = lastpos->index = i;
        firstpos->constraint = lastpos->constraint = 255;
        nalloc[i] = 1;
        ((d->follows[i].elems) = xmalloc((nalloc[i]) * sizeof(position)));
        break;
    }

....
Skipping nonlast:Priority -585
At location src/dfa.c:1803
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
tmp.elems = firstpos;

....
Skipping nonlast:Priority -585
At location src/dfa.c:1803
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
tmp.elems = firstpos;

....
Skipping nonlast:Priority -585
At location src/dfa.c:1803
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
tmp.elems = firstpos;

....
Skipping nonlast:Priority -585
At location src/dfa.c:1803
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
tmp.elems = firstpos;

....
Skipping nonlast:Priority -585
At location src/dfa.c:1803
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
tmp.elems = firstpos;

....
Skipping nonlast:Priority -585
At location src/dfa.c:1803
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
tmp.elems = firstpos;

....
Skipping nonlast addifexit:Priority 4415
At location src/dfa.c:1803
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(firstpos, tmp.elems, nfirstpos, nlastpos, lastpos, pos, tmp.nelem, j, d, nalloc, nullable, i, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, firstpos->index, lastpos->index, firstpos->constraint, lastpos->constraint, wants_newline)))
    return;
tmp.elems = firstpos;

....
Skipping nonlast addifexit:Priority 4415
At location src/dfa.c:1803
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(firstpos, tmp.elems, nfirstpos, nlastpos, lastpos, pos, tmp.nelem, j, d, nalloc, nullable, i, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, firstpos->index, lastpos->index, firstpos->constraint, lastpos->constraint, wants_newline)))
    break;
tmp.elems = firstpos;

....
Skipping nonlast:Priority -584
At location src/dfa.c:1804
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
pos = lastpos + nlastpos[-1];

....
Skipping nonlast:Priority -584
At location src/dfa.c:1804
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
pos = lastpos + nlastpos[-1];

....
Skipping nonlast:Priority -584
At location src/dfa.c:1804
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
pos = lastpos + nlastpos[-1];

....
Skipping nonlast:Priority -584
At location src/dfa.c:1804
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
pos = lastpos + nlastpos[-1];

....
Skipping nonlast:Priority -584
At location src/dfa.c:1804
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
pos = lastpos + nlastpos[-1];

....
Skipping nonlast:Priority -584
At location src/dfa.c:1804
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
pos = lastpos + nlastpos[-1];

....
Skipping nonlast addifexit:Priority 4416
At location src/dfa.c:1804
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nlastpos, lastpos, pos, firstpos, j, tmp.elems, nfirstpos, tmp.nelem, d, nalloc, nullable, i, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, firstpos->index, lastpos->index, firstpos->constraint, lastpos->constraint, wants_newline)))
    return;
pos = lastpos + nlastpos[-1];

....
Skipping nonlast addifexit:Priority 4416
At location src/dfa.c:1804
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nlastpos, lastpos, pos, firstpos, j, tmp.elems, nfirstpos, tmp.nelem, d, nalloc, nullable, i, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, firstpos->index, lastpos->index, firstpos->constraint, lastpos->constraint, wants_newline)))
    break;
pos = lastpos + nlastpos[-1];

....
Skipping nonlast:Priority -583
At location src/dfa.c:1805
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
for (j = 0; j < nlastpos[-2]; ++j) {
    merge(&tmp, &d->follows[pos[j].index], &merged);
    if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
        do 
            (nalloc[pos[j].index]) *= 2;
        while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
        ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
    }
    ;
    copy(&merged, &d->follows[pos[j].index]);
}

....
Skipping nonlast:Priority -583
At location src/dfa.c:1805
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
for (j = 0; j < nlastpos[-2]; ++j) {
    merge(&tmp, &d->follows[pos[j].index], &merged);
    if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
        do 
            (nalloc[pos[j].index]) *= 2;
        while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
        ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
    }
    ;
    copy(&merged, &d->follows[pos[j].index]);
}

....
Skipping nonlast:Priority -583
At location src/dfa.c:1805
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
for (j = 0; j < nlastpos[-2]; ++j) {
    merge(&tmp, &d->follows[pos[j].index], &merged);
    if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
        do 
            (nalloc[pos[j].index]) *= 2;
        while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
        ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
    }
    ;
    copy(&merged, &d->follows[pos[j].index]);
}

....
Skipping nonlast:Priority -583
At location src/dfa.c:1805
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
for (j = 0; j < nlastpos[-2]; ++j) {
    merge(&tmp, &d->follows[pos[j].index], &merged);
    if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
        do 
            (nalloc[pos[j].index]) *= 2;
        while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
        ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
    }
    ;
    copy(&merged, &d->follows[pos[j].index]);
}

....
Skipping nonlast:Priority -583
At location src/dfa.c:1805
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
for (j = 0; j < nlastpos[-2]; ++j) {
    merge(&tmp, &d->follows[pos[j].index], &merged);
    if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
        do 
            (nalloc[pos[j].index]) *= 2;
        while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
        ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
    }
    ;
    copy(&merged, &d->follows[pos[j].index]);
}

....
Skipping nonlast:Priority -583
At location src/dfa.c:1805
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
for (j = 0; j < nlastpos[-2]; ++j) {
    merge(&tmp, &d->follows[pos[j].index], &merged);
    if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
        do 
            (nalloc[pos[j].index]) *= 2;
        while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
        ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
    }
    ;
    copy(&merged, &d->follows[pos[j].index]);
}

....
Skipping nonlast addifexit:Priority 4417
At location src/dfa.c:1805
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nlastpos, j, lastpos, pos, d, firstpos, nfirstpos, nalloc, nullable, i, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, lastpos->index, lastpos->constraint, wants_newline)))
    return;
for (j = 0; j < nlastpos[-2]; ++j) {
    merge(&tmp, &d->follows[pos[j].index], &merged);
    if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
        do 
            (nalloc[pos[j].index]) *= 2;
        while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
        ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
    }
    ;
    copy(&merged, &d->follows[pos[j].index]);
}

....
Skipping nonlast addifexit:Priority 4417
At location src/dfa.c:1805
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nlastpos, j, lastpos, pos, d, firstpos, nfirstpos, nalloc, nullable, i, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, lastpos->index, lastpos->constraint, wants_newline)))
    break;
for (j = 0; j < nlastpos[-2]; ++j) {
    merge(&tmp, &d->follows[pos[j].index], &merged);
    if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
        do 
            (nalloc[pos[j].index]) *= 2;
        while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
        ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
    }
    ;
    copy(&merged, &d->follows[pos[j].index]);
}

....
Skipping nonlast:Priority 4418
At location src/dfa.c:1807
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
merge(&tmp, &d->follows[pos[j].index], &merged);

....
Skipping nonlast:Priority 4418
At location src/dfa.c:1807
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
merge(&tmp, &d->follows[pos[j].index], &merged);

....
Skipping nonlast:Priority 4418
At location src/dfa.c:1807
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
merge(&tmp, &d->follows[pos[j].index], &merged);

....
Skipping nonlast:Priority 4418
At location src/dfa.c:1807
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
merge(&tmp, &d->follows[pos[j].index], &merged);

....
Skipping nonlast:Priority 4418
At location src/dfa.c:1807
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
merge(&tmp, &d->follows[pos[j].index], &merged);

....
Skipping nonlast:Priority 4418
At location src/dfa.c:1807
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
merge(&tmp, &d->follows[pos[j].index], &merged);

....
Skipping nonlast addifexit:Priority 9418
At location src/dfa.c:1807
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, j, pos, pos[j].index, d->follows, nalloc, d->follows[pos[j].index].elems, merged.nelem, nlastpos, lastpos, firstpos, tmp.elems, nfirstpos, tmp.nelem, nullable, i, d->tokens, d->tindex, d->nleaves, merged.elems, o_lastpos, o_nlast, d->depth, o_firstpos, o_nfirst, o_nullable, searchflag, d->searchflag, wants_newline, d->salloc, d->sindex, d->states, d->follows[pos[j].index].nelem, pos[j].constraint, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
merge(&tmp, &d->follows[pos[j].index], &merged);

....
Skipping nonlast addifexit:Priority 9418
At location src/dfa.c:1807
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, j, pos, pos[j].index, d->follows, nalloc, d->follows[pos[j].index].elems, merged.nelem, nlastpos, lastpos, firstpos, tmp.elems, nfirstpos, tmp.nelem, nullable, i, d->tokens, d->tindex, d->nleaves, merged.elems, o_lastpos, o_nlast, d->depth, o_firstpos, o_nfirst, o_nullable, searchflag, d->searchflag, wants_newline, d->salloc, d->sindex, d->states, d->follows[pos[j].index].nelem, pos[j].constraint, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    break;
merge(&tmp, &d->follows[pos[j].index], &merged);

....
Skipping nonlast:Priority -576
At location src/dfa.c:1808
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
    do 
        (nalloc[pos[j].index]) *= 2;
    while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
    ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
}

....
Skipping nonlast:Priority -576
At location src/dfa.c:1808
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
    do 
        (nalloc[pos[j].index]) *= 2;
    while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
    ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
}

....
Skipping nonlast:Priority -576
At location src/dfa.c:1808
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
    do 
        (nalloc[pos[j].index]) *= 2;
    while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
    ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
}

....
Skipping nonlast:Priority -576
At location src/dfa.c:1808
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
    do 
        (nalloc[pos[j].index]) *= 2;
    while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
    ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
}

....
Skipping nonlast:Priority -576
At location src/dfa.c:1808
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
    do 
        (nalloc[pos[j].index]) *= 2;
    while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
    ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
}

....
Skipping nonlast:Priority -576
At location src/dfa.c:1808
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
    do 
        (nalloc[pos[j].index]) *= 2;
    while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
    ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
}

....
Skipping nonlast addifexit:Priority 3174
At location src/dfa.c:1808
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, nalloc, j, pos, d->follows[pos[j].index].elems, pos[j].index, d->follows, merged.nelem, nlastpos, lastpos, firstpos, tmp.elems, nfirstpos, tmp.nelem, nullable, i, d->tokens, d->tindex, d->nleaves, merged.elems, o_lastpos, o_nlast, d->depth, o_firstpos, o_nfirst, o_nullable, searchflag, d->searchflag, wants_newline, d->salloc, d->sindex, d->states, d->follows[pos[j].index].nelem, pos[j].constraint, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
    do 
        (nalloc[pos[j].index]) *= 2;
    while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
    ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
}

....
Skipping nonlast addifexit:Priority 3174
At location src/dfa.c:1808
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, nalloc, j, pos, d->follows[pos[j].index].elems, pos[j].index, d->follows, merged.nelem, nlastpos, lastpos, firstpos, tmp.elems, nfirstpos, tmp.nelem, nullable, i, d->tokens, d->tindex, d->nleaves, merged.elems, o_lastpos, o_nlast, d->depth, o_firstpos, o_nfirst, o_nullable, searchflag, d->searchflag, wants_newline, d->salloc, d->sindex, d->states, d->follows[pos[j].index].nelem, pos[j].constraint, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    break;
if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
    do 
        (nalloc[pos[j].index]) *= 2;
    while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
    ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
}

....
Skipping nonlast:Priority -573
At location src/dfa.c:1815
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (nullable[-2])
    nfirstpos[-2] += nfirstpos[-1];
else
    firstpos += nfirstpos[-1];

....
Skipping nonlast:Priority -573
At location src/dfa.c:1815
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (nullable[-2])
    nfirstpos[-2] += nfirstpos[-1];
else
    firstpos += nfirstpos[-1];

....
Skipping nonlast:Priority -573
At location src/dfa.c:1815
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if (nullable[-2])
    nfirstpos[-2] += nfirstpos[-1];
else
    firstpos += nfirstpos[-1];

....
Skipping nonlast:Priority -573
At location src/dfa.c:1815
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (nullable[-2])
    nfirstpos[-2] += nfirstpos[-1];
else
    firstpos += nfirstpos[-1];

....
Skipping nonlast:Priority -573
At location src/dfa.c:1815
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (nullable[-2])
    nfirstpos[-2] += nfirstpos[-1];
else
    firstpos += nfirstpos[-1];

....
Skipping nonlast:Priority -573
At location src/dfa.c:1815
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (nullable[-2])
    nfirstpos[-2] += nfirstpos[-1];
else
    firstpos += nfirstpos[-1];

....
Skipping nonlast addifexit:Priority 3177
At location src/dfa.c:1815
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nullable, nfirstpos, firstpos, d, j, pos, nalloc, nlastpos, lastpos, i, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline)))
    return;
if (nullable[-2])
    nfirstpos[-2] += nfirstpos[-1];
else
    firstpos += nfirstpos[-1];

....
Skipping nonlast addifexit:Priority 3177
At location src/dfa.c:1815
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nullable, nfirstpos, firstpos, d, j, pos, nalloc, nlastpos, lastpos, i, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline)))
    break;
if (nullable[-2])
    nfirstpos[-2] += nfirstpos[-1];
else
    firstpos += nfirstpos[-1];

....
Skipping nonlast:Priority -572
At location src/dfa.c:1818
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    firstpos += nfirstpos[-1];
}

....
Skipping nonlast:Priority -572
At location src/dfa.c:1818
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    firstpos += nfirstpos[-1];
}

....
Skipping nonlast:Priority -572
At location src/dfa.c:1818
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        return lasttok = parse_bracket_exp_mb();
    }
    firstpos += nfirstpos[-1];
}

....
Skipping nonlast:Priority -572
At location src/dfa.c:1818
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    firstpos += nfirstpos[-1];
}

....
Skipping nonlast:Priority -572
At location src/dfa.c:1818
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    firstpos += nfirstpos[-1];
}

....
Skipping nonlast:Priority -572
At location src/dfa.c:1818
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    firstpos += nfirstpos[-1];
}

....
Skipping nonlast addifexit:Priority 4428
At location src/dfa.c:1818
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(nfirstpos, firstpos, nullable, nlastpos, d, j, pos, lastpos, nalloc, i, firstpos->index, firstpos->constraint, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline)))
        return;
    firstpos += nfirstpos[-1];
}

....
Skipping nonlast addifexit:Priority 4428
At location src/dfa.c:1818
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(nfirstpos, firstpos, nullable, nlastpos, d, j, pos, lastpos, nalloc, i, firstpos->index, firstpos->constraint, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline)))
        break;
    firstpos += nfirstpos[-1];
}

....
Skipping nonlast:Priority -571
At location src/dfa.c:1819
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
--nfirstpos;

....
Skipping nonlast:Priority -571
At location src/dfa.c:1819
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
--nfirstpos;

....
Skipping nonlast:Priority -571
At location src/dfa.c:1819
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
--nfirstpos;

....
Skipping nonlast:Priority -571
At location src/dfa.c:1819
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
--nfirstpos;

....
Skipping nonlast:Priority -571
At location src/dfa.c:1819
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
--nfirstpos;

....
Skipping nonlast:Priority -571
At location src/dfa.c:1819
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
--nfirstpos;

....
Skipping nonlast addifexit:Priority 4429
At location src/dfa.c:1819
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nfirstpos, firstpos, nullable, nlastpos, lastpos, pos, d, j, nalloc, i, firstpos->index, firstpos->constraint, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline)))
    return;
--nfirstpos;

....
Skipping nonlast addifexit:Priority 4429
At location src/dfa.c:1819
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nfirstpos, firstpos, nullable, nlastpos, lastpos, pos, d, j, nalloc, i, firstpos->index, firstpos->constraint, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline)))
    break;
--nfirstpos;

....
Skipping nonlast:Priority -570
At location src/dfa.c:1823
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (nullable[-1])
    nlastpos[-2] += nlastpos[-1];
else {
    pos = lastpos + nlastpos[-2];
    for (j = nlastpos[-1] - 1; j >= 0; --j) 
        pos[j] = lastpos[j];
    lastpos += nlastpos[-2];
    nlastpos[-2] = nlastpos[-1];
}

....
Skipping nonlast:Priority -570
At location src/dfa.c:1823
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (nullable[-1])
    nlastpos[-2] += nlastpos[-1];
else {
    pos = lastpos + nlastpos[-2];
    for (j = nlastpos[-1] - 1; j >= 0; --j) 
        pos[j] = lastpos[j];
    lastpos += nlastpos[-2];
    nlastpos[-2] = nlastpos[-1];
}

....
Skipping nonlast:Priority -570
At location src/dfa.c:1823
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if (nullable[-1])
    nlastpos[-2] += nlastpos[-1];
else {
    pos = lastpos + nlastpos[-2];
    for (j = nlastpos[-1] - 1; j >= 0; --j) 
        pos[j] = lastpos[j];
    lastpos += nlastpos[-2];
    nlastpos[-2] = nlastpos[-1];
}

....
Skipping nonlast:Priority -570
At location src/dfa.c:1823
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (nullable[-1])
    nlastpos[-2] += nlastpos[-1];
else {
    pos = lastpos + nlastpos[-2];
    for (j = nlastpos[-1] - 1; j >= 0; --j) 
        pos[j] = lastpos[j];
    lastpos += nlastpos[-2];
    nlastpos[-2] = nlastpos[-1];
}

....
Skipping nonlast:Priority -570
At location src/dfa.c:1823
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (nullable[-1])
    nlastpos[-2] += nlastpos[-1];
else {
    pos = lastpos + nlastpos[-2];
    for (j = nlastpos[-1] - 1; j >= 0; --j) 
        pos[j] = lastpos[j];
    lastpos += nlastpos[-2];
    nlastpos[-2] = nlastpos[-1];
}

....
Skipping nonlast:Priority -570
At location src/dfa.c:1823
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (nullable[-1])
    nlastpos[-2] += nlastpos[-1];
else {
    pos = lastpos + nlastpos[-2];
    for (j = nlastpos[-1] - 1; j >= 0; --j) 
        pos[j] = lastpos[j];
    lastpos += nlastpos[-2];
    nlastpos[-2] = nlastpos[-1];
}

....
Skipping nonlast addifexit:Priority 3180
At location src/dfa.c:1823
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nullable, nlastpos, nfirstpos, lastpos, pos, firstpos, j, d, nalloc, i, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline)))
    return;
if (nullable[-1])
    nlastpos[-2] += nlastpos[-1];
else {
    pos = lastpos + nlastpos[-2];
    for (j = nlastpos[-1] - 1; j >= 0; --j) 
        pos[j] = lastpos[j];
    lastpos += nlastpos[-2];
    nlastpos[-2] = nlastpos[-1];
}

....
Skipping nonlast addifexit:Priority 3180
At location src/dfa.c:1823
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nullable, nlastpos, nfirstpos, lastpos, pos, firstpos, j, d, nalloc, i, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline)))
    break;
if (nullable[-1])
    nlastpos[-2] += nlastpos[-1];
else {
    pos = lastpos + nlastpos[-2];
    for (j = nlastpos[-1] - 1; j >= 0; --j) 
        pos[j] = lastpos[j];
    lastpos += nlastpos[-2];
    nlastpos[-2] = nlastpos[-1];
}

....
Skipping nonlast:Priority 4431
At location src/dfa.c:1827
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
pos = lastpos + nlastpos[-2];

....
Skipping nonlast:Priority 4431
At location src/dfa.c:1827
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
pos = lastpos + nlastpos[-2];

....
Skipping nonlast:Priority 4431
At location src/dfa.c:1827
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
pos = lastpos + nlastpos[-2];

....
Skipping nonlast:Priority 4431
At location src/dfa.c:1827
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
pos = lastpos + nlastpos[-2];

....
Skipping nonlast:Priority 4431
At location src/dfa.c:1827
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
pos = lastpos + nlastpos[-2];

....
Skipping nonlast:Priority 4431
At location src/dfa.c:1827
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
pos = lastpos + nlastpos[-2];

....
Skipping nonlast addifexit:Priority 9431
At location src/dfa.c:1827
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nlastpos, lastpos, pos, j, nullable, nfirstpos, firstpos, d, nalloc, i, lastpos->index, lastpos->constraint, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline)))
    return;
pos = lastpos + nlastpos[-2];

....
Skipping nonlast addifexit:Priority 9431
At location src/dfa.c:1827
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nlastpos, lastpos, pos, j, nullable, nfirstpos, firstpos, d, nalloc, i, lastpos->index, lastpos->constraint, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline)))
    break;
pos = lastpos + nlastpos[-2];

....
Skipping nonlast:Priority -568
At location src/dfa.c:1828
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
for (j = nlastpos[-1] - 1; j >= 0; --j) 
    pos[j] = lastpos[j];

....
Skipping nonlast:Priority -568
At location src/dfa.c:1828
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
for (j = nlastpos[-1] - 1; j >= 0; --j) 
    pos[j] = lastpos[j];

....
Skipping nonlast:Priority -568
At location src/dfa.c:1828
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
for (j = nlastpos[-1] - 1; j >= 0; --j) 
    pos[j] = lastpos[j];

....
Skipping nonlast:Priority -568
At location src/dfa.c:1828
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
for (j = nlastpos[-1] - 1; j >= 0; --j) 
    pos[j] = lastpos[j];

....
Skipping nonlast:Priority -568
At location src/dfa.c:1828
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
for (j = nlastpos[-1] - 1; j >= 0; --j) 
    pos[j] = lastpos[j];

....
Skipping nonlast:Priority -568
At location src/dfa.c:1828
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
for (j = nlastpos[-1] - 1; j >= 0; --j) 
    pos[j] = lastpos[j];

....
Skipping nonlast addifexit:Priority 4432
At location src/dfa.c:1828
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nlastpos, j, lastpos, pos, nullable, nfirstpos, firstpos, d, pos[j].index, nalloc, i, lastpos->index, lastpos->constraint, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline, pos[j].constraint)))
    return;
for (j = nlastpos[-1] - 1; j >= 0; --j) 
    pos[j] = lastpos[j];

....
Skipping nonlast addifexit:Priority 4432
At location src/dfa.c:1828
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nlastpos, j, lastpos, pos, nullable, nfirstpos, firstpos, d, pos[j].index, nalloc, i, lastpos->index, lastpos->constraint, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline, pos[j].constraint)))
    break;
for (j = nlastpos[-1] - 1; j >= 0; --j) 
    pos[j] = lastpos[j];

....
Skipping nonlast:Priority -567
At location src/dfa.c:1830
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
lastpos += nlastpos[-2];

....
Skipping nonlast:Priority -567
At location src/dfa.c:1830
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
lastpos += nlastpos[-2];

....
Skipping nonlast:Priority -567
At location src/dfa.c:1830
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
lastpos += nlastpos[-2];

....
Skipping nonlast:Priority -567
At location src/dfa.c:1830
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
lastpos += nlastpos[-2];

....
Skipping nonlast:Priority -567
At location src/dfa.c:1830
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
lastpos += nlastpos[-2];

....
Skipping nonlast:Priority -567
At location src/dfa.c:1830
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
lastpos += nlastpos[-2];

....
Skipping nonlast addifexit:Priority 4433
At location src/dfa.c:1830
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nlastpos, lastpos, j, pos, nullable, nfirstpos, firstpos, d, pos[j].index, nalloc, i, lastpos->index, lastpos->constraint, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline, pos[j].constraint)))
    return;
lastpos += nlastpos[-2];

....
Skipping nonlast addifexit:Priority 4433
At location src/dfa.c:1830
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nlastpos, lastpos, j, pos, nullable, nfirstpos, firstpos, d, pos[j].index, nalloc, i, lastpos->index, lastpos->constraint, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline, pos[j].constraint)))
    break;
lastpos += nlastpos[-2];

....
Skipping nonlast:Priority -565
At location src/dfa.c:1833
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
--nlastpos;

....
Skipping nonlast:Priority -565
At location src/dfa.c:1833
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
--nlastpos;

....
Skipping nonlast:Priority -565
At location src/dfa.c:1833
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
--nlastpos;

....
Skipping nonlast:Priority -565
At location src/dfa.c:1833
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
--nlastpos;

....
Skipping nonlast:Priority -565
At location src/dfa.c:1833
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
--nlastpos;

....
Skipping nonlast:Priority -565
At location src/dfa.c:1833
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
--nlastpos;

....
Skipping nonlast addifexit:Priority 4435
At location src/dfa.c:1833
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nlastpos, nullable, lastpos, j, pos, nfirstpos, firstpos, d, nalloc, i, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline)))
    return;
--nlastpos;

....
Skipping nonlast addifexit:Priority 4435
At location src/dfa.c:1833
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nlastpos, nullable, lastpos, j, pos, nfirstpos, firstpos, d, nalloc, i, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline)))
    break;
--nlastpos;

....
Skipping nonlast:Priority -564
At location src/dfa.c:1836
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
nullable[-2] = nullable[-1] && nullable[-2];

....
Skipping nonlast:Priority -564
At location src/dfa.c:1836
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
nullable[-2] = nullable[-1] && nullable[-2];

....
Skipping nonlast:Priority -564
At location src/dfa.c:1836
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
nullable[-2] = nullable[-1] && nullable[-2];

....
Skipping nonlast:Priority -564
At location src/dfa.c:1836
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
nullable[-2] = nullable[-1] && nullable[-2];

....
Skipping nonlast:Priority -564
At location src/dfa.c:1836
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
nullable[-2] = nullable[-1] && nullable[-2];

....
Skipping nonlast:Priority -564
At location src/dfa.c:1836
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
nullable[-2] = nullable[-1] && nullable[-2];

....
Skipping nonlast addifexit:Priority 4436
At location src/dfa.c:1836
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nullable, nlastpos, lastpos, nfirstpos, j, pos, firstpos, d, i, nalloc, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline)))
    return;
nullable[-2] = nullable[-1] && nullable[-2];

....
Skipping nonlast addifexit:Priority 4436
At location src/dfa.c:1836
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nullable, nlastpos, lastpos, nfirstpos, j, pos, firstpos, d, i, nalloc, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline)))
    break;
nullable[-2] = nullable[-1] && nullable[-2];

....
Skipping nonlast:Priority -563
At location src/dfa.c:1837
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
--nullable;

....
Skipping nonlast:Priority -563
At location src/dfa.c:1837
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
--nullable;

....
Skipping nonlast:Priority -563
At location src/dfa.c:1837
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
--nullable;

....
Skipping nonlast:Priority -563
At location src/dfa.c:1837
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
--nullable;

....
Skipping nonlast:Priority -563
At location src/dfa.c:1837
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
--nullable;

....
Skipping nonlast:Priority -563
At location src/dfa.c:1837
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
--nullable;

....
Skipping nonlast addifexit:Priority 4437
At location src/dfa.c:1837
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nullable, nlastpos, nfirstpos, lastpos, j, pos, firstpos, d, i, nalloc, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline)))
    return;
--nullable;

....
Skipping nonlast addifexit:Priority 4437
At location src/dfa.c:1837
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nullable, nlastpos, nfirstpos, lastpos, j, pos, firstpos, d, i, nalloc, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline)))
    break;
--nullable;

....
Skipping nonlast:Priority -562
At location src/dfa.c:1838
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
break;

....
Skipping nonlast:Priority -562
At location src/dfa.c:1838
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
break;

....
Skipping nonlast:Priority -562
At location src/dfa.c:1838
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
break;

....
Skipping nonlast:Priority -562
At location src/dfa.c:1838
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
break;

....
Skipping nonlast:Priority -562
At location src/dfa.c:1838
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
break;

....
Skipping nonlast:Priority -562
At location src/dfa.c:1838
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
break;

....
Skipping nonlast addifexit:Priority 4438
At location src/dfa.c:1838
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nullable, nfirstpos, nlastpos, lastpos, j, pos, firstpos, d, i, nalloc, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline)))
    return;
break;

....
Skipping nonlast addifexit:Priority 4438
At location src/dfa.c:1838
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nullable, nfirstpos, nlastpos, lastpos, j, pos, firstpos, d, i, nalloc, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline)))
    break;
break;

....
Skipping nonlast:Priority -592
At location src/dfa.c:1864
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
*nfirstpos++ = *nlastpos++ = 1;

....
Skipping nonlast:Priority -592
At location src/dfa.c:1864
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
*nfirstpos++ = *nlastpos++ = 1;

....
Skipping nonlast:Priority -592
At location src/dfa.c:1864
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
*nfirstpos++ = *nlastpos++ = 1;

....
Skipping nonlast:Priority -592
At location src/dfa.c:1864
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
*nfirstpos++ = *nlastpos++ = 1;

....
Skipping nonlast:Priority -592
At location src/dfa.c:1864
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
*nfirstpos++ = *nlastpos++ = 1;

....
Skipping nonlast:Priority -592
At location src/dfa.c:1864
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
*nfirstpos++ = *nlastpos++ = 1;

....
Skipping nonlast addifexit:Priority 4408
At location src/dfa.c:1864
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nfirstpos, nlastpos, firstpos, lastpos, i, firstpos->index, lastpos->index, d, nullable, firstpos->constraint, lastpos->constraint, nalloc, j, pos, wants_newline, o_nullable, o_nfirst, o_firstpos, o_nlast, o_lastpos, searchflag)))
    return;
*nfirstpos++ = *nlastpos++ = 1;

....
Skipping nonlast addifexit:Priority 4408
At location src/dfa.c:1864
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nfirstpos, nlastpos, firstpos, lastpos, i, firstpos->index, lastpos->index, d, nullable, firstpos->constraint, lastpos->constraint, nalloc, j, pos, wants_newline, o_nullable, o_nfirst, o_firstpos, o_nlast, o_lastpos, searchflag)))
    break;
*nfirstpos++ = *nlastpos++ = 1;

....
Skipping nonlast:Priority -591
At location src/dfa.c:1865
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
--firstpos , --lastpos;

....
Skipping nonlast:Priority -591
At location src/dfa.c:1865
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
--firstpos , --lastpos;

....
Skipping nonlast:Priority -591
At location src/dfa.c:1865
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
--firstpos , --lastpos;

....
Skipping nonlast:Priority -591
At location src/dfa.c:1865
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
--firstpos , --lastpos;

....
Skipping nonlast:Priority -591
At location src/dfa.c:1865
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
--firstpos , --lastpos;

....
Skipping nonlast:Priority -591
At location src/dfa.c:1865
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
--firstpos , --lastpos;

....
Skipping nonlast addifexit:Priority 4409
At location src/dfa.c:1865
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(firstpos, lastpos, nfirstpos, nlastpos, i, firstpos->index, lastpos->index, firstpos->constraint, lastpos->constraint, d, nullable, nalloc, j, pos, wants_newline, o_nullable, o_nfirst, o_firstpos, o_nlast, o_lastpos, searchflag)))
    return;
--firstpos , --lastpos;

....
Skipping nonlast addifexit:Priority 4409
At location src/dfa.c:1865
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(firstpos, lastpos, nfirstpos, nlastpos, i, firstpos->index, lastpos->index, firstpos->constraint, lastpos->constraint, d, nullable, nalloc, j, pos, wants_newline, o_nullable, o_nfirst, o_firstpos, o_nlast, o_lastpos, searchflag)))
    break;
--firstpos , --lastpos;

....
Skipping nonlast:Priority -590
At location src/dfa.c:1866
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
firstpos->index = lastpos->index = i;

....
Skipping nonlast:Priority -590
At location src/dfa.c:1866
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
firstpos->index = lastpos->index = i;

....
Skipping nonlast:Priority -590
At location src/dfa.c:1866
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
firstpos->index = lastpos->index = i;

....
Skipping nonlast:Priority -590
At location src/dfa.c:1866
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
firstpos->index = lastpos->index = i;

....
Skipping nonlast:Priority -590
At location src/dfa.c:1866
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
firstpos->index = lastpos->index = i;

....
Skipping nonlast:Priority -590
At location src/dfa.c:1866
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
firstpos->index = lastpos->index = i;

....
Skipping nonlast addifexit:Priority 4410
At location src/dfa.c:1866
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(firstpos, lastpos, i, firstpos->index, lastpos->index, firstpos->constraint, lastpos->constraint, nfirstpos, nlastpos, nalloc, d, nullable, j, pos, wants_newline, o_nullable, o_nfirst, o_firstpos, o_nlast, o_lastpos, searchflag)))
    return;
firstpos->index = lastpos->index = i;

....
Skipping nonlast addifexit:Priority 4410
At location src/dfa.c:1866
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(firstpos, lastpos, i, firstpos->index, lastpos->index, firstpos->constraint, lastpos->constraint, nfirstpos, nlastpos, nalloc, d, nullable, j, pos, wants_newline, o_nullable, o_nfirst, o_firstpos, o_nlast, o_lastpos, searchflag)))
    break;
firstpos->index = lastpos->index = i;

....
Skipping nonlast:Priority -589
At location src/dfa.c:1867
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
firstpos->constraint = lastpos->constraint = 255;

....
Skipping nonlast:Priority -589
At location src/dfa.c:1867
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
firstpos->constraint = lastpos->constraint = 255;

....
Skipping nonlast:Priority -589
At location src/dfa.c:1867
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
firstpos->constraint = lastpos->constraint = 255;

....
Skipping nonlast:Priority -589
At location src/dfa.c:1867
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
firstpos->constraint = lastpos->constraint = 255;

....
Skipping nonlast:Priority -589
At location src/dfa.c:1867
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
firstpos->constraint = lastpos->constraint = 255;

....
Skipping nonlast:Priority -589
At location src/dfa.c:1867
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
firstpos->constraint = lastpos->constraint = 255;

....
Skipping nonlast addifexit:Priority 4411
At location src/dfa.c:1867
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(firstpos, lastpos, firstpos->constraint, lastpos->constraint, i, firstpos->index, lastpos->index, nfirstpos, nlastpos, nalloc, d, nullable, j, pos, wants_newline, o_nullable, o_nfirst, o_firstpos, o_nlast, o_lastpos, searchflag)))
    return;
firstpos->constraint = lastpos->constraint = 255;

....
Skipping nonlast addifexit:Priority 4411
At location src/dfa.c:1867
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(firstpos, lastpos, firstpos->constraint, lastpos->constraint, i, firstpos->index, lastpos->index, nfirstpos, nlastpos, nalloc, d, nullable, j, pos, wants_newline, o_nullable, o_nfirst, o_firstpos, o_nlast, o_lastpos, searchflag)))
    break;
firstpos->constraint = lastpos->constraint = 255;

....
Skipping nonlast:Priority -588
At location src/dfa.c:1870
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
nalloc[i] = 1;

....
Skipping nonlast:Priority -588
At location src/dfa.c:1870
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
nalloc[i] = 1;

....
Skipping nonlast:Priority -588
At location src/dfa.c:1870
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
nalloc[i] = 1;

....
Skipping nonlast:Priority -588
At location src/dfa.c:1870
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
nalloc[i] = 1;

....
Skipping nonlast:Priority -588
At location src/dfa.c:1870
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
nalloc[i] = 1;

....
Skipping nonlast:Priority -588
At location src/dfa.c:1870
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
nalloc[i] = 1;

....
Skipping nonlast addifexit:Priority 4412
At location src/dfa.c:1870
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nalloc, i, d, d->follows[i].elems, d->follows, firstpos, lastpos, nfirstpos, nlastpos, nullable, d->tokens, d->tindex, j, pos, d->follows[i].nelem, wants_newline, d->salloc, d->sindex, d->states, o_nullable, o_nfirst, o_firstpos, o_nlast, o_lastpos, d->nleaves, d->depth, searchflag, d->searchflag, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
nalloc[i] = 1;

....
Skipping nonlast addifexit:Priority 4412
At location src/dfa.c:1870
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nalloc, i, d, d->follows[i].elems, d->follows, firstpos, lastpos, nfirstpos, nlastpos, nullable, d->tokens, d->tindex, j, pos, d->follows[i].nelem, wants_newline, d->salloc, d->sindex, d->states, o_nullable, o_nfirst, o_firstpos, o_nlast, o_lastpos, d->nleaves, d->depth, searchflag, d->searchflag, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    break;
nalloc[i] = 1;

....
Skipping nonlast:Priority -587
At location src/dfa.c:1871
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
((d->follows[i].elems) = xmalloc((nalloc[i]) * sizeof(position)));

....
Skipping nonlast:Priority -587
At location src/dfa.c:1871
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
((d->follows[i].elems) = xmalloc((nalloc[i]) * sizeof(position)));

....
Skipping nonlast:Priority -587
At location src/dfa.c:1871
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
((d->follows[i].elems) = xmalloc((nalloc[i]) * sizeof(position)));

....
Skipping nonlast:Priority -587
At location src/dfa.c:1871
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
((d->follows[i].elems) = xmalloc((nalloc[i]) * sizeof(position)));

....
Skipping nonlast:Priority -587
At location src/dfa.c:1871
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
((d->follows[i].elems) = xmalloc((nalloc[i]) * sizeof(position)));

....
Skipping nonlast:Priority -587
At location src/dfa.c:1871
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
((d->follows[i].elems) = xmalloc((nalloc[i]) * sizeof(position)));

....
Skipping nonlast addifexit:Priority 4413
At location src/dfa.c:1871
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, nalloc, i, d->follows[i].elems, d->follows, firstpos, lastpos, nfirstpos, nlastpos, nullable, d->tokens, d->tindex, j, pos, d->follows[i].nelem, wants_newline, d->salloc, d->sindex, d->states, o_nullable, o_nfirst, o_firstpos, o_nlast, o_lastpos, d->nleaves, d->depth, searchflag, d->searchflag, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
((d->follows[i].elems) = xmalloc((nalloc[i]) * sizeof(position)));

....
Skipping nonlast addifexit:Priority 4413
At location src/dfa.c:1871
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, nalloc, i, d->follows[i].elems, d->follows, firstpos, lastpos, nfirstpos, nlastpos, nullable, d->tokens, d->tindex, j, pos, d->follows[i].nelem, wants_newline, d->salloc, d->sindex, d->states, o_nullable, o_nfirst, o_firstpos, o_nlast, o_lastpos, d->nleaves, d->depth, searchflag, d->searchflag, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    break;
((d->follows[i].elems) = xmalloc((nalloc[i]) * sizeof(position)));

....
Skipping nonlast:Priority -561
At location src/dfa.c:1898
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
for (i = 0; i < d->tindex; ++i) 
    if (d->tokens[i] < (1 << 8) || d->tokens[i] == BACKREF || d->tokens[i] == ANYCHAR || d->tokens[i] == MBCSET || d->tokens[i] >= CSET) {
        copy(&d->follows[i], &merged);
        epsclosure(&merged, d);
        if (d->follows[i].nelem < merged.nelem)
            ((d->follows[i].elems) = xrealloc((ptr_t)(d->follows[i].elems), (merged.nelem) * sizeof(position)));
        copy(&merged, &d->follows[i]);
    }

....
Skipping nonlast:Priority -561
At location src/dfa.c:1898
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
for (i = 0; i < d->tindex; ++i) 
    if (d->tokens[i] < (1 << 8) || d->tokens[i] == BACKREF || d->tokens[i] == ANYCHAR || d->tokens[i] == MBCSET || d->tokens[i] >= CSET) {
        copy(&d->follows[i], &merged);
        epsclosure(&merged, d);
        if (d->follows[i].nelem < merged.nelem)
            ((d->follows[i].elems) = xrealloc((ptr_t)(d->follows[i].elems), (merged.nelem) * sizeof(position)));
        copy(&merged, &d->follows[i]);
    }

....
Skipping nonlast:Priority -561
At location src/dfa.c:1898
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
for (i = 0; i < d->tindex; ++i) 
    if (d->tokens[i] < (1 << 8) || d->tokens[i] == BACKREF || d->tokens[i] == ANYCHAR || d->tokens[i] == MBCSET || d->tokens[i] >= CSET) {
        copy(&d->follows[i], &merged);
        epsclosure(&merged, d);
        if (d->follows[i].nelem < merged.nelem)
            ((d->follows[i].elems) = xrealloc((ptr_t)(d->follows[i].elems), (merged.nelem) * sizeof(position)));
        copy(&merged, &d->follows[i]);
    }

....
Skipping nonlast:Priority -561
At location src/dfa.c:1898
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
for (i = 0; i < d->tindex; ++i) 
    if (d->tokens[i] < (1 << 8) || d->tokens[i] == BACKREF || d->tokens[i] == ANYCHAR || d->tokens[i] == MBCSET || d->tokens[i] >= CSET) {
        copy(&d->follows[i], &merged);
        epsclosure(&merged, d);
        if (d->follows[i].nelem < merged.nelem)
            ((d->follows[i].elems) = xrealloc((ptr_t)(d->follows[i].elems), (merged.nelem) * sizeof(position)));
        copy(&merged, &d->follows[i]);
    }

....
Skipping nonlast:Priority -561
At location src/dfa.c:1898
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
for (i = 0; i < d->tindex; ++i) 
    if (d->tokens[i] < (1 << 8) || d->tokens[i] == BACKREF || d->tokens[i] == ANYCHAR || d->tokens[i] == MBCSET || d->tokens[i] >= CSET) {
        copy(&d->follows[i], &merged);
        epsclosure(&merged, d);
        if (d->follows[i].nelem < merged.nelem)
            ((d->follows[i].elems) = xrealloc((ptr_t)(d->follows[i].elems), (merged.nelem) * sizeof(position)));
        copy(&merged, &d->follows[i]);
    }

....
Skipping nonlast:Priority -561
At location src/dfa.c:1898
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
for (i = 0; i < d->tindex; ++i) 
    if (d->tokens[i] < (1 << 8) || d->tokens[i] == BACKREF || d->tokens[i] == ANYCHAR || d->tokens[i] == MBCSET || d->tokens[i] >= CSET) {
        copy(&d->follows[i], &merged);
        epsclosure(&merged, d);
        if (d->follows[i].nelem < merged.nelem)
            ((d->follows[i].elems) = xrealloc((ptr_t)(d->follows[i].elems), (merged.nelem) * sizeof(position)));
        copy(&merged, &d->follows[i]);
    }

....
Skipping nonlast addifexit:Priority 4439
At location src/dfa.c:1898
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->tindex, d->tokens, d->follows, nalloc, nfirstpos, firstpos, lastpos, nlastpos, wants_newline, nullable, d->salloc, d->sindex, d->states, o_nullable, o_nfirst, o_firstpos, o_nlast, o_lastpos, j, pos, d->nleaves, d->depth, searchflag, d->searchflag, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
for (i = 0; i < d->tindex; ++i) 
    if (d->tokens[i] < (1 << 8) || d->tokens[i] == BACKREF || d->tokens[i] == ANYCHAR || d->tokens[i] == MBCSET || d->tokens[i] >= CSET) {
        copy(&d->follows[i], &merged);
        epsclosure(&merged, d);
        if (d->follows[i].nelem < merged.nelem)
            ((d->follows[i].elems) = xrealloc((ptr_t)(d->follows[i].elems), (merged.nelem) * sizeof(position)));
        copy(&merged, &d->follows[i]);
    }

....
Skipping nonlast:Priority 4440
At location src/dfa.c:1917
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
copy(&d->follows[i], &merged);

....
Skipping nonlast:Priority 4440
At location src/dfa.c:1917
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
copy(&d->follows[i], &merged);

....
Skipping nonlast:Priority 4440
At location src/dfa.c:1917
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
copy(&d->follows[i], &merged);

....
Skipping nonlast:Priority 4440
At location src/dfa.c:1917
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
copy(&d->follows[i], &merged);

....
Skipping nonlast:Priority 4440
At location src/dfa.c:1917
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
copy(&d->follows[i], &merged);

....
Skipping nonlast:Priority 4440
At location src/dfa.c:1917
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
copy(&d->follows[i], &merged);

....
Skipping nonlast addifexit:Priority 9440
At location src/dfa.c:1917
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->follows, d->follows[i].nelem, merged.nelem, d->follows[i].elems, nfirstpos, firstpos, d->tokens, wants_newline, merged.elems, d->tindex, d->salloc, d->sindex, d->states, o_nullable, o_nfirst, o_firstpos, o_nlast, o_lastpos, nalloc, lastpos, nlastpos, nullable, j, pos, d->nleaves, d->depth, searchflag, d->searchflag, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
copy(&d->follows[i], &merged);

....
Skipping nonlast addifexit:Priority 9440
At location src/dfa.c:1917
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->follows, d->follows[i].nelem, merged.nelem, d->follows[i].elems, nfirstpos, firstpos, d->tokens, wants_newline, merged.elems, d->tindex, d->salloc, d->sindex, d->states, o_nullable, o_nfirst, o_firstpos, o_nlast, o_lastpos, nalloc, lastpos, nlastpos, nullable, j, pos, d->nleaves, d->depth, searchflag, d->searchflag, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    break;
copy(&d->follows[i], &merged);

....
Skipping nonlast:Priority -559
At location src/dfa.c:1918
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
epsclosure(&merged, d);

....
Skipping nonlast:Priority -559
At location src/dfa.c:1918
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
epsclosure(&merged, d);

....
Skipping nonlast:Priority -559
At location src/dfa.c:1918
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
epsclosure(&merged, d);

....
Skipping nonlast:Priority -559
At location src/dfa.c:1918
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
epsclosure(&merged, d);

....
Skipping nonlast:Priority -559
At location src/dfa.c:1918
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
epsclosure(&merged, d);

....
Skipping nonlast:Priority -559
At location src/dfa.c:1918
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
epsclosure(&merged, d);

....
Skipping nonlast addifexit:Priority 4441
At location src/dfa.c:1918
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->follows[i].nelem, d->follows, merged.nelem, d->follows[i].elems, nfirstpos, firstpos, wants_newline, d->tokens, merged.elems, d->tindex, d->salloc, d->sindex, d->states, o_nullable, o_nfirst, o_firstpos, o_nlast, o_lastpos, nalloc, lastpos, nlastpos, nullable, j, pos, d->nleaves, d->depth, searchflag, d->searchflag, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
epsclosure(&merged, d);

....
Skipping nonlast addifexit:Priority 4441
At location src/dfa.c:1918
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->follows[i].nelem, d->follows, merged.nelem, d->follows[i].elems, nfirstpos, firstpos, wants_newline, d->tokens, merged.elems, d->tindex, d->salloc, d->sindex, d->states, o_nullable, o_nfirst, o_firstpos, o_nlast, o_lastpos, nalloc, lastpos, nlastpos, nullable, j, pos, d->nleaves, d->depth, searchflag, d->searchflag, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    break;
epsclosure(&merged, d);

....
Skipping nonlast:Priority -558
At location src/dfa.c:1919
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (d->follows[i].nelem < merged.nelem)
    ((d->follows[i].elems) = xrealloc((ptr_t)(d->follows[i].elems), (merged.nelem) * sizeof(position)));

....
Skipping nonlast:Priority -558
At location src/dfa.c:1919
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (d->follows[i].nelem < merged.nelem)
    ((d->follows[i].elems) = xrealloc((ptr_t)(d->follows[i].elems), (merged.nelem) * sizeof(position)));

....
Skipping nonlast:Priority -558
At location src/dfa.c:1919
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if (d->follows[i].nelem < merged.nelem)
    ((d->follows[i].elems) = xrealloc((ptr_t)(d->follows[i].elems), (merged.nelem) * sizeof(position)));

....
Skipping nonlast:Priority -558
At location src/dfa.c:1919
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (d->follows[i].nelem < merged.nelem)
    ((d->follows[i].elems) = xrealloc((ptr_t)(d->follows[i].elems), (merged.nelem) * sizeof(position)));

....
Skipping nonlast:Priority -558
At location src/dfa.c:1919
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (d->follows[i].nelem < merged.nelem)
    ((d->follows[i].elems) = xrealloc((ptr_t)(d->follows[i].elems), (merged.nelem) * sizeof(position)));

....
Skipping nonlast:Priority -558
At location src/dfa.c:1919
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (d->follows[i].nelem < merged.nelem)
    ((d->follows[i].elems) = xrealloc((ptr_t)(d->follows[i].elems), (merged.nelem) * sizeof(position)));

....
Skipping nonlast addifexit:Priority 3192
At location src/dfa.c:1919
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->follows[i].nelem, d->follows, merged.nelem, d->follows[i].elems, nfirstpos, firstpos, wants_newline, d->tokens, merged.elems, d->salloc, d->sindex, d->tindex, d->states, o_nullable, o_nfirst, o_firstpos, o_nlast, o_lastpos, nalloc, lastpos, nlastpos, nullable, j, pos, d->nleaves, d->depth, searchflag, d->searchflag, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
if (d->follows[i].nelem < merged.nelem)
    ((d->follows[i].elems) = xrealloc((ptr_t)(d->follows[i].elems), (merged.nelem) * sizeof(position)));

....
Skipping nonlast addifexit:Priority 3192
At location src/dfa.c:1919
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->follows[i].nelem, d->follows, merged.nelem, d->follows[i].elems, nfirstpos, firstpos, wants_newline, d->tokens, merged.elems, d->salloc, d->sindex, d->tindex, d->states, o_nullable, o_nfirst, o_firstpos, o_nlast, o_lastpos, nalloc, lastpos, nlastpos, nullable, j, pos, d->nleaves, d->depth, searchflag, d->searchflag, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    break;
if (d->follows[i].nelem < merged.nelem)
    ((d->follows[i].elems) = xrealloc((ptr_t)(d->follows[i].elems), (merged.nelem) * sizeof(position)));

....
Skipping nonlast:Priority -556
At location src/dfa.c:1926
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
merged.nelem = 0;

....
Skipping nonlast:Priority -556
At location src/dfa.c:1926
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
merged.nelem = 0;

....
Skipping nonlast:Priority -556
At location src/dfa.c:1926
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
merged.nelem = 0;

....
Skipping nonlast:Priority -556
At location src/dfa.c:1926
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
merged.nelem = 0;

....
Skipping nonlast:Priority -556
At location src/dfa.c:1926
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
merged.nelem = 0;

....
Skipping nonlast:Priority -556
At location src/dfa.c:1926
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
merged.nelem = 0;

....
Skipping nonlast addifexit:Priority 4444
At location src/dfa.c:1926
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(merged.nelem, nfirstpos, i, firstpos, d, wants_newline, merged.elems, o_nullable, o_nfirst, o_firstpos, o_nlast, o_lastpos, nalloc, lastpos, nlastpos, nullable, j, pos, searchflag)))
    return;
merged.nelem = 0;

....
Skipping nonlast:Priority -555
At location src/dfa.c:1927
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
for (i = 0; i < nfirstpos[-1]; ++i) 
    insert(firstpos[i], &merged);

....
Skipping nonlast:Priority -555
At location src/dfa.c:1927
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
for (i = 0; i < nfirstpos[-1]; ++i) 
    insert(firstpos[i], &merged);

....
Skipping nonlast:Priority -555
At location src/dfa.c:1927
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
for (i = 0; i < nfirstpos[-1]; ++i) 
    insert(firstpos[i], &merged);

....
Skipping nonlast:Priority -555
At location src/dfa.c:1927
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
for (i = 0; i < nfirstpos[-1]; ++i) 
    insert(firstpos[i], &merged);

....
Skipping nonlast:Priority -555
At location src/dfa.c:1927
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
for (i = 0; i < nfirstpos[-1]; ++i) 
    insert(firstpos[i], &merged);

....
Skipping nonlast:Priority -555
At location src/dfa.c:1927
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
for (i = 0; i < nfirstpos[-1]; ++i) 
    insert(firstpos[i], &merged);

....
Skipping nonlast addifexit:Priority 4445
At location src/dfa.c:1927
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nfirstpos, i, firstpos, merged.nelem, d, wants_newline, merged.elems, o_nullable, o_nfirst, o_firstpos, o_nlast, o_lastpos, nalloc, lastpos, firstpos->constraint, firstpos->index, nlastpos, nullable, j, pos, searchflag)))
    return;
for (i = 0; i < nfirstpos[-1]; ++i) 
    insert(firstpos[i], &merged);

....
Skipping nonlast:Priority -554
At location src/dfa.c:1929
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
epsclosure(&merged, d);

....
Skipping nonlast:Priority -554
At location src/dfa.c:1929
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
epsclosure(&merged, d);

....
Skipping nonlast:Priority -554
At location src/dfa.c:1929
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
epsclosure(&merged, d);

....
Skipping nonlast:Priority -554
At location src/dfa.c:1929
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
epsclosure(&merged, d);

....
Skipping nonlast:Priority -554
At location src/dfa.c:1929
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
epsclosure(&merged, d);

....
Skipping nonlast:Priority -554
At location src/dfa.c:1929
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
epsclosure(&merged, d);

....
Skipping nonlast addifexit:Priority 4446
At location src/dfa.c:1929
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, firstpos, i, nfirstpos, wants_newline, merged.nelem, merged.elems, d->follows, d->salloc, d->sindex, d->states, o_nullable, o_nfirst, o_firstpos, o_nlast, o_lastpos, nalloc, d->tokens, d->tindex, lastpos, firstpos->constraint, firstpos->index, nlastpos, nullable, j, pos, d->nleaves, d->depth, searchflag, d->searchflag, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
epsclosure(&merged, d);

....
Skipping nonlast:Priority -547
At location src/dfa.c:1932
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
wants_newline = 0;

....
Skipping nonlast:Priority -547
At location src/dfa.c:1932
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
wants_newline = 0;

....
Skipping nonlast:Priority -547
At location src/dfa.c:1932
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
wants_newline = 0;

....
Skipping nonlast:Priority -547
At location src/dfa.c:1932
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
wants_newline = 0;

....
Skipping nonlast:Priority -547
At location src/dfa.c:1932
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
wants_newline = 0;

....
Skipping nonlast:Priority -547
At location src/dfa.c:1932
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
wants_newline = 0;

....
Skipping nonlast addifexit:Priority 4453
At location src/dfa.c:1932
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(wants_newline, i, merged.nelem, merged.elems, d, firstpos, nfirstpos, o_nullable, o_nfirst, o_firstpos, o_nlast, o_lastpos, nalloc, lastpos, nlastpos, nullable, j, pos, searchflag)))
    return;
wants_newline = 0;

....
Skipping nonlast:Priority -546
At location src/dfa.c:1933
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
for (i = 0; i < merged.nelem; ++i) 
    if ((((merged.elems[i].constraint) & 192) >> 2 != ((merged.elems[i].constraint) & 48)))
        wants_newline = 1;

....
Skipping nonlast:Priority -546
At location src/dfa.c:1933
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
for (i = 0; i < merged.nelem; ++i) 
    if ((((merged.elems[i].constraint) & 192) >> 2 != ((merged.elems[i].constraint) & 48)))
        wants_newline = 1;

....
Skipping nonlast:Priority -546
At location src/dfa.c:1933
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
for (i = 0; i < merged.nelem; ++i) 
    if ((((merged.elems[i].constraint) & 192) >> 2 != ((merged.elems[i].constraint) & 48)))
        wants_newline = 1;

....
Skipping nonlast:Priority -546
At location src/dfa.c:1933
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
for (i = 0; i < merged.nelem; ++i) 
    if ((((merged.elems[i].constraint) & 192) >> 2 != ((merged.elems[i].constraint) & 48)))
        wants_newline = 1;

....
Skipping nonlast:Priority -546
At location src/dfa.c:1933
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
for (i = 0; i < merged.nelem; ++i) 
    if ((((merged.elems[i].constraint) & 192) >> 2 != ((merged.elems[i].constraint) & 48)))
        wants_newline = 1;

....
Skipping nonlast:Priority -546
At location src/dfa.c:1933
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
for (i = 0; i < merged.nelem; ++i) 
    if ((((merged.elems[i].constraint) & 192) >> 2 != ((merged.elems[i].constraint) & 48)))
        wants_newline = 1;

....
Skipping nonlast addifexit:Priority 4454
At location src/dfa.c:1933
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, merged.nelem, wants_newline, merged.elems[i].constraint, merged.elems, d, firstpos, nfirstpos, o_nullable, o_nfirst, o_firstpos, o_nlast, o_lastpos, nalloc, lastpos, nlastpos, nullable, j, pos, searchflag, merged.elems[i].index)))
    return;
for (i = 0; i < merged.nelem; ++i) 
    if ((((merged.elems[i].constraint) & 192) >> 2 != ((merged.elems[i].constraint) & 48)))
        wants_newline = 1;

....
Skipping nonlast:Priority -545
At location src/dfa.c:1938
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
d->salloc = 1;

....
Skipping nonlast:Priority -545
At location src/dfa.c:1938
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
d->salloc = 1;

....
Skipping nonlast:Priority -545
At location src/dfa.c:1938
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
d->salloc = 1;

....
Skipping nonlast:Priority -545
At location src/dfa.c:1938
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
d->salloc = 1;

....
Skipping nonlast:Priority -545
At location src/dfa.c:1938
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
d->salloc = 1;

....
Skipping nonlast:Priority -545
At location src/dfa.c:1938
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
d->salloc = 1;

....
Skipping nonlast addifexit:Priority 4455
At location src/dfa.c:1938
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->salloc, d->sindex, d->states, wants_newline, i, o_nullable, o_nfirst, o_firstpos, o_nlast, o_lastpos, firstpos, nalloc, nfirstpos, d->follows, d->tokens, d->tindex, lastpos, nlastpos, nullable, j, pos, d->nleaves, d->depth, searchflag, d->searchflag, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
d->salloc = 1;

....
Skipping nonlast:Priority -544
At location src/dfa.c:1939
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
d->sindex = 0;

....
Skipping nonlast:Priority -544
At location src/dfa.c:1939
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
d->sindex = 0;

....
Skipping nonlast:Priority -544
At location src/dfa.c:1939
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
d->sindex = 0;

....
Skipping nonlast:Priority -544
At location src/dfa.c:1939
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
d->sindex = 0;

....
Skipping nonlast:Priority -544
At location src/dfa.c:1939
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
d->sindex = 0;

....
Skipping nonlast:Priority -544
At location src/dfa.c:1939
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
d->sindex = 0;

....
Skipping nonlast addifexit:Priority 4456
At location src/dfa.c:1939
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->sindex, d->states, d->salloc, wants_newline, o_nullable, o_nfirst, i, o_firstpos, o_nlast, o_lastpos, nalloc, firstpos, nfirstpos, d->follows, d->tokens, d->tindex, lastpos, nlastpos, nullable, j, pos, d->nleaves, d->depth, searchflag, d->searchflag, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
d->sindex = 0;

....
Skipping nonlast:Priority -543
At location src/dfa.c:1940
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
((d->states) = xmalloc((d->salloc) * sizeof(dfa_state)));

....
Skipping nonlast:Priority -543
At location src/dfa.c:1940
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
((d->states) = xmalloc((d->salloc) * sizeof(dfa_state)));

....
Skipping nonlast:Priority -543
At location src/dfa.c:1940
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
((d->states) = xmalloc((d->salloc) * sizeof(dfa_state)));

....
Skipping nonlast:Priority -543
At location src/dfa.c:1940
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
((d->states) = xmalloc((d->salloc) * sizeof(dfa_state)));

....
Skipping nonlast:Priority -543
At location src/dfa.c:1940
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
((d->states) = xmalloc((d->salloc) * sizeof(dfa_state)));

....
Skipping nonlast:Priority -543
At location src/dfa.c:1940
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
((d->states) = xmalloc((d->salloc) * sizeof(dfa_state)));

....
Skipping nonlast addifexit:Priority 4457
At location src/dfa.c:1940
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->states, d->salloc, wants_newline, d->sindex, o_nullable, o_nfirst, o_firstpos, o_nlast, i, merged.elems, o_lastpos, merged.nelem, nalloc, firstpos, nfirstpos, d->follows, d->tokens, d->tindex, lastpos, nlastpos, nullable, j, pos, d->nleaves, d->depth, searchflag, d->searchflag, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
((d->states) = xmalloc((d->salloc) * sizeof(dfa_state)));

....
Skipping nonlast:Priority -542
At location src/dfa.c:1941
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
state_index(d, &merged, wants_newline, 0);

....
Skipping nonlast:Priority -542
At location src/dfa.c:1941
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
state_index(d, &merged, wants_newline, 0);

....
Skipping nonlast:Priority -542
At location src/dfa.c:1941
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
state_index(d, &merged, wants_newline, 0);

....
Skipping nonlast:Priority -542
At location src/dfa.c:1941
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
state_index(d, &merged, wants_newline, 0);

....
Skipping nonlast:Priority -542
At location src/dfa.c:1941
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
state_index(d, &merged, wants_newline, 0);

....
Skipping nonlast:Priority -542
At location src/dfa.c:1941
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
state_index(d, &merged, wants_newline, 0);

....
Skipping nonlast addifexit:Priority 4458
At location src/dfa.c:1941
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, wants_newline, d->states, d->salloc, o_nullable, d->sindex, o_nfirst, o_firstpos, o_nlast, o_lastpos, nalloc, i, merged.elems, merged.nelem, firstpos, nfirstpos, d->follows, d->tokens, d->tindex, lastpos, nlastpos, nullable, j, pos, d->nleaves, d->depth, searchflag, d->searchflag, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
state_index(d, &merged, wants_newline, 0);

....
Skipping nonlast:Priority -541
At location src/dfa.c:1943
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
free(o_nullable);

....
Skipping nonlast:Priority -541
At location src/dfa.c:1943
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
free(o_nullable);

....
Skipping nonlast:Priority -541
At location src/dfa.c:1943
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
free(o_nullable);

....
Skipping nonlast:Priority -541
At location src/dfa.c:1943
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
free(o_nullable);

....
Skipping nonlast:Priority -541
At location src/dfa.c:1943
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
free(o_nullable);

....
Skipping nonlast:Priority -541
At location src/dfa.c:1943
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
free(o_nullable);

....
Skipping nonlast addifexit:Priority 4459
At location src/dfa.c:1943
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(o_nullable, o_nfirst, d, wants_newline, o_firstpos, o_nlast, o_lastpos, nalloc, i, firstpos, nfirstpos, lastpos, nlastpos, nullable, j, pos, searchflag)))
    return;
free(o_nullable);

....
Skipping nonlast:Priority -540
At location src/dfa.c:1944
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
free(o_nfirst);

....
Skipping nonlast:Priority -540
At location src/dfa.c:1944
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
free(o_nfirst);

....
Skipping nonlast:Priority -540
At location src/dfa.c:1944
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
free(o_nfirst);

....
Skipping nonlast:Priority -540
At location src/dfa.c:1944
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
free(o_nfirst);

....
Skipping nonlast:Priority -540
At location src/dfa.c:1944
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
free(o_nfirst);

....
Skipping nonlast:Priority -540
At location src/dfa.c:1944
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
free(o_nfirst);

....
Skipping nonlast addifexit:Priority 4460
At location src/dfa.c:1944
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(o_nfirst, o_nullable, o_firstpos, o_nlast, d, wants_newline, o_lastpos, nalloc, i, firstpos, nfirstpos, lastpos, nlastpos, nullable, j, pos, searchflag)))
    return;
free(o_nfirst);

....
Skipping nonlast:Priority -539
At location src/dfa.c:1945
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
free(o_firstpos);

....
Skipping nonlast:Priority -539
At location src/dfa.c:1945
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
free(o_firstpos);

....
Skipping nonlast:Priority -539
At location src/dfa.c:1945
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
free(o_firstpos);

....
Skipping nonlast:Priority -539
At location src/dfa.c:1945
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
free(o_firstpos);

....
Skipping nonlast:Priority -539
At location src/dfa.c:1945
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
free(o_firstpos);

....
Skipping nonlast:Priority -539
At location src/dfa.c:1945
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
free(o_firstpos);

....
Skipping nonlast addifexit:Priority 4461
At location src/dfa.c:1945
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(o_firstpos, o_nfirst, o_nlast, o_nullable, o_lastpos, nalloc, d, wants_newline, i, firstpos, nfirstpos, lastpos, nlastpos, nullable, j, pos, searchflag)))
    return;
free(o_firstpos);

....
Skipping nonlast:Priority -538
At location src/dfa.c:1946
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
free(o_nlast);

....
Skipping nonlast:Priority -538
At location src/dfa.c:1946
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
free(o_nlast);

....
Skipping nonlast:Priority -538
At location src/dfa.c:1946
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
free(o_nlast);

....
Skipping nonlast:Priority -538
At location src/dfa.c:1946
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
free(o_nlast);

....
Skipping nonlast:Priority -538
At location src/dfa.c:1946
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
free(o_nlast);

....
Skipping nonlast:Priority -538
At location src/dfa.c:1946
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
free(o_nlast);

....
Skipping nonlast addifexit:Priority 4462
At location src/dfa.c:1946
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(o_nlast, o_firstpos, o_lastpos, nalloc, o_nfirst, o_nullable, d, wants_newline, i, firstpos, nfirstpos, lastpos, nlastpos, nullable, j, pos, searchflag)))
    return;
free(o_nlast);

....
Skipping nonlast:Priority -537
At location src/dfa.c:1947
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
free(o_lastpos);

....
Skipping nonlast:Priority -537
At location src/dfa.c:1947
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
free(o_lastpos);

....
Skipping nonlast:Priority -537
At location src/dfa.c:1947
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
free(o_lastpos);

....
Skipping nonlast:Priority -537
At location src/dfa.c:1947
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
free(o_lastpos);

....
Skipping nonlast:Priority -537
At location src/dfa.c:1947
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
free(o_lastpos);

....
Skipping nonlast:Priority -537
At location src/dfa.c:1947
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
free(o_lastpos);

....
Skipping nonlast addifexit:Priority 4463
At location src/dfa.c:1947
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(o_lastpos, nalloc, o_nlast, o_firstpos, o_nfirst, o_nullable, d, wants_newline, i, firstpos, nfirstpos, lastpos, nlastpos, nullable, j, pos, searchflag)))
    return;
free(o_lastpos);

....
Skipping nonlast:Priority -536
At location src/dfa.c:1948
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
free(nalloc);

....
Skipping nonlast:Priority -536
At location src/dfa.c:1948
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
free(nalloc);

....
Skipping nonlast:Priority -536
At location src/dfa.c:1948
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
free(nalloc);

....
Skipping nonlast:Priority -536
At location src/dfa.c:1948
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
free(nalloc);

....
Skipping nonlast:Priority -536
At location src/dfa.c:1948
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
free(nalloc);

....
Skipping nonlast:Priority -536
At location src/dfa.c:1948
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
free(nalloc);

....
Skipping nonlast addifexit:Priority 4464
At location src/dfa.c:1948
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nalloc, o_lastpos, merged.elems, o_nlast, o_firstpos, o_nfirst, o_nullable, d, wants_newline, i, merged.nelem, firstpos, nfirstpos, lastpos, nlastpos, nullable, j, pos, searchflag)))
    return;
free(nalloc);

....
Skipping nonlast:Priority -317
At location src/dfa.c:1985
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
position_set grps[256];

....
Skipping nonlast:Priority -317
At location src/dfa.c:1985
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
position_set grps[256];

....
Skipping nonlast:Priority -317
At location src/dfa.c:1985
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
position_set grps[256];

....
Skipping nonlast:Priority -317
At location src/dfa.c:1985
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
position_set grps[256];

....
Skipping nonlast:Priority -317
At location src/dfa.c:1985
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
position_set grps[256];

....
Skipping nonlast:Priority -317
At location src/dfa.c:1985
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
position_set grps[256];

....
Skipping nonlast addifexit:Priority 4683
At location src/dfa.c:1985
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, s, d, trans)))
    return;
position_set grps[256];

....
Skipping nonlast:Priority -316
At location src/dfa.c:1986
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
charclass labels[256];

....
Skipping nonlast:Priority -316
At location src/dfa.c:1986
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
charclass labels[256];

....
Skipping nonlast:Priority -316
At location src/dfa.c:1986
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
charclass labels[256];

....
Skipping nonlast:Priority -316
At location src/dfa.c:1986
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
charclass labels[256];

....
Skipping nonlast:Priority -316
At location src/dfa.c:1986
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
charclass labels[256];

....
Skipping nonlast:Priority -316
At location src/dfa.c:1986
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
charclass labels[256];

....
Skipping nonlast addifexit:Priority 4684
At location src/dfa.c:1986
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, s, d, trans)))
    return;
charclass labels[256];

....
Skipping nonlast:Priority -315
At location src/dfa.c:1987
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int ngrps = 0;

....
Skipping nonlast:Priority -315
At location src/dfa.c:1987
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int ngrps = 0;

....
Skipping nonlast:Priority -315
At location src/dfa.c:1987
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
int ngrps = 0;

....
Skipping nonlast:Priority -315
At location src/dfa.c:1987
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int ngrps = 0;

....
Skipping nonlast:Priority -315
At location src/dfa.c:1987
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int ngrps = 0;

....
Skipping nonlast:Priority -315
At location src/dfa.c:1987
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int ngrps = 0;

....
Skipping nonlast addifexit:Priority 4685
At location src/dfa.c:1987
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, s, d, trans)))
    return;
int ngrps = 0;

....
Skipping nonlast:Priority -314
At location src/dfa.c:1988
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
position pos;

....
Skipping nonlast:Priority -314
At location src/dfa.c:1988
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
position pos;

....
Skipping nonlast:Priority -314
At location src/dfa.c:1988
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
position pos;

....
Skipping nonlast:Priority -314
At location src/dfa.c:1988
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
position pos;

....
Skipping nonlast:Priority -314
At location src/dfa.c:1988
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
position pos;

....
Skipping nonlast:Priority -314
At location src/dfa.c:1988
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
position pos;

....
Skipping nonlast addifexit:Priority 4686
At location src/dfa.c:1988
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, s, d, ngrps, trans)))
    return;
position pos;

....
Skipping nonlast:Priority -313
At location src/dfa.c:1989
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
charclass matches;

....
Skipping nonlast:Priority -313
At location src/dfa.c:1989
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
charclass matches;

....
Skipping nonlast:Priority -313
At location src/dfa.c:1989
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
charclass matches;

....
Skipping nonlast:Priority -313
At location src/dfa.c:1989
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
charclass matches;

....
Skipping nonlast:Priority -313
At location src/dfa.c:1989
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
charclass matches;

....
Skipping nonlast:Priority -313
At location src/dfa.c:1989
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
charclass matches;

....
Skipping nonlast addifexit:Priority 4687
At location src/dfa.c:1989
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, s, d, ngrps, trans)))
    return;
charclass matches;

....
Skipping nonlast:Priority -312
At location src/dfa.c:1990
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int matchesf;

....
Skipping nonlast:Priority -312
At location src/dfa.c:1990
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int matchesf;

....
Skipping nonlast:Priority -312
At location src/dfa.c:1990
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
int matchesf;

....
Skipping nonlast:Priority -312
At location src/dfa.c:1990
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int matchesf;

....
Skipping nonlast:Priority -312
At location src/dfa.c:1990
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int matchesf;

....
Skipping nonlast:Priority -312
At location src/dfa.c:1990
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int matchesf;

....
Skipping nonlast addifexit:Priority 4688
At location src/dfa.c:1990
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, s, d, ngrps, trans)))
    return;
int matchesf;

....
Skipping nonlast:Priority -311
At location src/dfa.c:1991
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
charclass intersect;

....
Skipping nonlast:Priority -311
At location src/dfa.c:1991
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
charclass intersect;

....
Skipping nonlast:Priority -311
At location src/dfa.c:1991
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
charclass intersect;

....
Skipping nonlast:Priority -311
At location src/dfa.c:1991
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
charclass intersect;

....
Skipping nonlast:Priority -311
At location src/dfa.c:1991
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
charclass intersect;

....
Skipping nonlast:Priority -311
At location src/dfa.c:1991
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
charclass intersect;

....
Skipping nonlast addifexit:Priority 4689
At location src/dfa.c:1991
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, s, d, ngrps, matchesf, trans)))
    return;
charclass intersect;

....
Skipping nonlast:Priority -310
At location src/dfa.c:1992
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int intersectf;

....
Skipping nonlast:Priority -310
At location src/dfa.c:1992
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int intersectf;

....
Skipping nonlast:Priority -310
At location src/dfa.c:1992
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
int intersectf;

....
Skipping nonlast:Priority -310
At location src/dfa.c:1992
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int intersectf;

....
Skipping nonlast:Priority -310
At location src/dfa.c:1992
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int intersectf;

....
Skipping nonlast:Priority -310
At location src/dfa.c:1992
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int intersectf;

....
Skipping nonlast addifexit:Priority 4690
At location src/dfa.c:1992
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, s, d, ngrps, matchesf, trans)))
    return;
int intersectf;

....
Skipping nonlast:Priority -309
At location src/dfa.c:1993
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
charclass leftovers;

....
Skipping nonlast:Priority -309
At location src/dfa.c:1993
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
charclass leftovers;

....
Skipping nonlast:Priority -309
At location src/dfa.c:1993
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
charclass leftovers;

....
Skipping nonlast:Priority -309
At location src/dfa.c:1993
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
charclass leftovers;

....
Skipping nonlast:Priority -309
At location src/dfa.c:1993
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
charclass leftovers;

....
Skipping nonlast:Priority -309
At location src/dfa.c:1993
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
charclass leftovers;

....
Skipping nonlast addifexit:Priority 4691
At location src/dfa.c:1993
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, s, d, ngrps, intersectf, matchesf, trans)))
    return;
charclass leftovers;

....
Skipping nonlast:Priority -308
At location src/dfa.c:1994
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int leftoversf;

....
Skipping nonlast:Priority -308
At location src/dfa.c:1994
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int leftoversf;

....
Skipping nonlast:Priority -308
At location src/dfa.c:1994
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
int leftoversf;

....
Skipping nonlast:Priority -308
At location src/dfa.c:1994
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int leftoversf;

....
Skipping nonlast:Priority -308
At location src/dfa.c:1994
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int leftoversf;

....
Skipping nonlast:Priority -308
At location src/dfa.c:1994
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int leftoversf;

....
Skipping nonlast addifexit:Priority 4692
At location src/dfa.c:1994
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, s, d, ngrps, intersectf, matchesf, trans)))
    return;
int leftoversf;

....
Skipping nonlast:Priority -307
At location src/dfa.c:1995
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
static charclass letters;

....
Skipping nonlast:Priority -307
At location src/dfa.c:1995
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
static charclass letters;

....
Skipping nonlast:Priority -307
At location src/dfa.c:1995
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
static charclass letters;

....
Skipping nonlast:Priority -307
At location src/dfa.c:1995
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
static charclass letters;

....
Skipping nonlast:Priority -307
At location src/dfa.c:1995
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
static charclass letters;

....
Skipping nonlast:Priority -307
At location src/dfa.c:1995
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
static charclass letters;

....
Skipping nonlast addifexit:Priority 4693
At location src/dfa.c:1995
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, s, d, ngrps, intersectf, matchesf, leftoversf, trans)))
    return;
static charclass letters;

....
Skipping nonlast:Priority -306
At location src/dfa.c:1996
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
static charclass newline;

....
Skipping nonlast:Priority -306
At location src/dfa.c:1996
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
static charclass newline;

....
Skipping nonlast:Priority -306
At location src/dfa.c:1996
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
static charclass newline;

....
Skipping nonlast:Priority -306
At location src/dfa.c:1996
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
static charclass newline;

....
Skipping nonlast:Priority -306
At location src/dfa.c:1996
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
static charclass newline;

....
Skipping nonlast:Priority -306
At location src/dfa.c:1996
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
static charclass newline;

....
Skipping nonlast addifexit:Priority 4694
At location src/dfa.c:1996
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, s, d, ngrps, intersectf, matchesf, leftoversf, trans)))
    return;
static charclass newline;

....
Skipping nonlast:Priority -305
At location src/dfa.c:1997
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
position_set follows;

....
Skipping nonlast:Priority -305
At location src/dfa.c:1997
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
position_set follows;

....
Skipping nonlast:Priority -305
At location src/dfa.c:1997
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
position_set follows;

....
Skipping nonlast:Priority -305
At location src/dfa.c:1997
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
position_set follows;

....
Skipping nonlast:Priority -305
At location src/dfa.c:1997
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
position_set follows;

....
Skipping nonlast:Priority -305
At location src/dfa.c:1997
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
position_set follows;

....
Skipping nonlast addifexit:Priority 4695
At location src/dfa.c:1997
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, s, d, ngrps, intersectf, matchesf, leftoversf, trans)))
    return;
position_set follows;

....
Skipping nonlast:Priority -304
At location src/dfa.c:1998
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
position_set tmp;

....
Skipping nonlast:Priority -304
At location src/dfa.c:1998
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
position_set tmp;

....
Skipping nonlast:Priority -304
At location src/dfa.c:1998
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
position_set tmp;

....
Skipping nonlast:Priority -304
At location src/dfa.c:1998
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
position_set tmp;

....
Skipping nonlast:Priority -304
At location src/dfa.c:1998
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
position_set tmp;

....
Skipping nonlast:Priority -304
At location src/dfa.c:1998
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
position_set tmp;

....
Skipping nonlast addifexit:Priority 4696
At location src/dfa.c:1998
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, s, d, ngrps, intersectf, matchesf, leftoversf, trans)))
    return;
position_set tmp;

....
Skipping nonlast:Priority -303
At location src/dfa.c:1999
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int state;

....
Skipping nonlast:Priority -303
At location src/dfa.c:1999
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int state;

....
Skipping nonlast:Priority -303
At location src/dfa.c:1999
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
int state;

....
Skipping nonlast:Priority -303
At location src/dfa.c:1999
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int state;

....
Skipping nonlast:Priority -303
At location src/dfa.c:1999
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int state;

....
Skipping nonlast:Priority -303
At location src/dfa.c:1999
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int state;

....
Skipping nonlast addifexit:Priority 4697
At location src/dfa.c:1999
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, s, d, ngrps, intersectf, matchesf, leftoversf, trans)))
    return;
int state;

....
Skipping nonlast:Priority -302
At location src/dfa.c:2000
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int wants_newline;

....
Skipping nonlast:Priority -302
At location src/dfa.c:2000
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int wants_newline;

....
Skipping nonlast:Priority -302
At location src/dfa.c:2000
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
int wants_newline;

....
Skipping nonlast:Priority -302
At location src/dfa.c:2000
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int wants_newline;

....
Skipping nonlast:Priority -302
At location src/dfa.c:2000
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int wants_newline;

....
Skipping nonlast:Priority -302
At location src/dfa.c:2000
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int wants_newline;

....
Skipping nonlast addifexit:Priority 4698
At location src/dfa.c:2000
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, s, d, ngrps, intersectf, matchesf, leftoversf, state, trans)))
    return;
int wants_newline;

....
Skipping nonlast:Priority -301
At location src/dfa.c:2001
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int state_newline;

....
Skipping nonlast:Priority -301
At location src/dfa.c:2001
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int state_newline;

....
Skipping nonlast:Priority -301
At location src/dfa.c:2001
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
int state_newline;

....
Skipping nonlast:Priority -301
At location src/dfa.c:2001
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int state_newline;

....
Skipping nonlast:Priority -301
At location src/dfa.c:2001
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int state_newline;

....
Skipping nonlast:Priority -301
At location src/dfa.c:2001
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int state_newline;

....
Skipping nonlast addifexit:Priority 4699
At location src/dfa.c:2001
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, s, d, ngrps, intersectf, matchesf, leftoversf, wants_newline, state, trans)))
    return;
int state_newline;

....
Skipping nonlast:Priority -300
At location src/dfa.c:2002
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int wants_letter;

....
Skipping nonlast:Priority -300
At location src/dfa.c:2002
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int wants_letter;

....
Skipping nonlast:Priority -300
At location src/dfa.c:2002
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
int wants_letter;

....
Skipping nonlast:Priority -300
At location src/dfa.c:2002
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int wants_letter;

....
Skipping nonlast:Priority -300
At location src/dfa.c:2002
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int wants_letter;

....
Skipping nonlast:Priority -300
At location src/dfa.c:2002
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int wants_letter;

....
Skipping nonlast addifexit:Priority 4700
At location src/dfa.c:2002
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, s, d, ngrps, intersectf, matchesf, leftoversf, wants_newline, state, state_newline, trans)))
    return;
int wants_letter;

....
Skipping nonlast:Priority -299
At location src/dfa.c:2003
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int state_letter;

....
Skipping nonlast:Priority -299
At location src/dfa.c:2003
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int state_letter;

....
Skipping nonlast:Priority -299
At location src/dfa.c:2003
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
int state_letter;

....
Skipping nonlast:Priority -299
At location src/dfa.c:2003
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int state_letter;

....
Skipping nonlast:Priority -299
At location src/dfa.c:2003
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int state_letter;

....
Skipping nonlast:Priority -299
At location src/dfa.c:2003
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int state_letter;

....
Skipping nonlast addifexit:Priority 4701
At location src/dfa.c:2003
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, s, d, ngrps, intersectf, matchesf, leftoversf, wants_newline, wants_letter, state, state_newline, trans)))
    return;
int state_letter;

....
Skipping nonlast:Priority -298
At location src/dfa.c:2004
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
static int initialized;

....
Skipping nonlast:Priority -298
At location src/dfa.c:2004
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
static int initialized;

....
Skipping nonlast:Priority -298
At location src/dfa.c:2004
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
static int initialized;

....
Skipping nonlast:Priority -298
At location src/dfa.c:2004
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
static int initialized;

....
Skipping nonlast:Priority -298
At location src/dfa.c:2004
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
static int initialized;

....
Skipping nonlast:Priority -298
At location src/dfa.c:2004
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
static int initialized;

....
Skipping nonlast addifexit:Priority 4702
At location src/dfa.c:2004
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, s, d, ngrps, intersectf, matchesf, leftoversf, wants_newline, wants_letter, state, state_newline, state_letter, trans)))
    return;
static int initialized;

....
Skipping nonlast:Priority -297
At location src/dfa.c:2006
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int next_isnt_1st_byte = 0;

....
Skipping nonlast:Priority -297
At location src/dfa.c:2006
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int next_isnt_1st_byte = 0;

....
Skipping nonlast:Priority -297
At location src/dfa.c:2006
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
int next_isnt_1st_byte = 0;

....
Skipping nonlast:Priority -297
At location src/dfa.c:2006
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int next_isnt_1st_byte = 0;

....
Skipping nonlast:Priority -297
At location src/dfa.c:2006
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int next_isnt_1st_byte = 0;

....
Skipping nonlast:Priority -297
At location src/dfa.c:2006
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int next_isnt_1st_byte = 0;

....
Skipping nonlast addifexit:Priority 4703
At location src/dfa.c:2006
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(initialized, eolbyte, s, d, ngrps, intersectf, matchesf, leftoversf, wants_newline, wants_letter, state, state_newline, state_letter, trans)))
    return;
int next_isnt_1st_byte = 0;

....
Skipping nonlast:Priority -296
At location src/dfa.c:2008
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int i, j, k;

....
Skipping nonlast:Priority -296
At location src/dfa.c:2008
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int i, j, k;

....
Skipping nonlast:Priority -296
At location src/dfa.c:2008
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
int i, j, k;

....
Skipping nonlast:Priority -296
At location src/dfa.c:2008
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int i, j, k;

....
Skipping nonlast:Priority -296
At location src/dfa.c:2008
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int i, j, k;

....
Skipping nonlast:Priority -296
At location src/dfa.c:2008
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int i, j, k;

....
Skipping nonlast addifexit:Priority 4704
At location src/dfa.c:2008
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(initialized, eolbyte, s, d, ngrps, intersectf, matchesf, leftoversf, wants_newline, wants_letter, state, state_newline, state_letter, trans, next_isnt_1st_byte)))
    return;
int i, j, k;

....
Skipping nonlast:Priority 7205
At location src/dfa.c:2011
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (!initialized) {
    initialized = 1;
    for (i = 0; i < (1 << 8); ++i) 
        if ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_'))
            setbit(i, letters);
    setbit(eolbyte, newline);
}

....
Skipping nonlast:Priority 7205
At location src/dfa.c:2011
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (!initialized) {
    initialized = 1;
    for (i = 0; i < (1 << 8); ++i) 
        if ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_'))
            setbit(i, letters);
    setbit(eolbyte, newline);
}

....
Skipping nonlast:Priority 7205
At location src/dfa.c:2011
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if (!initialized) {
    initialized = 1;
    for (i = 0; i < (1 << 8); ++i) 
        if ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_'))
            setbit(i, letters);
    setbit(eolbyte, newline);
}

....
Skipping nonlast:Priority 7205
At location src/dfa.c:2011
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (!initialized) {
    initialized = 1;
    for (i = 0; i < (1 << 8); ++i) 
        if ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_'))
            setbit(i, letters);
    setbit(eolbyte, newline);
}

....
Skipping nonlast:Priority 7205
At location src/dfa.c:2011
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (!initialized) {
    initialized = 1;
    for (i = 0; i < (1 << 8); ++i) 
        if ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_'))
            setbit(i, letters);
    setbit(eolbyte, newline);
}

....
Skipping nonlast:Priority 7205
At location src/dfa.c:2011
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (!initialized) {
    initialized = 1;
    for (i = 0; i < (1 << 8); ++i) 
        if ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_'))
            setbit(i, letters);
    setbit(eolbyte, newline);
}

....
Skipping nonlast addifexit:Priority 10955
At location src/dfa.c:2011
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(initialized, i, eolbyte, s, d, j, ngrps, intersectf, k, matchesf, leftoversf, wants_newline, wants_letter, state, state_newline, state_letter, trans, next_isnt_1st_byte)))
    return;
if (!initialized) {
    initialized = 1;
    for (i = 0; i < (1 << 8); ++i) 
        if ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_'))
            setbit(i, letters);
    setbit(eolbyte, newline);
}

....
Skipping nonlast:Priority 4706
At location src/dfa.c:2013
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
initialized = 1;

....
Skipping nonlast:Priority 4706
At location src/dfa.c:2013
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
initialized = 1;

....
Skipping nonlast:Priority 4706
At location src/dfa.c:2013
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
initialized = 1;

....
Skipping nonlast:Priority 4706
At location src/dfa.c:2013
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
initialized = 1;

....
Skipping nonlast:Priority 4706
At location src/dfa.c:2013
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
initialized = 1;

....
Skipping nonlast:Priority 4706
At location src/dfa.c:2013
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
initialized = 1;

....
Skipping nonlast addifexit:Priority 9706
At location src/dfa.c:2013
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(initialized, i, eolbyte, s, d, j, ngrps, intersectf, k, matchesf, leftoversf, wants_newline, wants_letter, state, state_newline, state_letter, trans, next_isnt_1st_byte)))
    return;
initialized = 1;

....
Skipping nonlast:Priority -293
At location src/dfa.c:2014
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
for (i = 0; i < (1 << 8); ++i) 
    if ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_'))
        setbit(i, letters);

....
Skipping nonlast:Priority -293
At location src/dfa.c:2014
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
for (i = 0; i < (1 << 8); ++i) 
    if ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_'))
        setbit(i, letters);

....
Skipping nonlast:Priority -293
At location src/dfa.c:2014
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
for (i = 0; i < (1 << 8); ++i) 
    if ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_'))
        setbit(i, letters);

....
Skipping nonlast:Priority -293
At location src/dfa.c:2014
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
for (i = 0; i < (1 << 8); ++i) 
    if ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_'))
        setbit(i, letters);

....
Skipping nonlast:Priority -293
At location src/dfa.c:2014
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
for (i = 0; i < (1 << 8); ++i) 
    if ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_'))
        setbit(i, letters);

....
Skipping nonlast:Priority -293
At location src/dfa.c:2014
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
for (i = 0; i < (1 << 8); ++i) 
    if ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_'))
        setbit(i, letters);

....
Skipping nonlast addifexit:Priority 4707
At location src/dfa.c:2014
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, initialized, eolbyte, s, d, j, ngrps, intersectf, k, matchesf, leftoversf, wants_newline, wants_letter, state, state_newline, state_letter, trans, next_isnt_1st_byte)))
    return;
for (i = 0; i < (1 << 8); ++i) 
    if ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_'))
        setbit(i, letters);

....
Skipping nonlast:Priority -292
At location src/dfa.c:2016
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    setbit(i, letters);
}

....
Skipping nonlast:Priority -292
At location src/dfa.c:2016
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    setbit(i, letters);
}

....
Skipping nonlast:Priority -292
At location src/dfa.c:2016
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        return lasttok = parse_bracket_exp_mb();
    }
    setbit(i, letters);
}

....
Skipping nonlast:Priority -292
At location src/dfa.c:2016
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    setbit(i, letters);
}

....
Skipping nonlast:Priority -292
At location src/dfa.c:2016
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    setbit(i, letters);
}

....
Skipping nonlast:Priority -292
At location src/dfa.c:2016
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    setbit(i, letters);
}

....
Skipping nonlast addifexit:Priority 4708
At location src/dfa.c:2016
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(i, eolbyte, initialized, s, d, j, ngrps, intersectf, k, matchesf, leftoversf, wants_newline, wants_letter, state, state_newline, state_letter, trans, next_isnt_1st_byte)))
        return;
    setbit(i, letters);
}

....
Skipping nonlast addifexit:Priority 4708
At location src/dfa.c:2016
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(i, eolbyte, initialized, s, d, j, ngrps, intersectf, k, matchesf, leftoversf, wants_newline, wants_letter, state, state_newline, state_letter, trans, next_isnt_1st_byte)))
        break;
    setbit(i, letters);
}

....
Skipping nonlast:Priority -289
At location src/dfa.c:2020
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
zeroset(matches);

....
Skipping nonlast:Priority -289
At location src/dfa.c:2020
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
zeroset(matches);

....
Skipping nonlast:Priority -289
At location src/dfa.c:2020
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
zeroset(matches);

....
Skipping nonlast:Priority -289
At location src/dfa.c:2020
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
zeroset(matches);

....
Skipping nonlast:Priority -289
At location src/dfa.c:2020
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
zeroset(matches);

....
Skipping nonlast:Priority -289
At location src/dfa.c:2020
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
zeroset(matches);

....
Skipping nonlast addifexit:Priority 4711
At location src/dfa.c:2020
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, d, i, eolbyte, initialized, j, ngrps, intersectf, k, matchesf, leftoversf, wants_newline, wants_letter, state, state_newline, state_letter, trans, next_isnt_1st_byte)))
    return;
zeroset(matches);

....
Skipping nonlast:Priority -288
At location src/dfa.c:2022
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
for (i = 0; i < d->states[s].elems.nelem; ++i) {
    pos = d->states[s].elems.elems[i];
    if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] < (1 << 8))
        setbit(d->tokens[pos.index], matches);
    else if (d->tokens[pos.index] >= CSET)
        copyset(d->charclasses[d->tokens[pos.index] - CSET], matches);
    else if (d->tokens[pos.index] == ANYCHAR || d->tokens[pos.index] == MBCSET) {
        if (d->states[s].mbps.nelem == 0) {
            ((d->states[s].mbps.elems) = xmalloc((d->states[s].elems.nelem) * sizeof(position)));
        }
        insert(pos, &(d->states[s].mbps));
        continue;
    } else
        continue;
    if (pos.constraint != 255) {
        if (!((pos.constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)))
            clrbit(eolbyte, matches);
        if (!((pos.constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)))
            for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
                matches[j] &= newline[j];
        if (!((pos.constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((1) ? 1 : 0))))
            for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
                matches[j] &= ~letters[j];
        if (!((pos.constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((0) ? 1 : 0))))
            for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
                matches[j] &= letters[j];
        for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))) && !matches[j]; ++j) 
            continue;
        if (j == (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))))
            continue;
    }
    for (j = 0; j < ngrps; ++j) {
        if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] < (1 << 8) && !tstbit(d->tokens[pos.index], labels[j]))
            continue;
        intersectf = 0;
        for (k = 0; k < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++k) 
            (intersect[k] = matches[k] & labels[j][k]) ? (intersectf = 1) : 0;
        if (!intersectf)
            continue;
        leftoversf = matchesf = 0;
        for (k = 0; k < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++k) {
            int match = matches[k], label = labels[j][k];
            (leftovers[k] = ~match & label) ? (leftoversf = 1) : 0;
            (matches[k] = match & ~label) ? (matchesf = 1) : 0;
        }
        if (leftoversf) {
            copyset(leftovers, labels[ngrps]);
            copyset(intersect, labels[j]);
            ((grps[ngrps].elems) = xmalloc((d->nleaves) * sizeof(position)));
            copy(&grps[j], &grps[ngrps]);
            ++ngrps;
        }
        grps[j].elems[grps[j].nelem++] = pos;
        if (!matchesf)
            break;
    }
    if (j == ngrps) {
        copyset(matches, labels[ngrps]);
        zeroset(matches);
        ((grps[ngrps].elems) = xmalloc((d->nleaves) * sizeof(position)));
        grps[ngrps].nelem = 1;
        grps[ngrps].elems[0] = pos;
        ++ngrps;
    }
}

....
Skipping nonlast:Priority -288
At location src/dfa.c:2022
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
for (i = 0; i < d->states[s].elems.nelem; ++i) {
    pos = d->states[s].elems.elems[i];
    if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] < (1 << 8))
        setbit(d->tokens[pos.index], matches);
    else if (d->tokens[pos.index] >= CSET)
        copyset(d->charclasses[d->tokens[pos.index] - CSET], matches);
    else if (d->tokens[pos.index] == ANYCHAR || d->tokens[pos.index] == MBCSET) {
        if (d->states[s].mbps.nelem == 0) {
            ((d->states[s].mbps.elems) = xmalloc((d->states[s].elems.nelem) * sizeof(position)));
        }
        insert(pos, &(d->states[s].mbps));
        continue;
    } else
        continue;
    if (pos.constraint != 255) {
        if (!((pos.constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)))
            clrbit(eolbyte, matches);
        if (!((pos.constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)))
            for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
                matches[j] &= newline[j];
        if (!((pos.constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((1) ? 1 : 0))))
            for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
                matches[j] &= ~letters[j];
        if (!((pos.constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((0) ? 1 : 0))))
            for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
                matches[j] &= letters[j];
        for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))) && !matches[j]; ++j) 
            continue;
        if (j == (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))))
            continue;
    }
    for (j = 0; j < ngrps; ++j) {
        if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] < (1 << 8) && !tstbit(d->tokens[pos.index], labels[j]))
            continue;
        intersectf = 0;
        for (k = 0; k < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++k) 
            (intersect[k] = matches[k] & labels[j][k]) ? (intersectf = 1) : 0;
        if (!intersectf)
            continue;
        leftoversf = matchesf = 0;
        for (k = 0; k < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++k) {
            int match = matches[k], label = labels[j][k];
            (leftovers[k] = ~match & label) ? (leftoversf = 1) : 0;
            (matches[k] = match & ~label) ? (matchesf = 1) : 0;
        }
        if (leftoversf) {
            copyset(leftovers, labels[ngrps]);
            copyset(intersect, labels[j]);
            ((grps[ngrps].elems) = xmalloc((d->nleaves) * sizeof(position)));
            copy(&grps[j], &grps[ngrps]);
            ++ngrps;
        }
        grps[j].elems[grps[j].nelem++] = pos;
        if (!matchesf)
            break;
    }
    if (j == ngrps) {
        copyset(matches, labels[ngrps]);
        zeroset(matches);
        ((grps[ngrps].elems) = xmalloc((d->nleaves) * sizeof(position)));
        grps[ngrps].nelem = 1;
        grps[ngrps].elems[0] = pos;
        ++ngrps;
    }
}

....
Skipping nonlast:Priority -288
At location src/dfa.c:2022
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
for (i = 0; i < d->states[s].elems.nelem; ++i) {
    pos = d->states[s].elems.elems[i];
    if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] < (1 << 8))
        setbit(d->tokens[pos.index], matches);
    else if (d->tokens[pos.index] >= CSET)
        copyset(d->charclasses[d->tokens[pos.index] - CSET], matches);
    else if (d->tokens[pos.index] == ANYCHAR || d->tokens[pos.index] == MBCSET) {
        if (d->states[s].mbps.nelem == 0) {
            ((d->states[s].mbps.elems) = xmalloc((d->states[s].elems.nelem) * sizeof(position)));
        }
        insert(pos, &(d->states[s].mbps));
        continue;
    } else
        continue;
    if (pos.constraint != 255) {
        if (!((pos.constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)))
            clrbit(eolbyte, matches);
        if (!((pos.constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)))
            for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
                matches[j] &= newline[j];
        if (!((pos.constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((1) ? 1 : 0))))
            for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
                matches[j] &= ~letters[j];
        if (!((pos.constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((0) ? 1 : 0))))
            for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
                matches[j] &= letters[j];
        for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))) && !matches[j]; ++j) 
            continue;
        if (j == (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))))
            continue;
    }
    for (j = 0; j < ngrps; ++j) {
        if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] < (1 << 8) && !tstbit(d->tokens[pos.index], labels[j]))
            continue;
        intersectf = 0;
        for (k = 0; k < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++k) 
            (intersect[k] = matches[k] & labels[j][k]) ? (intersectf = 1) : 0;
        if (!intersectf)
            continue;
        leftoversf = matchesf = 0;
        for (k = 0; k < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++k) {
            int match = matches[k], label = labels[j][k];
            (leftovers[k] = ~match & label) ? (leftoversf = 1) : 0;
            (matches[k] = match & ~label) ? (matchesf = 1) : 0;
        }
        if (leftoversf) {
            copyset(leftovers, labels[ngrps]);
            copyset(intersect, labels[j]);
            ((grps[ngrps].elems) = xmalloc((d->nleaves) * sizeof(position)));
            copy(&grps[j], &grps[ngrps]);
            ++ngrps;
        }
        grps[j].elems[grps[j].nelem++] = pos;
        if (!matchesf)
            break;
    }
    if (j == ngrps) {
        copyset(matches, labels[ngrps]);
        zeroset(matches);
        ((grps[ngrps].elems) = xmalloc((d->nleaves) * sizeof(position)));
        grps[ngrps].nelem = 1;
        grps[ngrps].elems[0] = pos;
        ++ngrps;
    }
}

....
Skipping nonlast:Priority -288
At location src/dfa.c:2022
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
for (i = 0; i < d->states[s].elems.nelem; ++i) {
    pos = d->states[s].elems.elems[i];
    if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] < (1 << 8))
        setbit(d->tokens[pos.index], matches);
    else if (d->tokens[pos.index] >= CSET)
        copyset(d->charclasses[d->tokens[pos.index] - CSET], matches);
    else if (d->tokens[pos.index] == ANYCHAR || d->tokens[pos.index] == MBCSET) {
        if (d->states[s].mbps.nelem == 0) {
            ((d->states[s].mbps.elems) = xmalloc((d->states[s].elems.nelem) * sizeof(position)));
        }
        insert(pos, &(d->states[s].mbps));
        continue;
    } else
        continue;
    if (pos.constraint != 255) {
        if (!((pos.constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)))
            clrbit(eolbyte, matches);
        if (!((pos.constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)))
            for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
                matches[j] &= newline[j];
        if (!((pos.constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((1) ? 1 : 0))))
            for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
                matches[j] &= ~letters[j];
        if (!((pos.constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((0) ? 1 : 0))))
            for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
                matches[j] &= letters[j];
        for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))) && !matches[j]; ++j) 
            continue;
        if (j == (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))))
            continue;
    }
    for (j = 0; j < ngrps; ++j) {
        if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] < (1 << 8) && !tstbit(d->tokens[pos.index], labels[j]))
            continue;
        intersectf = 0;
        for (k = 0; k < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++k) 
            (intersect[k] = matches[k] & labels[j][k]) ? (intersectf = 1) : 0;
        if (!intersectf)
            continue;
        leftoversf = matchesf = 0;
        for (k = 0; k < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++k) {
            int match = matches[k], label = labels[j][k];
            (leftovers[k] = ~match & label) ? (leftoversf = 1) : 0;
            (matches[k] = match & ~label) ? (matchesf = 1) : 0;
        }
        if (leftoversf) {
            copyset(leftovers, labels[ngrps]);
            copyset(intersect, labels[j]);
            ((grps[ngrps].elems) = xmalloc((d->nleaves) * sizeof(position)));
            copy(&grps[j], &grps[ngrps]);
            ++ngrps;
        }
        grps[j].elems[grps[j].nelem++] = pos;
        if (!matchesf)
            break;
    }
    if (j == ngrps) {
        copyset(matches, labels[ngrps]);
        zeroset(matches);
        ((grps[ngrps].elems) = xmalloc((d->nleaves) * sizeof(position)));
        grps[ngrps].nelem = 1;
        grps[ngrps].elems[0] = pos;
        ++ngrps;
    }
}

....
Skipping nonlast:Priority -288
At location src/dfa.c:2022
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
for (i = 0; i < d->states[s].elems.nelem; ++i) {
    pos = d->states[s].elems.elems[i];
    if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] < (1 << 8))
        setbit(d->tokens[pos.index], matches);
    else if (d->tokens[pos.index] >= CSET)
        copyset(d->charclasses[d->tokens[pos.index] - CSET], matches);
    else if (d->tokens[pos.index] == ANYCHAR || d->tokens[pos.index] == MBCSET) {
        if (d->states[s].mbps.nelem == 0) {
            ((d->states[s].mbps.elems) = xmalloc((d->states[s].elems.nelem) * sizeof(position)));
        }
        insert(pos, &(d->states[s].mbps));
        continue;
    } else
        continue;
    if (pos.constraint != 255) {
        if (!((pos.constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)))
            clrbit(eolbyte, matches);
        if (!((pos.constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)))
            for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
                matches[j] &= newline[j];
        if (!((pos.constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((1) ? 1 : 0))))
            for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
                matches[j] &= ~letters[j];
        if (!((pos.constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((0) ? 1 : 0))))
            for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
                matches[j] &= letters[j];
        for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))) && !matches[j]; ++j) 
            continue;
        if (j == (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))))
            continue;
    }
    for (j = 0; j < ngrps; ++j) {
        if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] < (1 << 8) && !tstbit(d->tokens[pos.index], labels[j]))
            continue;
        intersectf = 0;
        for (k = 0; k < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++k) 
            (intersect[k] = matches[k] & labels[j][k]) ? (intersectf = 1) : 0;
        if (!intersectf)
            continue;
        leftoversf = matchesf = 0;
        for (k = 0; k < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++k) {
            int match = matches[k], label = labels[j][k];
            (leftovers[k] = ~match & label) ? (leftoversf = 1) : 0;
            (matches[k] = match & ~label) ? (matchesf = 1) : 0;
        }
        if (leftoversf) {
            copyset(leftovers, labels[ngrps]);
            copyset(intersect, labels[j]);
            ((grps[ngrps].elems) = xmalloc((d->nleaves) * sizeof(position)));
            copy(&grps[j], &grps[ngrps]);
            ++ngrps;
        }
        grps[j].elems[grps[j].nelem++] = pos;
        if (!matchesf)
            break;
    }
    if (j == ngrps) {
        copyset(matches, labels[ngrps]);
        zeroset(matches);
        ((grps[ngrps].elems) = xmalloc((d->nleaves) * sizeof(position)));
        grps[ngrps].nelem = 1;
        grps[ngrps].elems[0] = pos;
        ++ngrps;
    }
}

....
Skipping nonlast:Priority -288
At location src/dfa.c:2022
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
for (i = 0; i < d->states[s].elems.nelem; ++i) {
    pos = d->states[s].elems.elems[i];
    if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] < (1 << 8))
        setbit(d->tokens[pos.index], matches);
    else if (d->tokens[pos.index] >= CSET)
        copyset(d->charclasses[d->tokens[pos.index] - CSET], matches);
    else if (d->tokens[pos.index] == ANYCHAR || d->tokens[pos.index] == MBCSET) {
        if (d->states[s].mbps.nelem == 0) {
            ((d->states[s].mbps.elems) = xmalloc((d->states[s].elems.nelem) * sizeof(position)));
        }
        insert(pos, &(d->states[s].mbps));
        continue;
    } else
        continue;
    if (pos.constraint != 255) {
        if (!((pos.constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)))
            clrbit(eolbyte, matches);
        if (!((pos.constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)))
            for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
                matches[j] &= newline[j];
        if (!((pos.constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((1) ? 1 : 0))))
            for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
                matches[j] &= ~letters[j];
        if (!((pos.constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((0) ? 1 : 0))))
            for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
                matches[j] &= letters[j];
        for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))) && !matches[j]; ++j) 
            continue;
        if (j == (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))))
            continue;
    }
    for (j = 0; j < ngrps; ++j) {
        if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] < (1 << 8) && !tstbit(d->tokens[pos.index], labels[j]))
            continue;
        intersectf = 0;
        for (k = 0; k < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++k) 
            (intersect[k] = matches[k] & labels[j][k]) ? (intersectf = 1) : 0;
        if (!intersectf)
            continue;
        leftoversf = matchesf = 0;
        for (k = 0; k < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++k) {
            int match = matches[k], label = labels[j][k];
            (leftovers[k] = ~match & label) ? (leftoversf = 1) : 0;
            (matches[k] = match & ~label) ? (matchesf = 1) : 0;
        }
        if (leftoversf) {
            copyset(leftovers, labels[ngrps]);
            copyset(intersect, labels[j]);
            ((grps[ngrps].elems) = xmalloc((d->nleaves) * sizeof(position)));
            copy(&grps[j], &grps[ngrps]);
            ++ngrps;
        }
        grps[j].elems[grps[j].nelem++] = pos;
        if (!matchesf)
            break;
    }
    if (j == ngrps) {
        copyset(matches, labels[ngrps]);
        zeroset(matches);
        ((grps[ngrps].elems) = xmalloc((d->nleaves) * sizeof(position)));
        grps[ngrps].nelem = 1;
        grps[ngrps].elems[0] = pos;
        ++ngrps;
    }
}

....
Skipping nonlast addifexit:Priority 4712
At location src/dfa.c:2022
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, d, i, d->states[s].elems.nelem, d->states, d->states[s].elems.elems, d->tokens, eolbyte, d->charclasses, initialized, d->states[s].newline, j, d->states[s].letter, ngrps, intersectf, k, matchesf, leftoversf, d->nleaves, d->searchflag, wants_newline, wants_letter, state, state_newline, state_letter, trans, d->follows, next_isnt_1st_byte, d->multibyte_prop, d->states[s].hash, d->states[s].backref, d->states[s].constraint, d->states[s].first_end, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
for (i = 0; i < d->states[s].elems.nelem; ++i) {
    pos = d->states[s].elems.elems[i];
    if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] < (1 << 8))
        setbit(d->tokens[pos.index], matches);
    else if (d->tokens[pos.index] >= CSET)
        copyset(d->charclasses[d->tokens[pos.index] - CSET], matches);
    else if (d->tokens[pos.index] == ANYCHAR || d->tokens[pos.index] == MBCSET) {
        if (d->states[s].mbps.nelem == 0) {
            ((d->states[s].mbps.elems) = xmalloc((d->states[s].elems.nelem) * sizeof(position)));
        }
        insert(pos, &(d->states[s].mbps));
        continue;
    } else
        continue;
    if (pos.constraint != 255) {
        if (!((pos.constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)))
            clrbit(eolbyte, matches);
        if (!((pos.constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)))
            for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
                matches[j] &= newline[j];
        if (!((pos.constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((1) ? 1 : 0))))
            for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
                matches[j] &= ~letters[j];
        if (!((pos.constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((0) ? 1 : 0))))
            for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
                matches[j] &= letters[j];
        for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))) && !matches[j]; ++j) 
            continue;
        if (j == (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))))
            continue;
    }
    for (j = 0; j < ngrps; ++j) {
        if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] < (1 << 8) && !tstbit(d->tokens[pos.index], labels[j]))
            continue;
        intersectf = 0;
        for (k = 0; k < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++k) 
            (intersect[k] = matches[k] & labels[j][k]) ? (intersectf = 1) : 0;
        if (!intersectf)
            continue;
        leftoversf = matchesf = 0;
        for (k = 0; k < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++k) {
            int match = matches[k], label = labels[j][k];
            (leftovers[k] = ~match & label) ? (leftoversf = 1) : 0;
            (matches[k] = match & ~label) ? (matchesf = 1) : 0;
        }
        if (leftoversf) {
            copyset(leftovers, labels[ngrps]);
            copyset(intersect, labels[j]);
            ((grps[ngrps].elems) = xmalloc((d->nleaves) * sizeof(position)));
            copy(&grps[j], &grps[ngrps]);
            ++ngrps;
        }
        grps[j].elems[grps[j].nelem++] = pos;
        if (!matchesf)
            break;
    }
    if (j == ngrps) {
        copyset(matches, labels[ngrps]);
        zeroset(matches);
        ((grps[ngrps].elems) = xmalloc((d->nleaves) * sizeof(position)));
        grps[ngrps].nelem = 1;
        grps[ngrps].elems[0] = pos;
        ++ngrps;
    }
}

....
Skipping nonlast:Priority 4713
At location src/dfa.c:2024
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
pos = d->states[s].elems.elems[i];

....
Skipping nonlast:Priority 4713
At location src/dfa.c:2024
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
pos = d->states[s].elems.elems[i];

....
Skipping nonlast:Priority 4713
At location src/dfa.c:2024
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
pos = d->states[s].elems.elems[i];

....
Skipping nonlast:Priority 4713
At location src/dfa.c:2024
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
pos = d->states[s].elems.elems[i];

....
Skipping nonlast:Priority 4713
At location src/dfa.c:2024
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
pos = d->states[s].elems.elems[i];

....
Skipping nonlast:Priority 4713
At location src/dfa.c:2024
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
pos = d->states[s].elems.elems[i];

....
Skipping nonlast addifexit:Priority 9713
At location src/dfa.c:2024
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, d, i, d->states[s].elems.elems, d->states, pos.index, d->tokens, d->states[s].elems.nelem, d->charclasses, eolbyte, initialized, pos.constraint, d->states[s].newline, j, d->states[s].letter, ngrps, intersectf, k, matchesf, leftoversf, d->nleaves, d->searchflag, wants_newline, wants_letter, state, state_newline, state_letter, trans, d->follows, next_isnt_1st_byte, d->multibyte_prop, d->states[s].hash, d->states[s].backref, d->states[s].constraint, d->states[s].first_end, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
pos = d->states[s].elems.elems[i];

....
Skipping nonlast addifexit:Priority 9713
At location src/dfa.c:2024
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, d, i, d->states[s].elems.elems, d->states, pos.index, d->tokens, d->states[s].elems.nelem, d->charclasses, eolbyte, initialized, pos.constraint, d->states[s].newline, j, d->states[s].letter, ngrps, intersectf, k, matchesf, leftoversf, d->nleaves, d->searchflag, wants_newline, wants_letter, state, state_newline, state_letter, trans, d->follows, next_isnt_1st_byte, d->multibyte_prop, d->states[s].hash, d->states[s].backref, d->states[s].constraint, d->states[s].first_end, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    break;
pos = d->states[s].elems.elems[i];

....
Skipping nonlast:Priority -286
At location src/dfa.c:2025
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] < (1 << 8))
    setbit(d->tokens[pos.index], matches);
else if (d->tokens[pos.index] >= CSET)
    copyset(d->charclasses[d->tokens[pos.index] - CSET], matches);
else if (d->tokens[pos.index] == ANYCHAR || d->tokens[pos.index] == MBCSET) {
    if (d->states[s].mbps.nelem == 0) {
        ((d->states[s].mbps.elems) = xmalloc((d->states[s].elems.nelem) * sizeof(position)));
    }
    insert(pos, &(d->states[s].mbps));
    continue;
} else
    continue;

....
Skipping nonlast:Priority -286
At location src/dfa.c:2025
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] < (1 << 8))
    setbit(d->tokens[pos.index], matches);
else if (d->tokens[pos.index] >= CSET)
    copyset(d->charclasses[d->tokens[pos.index] - CSET], matches);
else if (d->tokens[pos.index] == ANYCHAR || d->tokens[pos.index] == MBCSET) {
    if (d->states[s].mbps.nelem == 0) {
        ((d->states[s].mbps.elems) = xmalloc((d->states[s].elems.nelem) * sizeof(position)));
    }
    insert(pos, &(d->states[s].mbps));
    continue;
} else
    continue;

....
Skipping nonlast:Priority -286
At location src/dfa.c:2025
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] < (1 << 8))
    setbit(d->tokens[pos.index], matches);
else if (d->tokens[pos.index] >= CSET)
    copyset(d->charclasses[d->tokens[pos.index] - CSET], matches);
else if (d->tokens[pos.index] == ANYCHAR || d->tokens[pos.index] == MBCSET) {
    if (d->states[s].mbps.nelem == 0) {
        ((d->states[s].mbps.elems) = xmalloc((d->states[s].elems.nelem) * sizeof(position)));
    }
    insert(pos, &(d->states[s].mbps));
    continue;
} else
    continue;

....
Skipping nonlast:Priority -286
At location src/dfa.c:2025
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] < (1 << 8))
    setbit(d->tokens[pos.index], matches);
else if (d->tokens[pos.index] >= CSET)
    copyset(d->charclasses[d->tokens[pos.index] - CSET], matches);
else if (d->tokens[pos.index] == ANYCHAR || d->tokens[pos.index] == MBCSET) {
    if (d->states[s].mbps.nelem == 0) {
        ((d->states[s].mbps.elems) = xmalloc((d->states[s].elems.nelem) * sizeof(position)));
    }
    insert(pos, &(d->states[s].mbps));
    continue;
} else
    continue;

....
Skipping nonlast:Priority -286
At location src/dfa.c:2025
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] < (1 << 8))
    setbit(d->tokens[pos.index], matches);
else if (d->tokens[pos.index] >= CSET)
    copyset(d->charclasses[d->tokens[pos.index] - CSET], matches);
else if (d->tokens[pos.index] == ANYCHAR || d->tokens[pos.index] == MBCSET) {
    if (d->states[s].mbps.nelem == 0) {
        ((d->states[s].mbps.elems) = xmalloc((d->states[s].elems.nelem) * sizeof(position)));
    }
    insert(pos, &(d->states[s].mbps));
    continue;
} else
    continue;

....
Skipping nonlast:Priority -286
At location src/dfa.c:2025
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] < (1 << 8))
    setbit(d->tokens[pos.index], matches);
else if (d->tokens[pos.index] >= CSET)
    copyset(d->charclasses[d->tokens[pos.index] - CSET], matches);
else if (d->tokens[pos.index] == ANYCHAR || d->tokens[pos.index] == MBCSET) {
    if (d->states[s].mbps.nelem == 0) {
        ((d->states[s].mbps.elems) = xmalloc((d->states[s].elems.nelem) * sizeof(position)));
    }
    insert(pos, &(d->states[s].mbps));
    continue;
} else
    continue;

....
Skipping nonlast addifexit:Priority 3464
At location src/dfa.c:2025
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, pos.index, d->tokens, s, i, d->states[s].elems.elems, d->states, d->states[s].elems.nelem, d->charclasses, eolbyte, initialized, pos.constraint, d->states[s].newline, j, d->states[s].letter, ngrps, intersectf, k, matchesf, leftoversf, d->nleaves, d->searchflag, wants_newline, wants_letter, state, state_newline, state_letter, trans, d->follows, next_isnt_1st_byte, d->multibyte_prop, d->states[s].hash, d->states[s].backref, d->states[s].constraint, d->states[s].first_end, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] < (1 << 8))
    setbit(d->tokens[pos.index], matches);
else if (d->tokens[pos.index] >= CSET)
    copyset(d->charclasses[d->tokens[pos.index] - CSET], matches);
else if (d->tokens[pos.index] == ANYCHAR || d->tokens[pos.index] == MBCSET) {
    if (d->states[s].mbps.nelem == 0) {
        ((d->states[s].mbps.elems) = xmalloc((d->states[s].elems.nelem) * sizeof(position)));
    }
    insert(pos, &(d->states[s].mbps));
    continue;
} else
    continue;

....
Skipping nonlast addifexit:Priority 3464
At location src/dfa.c:2025
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, pos.index, d->tokens, s, i, d->states[s].elems.elems, d->states, d->states[s].elems.nelem, d->charclasses, eolbyte, initialized, pos.constraint, d->states[s].newline, j, d->states[s].letter, ngrps, intersectf, k, matchesf, leftoversf, d->nleaves, d->searchflag, wants_newline, wants_letter, state, state_newline, state_letter, trans, d->follows, next_isnt_1st_byte, d->multibyte_prop, d->states[s].hash, d->states[s].backref, d->states[s].constraint, d->states[s].first_end, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    break;
if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] < (1 << 8))
    setbit(d->tokens[pos.index], matches);
else if (d->tokens[pos.index] >= CSET)
    copyset(d->charclasses[d->tokens[pos.index] - CSET], matches);
else if (d->tokens[pos.index] == ANYCHAR || d->tokens[pos.index] == MBCSET) {
    if (d->states[s].mbps.nelem == 0) {
        ((d->states[s].mbps.elems) = xmalloc((d->states[s].elems.nelem) * sizeof(position)));
    }
    insert(pos, &(d->states[s].mbps));
    continue;
} else
    continue;

....
Skipping nonlast:Priority -285
At location src/dfa.c:2027
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    if (d->tokens[pos.index] >= CSET)
        copyset(d->charclasses[d->tokens[pos.index] - CSET], matches);
    else if (d->tokens[pos.index] == ANYCHAR || d->tokens[pos.index] == MBCSET) {
        if (d->states[s].mbps.nelem == 0) {
            ((d->states[s].mbps.elems) = xmalloc((d->states[s].elems.nelem) * sizeof(position)));
        }
        insert(pos, &(d->states[s].mbps));
        continue;
    } else
        continue;
}

....
Skipping nonlast:Priority -285
At location src/dfa.c:2027
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    if (d->tokens[pos.index] >= CSET)
        copyset(d->charclasses[d->tokens[pos.index] - CSET], matches);
    else if (d->tokens[pos.index] == ANYCHAR || d->tokens[pos.index] == MBCSET) {
        if (d->states[s].mbps.nelem == 0) {
            ((d->states[s].mbps.elems) = xmalloc((d->states[s].elems.nelem) * sizeof(position)));
        }
        insert(pos, &(d->states[s].mbps));
        continue;
    } else
        continue;
}

....
Skipping nonlast:Priority -285
At location src/dfa.c:2027
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        return lasttok = parse_bracket_exp_mb();
    }
    if (d->tokens[pos.index] >= CSET)
        copyset(d->charclasses[d->tokens[pos.index] - CSET], matches);
    else if (d->tokens[pos.index] == ANYCHAR || d->tokens[pos.index] == MBCSET) {
        if (d->states[s].mbps.nelem == 0) {
            ((d->states[s].mbps.elems) = xmalloc((d->states[s].elems.nelem) * sizeof(position)));
        }
        insert(pos, &(d->states[s].mbps));
        continue;
    } else
        continue;
}

....
Skipping nonlast:Priority -285
At location src/dfa.c:2027
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    if (d->tokens[pos.index] >= CSET)
        copyset(d->charclasses[d->tokens[pos.index] - CSET], matches);
    else if (d->tokens[pos.index] == ANYCHAR || d->tokens[pos.index] == MBCSET) {
        if (d->states[s].mbps.nelem == 0) {
            ((d->states[s].mbps.elems) = xmalloc((d->states[s].elems.nelem) * sizeof(position)));
        }
        insert(pos, &(d->states[s].mbps));
        continue;
    } else
        continue;
}

....
Skipping nonlast:Priority -285
At location src/dfa.c:2027
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    if (d->tokens[pos.index] >= CSET)
        copyset(d->charclasses[d->tokens[pos.index] - CSET], matches);
    else if (d->tokens[pos.index] == ANYCHAR || d->tokens[pos.index] == MBCSET) {
        if (d->states[s].mbps.nelem == 0) {
            ((d->states[s].mbps.elems) = xmalloc((d->states[s].elems.nelem) * sizeof(position)));
        }
        insert(pos, &(d->states[s].mbps));
        continue;
    } else
        continue;
}

....
Skipping nonlast:Priority -285
At location src/dfa.c:2027
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    if (d->tokens[pos.index] >= CSET)
        copyset(d->charclasses[d->tokens[pos.index] - CSET], matches);
    else if (d->tokens[pos.index] == ANYCHAR || d->tokens[pos.index] == MBCSET) {
        if (d->states[s].mbps.nelem == 0) {
            ((d->states[s].mbps.elems) = xmalloc((d->states[s].elems.nelem) * sizeof(position)));
        }
        insert(pos, &(d->states[s].mbps));
        continue;
    } else
        continue;
}

....
Skipping nonlast addifexit:Priority 3465
At location src/dfa.c:2027
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(d, pos.index, d->tokens, d->charclasses, s, i, d->states, eolbyte, initialized, pos.constraint, j, ngrps, intersectf, k, matchesf, leftoversf, d->nleaves, d->searchflag, wants_newline, wants_letter, state, state_newline, state_letter, trans, d->follows, next_isnt_1st_byte, d->multibyte_prop, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
        return;
    if (d->tokens[pos.index] >= CSET)
        copyset(d->charclasses[d->tokens[pos.index] - CSET], matches);
    else if (d->tokens[pos.index] == ANYCHAR || d->tokens[pos.index] == MBCSET) {
        if (d->states[s].mbps.nelem == 0) {
            ((d->states[s].mbps.elems) = xmalloc((d->states[s].elems.nelem) * sizeof(position)));
        }
        insert(pos, &(d->states[s].mbps));
        continue;
    } else
        continue;
}

....
Skipping nonlast addifexit:Priority 3465
At location src/dfa.c:2027
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(d, pos.index, d->tokens, d->charclasses, s, i, d->states, eolbyte, initialized, pos.constraint, j, ngrps, intersectf, k, matchesf, leftoversf, d->nleaves, d->searchflag, wants_newline, wants_letter, state, state_newline, state_letter, trans, d->follows, next_isnt_1st_byte, d->multibyte_prop, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
        break;
    if (d->tokens[pos.index] >= CSET)
        copyset(d->charclasses[d->tokens[pos.index] - CSET], matches);
    else if (d->tokens[pos.index] == ANYCHAR || d->tokens[pos.index] == MBCSET) {
        if (d->states[s].mbps.nelem == 0) {
            ((d->states[s].mbps.elems) = xmalloc((d->states[s].elems.nelem) * sizeof(position)));
        }
        insert(pos, &(d->states[s].mbps));
        continue;
    } else
        continue;
}

....
Skipping nonlast:Priority -284
At location src/dfa.c:2028
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    copyset(d->charclasses[d->tokens[pos.index] - CSET], matches);
}

....
Skipping nonlast:Priority -284
At location src/dfa.c:2028
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    copyset(d->charclasses[d->tokens[pos.index] - CSET], matches);
}

....
Skipping nonlast:Priority -284
At location src/dfa.c:2028
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        return lasttok = parse_bracket_exp_mb();
    }
    copyset(d->charclasses[d->tokens[pos.index] - CSET], matches);
}

....
Skipping nonlast:Priority -284
At location src/dfa.c:2028
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    copyset(d->charclasses[d->tokens[pos.index] - CSET], matches);
}

....
Skipping nonlast:Priority -284
At location src/dfa.c:2028
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    copyset(d->charclasses[d->tokens[pos.index] - CSET], matches);
}

....
Skipping nonlast:Priority -284
At location src/dfa.c:2028
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    copyset(d->charclasses[d->tokens[pos.index] - CSET], matches);
}

....
Skipping nonlast addifexit:Priority 4716
At location src/dfa.c:2028
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(d, pos.index, d->charclasses, d->tokens, s, i, d->states, eolbyte, initialized, pos.constraint, j, ngrps, intersectf, k, matchesf, leftoversf, d->nleaves, d->searchflag, wants_newline, wants_letter, state, state_newline, state_letter, trans, d->follows, next_isnt_1st_byte, d->multibyte_prop, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
        return;
    copyset(d->charclasses[d->tokens[pos.index] - CSET], matches);
}

....
Skipping nonlast addifexit:Priority 4716
At location src/dfa.c:2028
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(d, pos.index, d->charclasses, d->tokens, s, i, d->states, eolbyte, initialized, pos.constraint, j, ngrps, intersectf, k, matchesf, leftoversf, d->nleaves, d->searchflag, wants_newline, wants_letter, state, state_newline, state_letter, trans, d->follows, next_isnt_1st_byte, d->multibyte_prop, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
        break;
    copyset(d->charclasses[d->tokens[pos.index] - CSET], matches);
}

....
Skipping nonlast:Priority -283
At location src/dfa.c:2051
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (pos.constraint != 255) {
    if (!((pos.constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)))
        clrbit(eolbyte, matches);
    if (!((pos.constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)))
        for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
            matches[j] &= newline[j];
    if (!((pos.constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((1) ? 1 : 0))))
        for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
            matches[j] &= ~letters[j];
    if (!((pos.constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((0) ? 1 : 0))))
        for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
            matches[j] &= letters[j];
    for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))) && !matches[j]; ++j) 
        continue;
    if (j == (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))))
        continue;
}

....
Skipping nonlast:Priority -283
At location src/dfa.c:2051
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (pos.constraint != 255) {
    if (!((pos.constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)))
        clrbit(eolbyte, matches);
    if (!((pos.constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)))
        for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
            matches[j] &= newline[j];
    if (!((pos.constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((1) ? 1 : 0))))
        for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
            matches[j] &= ~letters[j];
    if (!((pos.constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((0) ? 1 : 0))))
        for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
            matches[j] &= letters[j];
    for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))) && !matches[j]; ++j) 
        continue;
    if (j == (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))))
        continue;
}

....
Skipping nonlast:Priority -283
At location src/dfa.c:2051
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if (pos.constraint != 255) {
    if (!((pos.constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)))
        clrbit(eolbyte, matches);
    if (!((pos.constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)))
        for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
            matches[j] &= newline[j];
    if (!((pos.constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((1) ? 1 : 0))))
        for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
            matches[j] &= ~letters[j];
    if (!((pos.constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((0) ? 1 : 0))))
        for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
            matches[j] &= letters[j];
    for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))) && !matches[j]; ++j) 
        continue;
    if (j == (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))))
        continue;
}

....
Skipping nonlast:Priority -283
At location src/dfa.c:2051
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (pos.constraint != 255) {
    if (!((pos.constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)))
        clrbit(eolbyte, matches);
    if (!((pos.constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)))
        for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
            matches[j] &= newline[j];
    if (!((pos.constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((1) ? 1 : 0))))
        for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
            matches[j] &= ~letters[j];
    if (!((pos.constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((0) ? 1 : 0))))
        for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
            matches[j] &= letters[j];
    for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))) && !matches[j]; ++j) 
        continue;
    if (j == (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))))
        continue;
}

....
Skipping nonlast:Priority -283
At location src/dfa.c:2051
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (pos.constraint != 255) {
    if (!((pos.constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)))
        clrbit(eolbyte, matches);
    if (!((pos.constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)))
        for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
            matches[j] &= newline[j];
    if (!((pos.constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((1) ? 1 : 0))))
        for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
            matches[j] &= ~letters[j];
    if (!((pos.constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((0) ? 1 : 0))))
        for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
            matches[j] &= letters[j];
    for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))) && !matches[j]; ++j) 
        continue;
    if (j == (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))))
        continue;
}

....
Skipping nonlast:Priority -283
At location src/dfa.c:2051
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (pos.constraint != 255) {
    if (!((pos.constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)))
        clrbit(eolbyte, matches);
    if (!((pos.constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)))
        for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
            matches[j] &= newline[j];
    if (!((pos.constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((1) ? 1 : 0))))
        for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
            matches[j] &= ~letters[j];
    if (!((pos.constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((0) ? 1 : 0))))
        for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
            matches[j] &= letters[j];
    for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))) && !matches[j]; ++j) 
        continue;
    if (j == (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))))
        continue;
}

....
Skipping nonlast addifexit:Priority 3467
At location src/dfa.c:2051
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(pos.constraint, s, d, eolbyte, j, pos.index, ngrps, i, intersectf, k, initialized, matchesf, leftoversf, wants_newline, wants_letter, state, state_newline, state_letter, trans, next_isnt_1st_byte)))
    return;
if (pos.constraint != 255) {
    if (!((pos.constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)))
        clrbit(eolbyte, matches);
    if (!((pos.constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)))
        for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
            matches[j] &= newline[j];
    if (!((pos.constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((1) ? 1 : 0))))
        for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
            matches[j] &= ~letters[j];
    if (!((pos.constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((0) ? 1 : 0))))
        for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
            matches[j] &= letters[j];
    for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))) && !matches[j]; ++j) 
        continue;
    if (j == (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))))
        continue;
}

....
Skipping nonlast addifexit:Priority 3467
At location src/dfa.c:2051
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(pos.constraint, s, d, eolbyte, j, pos.index, ngrps, i, intersectf, k, initialized, matchesf, leftoversf, wants_newline, wants_letter, state, state_newline, state_letter, trans, next_isnt_1st_byte)))
    break;
if (pos.constraint != 255) {
    if (!((pos.constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)))
        clrbit(eolbyte, matches);
    if (!((pos.constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)))
        for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
            matches[j] &= newline[j];
    if (!((pos.constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((1) ? 1 : 0))))
        for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
            matches[j] &= ~letters[j];
    if (!((pos.constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((0) ? 1 : 0))))
        for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
            matches[j] &= letters[j];
    for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))) && !matches[j]; ++j) 
        continue;
    if (j == (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))))
        continue;
}

....
Skipping nonlast:Priority -282
At location src/dfa.c:2076
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
for (j = 0; j < ngrps; ++j) {
    if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] < (1 << 8) && !tstbit(d->tokens[pos.index], labels[j]))
        continue;
    intersectf = 0;
    for (k = 0; k < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++k) 
        (intersect[k] = matches[k] & labels[j][k]) ? (intersectf = 1) : 0;
    if (!intersectf)
        continue;
    leftoversf = matchesf = 0;
    for (k = 0; k < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++k) {
        int match = matches[k], label = labels[j][k];
        (leftovers[k] = ~match & label) ? (leftoversf = 1) : 0;
        (matches[k] = match & ~label) ? (matchesf = 1) : 0;
    }
    if (leftoversf) {
        copyset(leftovers, labels[ngrps]);
        copyset(intersect, labels[j]);
        ((grps[ngrps].elems) = xmalloc((d->nleaves) * sizeof(position)));
        copy(&grps[j], &grps[ngrps]);
        ++ngrps;
    }
    grps[j].elems[grps[j].nelem++] = pos;
    if (!matchesf)
        break;
}

....
Skipping nonlast:Priority -282
At location src/dfa.c:2076
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
for (j = 0; j < ngrps; ++j) {
    if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] < (1 << 8) && !tstbit(d->tokens[pos.index], labels[j]))
        continue;
    intersectf = 0;
    for (k = 0; k < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++k) 
        (intersect[k] = matches[k] & labels[j][k]) ? (intersectf = 1) : 0;
    if (!intersectf)
        continue;
    leftoversf = matchesf = 0;
    for (k = 0; k < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++k) {
        int match = matches[k], label = labels[j][k];
        (leftovers[k] = ~match & label) ? (leftoversf = 1) : 0;
        (matches[k] = match & ~label) ? (matchesf = 1) : 0;
    }
    if (leftoversf) {
        copyset(leftovers, labels[ngrps]);
        copyset(intersect, labels[j]);
        ((grps[ngrps].elems) = xmalloc((d->nleaves) * sizeof(position)));
        copy(&grps[j], &grps[ngrps]);
        ++ngrps;
    }
    grps[j].elems[grps[j].nelem++] = pos;
    if (!matchesf)
        break;
}

....
Skipping nonlast:Priority -282
At location src/dfa.c:2076
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
for (j = 0; j < ngrps; ++j) {
    if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] < (1 << 8) && !tstbit(d->tokens[pos.index], labels[j]))
        continue;
    intersectf = 0;
    for (k = 0; k < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++k) 
        (intersect[k] = matches[k] & labels[j][k]) ? (intersectf = 1) : 0;
    if (!intersectf)
        continue;
    leftoversf = matchesf = 0;
    for (k = 0; k < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++k) {
        int match = matches[k], label = labels[j][k];
        (leftovers[k] = ~match & label) ? (leftoversf = 1) : 0;
        (matches[k] = match & ~label) ? (matchesf = 1) : 0;
    }
    if (leftoversf) {
        copyset(leftovers, labels[ngrps]);
        copyset(intersect, labels[j]);
        ((grps[ngrps].elems) = xmalloc((d->nleaves) * sizeof(position)));
        copy(&grps[j], &grps[ngrps]);
        ++ngrps;
    }
    grps[j].elems[grps[j].nelem++] = pos;
    if (!matchesf)
        break;
}

....
Skipping nonlast:Priority -282
At location src/dfa.c:2076
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
for (j = 0; j < ngrps; ++j) {
    if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] < (1 << 8) && !tstbit(d->tokens[pos.index], labels[j]))
        continue;
    intersectf = 0;
    for (k = 0; k < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++k) 
        (intersect[k] = matches[k] & labels[j][k]) ? (intersectf = 1) : 0;
    if (!intersectf)
        continue;
    leftoversf = matchesf = 0;
    for (k = 0; k < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++k) {
        int match = matches[k], label = labels[j][k];
        (leftovers[k] = ~match & label) ? (leftoversf = 1) : 0;
        (matches[k] = match & ~label) ? (matchesf = 1) : 0;
    }
    if (leftoversf) {
        copyset(leftovers, labels[ngrps]);
        copyset(intersect, labels[j]);
        ((grps[ngrps].elems) = xmalloc((d->nleaves) * sizeof(position)));
        copy(&grps[j], &grps[ngrps]);
        ++ngrps;
    }
    grps[j].elems[grps[j].nelem++] = pos;
    if (!matchesf)
        break;
}

....
Skipping nonlast:Priority -282
At location src/dfa.c:2076
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
for (j = 0; j < ngrps; ++j) {
    if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] < (1 << 8) && !tstbit(d->tokens[pos.index], labels[j]))
        continue;
    intersectf = 0;
    for (k = 0; k < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++k) 
        (intersect[k] = matches[k] & labels[j][k]) ? (intersectf = 1) : 0;
    if (!intersectf)
        continue;
    leftoversf = matchesf = 0;
    for (k = 0; k < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++k) {
        int match = matches[k], label = labels[j][k];
        (leftovers[k] = ~match & label) ? (leftoversf = 1) : 0;
        (matches[k] = match & ~label) ? (matchesf = 1) : 0;
    }
    if (leftoversf) {
        copyset(leftovers, labels[ngrps]);
        copyset(intersect, labels[j]);
        ((grps[ngrps].elems) = xmalloc((d->nleaves) * sizeof(position)));
        copy(&grps[j], &grps[ngrps]);
        ++ngrps;
    }
    grps[j].elems[grps[j].nelem++] = pos;
    if (!matchesf)
        break;
}

....
Skipping nonlast:Priority -282
At location src/dfa.c:2076
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
for (j = 0; j < ngrps; ++j) {
    if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] < (1 << 8) && !tstbit(d->tokens[pos.index], labels[j]))
        continue;
    intersectf = 0;
    for (k = 0; k < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++k) 
        (intersect[k] = matches[k] & labels[j][k]) ? (intersectf = 1) : 0;
    if (!intersectf)
        continue;
    leftoversf = matchesf = 0;
    for (k = 0; k < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++k) {
        int match = matches[k], label = labels[j][k];
        (leftovers[k] = ~match & label) ? (leftoversf = 1) : 0;
        (matches[k] = match & ~label) ? (matchesf = 1) : 0;
    }
    if (leftoversf) {
        copyset(leftovers, labels[ngrps]);
        copyset(intersect, labels[j]);
        ((grps[ngrps].elems) = xmalloc((d->nleaves) * sizeof(position)));
        copy(&grps[j], &grps[ngrps]);
        ++ngrps;
    }
    grps[j].elems[grps[j].nelem++] = pos;
    if (!matchesf)
        break;
}

....
Skipping nonlast addifexit:Priority 4718
At location src/dfa.c:2076
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(ngrps, j, d, intersectf, s, k, matchesf, leftoversf, eolbyte, i, initialized, wants_newline, wants_letter, state, state_newline, state_letter, trans, next_isnt_1st_byte)))
    return;
for (j = 0; j < ngrps; ++j) {
    if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] < (1 << 8) && !tstbit(d->tokens[pos.index], labels[j]))
        continue;
    intersectf = 0;
    for (k = 0; k < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++k) 
        (intersect[k] = matches[k] & labels[j][k]) ? (intersectf = 1) : 0;
    if (!intersectf)
        continue;
    leftoversf = matchesf = 0;
    for (k = 0; k < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++k) {
        int match = matches[k], label = labels[j][k];
        (leftovers[k] = ~match & label) ? (leftoversf = 1) : 0;
        (matches[k] = match & ~label) ? (matchesf = 1) : 0;
    }
    if (leftoversf) {
        copyset(leftovers, labels[ngrps]);
        copyset(intersect, labels[j]);
        ((grps[ngrps].elems) = xmalloc((d->nleaves) * sizeof(position)));
        copy(&grps[j], &grps[ngrps]);
        ++ngrps;
    }
    grps[j].elems[grps[j].nelem++] = pos;
    if (!matchesf)
        break;
}

....
Skipping nonlast addifexit:Priority 4718
At location src/dfa.c:2076
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(ngrps, j, d, intersectf, s, k, matchesf, leftoversf, eolbyte, i, initialized, wants_newline, wants_letter, state, state_newline, state_letter, trans, next_isnt_1st_byte)))
    break;
for (j = 0; j < ngrps; ++j) {
    if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] < (1 << 8) && !tstbit(d->tokens[pos.index], labels[j]))
        continue;
    intersectf = 0;
    for (k = 0; k < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++k) 
        (intersect[k] = matches[k] & labels[j][k]) ? (intersectf = 1) : 0;
    if (!intersectf)
        continue;
    leftoversf = matchesf = 0;
    for (k = 0; k < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++k) {
        int match = matches[k], label = labels[j][k];
        (leftovers[k] = ~match & label) ? (leftoversf = 1) : 0;
        (matches[k] = match & ~label) ? (matchesf = 1) : 0;
    }
    if (leftoversf) {
        copyset(leftovers, labels[ngrps]);
        copyset(intersect, labels[j]);
        ((grps[ngrps].elems) = xmalloc((d->nleaves) * sizeof(position)));
        copy(&grps[j], &grps[ngrps]);
        ++ngrps;
    }
    grps[j].elems[grps[j].nelem++] = pos;
    if (!matchesf)
        break;
}

....
Skipping isstmt addifexit:Priority 3469
At location src/dfa.c:2126
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(ngrps, j, d, matchesf, wants_newline, wants_letter, leftoversf, i, k, state, state_newline, state_letter, intersectf, trans, eolbyte, s, next_isnt_1st_byte, initialized)))
    return;
if (j == ngrps) {
    copyset(matches, labels[ngrps]);
    zeroset(matches);
    ((grps[ngrps].elems) = xmalloc((d->nleaves) * sizeof(position)));
    grps[ngrps].nelem = 1;
    grps[ngrps].elems[0] = pos;
    ++ngrps;
}

....
Skipping isstmt addifexit:Priority 3469
At location src/dfa.c:2126
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(ngrps, j, d, matchesf, wants_newline, wants_letter, leftoversf, i, k, state, state_newline, state_letter, intersectf, trans, eolbyte, s, next_isnt_1st_byte, initialized)))
    break;
if (j == ngrps) {
    copyset(matches, labels[ngrps]);
    zeroset(matches);
    ((grps[ngrps].elems) = xmalloc((d->nleaves) * sizeof(position)));
    grps[ngrps].nelem = 1;
    grps[ngrps].elems[0] = pos;
    ++ngrps;
}

....
Skipping nonlast:Priority 4720
At location src/dfa.c:2128
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
copyset(matches, labels[ngrps]);

....
Skipping nonlast:Priority 4720
At location src/dfa.c:2128
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
copyset(matches, labels[ngrps]);

....
Skipping nonlast:Priority 4720
At location src/dfa.c:2128
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
copyset(matches, labels[ngrps]);

....
Skipping nonlast:Priority 4720
At location src/dfa.c:2128
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
copyset(matches, labels[ngrps]);

....
Skipping nonlast:Priority 4720
At location src/dfa.c:2128
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
copyset(matches, labels[ngrps]);

....
Skipping nonlast:Priority 4720
At location src/dfa.c:2128
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
copyset(matches, labels[ngrps]);

....
Skipping nonlast addifexit:Priority 9720
At location src/dfa.c:2128
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(ngrps, d, j, matchesf, wants_newline, wants_letter, i, leftoversf, state, k, state_newline, state_letter, trans, intersectf, eolbyte, s, next_isnt_1st_byte, initialized)))
    return;
copyset(matches, labels[ngrps]);

....
Skipping nonlast addifexit:Priority 9720
At location src/dfa.c:2128
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(ngrps, d, j, matchesf, wants_newline, wants_letter, i, leftoversf, state, k, state_newline, state_letter, trans, intersectf, eolbyte, s, next_isnt_1st_byte, initialized)))
    break;
copyset(matches, labels[ngrps]);

....
Skipping nonlast:Priority -278
At location src/dfa.c:2129
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
zeroset(matches);

....
Skipping nonlast:Priority -278
At location src/dfa.c:2129
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
zeroset(matches);

....
Skipping nonlast:Priority -278
At location src/dfa.c:2129
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
zeroset(matches);

....
Skipping nonlast:Priority -278
At location src/dfa.c:2129
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
zeroset(matches);

....
Skipping nonlast:Priority -278
At location src/dfa.c:2129
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
zeroset(matches);

....
Skipping nonlast:Priority -278
At location src/dfa.c:2129
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
zeroset(matches);

....
Skipping nonlast addifexit:Priority 4722
At location src/dfa.c:2129
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, ngrps, grps[ngrps].elems, d->nleaves, grps[ngrps].nelem, j, matchesf, d->searchflag, wants_newline, wants_letter, i, d->states, leftoversf, state, state_newline, k, state_letter, trans, eolbyte, intersectf, d->tokens, d->follows, s, next_isnt_1st_byte, d->multibyte_prop, d->charclasses, initialized, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
zeroset(matches);

....
Skipping nonlast addifexit:Priority 4722
At location src/dfa.c:2129
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, ngrps, grps[ngrps].elems, d->nleaves, grps[ngrps].nelem, j, matchesf, d->searchflag, wants_newline, wants_letter, i, d->states, leftoversf, state, state_newline, k, state_letter, trans, eolbyte, intersectf, d->tokens, d->follows, s, next_isnt_1st_byte, d->multibyte_prop, d->charclasses, initialized, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    break;
zeroset(matches);

....
Skipping nonlast:Priority -276
At location src/dfa.c:2130
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
((grps[ngrps].elems) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -276
At location src/dfa.c:2130
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
((grps[ngrps].elems) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -276
At location src/dfa.c:2130
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
((grps[ngrps].elems) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -276
At location src/dfa.c:2130
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
((grps[ngrps].elems) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -276
At location src/dfa.c:2130
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
((grps[ngrps].elems) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -276
At location src/dfa.c:2130
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
((grps[ngrps].elems) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast addifexit:Priority 4724
At location src/dfa.c:2130
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, ngrps, grps[ngrps].elems, d->nleaves, grps[ngrps].nelem, j, matchesf, d->searchflag, wants_newline, wants_letter, i, d->states, leftoversf, state, state_newline, k, state_letter, trans, eolbyte, intersectf, d->tokens, d->follows, s, next_isnt_1st_byte, d->multibyte_prop, d->charclasses, initialized, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
((grps[ngrps].elems) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast addifexit:Priority 4724
At location src/dfa.c:2130
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, ngrps, grps[ngrps].elems, d->nleaves, grps[ngrps].nelem, j, matchesf, d->searchflag, wants_newline, wants_letter, i, d->states, leftoversf, state, state_newline, k, state_letter, trans, eolbyte, intersectf, d->tokens, d->follows, s, next_isnt_1st_byte, d->multibyte_prop, d->charclasses, initialized, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    break;
((grps[ngrps].elems) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -275
At location src/dfa.c:2131
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
grps[ngrps].nelem = 1;

....
Skipping nonlast:Priority -275
At location src/dfa.c:2131
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
grps[ngrps].nelem = 1;

....
Skipping nonlast:Priority -275
At location src/dfa.c:2131
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
grps[ngrps].nelem = 1;

....
Skipping nonlast:Priority -275
At location src/dfa.c:2131
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
grps[ngrps].nelem = 1;

....
Skipping nonlast:Priority -275
At location src/dfa.c:2131
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
grps[ngrps].nelem = 1;

....
Skipping nonlast:Priority -275
At location src/dfa.c:2131
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
grps[ngrps].nelem = 1;

....
Skipping nonlast addifexit:Priority 4725
At location src/dfa.c:2131
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(ngrps, grps[ngrps].nelem, d, grps[ngrps].elems, d->nleaves, j, matchesf, d->searchflag, wants_newline, wants_letter, i, d->states, state, leftoversf, state_newline, state_letter, k, trans, eolbyte, intersectf, d->follows, pos.index, d->tokens, s, pos.constraint, next_isnt_1st_byte, d->multibyte_prop, d->charclasses, initialized, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
grps[ngrps].nelem = 1;

....
Skipping nonlast addifexit:Priority 4725
At location src/dfa.c:2131
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(ngrps, grps[ngrps].nelem, d, grps[ngrps].elems, d->nleaves, j, matchesf, d->searchflag, wants_newline, wants_letter, i, d->states, state, leftoversf, state_newline, state_letter, k, trans, eolbyte, intersectf, d->follows, pos.index, d->tokens, s, pos.constraint, next_isnt_1st_byte, d->multibyte_prop, d->charclasses, initialized, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    break;
grps[ngrps].nelem = 1;

....
Skipping nonlast:Priority -274
At location src/dfa.c:2132
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
grps[ngrps].elems[0] = pos;

....
Skipping nonlast:Priority -274
At location src/dfa.c:2132
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
grps[ngrps].elems[0] = pos;

....
Skipping nonlast:Priority -274
At location src/dfa.c:2132
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
grps[ngrps].elems[0] = pos;

....
Skipping nonlast:Priority -274
At location src/dfa.c:2132
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
grps[ngrps].elems[0] = pos;

....
Skipping nonlast:Priority -274
At location src/dfa.c:2132
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
grps[ngrps].elems[0] = pos;

....
Skipping nonlast:Priority -274
At location src/dfa.c:2132
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
grps[ngrps].elems[0] = pos;

....
Skipping nonlast addifexit:Priority 4726
At location src/dfa.c:2132
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(ngrps, grps[ngrps].elems, grps[ngrps].nelem, d, j, matchesf, wants_newline, wants_letter, i, state, state_newline, leftoversf, state_letter, k, trans, eolbyte, intersectf, pos.index, s, pos.constraint, next_isnt_1st_byte, initialized)))
    return;
grps[ngrps].elems[0] = pos;

....
Skipping nonlast addifexit:Priority 4726
At location src/dfa.c:2132
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(ngrps, grps[ngrps].elems, grps[ngrps].nelem, d, j, matchesf, wants_newline, wants_letter, i, state, state_newline, leftoversf, state_letter, k, trans, eolbyte, intersectf, pos.index, s, pos.constraint, next_isnt_1st_byte, initialized)))
    break;
grps[ngrps].elems[0] = pos;

....
Skipping nonlast:Priority -272
At location src/dfa.c:2137
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
((follows.elems) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -272
At location src/dfa.c:2137
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
((follows.elems) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -272
At location src/dfa.c:2137
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
((follows.elems) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -272
At location src/dfa.c:2137
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
((follows.elems) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -272
At location src/dfa.c:2137
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
((follows.elems) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -272
At location src/dfa.c:2137
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
((follows.elems) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast addifexit:Priority 4728
At location src/dfa.c:2137
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->nleaves, follows.elems, tmp.elems, ngrps, d->searchflag, wants_newline, wants_letter, i, d->states, j, matchesf, state, state_newline, state_letter, trans, eolbyte, leftoversf, k, follows.nelem, d->follows, intersectf, d->tokens, next_isnt_1st_byte, d->multibyte_prop, s, d->charclasses, initialized, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts, tmp.nelem)))
    return;
((follows.elems) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -271
At location src/dfa.c:2138
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
((tmp.elems) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -271
At location src/dfa.c:2138
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
((tmp.elems) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -271
At location src/dfa.c:2138
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
((tmp.elems) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -271
At location src/dfa.c:2138
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
((tmp.elems) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -271
At location src/dfa.c:2138
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
((tmp.elems) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -271
At location src/dfa.c:2138
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
((tmp.elems) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast addifexit:Priority 4729
At location src/dfa.c:2138
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->nleaves, tmp.elems, follows.elems, ngrps, d->searchflag, wants_newline, wants_letter, i, d->states, j, state, matchesf, state_newline, state_letter, trans, eolbyte, leftoversf, follows.nelem, k, d->follows, intersectf, d->tokens, next_isnt_1st_byte, d->multibyte_prop, s, d->charclasses, initialized, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts, tmp.nelem)))
    return;
((tmp.elems) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -270
At location src/dfa.c:2143
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (d->searchflag) {
    wants_newline = 0;
    wants_letter = 0;
    for (i = 0; i < d->states[0].elems.nelem; ++i) {
        if ((((d->states[0].elems.elems[i].constraint) & 192) >> 2 != ((d->states[0].elems.elems[i].constraint) & 48)))
            wants_newline = 1;
        if ((((d->states[0].elems.elems[i].constraint) & 12) >> 2 != ((d->states[0].elems.elems[i].constraint) & 3)))
            wants_letter = 1;
    }
    copy(&d->states[0].elems, &follows);
    state = state_index(d, &follows, 0, 0);
    if (wants_newline)
        state_newline = state_index(d, &follows, 1, 0);
    else
        state_newline = state;
    if (wants_letter)
        state_letter = state_index(d, &follows, 0, 1);
    else
        state_letter = state;
    for (i = 0; i < (1 << 8); ++i) 
        trans[i] = ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_')) ? state_letter : state;
    trans[eolbyte] = state_newline;
} else
    for (i = 0; i < (1 << 8); ++i) 
        trans[i] = -1;

....
Skipping nonlast:Priority -270
At location src/dfa.c:2143
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (d->searchflag) {
    wants_newline = 0;
    wants_letter = 0;
    for (i = 0; i < d->states[0].elems.nelem; ++i) {
        if ((((d->states[0].elems.elems[i].constraint) & 192) >> 2 != ((d->states[0].elems.elems[i].constraint) & 48)))
            wants_newline = 1;
        if ((((d->states[0].elems.elems[i].constraint) & 12) >> 2 != ((d->states[0].elems.elems[i].constraint) & 3)))
            wants_letter = 1;
    }
    copy(&d->states[0].elems, &follows);
    state = state_index(d, &follows, 0, 0);
    if (wants_newline)
        state_newline = state_index(d, &follows, 1, 0);
    else
        state_newline = state;
    if (wants_letter)
        state_letter = state_index(d, &follows, 0, 1);
    else
        state_letter = state;
    for (i = 0; i < (1 << 8); ++i) 
        trans[i] = ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_')) ? state_letter : state;
    trans[eolbyte] = state_newline;
} else
    for (i = 0; i < (1 << 8); ++i) 
        trans[i] = -1;

....
Skipping nonlast:Priority -270
At location src/dfa.c:2143
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if (d->searchflag) {
    wants_newline = 0;
    wants_letter = 0;
    for (i = 0; i < d->states[0].elems.nelem; ++i) {
        if ((((d->states[0].elems.elems[i].constraint) & 192) >> 2 != ((d->states[0].elems.elems[i].constraint) & 48)))
            wants_newline = 1;
        if ((((d->states[0].elems.elems[i].constraint) & 12) >> 2 != ((d->states[0].elems.elems[i].constraint) & 3)))
            wants_letter = 1;
    }
    copy(&d->states[0].elems, &follows);
    state = state_index(d, &follows, 0, 0);
    if (wants_newline)
        state_newline = state_index(d, &follows, 1, 0);
    else
        state_newline = state;
    if (wants_letter)
        state_letter = state_index(d, &follows, 0, 1);
    else
        state_letter = state;
    for (i = 0; i < (1 << 8); ++i) 
        trans[i] = ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_')) ? state_letter : state;
    trans[eolbyte] = state_newline;
} else
    for (i = 0; i < (1 << 8); ++i) 
        trans[i] = -1;

....
Skipping nonlast:Priority -270
At location src/dfa.c:2143
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (d->searchflag) {
    wants_newline = 0;
    wants_letter = 0;
    for (i = 0; i < d->states[0].elems.nelem; ++i) {
        if ((((d->states[0].elems.elems[i].constraint) & 192) >> 2 != ((d->states[0].elems.elems[i].constraint) & 48)))
            wants_newline = 1;
        if ((((d->states[0].elems.elems[i].constraint) & 12) >> 2 != ((d->states[0].elems.elems[i].constraint) & 3)))
            wants_letter = 1;
    }
    copy(&d->states[0].elems, &follows);
    state = state_index(d, &follows, 0, 0);
    if (wants_newline)
        state_newline = state_index(d, &follows, 1, 0);
    else
        state_newline = state;
    if (wants_letter)
        state_letter = state_index(d, &follows, 0, 1);
    else
        state_letter = state;
    for (i = 0; i < (1 << 8); ++i) 
        trans[i] = ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_')) ? state_letter : state;
    trans[eolbyte] = state_newline;
} else
    for (i = 0; i < (1 << 8); ++i) 
        trans[i] = -1;

....
Skipping nonlast:Priority -270
At location src/dfa.c:2143
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (d->searchflag) {
    wants_newline = 0;
    wants_letter = 0;
    for (i = 0; i < d->states[0].elems.nelem; ++i) {
        if ((((d->states[0].elems.elems[i].constraint) & 192) >> 2 != ((d->states[0].elems.elems[i].constraint) & 48)))
            wants_newline = 1;
        if ((((d->states[0].elems.elems[i].constraint) & 12) >> 2 != ((d->states[0].elems.elems[i].constraint) & 3)))
            wants_letter = 1;
    }
    copy(&d->states[0].elems, &follows);
    state = state_index(d, &follows, 0, 0);
    if (wants_newline)
        state_newline = state_index(d, &follows, 1, 0);
    else
        state_newline = state;
    if (wants_letter)
        state_letter = state_index(d, &follows, 0, 1);
    else
        state_letter = state;
    for (i = 0; i < (1 << 8); ++i) 
        trans[i] = ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_')) ? state_letter : state;
    trans[eolbyte] = state_newline;
} else
    for (i = 0; i < (1 << 8); ++i) 
        trans[i] = -1;

....
Skipping nonlast:Priority -270
At location src/dfa.c:2143
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (d->searchflag) {
    wants_newline = 0;
    wants_letter = 0;
    for (i = 0; i < d->states[0].elems.nelem; ++i) {
        if ((((d->states[0].elems.elems[i].constraint) & 192) >> 2 != ((d->states[0].elems.elems[i].constraint) & 48)))
            wants_newline = 1;
        if ((((d->states[0].elems.elems[i].constraint) & 12) >> 2 != ((d->states[0].elems.elems[i].constraint) & 3)))
            wants_letter = 1;
    }
    copy(&d->states[0].elems, &follows);
    state = state_index(d, &follows, 0, 0);
    if (wants_newline)
        state_newline = state_index(d, &follows, 1, 0);
    else
        state_newline = state;
    if (wants_letter)
        state_letter = state_index(d, &follows, 0, 1);
    else
        state_letter = state;
    for (i = 0; i < (1 << 8); ++i) 
        trans[i] = ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_')) ? state_letter : state;
    trans[eolbyte] = state_newline;
} else
    for (i = 0; i < (1 << 8); ++i) 
        trans[i] = -1;

....
Skipping nonlast addifexit:Priority 3480
At location src/dfa.c:2143
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->searchflag, wants_newline, wants_letter, i, d->states, d->nleaves, ngrps, state, state_newline, j, state_letter, trans, matchesf, eolbyte, k, d->follows, leftoversf, intersectf, next_isnt_1st_byte, d->tokens, d->multibyte_prop, s, d->charclasses, initialized, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
if (d->searchflag) {
    wants_newline = 0;
    wants_letter = 0;
    for (i = 0; i < d->states[0].elems.nelem; ++i) {
        if ((((d->states[0].elems.elems[i].constraint) & 192) >> 2 != ((d->states[0].elems.elems[i].constraint) & 48)))
            wants_newline = 1;
        if ((((d->states[0].elems.elems[i].constraint) & 12) >> 2 != ((d->states[0].elems.elems[i].constraint) & 3)))
            wants_letter = 1;
    }
    copy(&d->states[0].elems, &follows);
    state = state_index(d, &follows, 0, 0);
    if (wants_newline)
        state_newline = state_index(d, &follows, 1, 0);
    else
        state_newline = state;
    if (wants_letter)
        state_letter = state_index(d, &follows, 0, 1);
    else
        state_letter = state;
    for (i = 0; i < (1 << 8); ++i) 
        trans[i] = ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_')) ? state_letter : state;
    trans[eolbyte] = state_newline;
} else
    for (i = 0; i < (1 << 8); ++i) 
        trans[i] = -1;

....
Skipping nonlast:Priority 4731
At location src/dfa.c:2145
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
wants_newline = 0;

....
Skipping nonlast:Priority 4731
At location src/dfa.c:2145
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
wants_newline = 0;

....
Skipping nonlast:Priority 4731
At location src/dfa.c:2145
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
wants_newline = 0;

....
Skipping nonlast:Priority 4731
At location src/dfa.c:2145
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
wants_newline = 0;

....
Skipping nonlast:Priority 4731
At location src/dfa.c:2145
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
wants_newline = 0;

....
Skipping nonlast:Priority 4731
At location src/dfa.c:2145
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
wants_newline = 0;

....
Skipping nonlast addifexit:Priority 9731
At location src/dfa.c:2145
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(wants_newline, wants_letter, d, i, state, ngrps, state_newline, state_letter, j, trans, eolbyte, matchesf, k, leftoversf, intersectf, next_isnt_1st_byte, s, initialized)))
    return;
wants_newline = 0;

....
Skipping nonlast:Priority -268
At location src/dfa.c:2146
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
wants_letter = 0;

....
Skipping nonlast:Priority -268
At location src/dfa.c:2146
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
wants_letter = 0;

....
Skipping nonlast:Priority -268
At location src/dfa.c:2146
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
wants_letter = 0;

....
Skipping nonlast:Priority -268
At location src/dfa.c:2146
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
wants_letter = 0;

....
Skipping nonlast:Priority -268
At location src/dfa.c:2146
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
wants_letter = 0;

....
Skipping nonlast:Priority -268
At location src/dfa.c:2146
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
wants_letter = 0;

....
Skipping nonlast addifexit:Priority 4732
At location src/dfa.c:2146
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(wants_letter, d, wants_newline, i, d->states, d->states[0].elems.nelem, d->searchflag, d->states[0].elems.elems, d->nleaves, state, state_newline, ngrps, state_letter, trans, j, eolbyte, matchesf, k, d->follows, leftoversf, intersectf, next_isnt_1st_byte, d->multibyte_prop, d->tokens, s, d->charclasses, initialized, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts, d->states[0].hash, d->states[0].newline, d->states[0].letter, d->states[0].backref, d->states[0].constraint, d->states[0].first_end)))
    return;
wants_letter = 0;

....
Skipping nonlast:Priority -267
At location src/dfa.c:2147
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
for (i = 0; i < d->states[0].elems.nelem; ++i) {
    if ((((d->states[0].elems.elems[i].constraint) & 192) >> 2 != ((d->states[0].elems.elems[i].constraint) & 48)))
        wants_newline = 1;
    if ((((d->states[0].elems.elems[i].constraint) & 12) >> 2 != ((d->states[0].elems.elems[i].constraint) & 3)))
        wants_letter = 1;
}

....
Skipping nonlast:Priority -267
At location src/dfa.c:2147
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
for (i = 0; i < d->states[0].elems.nelem; ++i) {
    if ((((d->states[0].elems.elems[i].constraint) & 192) >> 2 != ((d->states[0].elems.elems[i].constraint) & 48)))
        wants_newline = 1;
    if ((((d->states[0].elems.elems[i].constraint) & 12) >> 2 != ((d->states[0].elems.elems[i].constraint) & 3)))
        wants_letter = 1;
}

....
Skipping nonlast:Priority -267
At location src/dfa.c:2147
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
for (i = 0; i < d->states[0].elems.nelem; ++i) {
    if ((((d->states[0].elems.elems[i].constraint) & 192) >> 2 != ((d->states[0].elems.elems[i].constraint) & 48)))
        wants_newline = 1;
    if ((((d->states[0].elems.elems[i].constraint) & 12) >> 2 != ((d->states[0].elems.elems[i].constraint) & 3)))
        wants_letter = 1;
}

....
Skipping nonlast:Priority -267
At location src/dfa.c:2147
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
for (i = 0; i < d->states[0].elems.nelem; ++i) {
    if ((((d->states[0].elems.elems[i].constraint) & 192) >> 2 != ((d->states[0].elems.elems[i].constraint) & 48)))
        wants_newline = 1;
    if ((((d->states[0].elems.elems[i].constraint) & 12) >> 2 != ((d->states[0].elems.elems[i].constraint) & 3)))
        wants_letter = 1;
}

....
Skipping nonlast:Priority -267
At location src/dfa.c:2147
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
for (i = 0; i < d->states[0].elems.nelem; ++i) {
    if ((((d->states[0].elems.elems[i].constraint) & 192) >> 2 != ((d->states[0].elems.elems[i].constraint) & 48)))
        wants_newline = 1;
    if ((((d->states[0].elems.elems[i].constraint) & 12) >> 2 != ((d->states[0].elems.elems[i].constraint) & 3)))
        wants_letter = 1;
}

....
Skipping nonlast:Priority -267
At location src/dfa.c:2147
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
for (i = 0; i < d->states[0].elems.nelem; ++i) {
    if ((((d->states[0].elems.elems[i].constraint) & 192) >> 2 != ((d->states[0].elems.elems[i].constraint) & 48)))
        wants_newline = 1;
    if ((((d->states[0].elems.elems[i].constraint) & 12) >> 2 != ((d->states[0].elems.elems[i].constraint) & 3)))
        wants_letter = 1;
}

....
Skipping nonlast addifexit:Priority 4733
At location src/dfa.c:2147
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->states, d->states[0].elems.nelem, wants_letter, wants_newline, d->states[0].elems.elems, d->searchflag, state, d->nleaves, state_newline, ngrps, state_letter, trans, eolbyte, j, matchesf, k, d->follows, leftoversf, next_isnt_1st_byte, intersectf, d->multibyte_prop, d->tokens, s, d->charclasses, initialized, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts, d->states[0].hash, d->states[0].newline, d->states[0].letter, d->states[0].backref, d->states[0].constraint, d->states[0].first_end)))
    return;
for (i = 0; i < d->states[0].elems.nelem; ++i) {
    if ((((d->states[0].elems.elems[i].constraint) & 192) >> 2 != ((d->states[0].elems.elems[i].constraint) & 48)))
        wants_newline = 1;
    if ((((d->states[0].elems.elems[i].constraint) & 12) >> 2 != ((d->states[0].elems.elems[i].constraint) & 3)))
        wants_letter = 1;
}

....
Skipping nonlast:Priority 4734
At location src/dfa.c:2149
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if ((((d->states[0].elems.elems[i].constraint) & 192) >> 2 != ((d->states[0].elems.elems[i].constraint) & 48)))
    wants_newline = 1;

....
Skipping nonlast:Priority 4734
At location src/dfa.c:2149
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if ((((d->states[0].elems.elems[i].constraint) & 192) >> 2 != ((d->states[0].elems.elems[i].constraint) & 48)))
    wants_newline = 1;

....
Skipping nonlast:Priority 4734
At location src/dfa.c:2149
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if ((((d->states[0].elems.elems[i].constraint) & 192) >> 2 != ((d->states[0].elems.elems[i].constraint) & 48)))
    wants_newline = 1;

....
Skipping nonlast:Priority 4734
At location src/dfa.c:2149
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if ((((d->states[0].elems.elems[i].constraint) & 192) >> 2 != ((d->states[0].elems.elems[i].constraint) & 48)))
    wants_newline = 1;

....
Skipping nonlast:Priority 4734
At location src/dfa.c:2149
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if ((((d->states[0].elems.elems[i].constraint) & 192) >> 2 != ((d->states[0].elems.elems[i].constraint) & 48)))
    wants_newline = 1;

....
Skipping nonlast:Priority 4734
At location src/dfa.c:2149
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if ((((d->states[0].elems.elems[i].constraint) & 192) >> 2 != ((d->states[0].elems.elems[i].constraint) & 48)))
    wants_newline = 1;

....
Skipping nonlast addifexit:Priority 8484
At location src/dfa.c:2149
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->states[0].elems.elems[i].constraint, d->states, d->states[0].elems.elems, wants_newline, d->states[0].elems.nelem, wants_letter, state, d->searchflag, state_newline, d->nleaves, state_letter, trans, ngrps, eolbyte, j, matchesf, k, d->follows, leftoversf, next_isnt_1st_byte, d->multibyte_prop, intersectf, d->tokens, s, d->charclasses, initialized, d->states[0].elems.elems[i].index, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts, d->states[0].hash, d->states[0].newline, d->states[0].letter, d->states[0].backref, d->states[0].constraint, d->states[0].first_end)))
    return;
if ((((d->states[0].elems.elems[i].constraint) & 192) >> 2 != ((d->states[0].elems.elems[i].constraint) & 48)))
    wants_newline = 1;

....
Skipping nonlast addifexit:Priority 8484
At location src/dfa.c:2149
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->states[0].elems.elems[i].constraint, d->states, d->states[0].elems.elems, wants_newline, d->states[0].elems.nelem, wants_letter, state, d->searchflag, state_newline, d->nleaves, state_letter, trans, ngrps, eolbyte, j, matchesf, k, d->follows, leftoversf, next_isnt_1st_byte, d->multibyte_prop, intersectf, d->tokens, s, d->charclasses, initialized, d->states[0].elems.elems[i].index, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts, d->states[0].hash, d->states[0].newline, d->states[0].letter, d->states[0].backref, d->states[0].constraint, d->states[0].first_end)))
    break;
if ((((d->states[0].elems.elems[i].constraint) & 192) >> 2 != ((d->states[0].elems.elems[i].constraint) & 48)))
    wants_newline = 1;

....
Skipping isstmt addifexit:Priority 3485
At location src/dfa.c:2151
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->states[0].elems.elems[i].constraint, d->states, d->states[0].elems.elems, wants_newline, wants_letter, state, d->states[0].elems.nelem, state_newline, d->searchflag, state_letter, d->nleaves, trans, eolbyte, ngrps, j, k, d->follows, matchesf, leftoversf, next_isnt_1st_byte, d->multibyte_prop, intersectf, d->tokens, s, d->charclasses, initialized, d->states[0].elems.elems[i].index, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts, d->states[0].hash, d->states[0].newline, d->states[0].letter, d->states[0].backref, d->states[0].constraint, d->states[0].first_end)))
    return;
if ((((d->states[0].elems.elems[i].constraint) & 12) >> 2 != ((d->states[0].elems.elems[i].constraint) & 3)))
    wants_letter = 1;

....
Skipping isstmt addifexit:Priority 3485
At location src/dfa.c:2151
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->states[0].elems.elems[i].constraint, d->states, d->states[0].elems.elems, wants_newline, wants_letter, state, d->states[0].elems.nelem, state_newline, d->searchflag, state_letter, d->nleaves, trans, eolbyte, ngrps, j, k, d->follows, matchesf, leftoversf, next_isnt_1st_byte, d->multibyte_prop, intersectf, d->tokens, s, d->charclasses, initialized, d->states[0].elems.elems[i].index, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts, d->states[0].hash, d->states[0].newline, d->states[0].letter, d->states[0].backref, d->states[0].constraint, d->states[0].first_end)))
    break;
if ((((d->states[0].elems.elems[i].constraint) & 12) >> 2 != ((d->states[0].elems.elems[i].constraint) & 3)))
    wants_letter = 1;

....
Skipping nonlast:Priority -264
At location src/dfa.c:2154
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
copy(&d->states[0].elems, &follows);

....
Skipping nonlast:Priority -264
At location src/dfa.c:2154
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
copy(&d->states[0].elems, &follows);

....
Skipping nonlast:Priority -264
At location src/dfa.c:2154
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
copy(&d->states[0].elems, &follows);

....
Skipping nonlast:Priority -264
At location src/dfa.c:2154
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
copy(&d->states[0].elems, &follows);

....
Skipping nonlast:Priority -264
At location src/dfa.c:2154
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
copy(&d->states[0].elems, &follows);

....
Skipping nonlast:Priority -264
At location src/dfa.c:2154
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
copy(&d->states[0].elems, &follows);

....
Skipping nonlast addifexit:Priority 4736
At location src/dfa.c:2154
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->states, state, wants_newline, wants_letter, state_newline, i, d->states[0].elems.elems, state_letter, d->states[0].elems.nelem, trans, d->searchflag, eolbyte, d->nleaves, follows.elems, ngrps, follows.nelem, j, k, d->follows, matchesf, leftoversf, next_isnt_1st_byte, d->multibyte_prop, intersectf, d->tokens, s, d->charclasses, initialized, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts, d->states[0].hash, d->states[0].newline, d->states[0].letter, d->states[0].backref, d->states[0].constraint, d->states[0].first_end)))
    return;
copy(&d->states[0].elems, &follows);

....
Skipping nonlast:Priority -263
At location src/dfa.c:2155
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
state = state_index(d, &follows, 0, 0);

....
Skipping nonlast:Priority -263
At location src/dfa.c:2155
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
state = state_index(d, &follows, 0, 0);

....
Skipping nonlast:Priority -263
At location src/dfa.c:2155
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
state = state_index(d, &follows, 0, 0);

....
Skipping nonlast:Priority -263
At location src/dfa.c:2155
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
state = state_index(d, &follows, 0, 0);

....
Skipping nonlast:Priority -263
At location src/dfa.c:2155
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
state = state_index(d, &follows, 0, 0);

....
Skipping nonlast:Priority -263
At location src/dfa.c:2155
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
state = state_index(d, &follows, 0, 0);

....
Skipping nonlast addifexit:Priority 4737
At location src/dfa.c:2155
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, state, wants_newline, d->states, state_newline, wants_letter, i, d->states[0].elems.elems, state_letter, d->states[0].elems.nelem, trans, eolbyte, d->searchflag, ngrps, d->nleaves, follows.elems, follows.nelem, j, k, d->follows, matchesf, next_isnt_1st_byte, leftoversf, d->multibyte_prop, intersectf, d->tokens, s, d->charclasses, initialized, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts, d->states[0].hash, d->states[0].newline, d->states[0].letter, d->states[0].backref, d->states[0].constraint, d->states[0].first_end)))
    return;
state = state_index(d, &follows, 0, 0);

....
Skipping nonlast:Priority -259
At location src/dfa.c:2156
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (wants_newline)
    state_newline = state_index(d, &follows, 1, 0);
else
    state_newline = state;

....
Skipping nonlast:Priority -259
At location src/dfa.c:2156
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (wants_newline)
    state_newline = state_index(d, &follows, 1, 0);
else
    state_newline = state;

....
Skipping nonlast:Priority -259
At location src/dfa.c:2156
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if (wants_newline)
    state_newline = state_index(d, &follows, 1, 0);
else
    state_newline = state;

....
Skipping nonlast:Priority -259
At location src/dfa.c:2156
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (wants_newline)
    state_newline = state_index(d, &follows, 1, 0);
else
    state_newline = state;

....
Skipping nonlast:Priority -259
At location src/dfa.c:2156
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (wants_newline)
    state_newline = state_index(d, &follows, 1, 0);
else
    state_newline = state;

....
Skipping nonlast:Priority -259
At location src/dfa.c:2156
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (wants_newline)
    state_newline = state_index(d, &follows, 1, 0);
else
    state_newline = state;

....
Skipping nonlast addifexit:Priority 3491
At location src/dfa.c:2156
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(wants_newline, d, state, state_newline, d->states, wants_letter, state_letter, i, trans, eolbyte, d->searchflag, ngrps, d->nleaves, follows.nelem, follows.elems, j, k, d->follows, matchesf, next_isnt_1st_byte, d->multibyte_prop, leftoversf, intersectf, d->tokens, s, d->charclasses, initialized, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
if (wants_newline)
    state_newline = state_index(d, &follows, 1, 0);
else
    state_newline = state;

....
Skipping nonlast:Priority -166
At location src/dfa.c:2159
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    state_newline = state;
}

....
Skipping nonlast:Priority -166
At location src/dfa.c:2159
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    state_newline = state;
}

....
Skipping nonlast:Priority -166
At location src/dfa.c:2159
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        return lasttok = parse_bracket_exp_mb();
    }
    state_newline = state;
}

....
Skipping nonlast:Priority -166
At location src/dfa.c:2159
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    state_newline = state;
}

....
Skipping nonlast:Priority -166
At location src/dfa.c:2159
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    state_newline = state;
}

....
Skipping nonlast:Priority -166
At location src/dfa.c:2159
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    state_newline = state;
}

....
Skipping nonlast addifexit:Priority 4834
At location src/dfa.c:2159
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(state, state_newline, wants_letter, d, state_letter, wants_newline, i, trans, eolbyte, ngrps, j, k, matchesf, next_isnt_1st_byte, leftoversf, intersectf, s, initialized)))
        return;
    state_newline = state;
}

....
Skipping nonlast:Priority -258
At location src/dfa.c:2160
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (wants_letter)
    state_letter = state_index(d, &follows, 0, 1);
else
    state_letter = state;

....
Skipping nonlast:Priority -258
At location src/dfa.c:2160
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (wants_letter)
    state_letter = state_index(d, &follows, 0, 1);
else
    state_letter = state;

....
Skipping nonlast:Priority -258
At location src/dfa.c:2160
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if (wants_letter)
    state_letter = state_index(d, &follows, 0, 1);
else
    state_letter = state;

....
Skipping nonlast:Priority -258
At location src/dfa.c:2160
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (wants_letter)
    state_letter = state_index(d, &follows, 0, 1);
else
    state_letter = state;

....
Skipping nonlast:Priority -258
At location src/dfa.c:2160
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (wants_letter)
    state_letter = state_index(d, &follows, 0, 1);
else
    state_letter = state;

....
Skipping nonlast:Priority -258
At location src/dfa.c:2160
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (wants_letter)
    state_letter = state_index(d, &follows, 0, 1);
else
    state_letter = state;

....
Skipping nonlast addifexit:Priority 3492
At location src/dfa.c:2160
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(wants_letter, d, state, state_newline, state_letter, wants_newline, i, trans, eolbyte, d->states, ngrps, follows.nelem, d->searchflag, j, k, d->follows, d->nleaves, follows.elems, matchesf, next_isnt_1st_byte, d->multibyte_prop, leftoversf, intersectf, d->tokens, s, d->charclasses, initialized, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
if (wants_letter)
    state_letter = state_index(d, &follows, 0, 1);
else
    state_letter = state;

....
Skipping nonlast:Priority -257
At location src/dfa.c:2163
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    state_letter = state;
}

....
Skipping nonlast:Priority -257
At location src/dfa.c:2163
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    state_letter = state;
}

....
Skipping nonlast:Priority -257
At location src/dfa.c:2163
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        return lasttok = parse_bracket_exp_mb();
    }
    state_letter = state;
}

....
Skipping nonlast:Priority -257
At location src/dfa.c:2163
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    state_letter = state;
}

....
Skipping nonlast:Priority -257
At location src/dfa.c:2163
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    state_letter = state;
}

....
Skipping nonlast:Priority -257
At location src/dfa.c:2163
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    state_letter = state;
}

....
Skipping nonlast addifexit:Priority 4743
At location src/dfa.c:2163
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(state, state_letter, i, d, trans, state_newline, wants_letter, eolbyte, wants_newline, ngrps, j, k, next_isnt_1st_byte, matchesf, leftoversf, intersectf, s, initialized)))
        return;
    state_letter = state;
}

....
Skipping nonlast:Priority -256
At location src/dfa.c:2164
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
for (i = 0; i < (1 << 8); ++i) 
    trans[i] = ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_')) ? state_letter : state;

....
Skipping nonlast:Priority -256
At location src/dfa.c:2164
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
for (i = 0; i < (1 << 8); ++i) 
    trans[i] = ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_')) ? state_letter : state;

....
Skipping nonlast:Priority -256
At location src/dfa.c:2164
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
for (i = 0; i < (1 << 8); ++i) 
    trans[i] = ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_')) ? state_letter : state;

....
Skipping nonlast:Priority -256
At location src/dfa.c:2164
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
for (i = 0; i < (1 << 8); ++i) 
    trans[i] = ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_')) ? state_letter : state;

....
Skipping nonlast:Priority -256
At location src/dfa.c:2164
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
for (i = 0; i < (1 << 8); ++i) 
    trans[i] = ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_')) ? state_letter : state;

....
Skipping nonlast:Priority -256
At location src/dfa.c:2164
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
for (i = 0; i < (1 << 8); ++i) 
    trans[i] = ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_')) ? state_letter : state;

....
Skipping nonlast addifexit:Priority 4744
At location src/dfa.c:2164
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, trans, state, state_letter, state_newline, eolbyte, d, wants_letter, ngrps, wants_newline, j, k, next_isnt_1st_byte, matchesf, leftoversf, intersectf, s, initialized)))
    return;
for (i = 0; i < (1 << 8); ++i) 
    trans[i] = ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_')) ? state_letter : state;

....
Skipping nonlast:Priority -254
At location src/dfa.c:2172
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
for (i = 0; i < ngrps; ++i) {
    follows.nelem = 0;
    for (j = 0; j < grps[i].nelem; ++j) 
        for (k = 0; k < d->follows[grps[i].elems[j].index].nelem; ++k) 
            insert(d->follows[grps[i].elems[j].index].elems[k], &follows);
    if ((__ctype_get_mb_cur_max()) > 1) {
        next_isnt_1st_byte = 0;
        for (j = 0; j < follows.nelem; ++j) {
            if (!(d->multibyte_prop[follows.elems[j].index] & 1)) {
                next_isnt_1st_byte = 1;
                break;
            }
        }
    }
    if (d->searchflag && ((__ctype_get_mb_cur_max()) == 1 || !next_isnt_1st_byte))
        for (j = 0; j < d->states[0].elems.nelem; ++j) 
            insert(d->states[0].elems.elems[j], &follows);
    wants_newline = 0;
    if (tstbit(eolbyte, labels[i]))
        for (j = 0; j < follows.nelem; ++j) 
            if ((((follows.elems[j].constraint) & 192) >> 2 != ((follows.elems[j].constraint) & 48)))
                wants_newline = 1;
    wants_letter = 0;
    for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
        if (labels[i][j] & letters[j])
            break;
    if (j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))))
        for (j = 0; j < follows.nelem; ++j) 
            if ((((follows.elems[j].constraint) & 12) >> 2 != ((follows.elems[j].constraint) & 3)))
                wants_letter = 1;
    state = state_index(d, &follows, 0, 0);
    if (wants_newline)
        state_newline = state_index(d, &follows, 1, 0);
    else
        state_newline = state;
    if (wants_letter)
        state_letter = state_index(d, &follows, 0, 1);
    else
        state_letter = state;
    for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
        for (k = 0; k < (8 * sizeof(int)); ++k) 
            if (labels[i][j] & 1 << k) {
                int c = j * (8 * sizeof(int)) + k;
                if (c == eolbyte)
                    trans[c] = state_newline;
                else if ((((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalnum) || (c) == '_'))
                    trans[c] = state_letter;
                else if (c < (1 << 8))
                    trans[c] = state;
            }
}

....
Skipping nonlast:Priority -254
At location src/dfa.c:2172
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
for (i = 0; i < ngrps; ++i) {
    follows.nelem = 0;
    for (j = 0; j < grps[i].nelem; ++j) 
        for (k = 0; k < d->follows[grps[i].elems[j].index].nelem; ++k) 
            insert(d->follows[grps[i].elems[j].index].elems[k], &follows);
    if ((__ctype_get_mb_cur_max()) > 1) {
        next_isnt_1st_byte = 0;
        for (j = 0; j < follows.nelem; ++j) {
            if (!(d->multibyte_prop[follows.elems[j].index] & 1)) {
                next_isnt_1st_byte = 1;
                break;
            }
        }
    }
    if (d->searchflag && ((__ctype_get_mb_cur_max()) == 1 || !next_isnt_1st_byte))
        for (j = 0; j < d->states[0].elems.nelem; ++j) 
            insert(d->states[0].elems.elems[j], &follows);
    wants_newline = 0;
    if (tstbit(eolbyte, labels[i]))
        for (j = 0; j < follows.nelem; ++j) 
            if ((((follows.elems[j].constraint) & 192) >> 2 != ((follows.elems[j].constraint) & 48)))
                wants_newline = 1;
    wants_letter = 0;
    for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
        if (labels[i][j] & letters[j])
            break;
    if (j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))))
        for (j = 0; j < follows.nelem; ++j) 
            if ((((follows.elems[j].constraint) & 12) >> 2 != ((follows.elems[j].constraint) & 3)))
                wants_letter = 1;
    state = state_index(d, &follows, 0, 0);
    if (wants_newline)
        state_newline = state_index(d, &follows, 1, 0);
    else
        state_newline = state;
    if (wants_letter)
        state_letter = state_index(d, &follows, 0, 1);
    else
        state_letter = state;
    for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
        for (k = 0; k < (8 * sizeof(int)); ++k) 
            if (labels[i][j] & 1 << k) {
                int c = j * (8 * sizeof(int)) + k;
                if (c == eolbyte)
                    trans[c] = state_newline;
                else if ((((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalnum) || (c) == '_'))
                    trans[c] = state_letter;
                else if (c < (1 << 8))
                    trans[c] = state;
            }
}

....
Skipping nonlast:Priority -254
At location src/dfa.c:2172
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
for (i = 0; i < ngrps; ++i) {
    follows.nelem = 0;
    for (j = 0; j < grps[i].nelem; ++j) 
        for (k = 0; k < d->follows[grps[i].elems[j].index].nelem; ++k) 
            insert(d->follows[grps[i].elems[j].index].elems[k], &follows);
    if ((__ctype_get_mb_cur_max()) > 1) {
        next_isnt_1st_byte = 0;
        for (j = 0; j < follows.nelem; ++j) {
            if (!(d->multibyte_prop[follows.elems[j].index] & 1)) {
                next_isnt_1st_byte = 1;
                break;
            }
        }
    }
    if (d->searchflag && ((__ctype_get_mb_cur_max()) == 1 || !next_isnt_1st_byte))
        for (j = 0; j < d->states[0].elems.nelem; ++j) 
            insert(d->states[0].elems.elems[j], &follows);
    wants_newline = 0;
    if (tstbit(eolbyte, labels[i]))
        for (j = 0; j < follows.nelem; ++j) 
            if ((((follows.elems[j].constraint) & 192) >> 2 != ((follows.elems[j].constraint) & 48)))
                wants_newline = 1;
    wants_letter = 0;
    for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
        if (labels[i][j] & letters[j])
            break;
    if (j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))))
        for (j = 0; j < follows.nelem; ++j) 
            if ((((follows.elems[j].constraint) & 12) >> 2 != ((follows.elems[j].constraint) & 3)))
                wants_letter = 1;
    state = state_index(d, &follows, 0, 0);
    if (wants_newline)
        state_newline = state_index(d, &follows, 1, 0);
    else
        state_newline = state;
    if (wants_letter)
        state_letter = state_index(d, &follows, 0, 1);
    else
        state_letter = state;
    for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
        for (k = 0; k < (8 * sizeof(int)); ++k) 
            if (labels[i][j] & 1 << k) {
                int c = j * (8 * sizeof(int)) + k;
                if (c == eolbyte)
                    trans[c] = state_newline;
                else if ((((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalnum) || (c) == '_'))
                    trans[c] = state_letter;
                else if (c < (1 << 8))
                    trans[c] = state;
            }
}

....
Skipping nonlast:Priority -254
At location src/dfa.c:2172
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
for (i = 0; i < ngrps; ++i) {
    follows.nelem = 0;
    for (j = 0; j < grps[i].nelem; ++j) 
        for (k = 0; k < d->follows[grps[i].elems[j].index].nelem; ++k) 
            insert(d->follows[grps[i].elems[j].index].elems[k], &follows);
    if ((__ctype_get_mb_cur_max()) > 1) {
        next_isnt_1st_byte = 0;
        for (j = 0; j < follows.nelem; ++j) {
            if (!(d->multibyte_prop[follows.elems[j].index] & 1)) {
                next_isnt_1st_byte = 1;
                break;
            }
        }
    }
    if (d->searchflag && ((__ctype_get_mb_cur_max()) == 1 || !next_isnt_1st_byte))
        for (j = 0; j < d->states[0].elems.nelem; ++j) 
            insert(d->states[0].elems.elems[j], &follows);
    wants_newline = 0;
    if (tstbit(eolbyte, labels[i]))
        for (j = 0; j < follows.nelem; ++j) 
            if ((((follows.elems[j].constraint) & 192) >> 2 != ((follows.elems[j].constraint) & 48)))
                wants_newline = 1;
    wants_letter = 0;
    for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
        if (labels[i][j] & letters[j])
            break;
    if (j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))))
        for (j = 0; j < follows.nelem; ++j) 
            if ((((follows.elems[j].constraint) & 12) >> 2 != ((follows.elems[j].constraint) & 3)))
                wants_letter = 1;
    state = state_index(d, &follows, 0, 0);
    if (wants_newline)
        state_newline = state_index(d, &follows, 1, 0);
    else
        state_newline = state;
    if (wants_letter)
        state_letter = state_index(d, &follows, 0, 1);
    else
        state_letter = state;
    for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
        for (k = 0; k < (8 * sizeof(int)); ++k) 
            if (labels[i][j] & 1 << k) {
                int c = j * (8 * sizeof(int)) + k;
                if (c == eolbyte)
                    trans[c] = state_newline;
                else if ((((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalnum) || (c) == '_'))
                    trans[c] = state_letter;
                else if (c < (1 << 8))
                    trans[c] = state;
            }
}

....
Skipping nonlast:Priority -254
At location src/dfa.c:2172
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
for (i = 0; i < ngrps; ++i) {
    follows.nelem = 0;
    for (j = 0; j < grps[i].nelem; ++j) 
        for (k = 0; k < d->follows[grps[i].elems[j].index].nelem; ++k) 
            insert(d->follows[grps[i].elems[j].index].elems[k], &follows);
    if ((__ctype_get_mb_cur_max()) > 1) {
        next_isnt_1st_byte = 0;
        for (j = 0; j < follows.nelem; ++j) {
            if (!(d->multibyte_prop[follows.elems[j].index] & 1)) {
                next_isnt_1st_byte = 1;
                break;
            }
        }
    }
    if (d->searchflag && ((__ctype_get_mb_cur_max()) == 1 || !next_isnt_1st_byte))
        for (j = 0; j < d->states[0].elems.nelem; ++j) 
            insert(d->states[0].elems.elems[j], &follows);
    wants_newline = 0;
    if (tstbit(eolbyte, labels[i]))
        for (j = 0; j < follows.nelem; ++j) 
            if ((((follows.elems[j].constraint) & 192) >> 2 != ((follows.elems[j].constraint) & 48)))
                wants_newline = 1;
    wants_letter = 0;
    for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
        if (labels[i][j] & letters[j])
            break;
    if (j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))))
        for (j = 0; j < follows.nelem; ++j) 
            if ((((follows.elems[j].constraint) & 12) >> 2 != ((follows.elems[j].constraint) & 3)))
                wants_letter = 1;
    state = state_index(d, &follows, 0, 0);
    if (wants_newline)
        state_newline = state_index(d, &follows, 1, 0);
    else
        state_newline = state;
    if (wants_letter)
        state_letter = state_index(d, &follows, 0, 1);
    else
        state_letter = state;
    for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
        for (k = 0; k < (8 * sizeof(int)); ++k) 
            if (labels[i][j] & 1 << k) {
                int c = j * (8 * sizeof(int)) + k;
                if (c == eolbyte)
                    trans[c] = state_newline;
                else if ((((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalnum) || (c) == '_'))
                    trans[c] = state_letter;
                else if (c < (1 << 8))
                    trans[c] = state;
            }
}

....
Skipping nonlast:Priority -254
At location src/dfa.c:2172
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
for (i = 0; i < ngrps; ++i) {
    follows.nelem = 0;
    for (j = 0; j < grps[i].nelem; ++j) 
        for (k = 0; k < d->follows[grps[i].elems[j].index].nelem; ++k) 
            insert(d->follows[grps[i].elems[j].index].elems[k], &follows);
    if ((__ctype_get_mb_cur_max()) > 1) {
        next_isnt_1st_byte = 0;
        for (j = 0; j < follows.nelem; ++j) {
            if (!(d->multibyte_prop[follows.elems[j].index] & 1)) {
                next_isnt_1st_byte = 1;
                break;
            }
        }
    }
    if (d->searchflag && ((__ctype_get_mb_cur_max()) == 1 || !next_isnt_1st_byte))
        for (j = 0; j < d->states[0].elems.nelem; ++j) 
            insert(d->states[0].elems.elems[j], &follows);
    wants_newline = 0;
    if (tstbit(eolbyte, labels[i]))
        for (j = 0; j < follows.nelem; ++j) 
            if ((((follows.elems[j].constraint) & 192) >> 2 != ((follows.elems[j].constraint) & 48)))
                wants_newline = 1;
    wants_letter = 0;
    for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
        if (labels[i][j] & letters[j])
            break;
    if (j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))))
        for (j = 0; j < follows.nelem; ++j) 
            if ((((follows.elems[j].constraint) & 12) >> 2 != ((follows.elems[j].constraint) & 3)))
                wants_letter = 1;
    state = state_index(d, &follows, 0, 0);
    if (wants_newline)
        state_newline = state_index(d, &follows, 1, 0);
    else
        state_newline = state;
    if (wants_letter)
        state_letter = state_index(d, &follows, 0, 1);
    else
        state_letter = state;
    for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
        for (k = 0; k < (8 * sizeof(int)); ++k) 
            if (labels[i][j] & 1 << k) {
                int c = j * (8 * sizeof(int)) + k;
                if (c == eolbyte)
                    trans[c] = state_newline;
                else if ((((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalnum) || (c) == '_'))
                    trans[c] = state_letter;
                else if (c < (1 << 8))
                    trans[c] = state;
            }
}

....
Skipping nonlast addifexit:Priority 4746
At location src/dfa.c:2172
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(ngrps, i, trans, state_newline, j, eolbyte, d, state, state_letter, k, wants_letter, wants_newline, next_isnt_1st_byte, matchesf, leftoversf, intersectf, s, initialized)))
    return;
for (i = 0; i < ngrps; ++i) {
    follows.nelem = 0;
    for (j = 0; j < grps[i].nelem; ++j) 
        for (k = 0; k < d->follows[grps[i].elems[j].index].nelem; ++k) 
            insert(d->follows[grps[i].elems[j].index].elems[k], &follows);
    if ((__ctype_get_mb_cur_max()) > 1) {
        next_isnt_1st_byte = 0;
        for (j = 0; j < follows.nelem; ++j) {
            if (!(d->multibyte_prop[follows.elems[j].index] & 1)) {
                next_isnt_1st_byte = 1;
                break;
            }
        }
    }
    if (d->searchflag && ((__ctype_get_mb_cur_max()) == 1 || !next_isnt_1st_byte))
        for (j = 0; j < d->states[0].elems.nelem; ++j) 
            insert(d->states[0].elems.elems[j], &follows);
    wants_newline = 0;
    if (tstbit(eolbyte, labels[i]))
        for (j = 0; j < follows.nelem; ++j) 
            if ((((follows.elems[j].constraint) & 192) >> 2 != ((follows.elems[j].constraint) & 48)))
                wants_newline = 1;
    wants_letter = 0;
    for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
        if (labels[i][j] & letters[j])
            break;
    if (j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))))
        for (j = 0; j < follows.nelem; ++j) 
            if ((((follows.elems[j].constraint) & 12) >> 2 != ((follows.elems[j].constraint) & 3)))
                wants_letter = 1;
    state = state_index(d, &follows, 0, 0);
    if (wants_newline)
        state_newline = state_index(d, &follows, 1, 0);
    else
        state_newline = state;
    if (wants_letter)
        state_letter = state_index(d, &follows, 0, 1);
    else
        state_letter = state;
    for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
        for (k = 0; k < (8 * sizeof(int)); ++k) 
            if (labels[i][j] & 1 << k) {
                int c = j * (8 * sizeof(int)) + k;
                if (c == eolbyte)
                    trans[c] = state_newline;
                else if ((((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalnum) || (c) == '_'))
                    trans[c] = state_letter;
                else if (c < (1 << 8))
                    trans[c] = state;
            }
}

....
Skipping nonlast:Priority 4747
At location src/dfa.c:2174
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
follows.nelem = 0;

....
Skipping nonlast:Priority 4747
At location src/dfa.c:2174
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
follows.nelem = 0;

....
Skipping nonlast:Priority 4747
At location src/dfa.c:2174
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
follows.nelem = 0;

....
Skipping nonlast:Priority 4747
At location src/dfa.c:2174
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
follows.nelem = 0;

....
Skipping nonlast:Priority 4747
At location src/dfa.c:2174
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
follows.nelem = 0;

....
Skipping nonlast:Priority 4747
At location src/dfa.c:2174
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
follows.nelem = 0;

....
Skipping nonlast addifexit:Priority 9747
At location src/dfa.c:2174
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(follows.nelem, ngrps, i, trans, j, d, k, state_newline, eolbyte, state, state_letter, wants_letter, wants_newline, next_isnt_1st_byte, follows.elems, matchesf, leftoversf, intersectf, s, initialized)))
    return;
follows.nelem = 0;

....
Skipping nonlast addifexit:Priority 9747
At location src/dfa.c:2174
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(follows.nelem, ngrps, i, trans, j, d, k, state_newline, eolbyte, state, state_letter, wants_letter, wants_newline, next_isnt_1st_byte, follows.elems, matchesf, leftoversf, intersectf, s, initialized)))
    break;
follows.nelem = 0;

....
Skipping nonlast:Priority -252
At location src/dfa.c:2178
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
for (j = 0; j < grps[i].nelem; ++j) 
    for (k = 0; k < d->follows[grps[i].elems[j].index].nelem; ++k) 
        insert(d->follows[grps[i].elems[j].index].elems[k], &follows);

....
Skipping nonlast:Priority -252
At location src/dfa.c:2178
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
for (j = 0; j < grps[i].nelem; ++j) 
    for (k = 0; k < d->follows[grps[i].elems[j].index].nelem; ++k) 
        insert(d->follows[grps[i].elems[j].index].elems[k], &follows);

....
Skipping nonlast:Priority -252
At location src/dfa.c:2178
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
for (j = 0; j < grps[i].nelem; ++j) 
    for (k = 0; k < d->follows[grps[i].elems[j].index].nelem; ++k) 
        insert(d->follows[grps[i].elems[j].index].elems[k], &follows);

....
Skipping nonlast:Priority -252
At location src/dfa.c:2178
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
for (j = 0; j < grps[i].nelem; ++j) 
    for (k = 0; k < d->follows[grps[i].elems[j].index].nelem; ++k) 
        insert(d->follows[grps[i].elems[j].index].elems[k], &follows);

....
Skipping nonlast:Priority -252
At location src/dfa.c:2178
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
for (j = 0; j < grps[i].nelem; ++j) 
    for (k = 0; k < d->follows[grps[i].elems[j].index].nelem; ++k) 
        insert(d->follows[grps[i].elems[j].index].elems[k], &follows);

....
Skipping nonlast:Priority -252
At location src/dfa.c:2178
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
for (j = 0; j < grps[i].nelem; ++j) 
    for (k = 0; k < d->follows[grps[i].elems[j].index].nelem; ++k) 
        insert(d->follows[grps[i].elems[j].index].elems[k], &follows);

....
Skipping nonlast addifexit:Priority 4748
At location src/dfa.c:2178
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, j, grps[i].nelem, d, k, grps[i].elems[j].index, d->follows[grps[i].elems[j].index].nelem, d->follows, grps[i].elems, d->follows[grps[i].elems[j].index].elems, ngrps, trans, state_newline, eolbyte, state, state_letter, wants_letter, wants_newline, d->states, next_isnt_1st_byte, d->multibyte_prop, d->searchflag, d->nleaves, matchesf, leftoversf, intersectf, d->tokens, s, d->charclasses, initialized, grps[i].elems[j].constraint, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
for (j = 0; j < grps[i].nelem; ++j) 
    for (k = 0; k < d->follows[grps[i].elems[j].index].nelem; ++k) 
        insert(d->follows[grps[i].elems[j].index].elems[k], &follows);

....
Skipping nonlast addifexit:Priority 4748
At location src/dfa.c:2178
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, j, grps[i].nelem, d, k, grps[i].elems[j].index, d->follows[grps[i].elems[j].index].nelem, d->follows, grps[i].elems, d->follows[grps[i].elems[j].index].elems, ngrps, trans, state_newline, eolbyte, state, state_letter, wants_letter, wants_newline, d->states, next_isnt_1st_byte, d->multibyte_prop, d->searchflag, d->nleaves, matchesf, leftoversf, intersectf, d->tokens, s, d->charclasses, initialized, grps[i].elems[j].constraint, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    break;
for (j = 0; j < grps[i].nelem; ++j) 
    for (k = 0; k < d->follows[grps[i].elems[j].index].nelem; ++k) 
        insert(d->follows[grps[i].elems[j].index].elems[k], &follows);

....
Skipping nonlast:Priority -251
At location src/dfa.c:2183
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if ((__ctype_get_mb_cur_max()) > 1) {
    next_isnt_1st_byte = 0;
    for (j = 0; j < follows.nelem; ++j) {
        if (!(d->multibyte_prop[follows.elems[j].index] & 1)) {
            next_isnt_1st_byte = 1;
            break;
        }
    }
}

....
Skipping nonlast:Priority -251
At location src/dfa.c:2183
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if ((__ctype_get_mb_cur_max()) > 1) {
    next_isnt_1st_byte = 0;
    for (j = 0; j < follows.nelem; ++j) {
        if (!(d->multibyte_prop[follows.elems[j].index] & 1)) {
            next_isnt_1st_byte = 1;
            break;
        }
    }
}

....
Skipping nonlast:Priority -251
At location src/dfa.c:2183
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if ((__ctype_get_mb_cur_max()) > 1) {
    next_isnt_1st_byte = 0;
    for (j = 0; j < follows.nelem; ++j) {
        if (!(d->multibyte_prop[follows.elems[j].index] & 1)) {
            next_isnt_1st_byte = 1;
            break;
        }
    }
}

....
Skipping nonlast:Priority -251
At location src/dfa.c:2183
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if ((__ctype_get_mb_cur_max()) > 1) {
    next_isnt_1st_byte = 0;
    for (j = 0; j < follows.nelem; ++j) {
        if (!(d->multibyte_prop[follows.elems[j].index] & 1)) {
            next_isnt_1st_byte = 1;
            break;
        }
    }
}

....
Skipping nonlast:Priority -251
At location src/dfa.c:2183
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if ((__ctype_get_mb_cur_max()) > 1) {
    next_isnt_1st_byte = 0;
    for (j = 0; j < follows.nelem; ++j) {
        if (!(d->multibyte_prop[follows.elems[j].index] & 1)) {
            next_isnt_1st_byte = 1;
            break;
        }
    }
}

....
Skipping nonlast:Priority -251
At location src/dfa.c:2183
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if ((__ctype_get_mb_cur_max()) > 1) {
    next_isnt_1st_byte = 0;
    for (j = 0; j < follows.nelem; ++j) {
        if (!(d->multibyte_prop[follows.elems[j].index] & 1)) {
            next_isnt_1st_byte = 1;
            break;
        }
    }
}

....
Skipping nonlast addifexit:Priority 3499
At location src/dfa.c:2183
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, j, k, ngrps, trans, state_newline, eolbyte, state, state_letter, next_isnt_1st_byte, wants_letter, wants_newline, matchesf, leftoversf, intersectf, s, initialized)))
    return;
if ((__ctype_get_mb_cur_max()) > 1) {
    next_isnt_1st_byte = 0;
    for (j = 0; j < follows.nelem; ++j) {
        if (!(d->multibyte_prop[follows.elems[j].index] & 1)) {
            next_isnt_1st_byte = 1;
            break;
        }
    }
}

....
Skipping nonlast addifexit:Priority 3499
At location src/dfa.c:2183
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, j, k, ngrps, trans, state_newline, eolbyte, state, state_letter, next_isnt_1st_byte, wants_letter, wants_newline, matchesf, leftoversf, intersectf, s, initialized)))
    break;
if ((__ctype_get_mb_cur_max()) > 1) {
    next_isnt_1st_byte = 0;
    for (j = 0; j < follows.nelem; ++j) {
        if (!(d->multibyte_prop[follows.elems[j].index] & 1)) {
            next_isnt_1st_byte = 1;
            break;
        }
    }
}

....
Skipping nonlast:Priority -250
At location src/dfa.c:2218
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (d->searchflag && ((__ctype_get_mb_cur_max()) == 1 || !next_isnt_1st_byte))
    for (j = 0; j < d->states[0].elems.nelem; ++j) 
        insert(d->states[0].elems.elems[j], &follows);

....
Skipping nonlast:Priority -250
At location src/dfa.c:2218
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (d->searchflag && ((__ctype_get_mb_cur_max()) == 1 || !next_isnt_1st_byte))
    for (j = 0; j < d->states[0].elems.nelem; ++j) 
        insert(d->states[0].elems.elems[j], &follows);

....
Skipping nonlast:Priority -250
At location src/dfa.c:2218
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if (d->searchflag && ((__ctype_get_mb_cur_max()) == 1 || !next_isnt_1st_byte))
    for (j = 0; j < d->states[0].elems.nelem; ++j) 
        insert(d->states[0].elems.elems[j], &follows);

....
Skipping nonlast:Priority -250
At location src/dfa.c:2218
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (d->searchflag && ((__ctype_get_mb_cur_max()) == 1 || !next_isnt_1st_byte))
    for (j = 0; j < d->states[0].elems.nelem; ++j) 
        insert(d->states[0].elems.elems[j], &follows);

....
Skipping nonlast:Priority -250
At location src/dfa.c:2218
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (d->searchflag && ((__ctype_get_mb_cur_max()) == 1 || !next_isnt_1st_byte))
    for (j = 0; j < d->states[0].elems.nelem; ++j) 
        insert(d->states[0].elems.elems[j], &follows);

....
Skipping nonlast:Priority -250
At location src/dfa.c:2218
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (d->searchflag && ((__ctype_get_mb_cur_max()) == 1 || !next_isnt_1st_byte))
    for (j = 0; j < d->states[0].elems.nelem; ++j) 
        insert(d->states[0].elems.elems[j], &follows);

....
Skipping nonlast addifexit:Priority 3500
At location src/dfa.c:2218
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, next_isnt_1st_byte, d->searchflag, j, d->states, wants_newline, i, eolbyte, d->multibyte_prop, wants_letter, state, state_newline, state_letter, k, d->follows, trans, ngrps, d->nleaves, matchesf, leftoversf, intersectf, d->tokens, s, d->charclasses, initialized, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
if (d->searchflag && ((__ctype_get_mb_cur_max()) == 1 || !next_isnt_1st_byte))
    for (j = 0; j < d->states[0].elems.nelem; ++j) 
        insert(d->states[0].elems.elems[j], &follows);

....
Skipping nonlast addifexit:Priority 3500
At location src/dfa.c:2218
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, next_isnt_1st_byte, d->searchflag, j, d->states, wants_newline, i, eolbyte, d->multibyte_prop, wants_letter, state, state_newline, state_letter, k, d->follows, trans, ngrps, d->nleaves, matchesf, leftoversf, intersectf, d->tokens, s, d->charclasses, initialized, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    break;
if (d->searchflag && ((__ctype_get_mb_cur_max()) == 1 || !next_isnt_1st_byte))
    for (j = 0; j < d->states[0].elems.nelem; ++j) 
        insert(d->states[0].elems.elems[j], &follows);

....
Skipping nonlast:Priority -249
At location src/dfa.c:2222
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    for (j = 0; j < d->states[0].elems.nelem; ++j) 
        insert(d->states[0].elems.elems[j], &follows);
}

....
Skipping nonlast:Priority -249
At location src/dfa.c:2222
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    for (j = 0; j < d->states[0].elems.nelem; ++j) 
        insert(d->states[0].elems.elems[j], &follows);
}

....
Skipping nonlast:Priority -249
At location src/dfa.c:2222
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        return lasttok = parse_bracket_exp_mb();
    }
    for (j = 0; j < d->states[0].elems.nelem; ++j) 
        insert(d->states[0].elems.elems[j], &follows);
}

....
Skipping nonlast:Priority -249
At location src/dfa.c:2222
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    for (j = 0; j < d->states[0].elems.nelem; ++j) 
        insert(d->states[0].elems.elems[j], &follows);
}

....
Skipping nonlast:Priority -249
At location src/dfa.c:2222
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    for (j = 0; j < d->states[0].elems.nelem; ++j) 
        insert(d->states[0].elems.elems[j], &follows);
}

....
Skipping nonlast:Priority -249
At location src/dfa.c:2222
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    for (j = 0; j < d->states[0].elems.nelem; ++j) 
        insert(d->states[0].elems.elems[j], &follows);
}

....
Skipping nonlast addifexit:Priority 4751
At location src/dfa.c:2222
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(d, j, d->states, d->states[0].elems.nelem, d->states[0].elems.elems, wants_newline, next_isnt_1st_byte, d->searchflag, i, eolbyte, follows.nelem, follows.elems, wants_letter, d->multibyte_prop, state, state_newline, state_letter, k, trans, d->follows, ngrps, d->nleaves, matchesf, leftoversf, intersectf, d->tokens, s, d->charclasses, initialized, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts, d->states[0].hash, d->states[0].newline, d->states[0].letter, d->states[0].backref, d->states[0].constraint, d->states[0].first_end)))
        return;
    for (j = 0; j < d->states[0].elems.nelem; ++j) 
        insert(d->states[0].elems.elems[j], &follows);
}

....
Skipping nonlast addifexit:Priority 4751
At location src/dfa.c:2222
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(d, j, d->states, d->states[0].elems.nelem, d->states[0].elems.elems, wants_newline, next_isnt_1st_byte, d->searchflag, i, eolbyte, follows.nelem, follows.elems, wants_letter, d->multibyte_prop, state, state_newline, state_letter, k, trans, d->follows, ngrps, d->nleaves, matchesf, leftoversf, intersectf, d->tokens, s, d->charclasses, initialized, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts, d->states[0].hash, d->states[0].newline, d->states[0].letter, d->states[0].backref, d->states[0].constraint, d->states[0].first_end)))
        break;
    for (j = 0; j < d->states[0].elems.nelem; ++j) 
        insert(d->states[0].elems.elems[j], &follows);
}

....
Skipping nonlast:Priority -245
At location src/dfa.c:2226
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
wants_newline = 0;

....
Skipping nonlast:Priority -245
At location src/dfa.c:2226
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
wants_newline = 0;

....
Skipping nonlast:Priority -245
At location src/dfa.c:2226
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
wants_newline = 0;

....
Skipping nonlast:Priority -245
At location src/dfa.c:2226
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
wants_newline = 0;

....
Skipping nonlast:Priority -245
At location src/dfa.c:2226
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
wants_newline = 0;

....
Skipping nonlast:Priority -245
At location src/dfa.c:2226
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
wants_newline = 0;

....
Skipping nonlast addifexit:Priority 4755
At location src/dfa.c:2226
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(wants_newline, i, eolbyte, j, d, wants_letter, next_isnt_1st_byte, state, state_newline, state_letter, k, trans, ngrps, matchesf, leftoversf, intersectf, s, initialized)))
    return;
wants_newline = 0;

....
Skipping nonlast addifexit:Priority 4755
At location src/dfa.c:2226
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(wants_newline, i, eolbyte, j, d, wants_letter, next_isnt_1st_byte, state, state_newline, state_letter, k, trans, ngrps, matchesf, leftoversf, intersectf, s, initialized)))
    break;
wants_newline = 0;

....
Skipping nonlast:Priority -244
At location src/dfa.c:2227
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (tstbit(eolbyte, labels[i]))
    for (j = 0; j < follows.nelem; ++j) 
        if ((((follows.elems[j].constraint) & 192) >> 2 != ((follows.elems[j].constraint) & 48)))
            wants_newline = 1;

....
Skipping nonlast:Priority -244
At location src/dfa.c:2227
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (tstbit(eolbyte, labels[i]))
    for (j = 0; j < follows.nelem; ++j) 
        if ((((follows.elems[j].constraint) & 192) >> 2 != ((follows.elems[j].constraint) & 48)))
            wants_newline = 1;

....
Skipping nonlast:Priority -244
At location src/dfa.c:2227
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if (tstbit(eolbyte, labels[i]))
    for (j = 0; j < follows.nelem; ++j) 
        if ((((follows.elems[j].constraint) & 192) >> 2 != ((follows.elems[j].constraint) & 48)))
            wants_newline = 1;

....
Skipping nonlast:Priority -244
At location src/dfa.c:2227
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (tstbit(eolbyte, labels[i]))
    for (j = 0; j < follows.nelem; ++j) 
        if ((((follows.elems[j].constraint) & 192) >> 2 != ((follows.elems[j].constraint) & 48)))
            wants_newline = 1;

....
Skipping nonlast:Priority -244
At location src/dfa.c:2227
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (tstbit(eolbyte, labels[i]))
    for (j = 0; j < follows.nelem; ++j) 
        if ((((follows.elems[j].constraint) & 192) >> 2 != ((follows.elems[j].constraint) & 48)))
            wants_newline = 1;

....
Skipping nonlast:Priority -244
At location src/dfa.c:2227
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (tstbit(eolbyte, labels[i]))
    for (j = 0; j < follows.nelem; ++j) 
        if ((((follows.elems[j].constraint) & 192) >> 2 != ((follows.elems[j].constraint) & 48)))
            wants_newline = 1;

....
Skipping nonlast addifexit:Priority 3506
At location src/dfa.c:2227
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, eolbyte, wants_newline, j, follows.nelem, follows.elems, d, wants_letter, next_isnt_1st_byte, state, state_newline, state_letter, k, trans, ngrps, matchesf, leftoversf, intersectf, s, initialized)))
    return;
if (tstbit(eolbyte, labels[i]))
    for (j = 0; j < follows.nelem; ++j) 
        if ((((follows.elems[j].constraint) & 192) >> 2 != ((follows.elems[j].constraint) & 48)))
            wants_newline = 1;

....
Skipping nonlast addifexit:Priority 3506
At location src/dfa.c:2227
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, eolbyte, wants_newline, j, follows.nelem, follows.elems, d, wants_letter, next_isnt_1st_byte, state, state_newline, state_letter, k, trans, ngrps, matchesf, leftoversf, intersectf, s, initialized)))
    break;
if (tstbit(eolbyte, labels[i]))
    for (j = 0; j < follows.nelem; ++j) 
        if ((((follows.elems[j].constraint) & 192) >> 2 != ((follows.elems[j].constraint) & 48)))
            wants_newline = 1;

....
Skipping nonlast:Priority -242
At location src/dfa.c:2232
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
wants_letter = 0;

....
Skipping nonlast:Priority -242
At location src/dfa.c:2232
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
wants_letter = 0;

....
Skipping nonlast:Priority -242
At location src/dfa.c:2232
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
wants_letter = 0;

....
Skipping nonlast:Priority -242
At location src/dfa.c:2232
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
wants_letter = 0;

....
Skipping nonlast:Priority -242
At location src/dfa.c:2232
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
wants_letter = 0;

....
Skipping nonlast:Priority -242
At location src/dfa.c:2232
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
wants_letter = 0;

....
Skipping nonlast addifexit:Priority 4758
At location src/dfa.c:2232
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(wants_letter, j, wants_newline, i, eolbyte, d, state, state_newline, next_isnt_1st_byte, state_letter, k, trans, ngrps, matchesf, leftoversf, intersectf, s, initialized)))
    return;
wants_letter = 0;

....
Skipping nonlast addifexit:Priority 4758
At location src/dfa.c:2232
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(wants_letter, j, wants_newline, i, eolbyte, d, state, state_newline, next_isnt_1st_byte, state_letter, k, trans, ngrps, matchesf, leftoversf, intersectf, s, initialized)))
    break;
wants_letter = 0;

....
Skipping nonlast:Priority -241
At location src/dfa.c:2233
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
    if (labels[i][j] & letters[j])
        break;

....
Skipping nonlast:Priority -241
At location src/dfa.c:2233
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
    if (labels[i][j] & letters[j])
        break;

....
Skipping nonlast:Priority -241
At location src/dfa.c:2233
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
    if (labels[i][j] & letters[j])
        break;

....
Skipping nonlast:Priority -241
At location src/dfa.c:2233
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
    if (labels[i][j] & letters[j])
        break;

....
Skipping nonlast:Priority -241
At location src/dfa.c:2233
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
    if (labels[i][j] & letters[j])
        break;

....
Skipping nonlast:Priority -241
At location src/dfa.c:2233
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
    if (labels[i][j] & letters[j])
        break;

....
Skipping nonlast addifexit:Priority 4759
At location src/dfa.c:2233
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(j, wants_letter, i, wants_newline, eolbyte, d, state, state_newline, state_letter, next_isnt_1st_byte, k, trans, ngrps, matchesf, leftoversf, intersectf, s, initialized)))
    return;
for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
    if (labels[i][j] & letters[j])
        break;

....
Skipping nonlast addifexit:Priority 4759
At location src/dfa.c:2233
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(j, wants_letter, i, wants_newline, eolbyte, d, state, state_newline, state_letter, next_isnt_1st_byte, k, trans, ngrps, matchesf, leftoversf, intersectf, s, initialized)))
    break;
for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
    if (labels[i][j] & letters[j])
        break;

....
Skipping nonlast:Priority -240
At location src/dfa.c:2235
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    break;
}

....
Skipping nonlast:Priority -240
At location src/dfa.c:2235
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    break;
}

....
Skipping nonlast:Priority -240
At location src/dfa.c:2235
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        return lasttok = parse_bracket_exp_mb();
    }
    break;
}

....
Skipping nonlast:Priority -240
At location src/dfa.c:2235
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    break;
}

....
Skipping nonlast:Priority -240
At location src/dfa.c:2235
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    break;
}

....
Skipping nonlast:Priority -240
At location src/dfa.c:2235
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    break;
}

....
Skipping nonlast addifexit:Priority 4760
At location src/dfa.c:2235
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(i, j, wants_letter, wants_newline, d, state, eolbyte, state_newline, state_letter, next_isnt_1st_byte, k, trans, ngrps, matchesf, leftoversf, intersectf, s, initialized)))
        return;
    break;
}

....
Skipping nonlast addifexit:Priority 4760
At location src/dfa.c:2235
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(i, j, wants_letter, wants_newline, d, state, eolbyte, state_newline, state_letter, next_isnt_1st_byte, k, trans, ngrps, matchesf, leftoversf, intersectf, s, initialized)))
        break;
    break;
}

....
Skipping nonlast:Priority -239
At location src/dfa.c:2236
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))))
    for (j = 0; j < follows.nelem; ++j) 
        if ((((follows.elems[j].constraint) & 12) >> 2 != ((follows.elems[j].constraint) & 3)))
            wants_letter = 1;

....
Skipping nonlast:Priority -239
At location src/dfa.c:2236
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))))
    for (j = 0; j < follows.nelem; ++j) 
        if ((((follows.elems[j].constraint) & 12) >> 2 != ((follows.elems[j].constraint) & 3)))
            wants_letter = 1;

....
Skipping nonlast:Priority -239
At location src/dfa.c:2236
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if (j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))))
    for (j = 0; j < follows.nelem; ++j) 
        if ((((follows.elems[j].constraint) & 12) >> 2 != ((follows.elems[j].constraint) & 3)))
            wants_letter = 1;

....
Skipping nonlast:Priority -239
At location src/dfa.c:2236
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))))
    for (j = 0; j < follows.nelem; ++j) 
        if ((((follows.elems[j].constraint) & 12) >> 2 != ((follows.elems[j].constraint) & 3)))
            wants_letter = 1;

....
Skipping nonlast:Priority -239
At location src/dfa.c:2236
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))))
    for (j = 0; j < follows.nelem; ++j) 
        if ((((follows.elems[j].constraint) & 12) >> 2 != ((follows.elems[j].constraint) & 3)))
            wants_letter = 1;

....
Skipping nonlast:Priority -239
At location src/dfa.c:2236
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))))
    for (j = 0; j < follows.nelem; ++j) 
        if ((((follows.elems[j].constraint) & 12) >> 2 != ((follows.elems[j].constraint) & 3)))
            wants_letter = 1;

....
Skipping nonlast addifexit:Priority 3511
At location src/dfa.c:2236
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(j, follows.nelem, i, follows.elems, wants_letter, d, state, wants_newline, state_newline, eolbyte, state_letter, next_isnt_1st_byte, k, trans, ngrps, matchesf, leftoversf, intersectf, s, initialized)))
    return;
if (j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))))
    for (j = 0; j < follows.nelem; ++j) 
        if ((((follows.elems[j].constraint) & 12) >> 2 != ((follows.elems[j].constraint) & 3)))
            wants_letter = 1;

....
Skipping nonlast addifexit:Priority 3511
At location src/dfa.c:2236
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(j, follows.nelem, i, follows.elems, wants_letter, d, state, wants_newline, state_newline, eolbyte, state_letter, next_isnt_1st_byte, k, trans, ngrps, matchesf, leftoversf, intersectf, s, initialized)))
    break;
if (j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))))
    for (j = 0; j < follows.nelem; ++j) 
        if ((((follows.elems[j].constraint) & 12) >> 2 != ((follows.elems[j].constraint) & 3)))
            wants_letter = 1;

....
Skipping nonlast:Priority -238
At location src/dfa.c:2237
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    for (j = 0; j < follows.nelem; ++j) 
        if ((((follows.elems[j].constraint) & 12) >> 2 != ((follows.elems[j].constraint) & 3)))
            wants_letter = 1;
}

....
Skipping nonlast:Priority -238
At location src/dfa.c:2237
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    for (j = 0; j < follows.nelem; ++j) 
        if ((((follows.elems[j].constraint) & 12) >> 2 != ((follows.elems[j].constraint) & 3)))
            wants_letter = 1;
}

....
Skipping nonlast:Priority -238
At location src/dfa.c:2237
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        return lasttok = parse_bracket_exp_mb();
    }
    for (j = 0; j < follows.nelem; ++j) 
        if ((((follows.elems[j].constraint) & 12) >> 2 != ((follows.elems[j].constraint) & 3)))
            wants_letter = 1;
}

....
Skipping nonlast:Priority -238
At location src/dfa.c:2237
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    for (j = 0; j < follows.nelem; ++j) 
        if ((((follows.elems[j].constraint) & 12) >> 2 != ((follows.elems[j].constraint) & 3)))
            wants_letter = 1;
}

....
Skipping nonlast:Priority -238
At location src/dfa.c:2237
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    for (j = 0; j < follows.nelem; ++j) 
        if ((((follows.elems[j].constraint) & 12) >> 2 != ((follows.elems[j].constraint) & 3)))
            wants_letter = 1;
}

....
Skipping nonlast:Priority -238
At location src/dfa.c:2237
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    for (j = 0; j < follows.nelem; ++j) 
        if ((((follows.elems[j].constraint) & 12) >> 2 != ((follows.elems[j].constraint) & 3)))
            wants_letter = 1;
}

....
Skipping nonlast addifexit:Priority 4762
At location src/dfa.c:2237
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(j, follows.nelem, follows.elems[j].constraint, follows.elems, wants_letter, i, d, state, wants_newline, state_newline, eolbyte, state_letter, k, next_isnt_1st_byte, trans, ngrps, follows.elems[j].index, matchesf, leftoversf, intersectf, s, initialized)))
        return;
    for (j = 0; j < follows.nelem; ++j) 
        if ((((follows.elems[j].constraint) & 12) >> 2 != ((follows.elems[j].constraint) & 3)))
            wants_letter = 1;
}

....
Skipping nonlast addifexit:Priority 4762
At location src/dfa.c:2237
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(j, follows.nelem, follows.elems[j].constraint, follows.elems, wants_letter, i, d, state, wants_newline, state_newline, eolbyte, state_letter, k, next_isnt_1st_byte, trans, ngrps, follows.elems[j].index, matchesf, leftoversf, intersectf, s, initialized)))
        break;
    for (j = 0; j < follows.nelem; ++j) 
        if ((((follows.elems[j].constraint) & 12) >> 2 != ((follows.elems[j].constraint) & 3)))
            wants_letter = 1;
}

....
Skipping nonlast:Priority -237
At location src/dfa.c:2242
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
state = state_index(d, &follows, 0, 0);

....
Skipping nonlast:Priority -237
At location src/dfa.c:2242
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
state = state_index(d, &follows, 0, 0);

....
Skipping nonlast:Priority -237
At location src/dfa.c:2242
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
state = state_index(d, &follows, 0, 0);

....
Skipping nonlast:Priority -237
At location src/dfa.c:2242
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
state = state_index(d, &follows, 0, 0);

....
Skipping nonlast:Priority -237
At location src/dfa.c:2242
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
state = state_index(d, &follows, 0, 0);

....
Skipping nonlast:Priority -237
At location src/dfa.c:2242
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
state = state_index(d, &follows, 0, 0);

....
Skipping nonlast addifexit:Priority 4763
At location src/dfa.c:2242
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, state, wants_newline, state_newline, wants_letter, j, follows.elems, follows.nelem, state_letter, i, k, eolbyte, trans, d->states, next_isnt_1st_byte, d->searchflag, ngrps, d->multibyte_prop, d->follows, d->nleaves, matchesf, leftoversf, intersectf, d->tokens, s, d->charclasses, initialized, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
state = state_index(d, &follows, 0, 0);

....
Skipping nonlast addifexit:Priority 4763
At location src/dfa.c:2242
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, state, wants_newline, state_newline, wants_letter, j, follows.elems, follows.nelem, state_letter, i, k, eolbyte, trans, d->states, next_isnt_1st_byte, d->searchflag, ngrps, d->multibyte_prop, d->follows, d->nleaves, matchesf, leftoversf, intersectf, d->tokens, s, d->charclasses, initialized, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    break;
state = state_index(d, &follows, 0, 0);

....
Skipping nonlast:Priority -227
At location src/dfa.c:2243
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (wants_newline)
    state_newline = state_index(d, &follows, 1, 0);
else
    state_newline = state;

....
Skipping nonlast:Priority -227
At location src/dfa.c:2243
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (wants_newline)
    state_newline = state_index(d, &follows, 1, 0);
else
    state_newline = state;

....
Skipping nonlast:Priority -227
At location src/dfa.c:2243
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if (wants_newline)
    state_newline = state_index(d, &follows, 1, 0);
else
    state_newline = state;

....
Skipping nonlast:Priority -227
At location src/dfa.c:2243
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (wants_newline)
    state_newline = state_index(d, &follows, 1, 0);
else
    state_newline = state;

....
Skipping nonlast:Priority -227
At location src/dfa.c:2243
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (wants_newline)
    state_newline = state_index(d, &follows, 1, 0);
else
    state_newline = state;

....
Skipping nonlast:Priority -227
At location src/dfa.c:2243
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (wants_newline)
    state_newline = state_index(d, &follows, 1, 0);
else
    state_newline = state;

....
Skipping nonlast addifexit:Priority 3523
At location src/dfa.c:2243
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(wants_newline, d, state, state_newline, wants_letter, state_letter, j, follows.elems, follows.nelem, i, k, eolbyte, trans, d->states, ngrps, next_isnt_1st_byte, d->searchflag, d->multibyte_prop, d->follows, d->nleaves, matchesf, leftoversf, intersectf, d->tokens, s, d->charclasses, initialized, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
if (wants_newline)
    state_newline = state_index(d, &follows, 1, 0);
else
    state_newline = state;

....
Skipping nonlast addifexit:Priority 3523
At location src/dfa.c:2243
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(wants_newline, d, state, state_newline, wants_letter, state_letter, j, follows.elems, follows.nelem, i, k, eolbyte, trans, d->states, ngrps, next_isnt_1st_byte, d->searchflag, d->multibyte_prop, d->follows, d->nleaves, matchesf, leftoversf, intersectf, d->tokens, s, d->charclasses, initialized, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    break;
if (wants_newline)
    state_newline = state_index(d, &follows, 1, 0);
else
    state_newline = state;

....
Skipping nonlast:Priority -226
At location src/dfa.c:2246
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    state_newline = state;
}

....
Skipping nonlast:Priority -226
At location src/dfa.c:2246
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    state_newline = state;
}

....
Skipping nonlast:Priority -226
At location src/dfa.c:2246
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        return lasttok = parse_bracket_exp_mb();
    }
    state_newline = state;
}

....
Skipping nonlast:Priority -226
At location src/dfa.c:2246
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    state_newline = state;
}

....
Skipping nonlast:Priority -226
At location src/dfa.c:2246
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    state_newline = state;
}

....
Skipping nonlast:Priority -226
At location src/dfa.c:2246
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    state_newline = state;
}

....
Skipping nonlast addifexit:Priority 4774
At location src/dfa.c:2246
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(state, state_newline, wants_letter, d, state_letter, wants_newline, j, k, i, eolbyte, trans, ngrps, next_isnt_1st_byte, matchesf, leftoversf, intersectf, s, initialized)))
        return;
    state_newline = state;
}

....
Skipping nonlast addifexit:Priority 4774
At location src/dfa.c:2246
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(state, state_newline, wants_letter, d, state_letter, wants_newline, j, k, i, eolbyte, trans, ngrps, next_isnt_1st_byte, matchesf, leftoversf, intersectf, s, initialized)))
        break;
    state_newline = state;
}

....
Skipping nonlast:Priority -225
At location src/dfa.c:2247
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (wants_letter)
    state_letter = state_index(d, &follows, 0, 1);
else
    state_letter = state;

....
Skipping nonlast:Priority -225
At location src/dfa.c:2247
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (wants_letter)
    state_letter = state_index(d, &follows, 0, 1);
else
    state_letter = state;

....
Skipping nonlast:Priority -225
At location src/dfa.c:2247
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if (wants_letter)
    state_letter = state_index(d, &follows, 0, 1);
else
    state_letter = state;

....
Skipping nonlast:Priority -225
At location src/dfa.c:2247
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (wants_letter)
    state_letter = state_index(d, &follows, 0, 1);
else
    state_letter = state;

....
Skipping nonlast:Priority -225
At location src/dfa.c:2247
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (wants_letter)
    state_letter = state_index(d, &follows, 0, 1);
else
    state_letter = state;

....
Skipping nonlast:Priority -225
At location src/dfa.c:2247
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (wants_letter)
    state_letter = state_index(d, &follows, 0, 1);
else
    state_letter = state;

....
Skipping nonlast addifexit:Priority 3525
At location src/dfa.c:2247
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(wants_letter, d, state, state_newline, state_letter, wants_newline, j, k, i, follows.elems, follows.nelem, eolbyte, trans, ngrps, d->states, next_isnt_1st_byte, d->searchflag, d->multibyte_prop, d->follows, d->nleaves, matchesf, leftoversf, intersectf, d->tokens, s, d->charclasses, initialized, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
if (wants_letter)
    state_letter = state_index(d, &follows, 0, 1);
else
    state_letter = state;

....
Skipping nonlast addifexit:Priority 3525
At location src/dfa.c:2247
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(wants_letter, d, state, state_newline, state_letter, wants_newline, j, k, i, follows.elems, follows.nelem, eolbyte, trans, ngrps, d->states, next_isnt_1st_byte, d->searchflag, d->multibyte_prop, d->follows, d->nleaves, matchesf, leftoversf, intersectf, d->tokens, s, d->charclasses, initialized, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    break;
if (wants_letter)
    state_letter = state_index(d, &follows, 0, 1);
else
    state_letter = state;

....
Skipping nonlast:Priority -224
At location src/dfa.c:2250
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    state_letter = state;
}

....
Skipping nonlast:Priority -224
At location src/dfa.c:2250
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    state_letter = state;
}

....
Skipping nonlast:Priority -224
At location src/dfa.c:2250
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        return lasttok = parse_bracket_exp_mb();
    }
    state_letter = state;
}

....
Skipping nonlast:Priority -224
At location src/dfa.c:2250
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    state_letter = state;
}

....
Skipping nonlast:Priority -224
At location src/dfa.c:2250
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    state_letter = state;
}

....
Skipping nonlast:Priority -224
At location src/dfa.c:2250
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    state_letter = state;
}

....
Skipping nonlast addifexit:Priority 4776
At location src/dfa.c:2250
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(state, state_letter, d, wants_letter, j, state_newline, k, i, wants_newline, eolbyte, trans, ngrps, next_isnt_1st_byte, matchesf, leftoversf, intersectf, s, initialized)))
        return;
    state_letter = state;
}

....
Skipping nonlast addifexit:Priority 4776
At location src/dfa.c:2250
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(state, state_letter, d, wants_letter, j, state_newline, k, i, wants_newline, eolbyte, trans, ngrps, next_isnt_1st_byte, matchesf, leftoversf, intersectf, s, initialized)))
        break;
    state_letter = state;
}

....
Skipping isstmt addifexit:Priority 4777
At location src/dfa.c:2253
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(j, k, i, state, state_letter, d, wants_letter, eolbyte, trans, state_newline, wants_newline, ngrps, next_isnt_1st_byte, matchesf, leftoversf, intersectf, s, initialized)))
    return;
for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
    for (k = 0; k < (8 * sizeof(int)); ++k) 
        if (labels[i][j] & 1 << k) {
            int c = j * (8 * sizeof(int)) + k;
            if (c == eolbyte)
                trans[c] = state_newline;
            else if ((((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalnum) || (c) == '_'))
                trans[c] = state_letter;
            else if (c < (1 << 8))
                trans[c] = state;
        }

....
Skipping isstmt addifexit:Priority 4777
At location src/dfa.c:2253
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(j, k, i, state, state_letter, d, wants_letter, eolbyte, trans, state_newline, wants_newline, ngrps, next_isnt_1st_byte, matchesf, leftoversf, intersectf, s, initialized)))
    break;
for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
    for (k = 0; k < (8 * sizeof(int)); ++k) 
        if (labels[i][j] & 1 << k) {
            int c = j * (8 * sizeof(int)) + k;
            if (c == eolbyte)
                trans[c] = state_newline;
            else if ((((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalnum) || (c) == '_'))
                trans[c] = state_letter;
            else if (c < (1 << 8))
                trans[c] = state;
        }

....
Skipping nonlast:Priority -222
At location src/dfa.c:2257
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int c = j * (8 * sizeof(int)) + k;

....
Skipping nonlast:Priority -222
At location src/dfa.c:2257
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int c = j * (8 * sizeof(int)) + k;

....
Skipping nonlast:Priority -222
At location src/dfa.c:2257
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
int c = j * (8 * sizeof(int)) + k;

....
Skipping nonlast:Priority -222
At location src/dfa.c:2257
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int c = j * (8 * sizeof(int)) + k;

....
Skipping nonlast:Priority -222
At location src/dfa.c:2257
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int c = j * (8 * sizeof(int)) + k;

....
Skipping nonlast:Priority -222
At location src/dfa.c:2257
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int c = j * (8 * sizeof(int)) + k;

....
Skipping nonlast addifexit:Priority 4778
At location src/dfa.c:2257
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(j, k, i, eolbyte, trans, state_newline, state_letter, state, d, wants_letter, ngrps, wants_newline, next_isnt_1st_byte, matchesf, leftoversf, intersectf, s, initialized)))
    return;
int c = j * (8 * sizeof(int)) + k;

....
Skipping nonlast addifexit:Priority 4778
At location src/dfa.c:2257
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(j, k, i, eolbyte, trans, state_newline, state_letter, state, d, wants_letter, ngrps, wants_newline, next_isnt_1st_byte, matchesf, leftoversf, intersectf, s, initialized)))
    break;
int c = j * (8 * sizeof(int)) + k;

....
Skipping isstmt addifexit:Priority 8529
At location src/dfa.c:2259
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, eolbyte, trans, state_newline, j, k, state_letter, i, state, ngrps, d, wants_letter, wants_newline, next_isnt_1st_byte, matchesf, leftoversf, intersectf, s, initialized)))
    return;
if (c == eolbyte)
    trans[c] = state_newline;
else if ((((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalnum) || (c) == '_'))
    trans[c] = state_letter;
else if (c < (1 << 8))
    trans[c] = state;

....
Skipping isstmt addifexit:Priority 8529
At location src/dfa.c:2259
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, eolbyte, trans, state_newline, j, k, state_letter, i, state, ngrps, d, wants_letter, wants_newline, next_isnt_1st_byte, matchesf, leftoversf, intersectf, s, initialized)))
    break;
if (c == eolbyte)
    trans[c] = state_newline;
else if ((((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalnum) || (c) == '_'))
    trans[c] = state_letter;
else if (c < (1 << 8))
    trans[c] = state;

....
Skipping nonlast:Priority -220
At location src/dfa.c:2261
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    if ((((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalnum) || (c) == '_'))
        trans[c] = state_letter;
    else if (c < (1 << 8))
        trans[c] = state;
}

....
Skipping nonlast:Priority -220
At location src/dfa.c:2261
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    if ((((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalnum) || (c) == '_'))
        trans[c] = state_letter;
    else if (c < (1 << 8))
        trans[c] = state;
}

....
Skipping nonlast:Priority -220
At location src/dfa.c:2261
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        return lasttok = parse_bracket_exp_mb();
    }
    if ((((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalnum) || (c) == '_'))
        trans[c] = state_letter;
    else if (c < (1 << 8))
        trans[c] = state;
}

....
Skipping nonlast:Priority -220
At location src/dfa.c:2261
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    if ((((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalnum) || (c) == '_'))
        trans[c] = state_letter;
    else if (c < (1 << 8))
        trans[c] = state;
}

....
Skipping nonlast:Priority -220
At location src/dfa.c:2261
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    if ((((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalnum) || (c) == '_'))
        trans[c] = state_letter;
    else if (c < (1 << 8))
        trans[c] = state;
}

....
Skipping nonlast:Priority -220
At location src/dfa.c:2261
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    if ((((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalnum) || (c) == '_'))
        trans[c] = state_letter;
    else if (c < (1 << 8))
        trans[c] = state;
}

....
Skipping nonlast addifexit:Priority 3530
At location src/dfa.c:2261
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(c, trans, state_newline, state_letter, eolbyte, state, j, k, i, ngrps, d, wants_letter, wants_newline, next_isnt_1st_byte, matchesf, leftoversf, intersectf, s, initialized)))
        return;
    if ((((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalnum) || (c) == '_'))
        trans[c] = state_letter;
    else if (c < (1 << 8))
        trans[c] = state;
}

....
Skipping nonlast addifexit:Priority 3530
At location src/dfa.c:2261
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(c, trans, state_newline, state_letter, eolbyte, state, j, k, i, ngrps, d, wants_letter, wants_newline, next_isnt_1st_byte, matchesf, leftoversf, intersectf, s, initialized)))
        break;
    if ((((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalnum) || (c) == '_'))
        trans[c] = state_letter;
    else if (c < (1 << 8))
        trans[c] = state;
}

....
Skipping nonlast:Priority -219
At location src/dfa.c:2262
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    trans[c] = state_letter;
}

....
Skipping nonlast:Priority -219
At location src/dfa.c:2262
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    trans[c] = state_letter;
}

....
Skipping nonlast:Priority -219
At location src/dfa.c:2262
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        return lasttok = parse_bracket_exp_mb();
    }
    trans[c] = state_letter;
}

....
Skipping nonlast:Priority -219
At location src/dfa.c:2262
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    trans[c] = state_letter;
}

....
Skipping nonlast:Priority -219
At location src/dfa.c:2262
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    trans[c] = state_letter;
}

....
Skipping nonlast:Priority -219
At location src/dfa.c:2262
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    trans[c] = state_letter;
}

....
Skipping nonlast addifexit:Priority 4781
At location src/dfa.c:2262
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(trans, state_letter, c, state, state_newline, eolbyte, j, k, ngrps, i, d, wants_letter, wants_newline, next_isnt_1st_byte, matchesf, leftoversf, intersectf, s, initialized)))
        return;
    trans[c] = state_letter;
}

....
Skipping nonlast addifexit:Priority 4781
At location src/dfa.c:2262
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(trans, state_letter, c, state, state_newline, eolbyte, j, k, ngrps, i, d, wants_letter, wants_newline, next_isnt_1st_byte, matchesf, leftoversf, intersectf, s, initialized)))
        break;
    trans[c] = state_letter;
}

....
Skipping nonlast:Priority -69
At location src/dfa.c:2263
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    if (c < (1 << 8))
        trans[c] = state;
}

....
Skipping nonlast:Priority -69
At location src/dfa.c:2263
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    if (c < (1 << 8))
        trans[c] = state;
}

....
Skipping nonlast:Priority -69
At location src/dfa.c:2263
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        return lasttok = parse_bracket_exp_mb();
    }
    if (c < (1 << 8))
        trans[c] = state;
}

....
Skipping nonlast:Priority -69
At location src/dfa.c:2263
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    if (c < (1 << 8))
        trans[c] = state;
}

....
Skipping nonlast:Priority -69
At location src/dfa.c:2263
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    if (c < (1 << 8))
        trans[c] = state;
}

....
Skipping nonlast:Priority -69
At location src/dfa.c:2263
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    if (c < (1 << 8))
        trans[c] = state;
}

....
Skipping nonlast addifexit:Priority 3681
At location src/dfa.c:2263
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(c, trans, state, state_letter, state_newline, eolbyte, ngrps, i, j, k, d, wants_letter, wants_newline, next_isnt_1st_byte, matchesf, leftoversf, intersectf, s, initialized)))
        return;
    if (c < (1 << 8))
        trans[c] = state;
}

....
Skipping nonlast addifexit:Priority 3681
At location src/dfa.c:2263
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(c, trans, state, state_letter, state_newline, eolbyte, ngrps, i, j, k, d, wants_letter, wants_newline, next_isnt_1st_byte, matchesf, leftoversf, intersectf, s, initialized)))
        break;
    if (c < (1 << 8))
        trans[c] = state;
}

....
Skipping nonlast:Priority -68
At location src/dfa.c:2264
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    trans[c] = state;
}

....
Skipping nonlast:Priority -68
At location src/dfa.c:2264
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    trans[c] = state;
}

....
Skipping nonlast:Priority -68
At location src/dfa.c:2264
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        return lasttok = parse_bracket_exp_mb();
    }
    trans[c] = state;
}

....
Skipping nonlast:Priority -68
At location src/dfa.c:2264
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    trans[c] = state;
}

....
Skipping nonlast:Priority -68
At location src/dfa.c:2264
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    trans[c] = state;
}

....
Skipping nonlast:Priority -68
At location src/dfa.c:2264
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    trans[c] = state;
}

....
Skipping nonlast addifexit:Priority 4932
At location src/dfa.c:2264
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(trans, state, c, state_letter, ngrps, state_newline, i, eolbyte, j, k, d, wants_letter, wants_newline, next_isnt_1st_byte, matchesf, leftoversf, intersectf, s, initialized)))
        return;
    trans[c] = state;
}

....
Skipping nonlast addifexit:Priority 4932
At location src/dfa.c:2264
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(trans, state, c, state_letter, ngrps, state_newline, i, eolbyte, j, k, d, wants_letter, wants_newline, next_isnt_1st_byte, matchesf, leftoversf, intersectf, s, initialized)))
        break;
    trans[c] = state;
}

....
Skipping nonlast:Priority -218
At location src/dfa.c:2268
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
for (i = 0; i < ngrps; ++i) 
    free(grps[i].elems);

....
Skipping nonlast:Priority -218
At location src/dfa.c:2268
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
for (i = 0; i < ngrps; ++i) 
    free(grps[i].elems);

....
Skipping nonlast:Priority -218
At location src/dfa.c:2268
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
for (i = 0; i < ngrps; ++i) 
    free(grps[i].elems);

....
Skipping nonlast:Priority -218
At location src/dfa.c:2268
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
for (i = 0; i < ngrps; ++i) 
    free(grps[i].elems);

....
Skipping nonlast:Priority -218
At location src/dfa.c:2268
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
for (i = 0; i < ngrps; ++i) 
    free(grps[i].elems);

....
Skipping nonlast:Priority -218
At location src/dfa.c:2268
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
for (i = 0; i < ngrps; ++i) 
    free(grps[i].elems);

....
Skipping nonlast addifexit:Priority 4782
At location src/dfa.c:2268
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(ngrps, i, grps[i].elems, trans, state, state_letter, state_newline, eolbyte, j, k, d, wants_letter, wants_newline, next_isnt_1st_byte, grps[i].nelem, matchesf, leftoversf, intersectf, s, initialized)))
    return;
for (i = 0; i < ngrps; ++i) 
    free(grps[i].elems);

....
Skipping nonlast:Priority -217
At location src/dfa.c:2270
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
free(follows.elems);

....
Skipping nonlast:Priority -217
At location src/dfa.c:2270
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
free(follows.elems);

....
Skipping nonlast:Priority -217
At location src/dfa.c:2270
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
free(follows.elems);

....
Skipping nonlast:Priority -217
At location src/dfa.c:2270
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
free(follows.elems);

....
Skipping nonlast:Priority -217
At location src/dfa.c:2270
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
free(follows.elems);

....
Skipping nonlast:Priority -217
At location src/dfa.c:2270
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
free(follows.elems);

....
Skipping nonlast addifexit:Priority 4783
At location src/dfa.c:2270
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(follows.elems, i, grps[i].elems, tmp.elems, ngrps, trans, state, state_letter, state_newline, eolbyte, j, k, d, wants_letter, wants_newline, follows.nelem, next_isnt_1st_byte, grps[i].nelem, matchesf, leftoversf, intersectf, s, initialized, tmp.nelem)))
    return;
free(follows.elems);

....
Skipping nonlast:Priority -327
At location src/dfa.c:2284
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int *trans;

....
Skipping nonlast:Priority -327
At location src/dfa.c:2284
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int *trans;

....
Skipping nonlast:Priority -327
At location src/dfa.c:2284
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
int *trans;

....
Skipping nonlast:Priority -327
At location src/dfa.c:2284
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int *trans;

....
Skipping nonlast:Priority -327
At location src/dfa.c:2284
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int *trans;

....
Skipping nonlast:Priority -327
At location src/dfa.c:2284
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int *trans;

....
Skipping nonlast addifexit:Priority 4673
At location src/dfa.c:2284
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, s, eolbyte)))
    return;
int *trans;

....
Skipping nonlast:Priority -326
At location src/dfa.c:2285
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int i;

....
Skipping nonlast:Priority -326
At location src/dfa.c:2285
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int i;

....
Skipping nonlast:Priority -326
At location src/dfa.c:2285
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
int i;

....
Skipping nonlast:Priority -326
At location src/dfa.c:2285
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int i;

....
Skipping nonlast:Priority -326
At location src/dfa.c:2285
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int i;

....
Skipping nonlast:Priority -326
At location src/dfa.c:2285
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int i;

....
Skipping nonlast addifexit:Priority 4674
At location src/dfa.c:2285
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, s, trans, eolbyte)))
    return;
int i;

....
Skipping nonlast:Priority 7175
At location src/dfa.c:2291
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (d->trcount >= 1024) {
    for (i = 0; i < d->tralloc; ++i) 
        if (d->trans[i]) {
            free((ptr_t)d->trans[i]);
            d->trans[i] = ((void *)0);
        } else if (d->fails[i]) {
            free((ptr_t)d->fails[i]);
            d->fails[i] = ((void *)0);
        }
    d->trcount = 0;
}

....
Skipping nonlast:Priority 7175
At location src/dfa.c:2291
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (d->trcount >= 1024) {
    for (i = 0; i < d->tralloc; ++i) 
        if (d->trans[i]) {
            free((ptr_t)d->trans[i]);
            d->trans[i] = ((void *)0);
        } else if (d->fails[i]) {
            free((ptr_t)d->fails[i]);
            d->fails[i] = ((void *)0);
        }
    d->trcount = 0;
}

....
Skipping nonlast:Priority 7175
At location src/dfa.c:2291
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if (d->trcount >= 1024) {
    for (i = 0; i < d->tralloc; ++i) 
        if (d->trans[i]) {
            free((ptr_t)d->trans[i]);
            d->trans[i] = ((void *)0);
        } else if (d->fails[i]) {
            free((ptr_t)d->fails[i]);
            d->fails[i] = ((void *)0);
        }
    d->trcount = 0;
}

....
Skipping nonlast:Priority 7175
At location src/dfa.c:2291
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (d->trcount >= 1024) {
    for (i = 0; i < d->tralloc; ++i) 
        if (d->trans[i]) {
            free((ptr_t)d->trans[i]);
            d->trans[i] = ((void *)0);
        } else if (d->fails[i]) {
            free((ptr_t)d->fails[i]);
            d->fails[i] = ((void *)0);
        }
    d->trcount = 0;
}

....
Skipping nonlast:Priority 7175
At location src/dfa.c:2291
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (d->trcount >= 1024) {
    for (i = 0; i < d->tralloc; ++i) 
        if (d->trans[i]) {
            free((ptr_t)d->trans[i]);
            d->trans[i] = ((void *)0);
        } else if (d->fails[i]) {
            free((ptr_t)d->fails[i]);
            d->fails[i] = ((void *)0);
        }
    d->trcount = 0;
}

....
Skipping nonlast:Priority 7175
At location src/dfa.c:2291
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (d->trcount >= 1024) {
    for (i = 0; i < d->tralloc; ++i) 
        if (d->trans[i]) {
            free((ptr_t)d->trans[i]);
            d->trans[i] = ((void *)0);
        } else if (d->fails[i]) {
            free((ptr_t)d->fails[i]);
            d->fails[i] = ((void *)0);
        }
    d->trcount = 0;
}

....
Skipping nonlast addifexit:Priority 10925
At location src/dfa.c:2291
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->trcount, i, d->tralloc, d->trans, d->fails, s, d->success, d->states, trans, d->realtrans, eolbyte, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->musts)))
    return;
if (d->trcount >= 1024) {
    for (i = 0; i < d->tralloc; ++i) 
        if (d->trans[i]) {
            free((ptr_t)d->trans[i]);
            d->trans[i] = ((void *)0);
        } else if (d->fails[i]) {
            free((ptr_t)d->fails[i]);
            d->fails[i] = ((void *)0);
        }
    d->trcount = 0;
}

....
Skipping nonlast:Priority -324
At location src/dfa.c:2307
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
++d->trcount;

....
Skipping nonlast:Priority -324
At location src/dfa.c:2307
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
++d->trcount;

....
Skipping nonlast:Priority -324
At location src/dfa.c:2307
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
++d->trcount;

....
Skipping nonlast:Priority -324
At location src/dfa.c:2307
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
++d->trcount;

....
Skipping nonlast:Priority -324
At location src/dfa.c:2307
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
++d->trcount;

....
Skipping nonlast:Priority -324
At location src/dfa.c:2307
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
++d->trcount;

....
Skipping nonlast addifexit:Priority 4676
At location src/dfa.c:2307
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->trcount, s, d->success, d->states, i, d->fails, d->trans, trans, d->tralloc, d->realtrans, eolbyte, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->musts)))
    return;
++d->trcount;

....
Skipping nonlast:Priority -323
At location src/dfa.c:2310
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
d->success[s] = 0;

....
Skipping nonlast:Priority -323
At location src/dfa.c:2310
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
d->success[s] = 0;

....
Skipping nonlast:Priority -323
At location src/dfa.c:2310
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
d->success[s] = 0;

....
Skipping nonlast:Priority -323
At location src/dfa.c:2310
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
d->success[s] = 0;

....
Skipping nonlast:Priority -323
At location src/dfa.c:2310
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
d->success[s] = 0;

....
Skipping nonlast:Priority -323
At location src/dfa.c:2310
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
d->success[s] = 0;

....
Skipping nonlast addifexit:Priority 4677
At location src/dfa.c:2310
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, d, d->success, d->states[s].newline, d->states[s].letter, (*d).states, (*d).states[s].constraint, d->states, d->trcount, i, d->fails, trans, d->trans, d->tralloc, d->realtrans, eolbyte, d->states[s].hash, d->states[s].backref, d->states[s].constraint, d->states[s].first_end, (*d).charclasses, (*d).cindex, (*d).calloc, (*d).tokens, (*d).tindex, (*d).talloc, (*d).depth, (*d).nleaves, (*d).nregexps, (*d).nmultibyte_prop, (*d).multibyte_prop, (*d).mbcsets, (*d).nmbcsets, (*d).mbcsets_alloc, (*d).sindex, (*d).salloc, (*d).follows, (*d).searchflag, (*d).tralloc, (*d).trcount, (*d).trans, (*d).realtrans, (*d).fails, (*d).success, (*d).musts, (*d).states[s].hash, (*d).states[s].newline, (*d).states[s].letter, (*d).states[s].backref, (*d).states[s].first_end, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->musts)))
    return;
d->success[s] = 0;

....
Skipping nonlast:Priority -322
At location src/dfa.c:2311
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (((((*d).states[s].constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && (((*d).states[s].constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((0) ? 1 : 0)))))
    d->success[s] |= 4;

....
Skipping nonlast:Priority -322
At location src/dfa.c:2311
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (((((*d).states[s].constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && (((*d).states[s].constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((0) ? 1 : 0)))))
    d->success[s] |= 4;

....
Skipping nonlast:Priority -322
At location src/dfa.c:2311
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if (((((*d).states[s].constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && (((*d).states[s].constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((0) ? 1 : 0)))))
    d->success[s] |= 4;

....
Skipping nonlast:Priority -322
At location src/dfa.c:2311
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (((((*d).states[s].constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && (((*d).states[s].constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((0) ? 1 : 0)))))
    d->success[s] |= 4;

....
Skipping nonlast:Priority -322
At location src/dfa.c:2311
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (((((*d).states[s].constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && (((*d).states[s].constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((0) ? 1 : 0)))))
    d->success[s] |= 4;

....
Skipping nonlast:Priority -322
At location src/dfa.c:2311
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (((((*d).states[s].constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && (((*d).states[s].constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((0) ? 1 : 0)))))
    d->success[s] |= 4;

....
Skipping nonlast addifexit:Priority 3428
At location src/dfa.c:2311
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, d, d->states[s].newline, d->states[s].letter, (*d).states, (*d).states[s].constraint, d->states, d->success, d->trcount, i, d->fails, trans, d->trans, d->tralloc, d->realtrans, eolbyte, d->states[s].hash, d->states[s].backref, d->states[s].constraint, d->states[s].first_end, (*d).charclasses, (*d).cindex, (*d).calloc, (*d).tokens, (*d).tindex, (*d).talloc, (*d).depth, (*d).nleaves, (*d).nregexps, (*d).nmultibyte_prop, (*d).multibyte_prop, (*d).mbcsets, (*d).nmbcsets, (*d).mbcsets_alloc, (*d).sindex, (*d).salloc, (*d).follows, (*d).searchflag, (*d).tralloc, (*d).trcount, (*d).trans, (*d).realtrans, (*d).fails, (*d).success, (*d).musts, (*d).states[s].hash, (*d).states[s].newline, (*d).states[s].letter, (*d).states[s].backref, (*d).states[s].first_end, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->musts)))
    return;
if (((((*d).states[s].constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && (((*d).states[s].constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((0) ? 1 : 0)))))
    d->success[s] |= 4;

....
Skipping nonlast:Priority -321
At location src/dfa.c:2314
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (((((*d).states[s].constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && (((*d).states[s].constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((1) ? 1 : 0)))))
    d->success[s] |= 2;

....
Skipping nonlast:Priority -321
At location src/dfa.c:2314
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (((((*d).states[s].constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && (((*d).states[s].constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((1) ? 1 : 0)))))
    d->success[s] |= 2;

....
Skipping nonlast:Priority -321
At location src/dfa.c:2314
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if (((((*d).states[s].constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && (((*d).states[s].constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((1) ? 1 : 0)))))
    d->success[s] |= 2;

....
Skipping nonlast:Priority -321
At location src/dfa.c:2314
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (((((*d).states[s].constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && (((*d).states[s].constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((1) ? 1 : 0)))))
    d->success[s] |= 2;

....
Skipping nonlast:Priority -321
At location src/dfa.c:2314
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (((((*d).states[s].constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && (((*d).states[s].constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((1) ? 1 : 0)))))
    d->success[s] |= 2;

....
Skipping nonlast:Priority -321
At location src/dfa.c:2314
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (((((*d).states[s].constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && (((*d).states[s].constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((1) ? 1 : 0)))))
    d->success[s] |= 2;

....
Skipping nonlast addifexit:Priority 3429
At location src/dfa.c:2314
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, d, d->states[s].newline, d->states[s].letter, (*d).states, (*d).states[s].constraint, d->states, d->success, trans, d->trcount, i, d->fails, d->tralloc, d->trans, d->realtrans, eolbyte, d->states[s].hash, d->states[s].backref, d->states[s].constraint, d->states[s].first_end, (*d).charclasses, (*d).cindex, (*d).calloc, (*d).tokens, (*d).tindex, (*d).talloc, (*d).depth, (*d).nleaves, (*d).nregexps, (*d).nmultibyte_prop, (*d).multibyte_prop, (*d).mbcsets, (*d).nmbcsets, (*d).mbcsets_alloc, (*d).sindex, (*d).salloc, (*d).follows, (*d).searchflag, (*d).tralloc, (*d).trcount, (*d).trans, (*d).realtrans, (*d).fails, (*d).success, (*d).musts, (*d).states[s].hash, (*d).states[s].newline, (*d).states[s].letter, (*d).states[s].backref, (*d).states[s].first_end, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->musts)))
    return;
if (((((*d).states[s].constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && (((*d).states[s].constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((1) ? 1 : 0)))))
    d->success[s] |= 2;

....
Skipping nonlast:Priority -320
At location src/dfa.c:2317
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (((((*d).states[s].constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && (((*d).states[s].constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((0) ? 1 : 0)))))
    d->success[s] |= 1;

....
Skipping nonlast:Priority -320
At location src/dfa.c:2317
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (((((*d).states[s].constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && (((*d).states[s].constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((0) ? 1 : 0)))))
    d->success[s] |= 1;

....
Skipping nonlast:Priority -320
At location src/dfa.c:2317
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if (((((*d).states[s].constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && (((*d).states[s].constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((0) ? 1 : 0)))))
    d->success[s] |= 1;

....
Skipping nonlast:Priority -320
At location src/dfa.c:2317
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (((((*d).states[s].constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && (((*d).states[s].constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((0) ? 1 : 0)))))
    d->success[s] |= 1;

....
Skipping nonlast:Priority -320
At location src/dfa.c:2317
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (((((*d).states[s].constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && (((*d).states[s].constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((0) ? 1 : 0)))))
    d->success[s] |= 1;

....
Skipping nonlast:Priority -320
At location src/dfa.c:2317
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (((((*d).states[s].constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && (((*d).states[s].constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((0) ? 1 : 0)))))
    d->success[s] |= 1;

....
Skipping nonlast addifexit:Priority 3430
At location src/dfa.c:2317
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, d, d->states[s].newline, d->states[s].letter, (*d).states, (*d).states[s].constraint, d->states, d->success, trans, i, d->trcount, d->tralloc, d->fails, d->realtrans, d->trans, eolbyte, d->states[s].hash, d->states[s].backref, d->states[s].constraint, d->states[s].first_end, (*d).charclasses, (*d).cindex, (*d).calloc, (*d).tokens, (*d).tindex, (*d).talloc, (*d).depth, (*d).nleaves, (*d).nregexps, (*d).nmultibyte_prop, (*d).multibyte_prop, (*d).mbcsets, (*d).nmbcsets, (*d).mbcsets_alloc, (*d).sindex, (*d).salloc, (*d).follows, (*d).searchflag, (*d).tralloc, (*d).trcount, (*d).trans, (*d).realtrans, (*d).fails, (*d).success, (*d).musts, (*d).states[s].hash, (*d).states[s].newline, (*d).states[s].letter, (*d).states[s].backref, (*d).states[s].first_end, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->musts)))
    return;
if (((((*d).states[s].constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && (((*d).states[s].constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((0) ? 1 : 0)))))
    d->success[s] |= 1;

....
Skipping nonlast:Priority -319
At location src/dfa.c:2321
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
((trans) = xmalloc(((1 << 8)) * sizeof(int)));

....
Skipping nonlast:Priority -319
At location src/dfa.c:2321
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
((trans) = xmalloc(((1 << 8)) * sizeof(int)));

....
Skipping nonlast:Priority -319
At location src/dfa.c:2321
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
((trans) = xmalloc(((1 << 8)) * sizeof(int)));

....
Skipping nonlast:Priority -319
At location src/dfa.c:2321
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
((trans) = xmalloc(((1 << 8)) * sizeof(int)));

....
Skipping nonlast:Priority -319
At location src/dfa.c:2321
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
((trans) = xmalloc(((1 << 8)) * sizeof(int)));

....
Skipping nonlast:Priority -319
At location src/dfa.c:2321
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
((trans) = xmalloc(((1 << 8)) * sizeof(int)));

....
Skipping nonlast addifexit:Priority 4681
At location src/dfa.c:2321
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(trans, s, d, d->success, d->states, i, d->tralloc, d->realtrans, d->trcount, d->trans, d->fails, eolbyte, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->musts)))
    return;
((trans) = xmalloc(((1 << 8)) * sizeof(int)));

....
Skipping nonlast:Priority -318
At location src/dfa.c:2322
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
dfastate(s, d, trans);

....
Skipping nonlast:Priority -318
At location src/dfa.c:2322
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
dfastate(s, d, trans);

....
Skipping nonlast:Priority -318
At location src/dfa.c:2322
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
dfastate(s, d, trans);

....
Skipping nonlast:Priority -318
At location src/dfa.c:2322
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
dfastate(s, d, trans);

....
Skipping nonlast:Priority -318
At location src/dfa.c:2322
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
dfastate(s, d, trans);

....
Skipping nonlast:Priority -318
At location src/dfa.c:2322
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
dfastate(s, d, trans);

....
Skipping nonlast addifexit:Priority 4682
At location src/dfa.c:2322
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, d, trans, d->success, i, d->states, d->tralloc, d->realtrans, d->trans, d->fails, d->trcount, eolbyte, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->musts)))
    return;
dfastate(s, d, trans);

....
Skipping nonlast:Priority -215
At location src/dfa.c:2327
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
for (i = 0; i < (1 << 8); ++i) 
    if (trans[i] >= d->tralloc) {
        int oldalloc = d->tralloc;
        while (trans[i] >= d->tralloc)
            d->tralloc *= 2;
        ((d->realtrans) = xrealloc((ptr_t)(d->realtrans), (d->tralloc + 1) * sizeof(int *)));
        d->trans = d->realtrans + 1;
        ((d->fails) = xrealloc((ptr_t)(d->fails), (d->tralloc) * sizeof(int *)));
        ((d->success) = xrealloc((ptr_t)(d->success), (d->tralloc) * sizeof(int)));
        while (oldalloc < d->tralloc)
            {
                d->trans[oldalloc] = ((void *)0);
                d->fails[oldalloc++] = ((void *)0);
            }
    }

....
Skipping nonlast:Priority -215
At location src/dfa.c:2327
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
for (i = 0; i < (1 << 8); ++i) 
    if (trans[i] >= d->tralloc) {
        int oldalloc = d->tralloc;
        while (trans[i] >= d->tralloc)
            d->tralloc *= 2;
        ((d->realtrans) = xrealloc((ptr_t)(d->realtrans), (d->tralloc + 1) * sizeof(int *)));
        d->trans = d->realtrans + 1;
        ((d->fails) = xrealloc((ptr_t)(d->fails), (d->tralloc) * sizeof(int *)));
        ((d->success) = xrealloc((ptr_t)(d->success), (d->tralloc) * sizeof(int)));
        while (oldalloc < d->tralloc)
            {
                d->trans[oldalloc] = ((void *)0);
                d->fails[oldalloc++] = ((void *)0);
            }
    }

....
Skipping nonlast:Priority -215
At location src/dfa.c:2327
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
for (i = 0; i < (1 << 8); ++i) 
    if (trans[i] >= d->tralloc) {
        int oldalloc = d->tralloc;
        while (trans[i] >= d->tralloc)
            d->tralloc *= 2;
        ((d->realtrans) = xrealloc((ptr_t)(d->realtrans), (d->tralloc + 1) * sizeof(int *)));
        d->trans = d->realtrans + 1;
        ((d->fails) = xrealloc((ptr_t)(d->fails), (d->tralloc) * sizeof(int *)));
        ((d->success) = xrealloc((ptr_t)(d->success), (d->tralloc) * sizeof(int)));
        while (oldalloc < d->tralloc)
            {
                d->trans[oldalloc] = ((void *)0);
                d->fails[oldalloc++] = ((void *)0);
            }
    }

....
Skipping nonlast:Priority -215
At location src/dfa.c:2327
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
for (i = 0; i < (1 << 8); ++i) 
    if (trans[i] >= d->tralloc) {
        int oldalloc = d->tralloc;
        while (trans[i] >= d->tralloc)
            d->tralloc *= 2;
        ((d->realtrans) = xrealloc((ptr_t)(d->realtrans), (d->tralloc + 1) * sizeof(int *)));
        d->trans = d->realtrans + 1;
        ((d->fails) = xrealloc((ptr_t)(d->fails), (d->tralloc) * sizeof(int *)));
        ((d->success) = xrealloc((ptr_t)(d->success), (d->tralloc) * sizeof(int)));
        while (oldalloc < d->tralloc)
            {
                d->trans[oldalloc] = ((void *)0);
                d->fails[oldalloc++] = ((void *)0);
            }
    }

....
Skipping nonlast:Priority -215
At location src/dfa.c:2327
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
for (i = 0; i < (1 << 8); ++i) 
    if (trans[i] >= d->tralloc) {
        int oldalloc = d->tralloc;
        while (trans[i] >= d->tralloc)
            d->tralloc *= 2;
        ((d->realtrans) = xrealloc((ptr_t)(d->realtrans), (d->tralloc + 1) * sizeof(int *)));
        d->trans = d->realtrans + 1;
        ((d->fails) = xrealloc((ptr_t)(d->fails), (d->tralloc) * sizeof(int *)));
        ((d->success) = xrealloc((ptr_t)(d->success), (d->tralloc) * sizeof(int)));
        while (oldalloc < d->tralloc)
            {
                d->trans[oldalloc] = ((void *)0);
                d->fails[oldalloc++] = ((void *)0);
            }
    }

....
Skipping nonlast:Priority -215
At location src/dfa.c:2327
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
for (i = 0; i < (1 << 8); ++i) 
    if (trans[i] >= d->tralloc) {
        int oldalloc = d->tralloc;
        while (trans[i] >= d->tralloc)
            d->tralloc *= 2;
        ((d->realtrans) = xrealloc((ptr_t)(d->realtrans), (d->tralloc + 1) * sizeof(int *)));
        d->trans = d->realtrans + 1;
        ((d->fails) = xrealloc((ptr_t)(d->fails), (d->tralloc) * sizeof(int *)));
        ((d->success) = xrealloc((ptr_t)(d->success), (d->tralloc) * sizeof(int)));
        while (oldalloc < d->tralloc)
            {
                d->trans[oldalloc] = ((void *)0);
                d->fails[oldalloc++] = ((void *)0);
            }
    }

....
Skipping nonlast addifexit:Priority 4785
At location src/dfa.c:2327
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, d, trans, d->tralloc, s, d->realtrans, d->trans, d->success, d->fails, d->states, eolbyte, d->trcount, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->musts)))
    return;
for (i = 0; i < (1 << 8); ++i) 
    if (trans[i] >= d->tralloc) {
        int oldalloc = d->tralloc;
        while (trans[i] >= d->tralloc)
            d->tralloc *= 2;
        ((d->realtrans) = xrealloc((ptr_t)(d->realtrans), (d->tralloc + 1) * sizeof(int *)));
        d->trans = d->realtrans + 1;
        ((d->fails) = xrealloc((ptr_t)(d->fails), (d->tralloc) * sizeof(int *)));
        ((d->success) = xrealloc((ptr_t)(d->success), (d->tralloc) * sizeof(int)));
        while (oldalloc < d->tralloc)
            {
                d->trans[oldalloc] = ((void *)0);
                d->fails[oldalloc++] = ((void *)0);
            }
    }

....
Skipping nonlast:Priority -214
At location src/dfa.c:2330
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int oldalloc = d->tralloc;

....
Skipping nonlast:Priority -214
At location src/dfa.c:2330
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int oldalloc = d->tralloc;

....
Skipping nonlast:Priority -214
At location src/dfa.c:2330
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
int oldalloc = d->tralloc;

....
Skipping nonlast:Priority -214
At location src/dfa.c:2330
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int oldalloc = d->tralloc;

....
Skipping nonlast:Priority -214
At location src/dfa.c:2330
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int oldalloc = d->tralloc;

....
Skipping nonlast:Priority -214
At location src/dfa.c:2330
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int oldalloc = d->tralloc;

....
Skipping nonlast addifexit:Priority 4786
At location src/dfa.c:2330
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->tralloc, trans, i, d->realtrans, d->trans, d->fails, d->success, s, d->states, eolbyte, d->trcount, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->musts)))
    return;
int oldalloc = d->tralloc;

....
Skipping nonlast addifexit:Priority 4786
At location src/dfa.c:2330
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->tralloc, trans, i, d->realtrans, d->trans, d->fails, d->success, s, d->states, eolbyte, d->trcount, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->musts)))
    break;
int oldalloc = d->tralloc;

....
Skipping nonlast:Priority 4787
At location src/dfa.c:2332
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
while (trans[i] >= d->tralloc)
    d->tralloc *= 2;

....
Skipping nonlast:Priority 4787
At location src/dfa.c:2332
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
while (trans[i] >= d->tralloc)
    d->tralloc *= 2;

....
Skipping nonlast:Priority 4787
At location src/dfa.c:2332
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
while (trans[i] >= d->tralloc)
    d->tralloc *= 2;

....
Skipping nonlast:Priority 4787
At location src/dfa.c:2332
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
while (trans[i] >= d->tralloc)
    d->tralloc *= 2;

....
Skipping nonlast:Priority 4787
At location src/dfa.c:2332
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
while (trans[i] >= d->tralloc)
    d->tralloc *= 2;

....
Skipping nonlast:Priority 4787
At location src/dfa.c:2332
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
while (trans[i] >= d->tralloc)
    d->tralloc *= 2;

....
Skipping nonlast addifexit:Priority 9787
At location src/dfa.c:2332
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, trans, i, d->tralloc, d->realtrans, d->trans, d->fails, d->success, oldalloc, s, eolbyte, d->states, d->trcount, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->musts)))
    return;
while (trans[i] >= d->tralloc)
    d->tralloc *= 2;

....
Skipping nonlast addifexit:Priority 9787
At location src/dfa.c:2332
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, trans, i, d->tralloc, d->realtrans, d->trans, d->fails, d->success, oldalloc, s, eolbyte, d->states, d->trcount, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->musts)))
    break;
while (trans[i] >= d->tralloc)
    d->tralloc *= 2;

....
Skipping nonlast:Priority -212
At location src/dfa.c:2334
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
((d->realtrans) = xrealloc((ptr_t)(d->realtrans), (d->tralloc + 1) * sizeof(int *)));

....
Skipping nonlast:Priority -212
At location src/dfa.c:2334
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
((d->realtrans) = xrealloc((ptr_t)(d->realtrans), (d->tralloc + 1) * sizeof(int *)));

....
Skipping nonlast:Priority -212
At location src/dfa.c:2334
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
((d->realtrans) = xrealloc((ptr_t)(d->realtrans), (d->tralloc + 1) * sizeof(int *)));

....
Skipping nonlast:Priority -212
At location src/dfa.c:2334
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
((d->realtrans) = xrealloc((ptr_t)(d->realtrans), (d->tralloc + 1) * sizeof(int *)));

....
Skipping nonlast:Priority -212
At location src/dfa.c:2334
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
((d->realtrans) = xrealloc((ptr_t)(d->realtrans), (d->tralloc + 1) * sizeof(int *)));

....
Skipping nonlast:Priority -212
At location src/dfa.c:2334
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
((d->realtrans) = xrealloc((ptr_t)(d->realtrans), (d->tralloc + 1) * sizeof(int *)));

....
Skipping nonlast addifexit:Priority 4788
At location src/dfa.c:2334
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->tralloc, d->realtrans, d->trans, trans, i, d->fails, d->success, oldalloc, s, eolbyte, d->states, d->trcount, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->musts)))
    return;
((d->realtrans) = xrealloc((ptr_t)(d->realtrans), (d->tralloc + 1) * sizeof(int *)));

....
Skipping nonlast addifexit:Priority 4788
At location src/dfa.c:2334
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->tralloc, d->realtrans, d->trans, trans, i, d->fails, d->success, oldalloc, s, eolbyte, d->states, d->trcount, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->musts)))
    break;
((d->realtrans) = xrealloc((ptr_t)(d->realtrans), (d->tralloc + 1) * sizeof(int *)));

....
Skipping nonlast:Priority -211
At location src/dfa.c:2335
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
d->trans = d->realtrans + 1;

....
Skipping nonlast:Priority -211
At location src/dfa.c:2335
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
d->trans = d->realtrans + 1;

....
Skipping nonlast:Priority -211
At location src/dfa.c:2335
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
d->trans = d->realtrans + 1;

....
Skipping nonlast:Priority -211
At location src/dfa.c:2335
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
d->trans = d->realtrans + 1;

....
Skipping nonlast:Priority -211
At location src/dfa.c:2335
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
d->trans = d->realtrans + 1;

....
Skipping nonlast:Priority -211
At location src/dfa.c:2335
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
d->trans = d->realtrans + 1;

....
Skipping nonlast addifexit:Priority 4789
At location src/dfa.c:2335
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->trans, d->realtrans, d->tralloc, d->fails, d->success, trans, i, oldalloc, eolbyte, s, d->states, d->trcount, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->musts)))
    return;
d->trans = d->realtrans + 1;

....
Skipping nonlast addifexit:Priority 4789
At location src/dfa.c:2335
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->trans, d->realtrans, d->tralloc, d->fails, d->success, trans, i, oldalloc, eolbyte, s, d->states, d->trcount, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->musts)))
    break;
d->trans = d->realtrans + 1;

....
Skipping nonlast:Priority -210
At location src/dfa.c:2336
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
((d->fails) = xrealloc((ptr_t)(d->fails), (d->tralloc) * sizeof(int *)));

....
Skipping nonlast:Priority -210
At location src/dfa.c:2336
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
((d->fails) = xrealloc((ptr_t)(d->fails), (d->tralloc) * sizeof(int *)));

....
Skipping nonlast:Priority -210
At location src/dfa.c:2336
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
((d->fails) = xrealloc((ptr_t)(d->fails), (d->tralloc) * sizeof(int *)));

....
Skipping nonlast:Priority -210
At location src/dfa.c:2336
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
((d->fails) = xrealloc((ptr_t)(d->fails), (d->tralloc) * sizeof(int *)));

....
Skipping nonlast:Priority -210
At location src/dfa.c:2336
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
((d->fails) = xrealloc((ptr_t)(d->fails), (d->tralloc) * sizeof(int *)));

....
Skipping nonlast:Priority -210
At location src/dfa.c:2336
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
((d->fails) = xrealloc((ptr_t)(d->fails), (d->tralloc) * sizeof(int *)));

....
Skipping nonlast addifexit:Priority 4790
At location src/dfa.c:2336
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->tralloc, d->fails, d->trans, d->realtrans, d->success, oldalloc, trans, i, eolbyte, s, d->states, d->trcount, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->musts)))
    return;
((d->fails) = xrealloc((ptr_t)(d->fails), (d->tralloc) * sizeof(int *)));

....
Skipping nonlast addifexit:Priority 4790
At location src/dfa.c:2336
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->tralloc, d->fails, d->trans, d->realtrans, d->success, oldalloc, trans, i, eolbyte, s, d->states, d->trcount, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->musts)))
    break;
((d->fails) = xrealloc((ptr_t)(d->fails), (d->tralloc) * sizeof(int *)));

....
Skipping nonlast:Priority -209
At location src/dfa.c:2337
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
((d->success) = xrealloc((ptr_t)(d->success), (d->tralloc) * sizeof(int)));

....
Skipping nonlast:Priority -209
At location src/dfa.c:2337
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
((d->success) = xrealloc((ptr_t)(d->success), (d->tralloc) * sizeof(int)));

....
Skipping nonlast:Priority -209
At location src/dfa.c:2337
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
((d->success) = xrealloc((ptr_t)(d->success), (d->tralloc) * sizeof(int)));

....
Skipping nonlast:Priority -209
At location src/dfa.c:2337
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
((d->success) = xrealloc((ptr_t)(d->success), (d->tralloc) * sizeof(int)));

....
Skipping nonlast:Priority -209
At location src/dfa.c:2337
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
((d->success) = xrealloc((ptr_t)(d->success), (d->tralloc) * sizeof(int)));

....
Skipping nonlast:Priority -209
At location src/dfa.c:2337
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
((d->success) = xrealloc((ptr_t)(d->success), (d->tralloc) * sizeof(int)));

....
Skipping nonlast addifexit:Priority 4791
At location src/dfa.c:2337
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->tralloc, d->success, oldalloc, d->fails, d->trans, d->realtrans, trans, i, eolbyte, s, d->states, d->trcount, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->musts)))
    return;
((d->success) = xrealloc((ptr_t)(d->success), (d->tralloc) * sizeof(int)));

....
Skipping nonlast addifexit:Priority 4791
At location src/dfa.c:2337
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->tralloc, d->success, oldalloc, d->fails, d->trans, d->realtrans, trans, i, eolbyte, s, d->states, d->trcount, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->musts)))
    break;
((d->success) = xrealloc((ptr_t)(d->success), (d->tralloc) * sizeof(int)));

....
Skipping isstmt addifexit:Priority 4792
At location src/dfa.c:2338
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, oldalloc, d->tralloc, d->success, d->trans, d->fails, d->realtrans, trans, i, eolbyte, s, d->states, d->trcount, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->musts)))
    return;
while (oldalloc < d->tralloc)
    {
        d->trans[oldalloc] = ((void *)0);
        d->fails[oldalloc++] = ((void *)0);
    }

....
Skipping isstmt addifexit:Priority 4792
At location src/dfa.c:2338
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, oldalloc, d->tralloc, d->success, d->trans, d->fails, d->realtrans, trans, i, eolbyte, s, d->states, d->trcount, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->musts)))
    break;
while (oldalloc < d->tralloc)
    {
        d->trans[oldalloc] = ((void *)0);
        d->fails[oldalloc++] = ((void *)0);
    }

....
Skipping nonlast:Priority 4793
At location src/dfa.c:2340
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
d->trans[oldalloc] = ((void *)0);

....
Skipping nonlast:Priority 4793
At location src/dfa.c:2340
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
d->trans[oldalloc] = ((void *)0);

....
Skipping nonlast:Priority 4793
At location src/dfa.c:2340
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
d->trans[oldalloc] = ((void *)0);

....
Skipping nonlast:Priority 4793
At location src/dfa.c:2340
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
d->trans[oldalloc] = ((void *)0);

....
Skipping nonlast:Priority 4793
At location src/dfa.c:2340
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
d->trans[oldalloc] = ((void *)0);

....
Skipping nonlast:Priority 4793
At location src/dfa.c:2340
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
d->trans[oldalloc] = ((void *)0);

....
Skipping nonlast addifexit:Priority 9793
At location src/dfa.c:2340
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, oldalloc, d->trans, d->fails, d->tralloc, d->success, d->realtrans, trans, eolbyte, s, i, d->states, d->trcount, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->musts)))
    return;
d->trans[oldalloc] = ((void *)0);

....
Skipping nonlast addifexit:Priority 9793
At location src/dfa.c:2340
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, oldalloc, d->trans, d->fails, d->tralloc, d->success, d->realtrans, trans, eolbyte, s, i, d->states, d->trcount, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->musts)))
    break;
d->trans[oldalloc] = ((void *)0);

....
Skipping nonlast:Priority -205
At location src/dfa.c:2346
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
trans[eolbyte] = -1;

....
Skipping nonlast:Priority -205
At location src/dfa.c:2346
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
trans[eolbyte] = -1;

....
Skipping nonlast:Priority -205
At location src/dfa.c:2346
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
trans[eolbyte] = -1;

....
Skipping nonlast:Priority -205
At location src/dfa.c:2346
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
trans[eolbyte] = -1;

....
Skipping nonlast:Priority -205
At location src/dfa.c:2346
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
trans[eolbyte] = -1;

....
Skipping nonlast:Priority -205
At location src/dfa.c:2346
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
trans[eolbyte] = -1;

....
Skipping nonlast addifexit:Priority 4795
At location src/dfa.c:2346
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(trans, eolbyte, s, d, i)))
    return;
trans[eolbyte] = -1;

....
Skipping isstmt addifexit:Priority 3546
At location src/dfa.c:2348
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, d, (*d).states, (*d).states[s].constraint, trans, d->fails, eolbyte, d->trans, d->tralloc, d->success, d->realtrans, i, d->states, d->trcount, (*d).charclasses, (*d).cindex, (*d).calloc, (*d).tokens, (*d).tindex, (*d).talloc, (*d).depth, (*d).nleaves, (*d).nregexps, (*d).nmultibyte_prop, (*d).multibyte_prop, (*d).mbcsets, (*d).nmbcsets, (*d).mbcsets_alloc, (*d).sindex, (*d).salloc, (*d).follows, (*d).searchflag, (*d).tralloc, (*d).trcount, (*d).trans, (*d).realtrans, (*d).fails, (*d).success, (*d).musts, (*d).states[s].hash, (*d).states[s].newline, (*d).states[s].letter, (*d).states[s].backref, (*d).states[s].first_end, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->musts)))
    return;
if (((*d).states[s].constraint))
    d->fails[s] = trans;
else
    d->trans[s] = trans;

....
Skipping nonlast:Priority -203
At location src/dfa.c:2351
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    d->trans[s] = trans;
}

....
Skipping nonlast:Priority -203
At location src/dfa.c:2351
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    d->trans[s] = trans;
}

....
Skipping nonlast:Priority -203
At location src/dfa.c:2351
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        return lasttok = parse_bracket_exp_mb();
    }
    d->trans[s] = trans;
}

....
Skipping nonlast:Priority -203
At location src/dfa.c:2351
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    d->trans[s] = trans;
}

....
Skipping nonlast:Priority -203
At location src/dfa.c:2351
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    d->trans[s] = trans;
}

....
Skipping nonlast:Priority -203
At location src/dfa.c:2351
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    d->trans[s] = trans;
}

....
Skipping nonlast addifexit:Priority 4797
At location src/dfa.c:2351
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(s, d, trans, d->trans, d->fails, eolbyte, d->tralloc, d->success, d->realtrans, i, d->states, d->trcount, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->musts)))
        return;
    d->trans[s] = trans;
}

....
Skipping nonlast:Priority 7166
At location src/dfa.c:2357
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
d->tralloc = 1;

....
Skipping nonlast:Priority 7166
At location src/dfa.c:2357
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
d->tralloc = 1;

....
Skipping nonlast:Priority 7166
At location src/dfa.c:2357
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
d->tralloc = 1;

....
Skipping nonlast:Priority 7166
At location src/dfa.c:2357
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
d->tralloc = 1;

....
Skipping nonlast:Priority 7166
At location src/dfa.c:2357
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
d->tralloc = 1;

....
Skipping nonlast:Priority 7166
At location src/dfa.c:2357
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
d->tralloc = 1;

....
Skipping nonlast addifexit:Priority 12166
At location src/dfa.c:2357
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->tralloc, d->trcount, d->realtrans, d->trans, d->fails, d->success, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->musts)))
    return;
d->tralloc = 1;

....
Skipping nonlast:Priority -333
At location src/dfa.c:2358
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
d->trcount = 0;

....
Skipping nonlast:Priority -333
At location src/dfa.c:2358
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
d->trcount = 0;

....
Skipping nonlast:Priority -333
At location src/dfa.c:2358
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
d->trcount = 0;

....
Skipping nonlast:Priority -333
At location src/dfa.c:2358
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
d->trcount = 0;

....
Skipping nonlast:Priority -333
At location src/dfa.c:2358
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
d->trcount = 0;

....
Skipping nonlast:Priority -333
At location src/dfa.c:2358
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
d->trcount = 0;

....
Skipping nonlast addifexit:Priority 4667
At location src/dfa.c:2358
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->trcount, d->tralloc, d->realtrans, d->trans, d->fails, d->success, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->musts)))
    return;
d->trcount = 0;

....
Skipping nonlast:Priority -332
At location src/dfa.c:2359
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
((d->realtrans) = xcalloc((size_t)(d->tralloc + 1), sizeof(int *)));

....
Skipping nonlast:Priority -332
At location src/dfa.c:2359
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
((d->realtrans) = xcalloc((size_t)(d->tralloc + 1), sizeof(int *)));

....
Skipping nonlast:Priority -332
At location src/dfa.c:2359
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
((d->realtrans) = xcalloc((size_t)(d->tralloc + 1), sizeof(int *)));

....
Skipping nonlast:Priority -332
At location src/dfa.c:2359
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
((d->realtrans) = xcalloc((size_t)(d->tralloc + 1), sizeof(int *)));

....
Skipping nonlast:Priority -332
At location src/dfa.c:2359
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
((d->realtrans) = xcalloc((size_t)(d->tralloc + 1), sizeof(int *)));

....
Skipping nonlast:Priority -332
At location src/dfa.c:2359
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
((d->realtrans) = xcalloc((size_t)(d->tralloc + 1), sizeof(int *)));

....
Skipping nonlast addifexit:Priority 4668
At location src/dfa.c:2359
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->tralloc, d->realtrans, d->trcount, d->trans, d->fails, d->success, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->musts)))
    return;
((d->realtrans) = xcalloc((size_t)(d->tralloc + 1), sizeof(int *)));

....
Skipping nonlast:Priority -331
At location src/dfa.c:2360
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
d->trans = d->realtrans + 1;

....
Skipping nonlast:Priority -331
At location src/dfa.c:2360
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
d->trans = d->realtrans + 1;

....
Skipping nonlast:Priority -331
At location src/dfa.c:2360
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
d->trans = d->realtrans + 1;

....
Skipping nonlast:Priority -331
At location src/dfa.c:2360
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
d->trans = d->realtrans + 1;

....
Skipping nonlast:Priority -331
At location src/dfa.c:2360
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
d->trans = d->realtrans + 1;

....
Skipping nonlast:Priority -331
At location src/dfa.c:2360
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
d->trans = d->realtrans + 1;

....
Skipping nonlast addifexit:Priority 4669
At location src/dfa.c:2360
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->trans, d->realtrans, d->tralloc, d->fails, d->trcount, d->success, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->musts)))
    return;
d->trans = d->realtrans + 1;

....
Skipping nonlast:Priority -330
At location src/dfa.c:2361
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
((d->fails) = xcalloc((size_t)(d->tralloc), sizeof(int *)));

....
Skipping nonlast:Priority -330
At location src/dfa.c:2361
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
((d->fails) = xcalloc((size_t)(d->tralloc), sizeof(int *)));

....
Skipping nonlast:Priority -330
At location src/dfa.c:2361
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
((d->fails) = xcalloc((size_t)(d->tralloc), sizeof(int *)));

....
Skipping nonlast:Priority -330
At location src/dfa.c:2361
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
((d->fails) = xcalloc((size_t)(d->tralloc), sizeof(int *)));

....
Skipping nonlast:Priority -330
At location src/dfa.c:2361
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
((d->fails) = xcalloc((size_t)(d->tralloc), sizeof(int *)));

....
Skipping nonlast:Priority -330
At location src/dfa.c:2361
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
((d->fails) = xcalloc((size_t)(d->tralloc), sizeof(int *)));

....
Skipping nonlast addifexit:Priority 4670
At location src/dfa.c:2361
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->tralloc, d->fails, d->trans, d->realtrans, d->success, d->trcount, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->musts)))
    return;
((d->fails) = xcalloc((size_t)(d->tralloc), sizeof(int *)));

....
Skipping nonlast:Priority -329
At location src/dfa.c:2362
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
((d->success) = xmalloc((d->tralloc) * sizeof(int)));

....
Skipping nonlast:Priority -329
At location src/dfa.c:2362
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
((d->success) = xmalloc((d->tralloc) * sizeof(int)));

....
Skipping nonlast:Priority -329
At location src/dfa.c:2362
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
((d->success) = xmalloc((d->tralloc) * sizeof(int)));

....
Skipping nonlast:Priority -329
At location src/dfa.c:2362
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
((d->success) = xmalloc((d->tralloc) * sizeof(int)));

....
Skipping nonlast:Priority -329
At location src/dfa.c:2362
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
((d->success) = xmalloc((d->tralloc) * sizeof(int)));

....
Skipping nonlast:Priority -329
At location src/dfa.c:2362
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
((d->success) = xmalloc((d->tralloc) * sizeof(int)));

....
Skipping nonlast addifexit:Priority 4671
At location src/dfa.c:2362
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->tralloc, d->success, d->fails, d->trans, d->realtrans, d->trcount, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->musts)))
    return;
((d->success) = xmalloc((d->tralloc) * sizeof(int)));

....
Skipping nonlast:Priority -348
At location src/dfa.c:2803
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int s;

....
Skipping nonlast:Priority -348
At location src/dfa.c:2803
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int s;

....
Skipping nonlast:Priority -348
At location src/dfa.c:2803
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
int s;

....
Skipping nonlast:Priority -348
At location src/dfa.c:2803
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int s;

....
Skipping nonlast:Priority -348
At location src/dfa.c:2803
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int s;

....
Skipping nonlast:Priority -348
At location src/dfa.c:2803
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int s;

....
Skipping nonlast addifexit:Priority 4652
At location src/dfa.c:2803
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, d, begin, size, buf_begin, buf_end, mblen_buf, inputwcs, backref)))
    return -1;
int s;

....
Skipping nonlast addifexit:Priority 4652
At location src/dfa.c:2803
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, d, begin, size, buf_begin, buf_end, mblen_buf, inputwcs, backref)))
    return 0;
int s;

....
Skipping nonlast addifexit:Priority 4652
At location src/dfa.c:2803
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, d, begin, size, buf_begin, buf_end, mblen_buf, inputwcs, backref)))
    return 1;
int s;

....
Skipping nonlast addifexit:Priority 4652
At location src/dfa.c:2803
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, d, begin, size, buf_begin, buf_end, mblen_buf, inputwcs, backref)))
    return 2;
int s;

....
Skipping nonlast addifexit:Priority 4652
At location src/dfa.c:2803
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, d, begin, size, buf_begin, buf_end, mblen_buf, inputwcs, backref)))
    return 4;
int s;

....
Skipping nonlast addifexit:Priority 4652
At location src/dfa.c:2803
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, d, begin, size, buf_begin, buf_end, mblen_buf, inputwcs, backref)))
    return 8;
int s;

....
Skipping nonlast addifexit:Priority 4652
At location src/dfa.c:2803
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, d, begin, size, buf_begin, buf_end, mblen_buf, inputwcs, backref)))
    return 256;
int s;

....
Skipping nonlast:Priority -347
At location src/dfa.c:2804
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
const unsigned char *p;

....
Skipping nonlast:Priority -347
At location src/dfa.c:2804
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
const unsigned char *p;

....
Skipping nonlast:Priority -347
At location src/dfa.c:2804
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
const unsigned char *p;

....
Skipping nonlast:Priority -347
At location src/dfa.c:2804
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
const unsigned char *p;

....
Skipping nonlast:Priority -347
At location src/dfa.c:2804
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
const unsigned char *p;

....
Skipping nonlast:Priority -347
At location src/dfa.c:2804
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
const unsigned char *p;

....
Skipping nonlast addifexit:Priority 4653
At location src/dfa.c:2804
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, d, s, begin, size, buf_begin, buf_end, mblen_buf, inputwcs, backref)))
    return -1;
const unsigned char *p;

....
Skipping nonlast addifexit:Priority 4653
At location src/dfa.c:2804
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, d, s, begin, size, buf_begin, buf_end, mblen_buf, inputwcs, backref)))
    return 0;
const unsigned char *p;

....
Skipping nonlast addifexit:Priority 4653
At location src/dfa.c:2804
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, d, s, begin, size, buf_begin, buf_end, mblen_buf, inputwcs, backref)))
    return 1;
const unsigned char *p;

....
Skipping nonlast addifexit:Priority 4653
At location src/dfa.c:2804
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, d, s, begin, size, buf_begin, buf_end, mblen_buf, inputwcs, backref)))
    return 2;
const unsigned char *p;

....
Skipping nonlast addifexit:Priority 4653
At location src/dfa.c:2804
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, d, s, begin, size, buf_begin, buf_end, mblen_buf, inputwcs, backref)))
    return 4;
const unsigned char *p;

....
Skipping nonlast addifexit:Priority 4653
At location src/dfa.c:2804
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, d, s, begin, size, buf_begin, buf_end, mblen_buf, inputwcs, backref)))
    return 8;
const unsigned char *p;

....
Skipping nonlast addifexit:Priority 4653
At location src/dfa.c:2804
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, d, s, begin, size, buf_begin, buf_end, mblen_buf, inputwcs, backref)))
    return 256;
const unsigned char *p;

....
Skipping nonlast:Priority -346
At location src/dfa.c:2805
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
const unsigned char *end;

....
Skipping nonlast:Priority -346
At location src/dfa.c:2805
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
const unsigned char *end;

....
Skipping nonlast:Priority -346
At location src/dfa.c:2805
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
const unsigned char *end;

....
Skipping nonlast:Priority -346
At location src/dfa.c:2805
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
const unsigned char *end;

....
Skipping nonlast:Priority -346
At location src/dfa.c:2805
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
const unsigned char *end;

....
Skipping nonlast:Priority -346
At location src/dfa.c:2805
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
const unsigned char *end;

....
Skipping nonlast addifexit:Priority 4654
At location src/dfa.c:2805
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, d, s, begin, p, size, buf_begin, buf_end, mblen_buf, inputwcs, backref)))
    return -1;
const unsigned char *end;

....
Skipping nonlast addifexit:Priority 4654
At location src/dfa.c:2805
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, d, s, begin, p, size, buf_begin, buf_end, mblen_buf, inputwcs, backref)))
    return 0;
const unsigned char *end;

....
Skipping nonlast addifexit:Priority 4654
At location src/dfa.c:2805
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, d, s, begin, p, size, buf_begin, buf_end, mblen_buf, inputwcs, backref)))
    return 1;
const unsigned char *end;

....
Skipping nonlast addifexit:Priority 4654
At location src/dfa.c:2805
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, d, s, begin, p, size, buf_begin, buf_end, mblen_buf, inputwcs, backref)))
    return 2;
const unsigned char *end;

....
Skipping nonlast addifexit:Priority 4654
At location src/dfa.c:2805
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, d, s, begin, p, size, buf_begin, buf_end, mblen_buf, inputwcs, backref)))
    return 4;
const unsigned char *end;

....
Skipping nonlast addifexit:Priority 4654
At location src/dfa.c:2805
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, d, s, begin, p, size, buf_begin, buf_end, mblen_buf, inputwcs, backref)))
    return 8;
const unsigned char *end;

....
Skipping nonlast addifexit:Priority 4654
At location src/dfa.c:2805
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, d, s, begin, p, size, buf_begin, buf_end, mblen_buf, inputwcs, backref)))
    return 256;
const unsigned char *end;

....
Skipping nonlast:Priority -345
At location src/dfa.c:2806
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int **trans, *t;

....
Skipping nonlast:Priority -345
At location src/dfa.c:2806
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int **trans, *t;

....
Skipping nonlast:Priority -345
At location src/dfa.c:2806
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
int **trans, *t;

....
Skipping nonlast:Priority -345
At location src/dfa.c:2806
--Src File: src/dfa.c
Fragment 0:
if (p >= end) {
    free(mblen_buf);
    free(inputwcs);
    return (size_t)-1;
}
int **trans, *t;

....
Skipping nonlast:Priority -345
At location src/dfa.c:2806
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int **trans, *t;

....
Skipping nonlast:Priority -345
At location src/dfa.c:2806
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int **trans, *t;

....
Skipping nonlast:Priority -345
At location src/dfa.c:2806
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int **trans, *t;

....
Skipping nonlast addifexit:Priority 4655
At location src/dfa.c:2806
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, d, s, begin, p, size, end, buf_begin, buf_end, mblen_buf, inputwcs, backref)))
    return -1;
int **trans, *t;

....
Skipping nonlast addifexit:Priority 4655
At location src/dfa.c:2806
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, d, s, begin, p, size, end, buf_begin, buf_end, mblen_buf, inputwcs, backref)))
    return 0;
int **trans, *t;

....
Skipping nonlast addifexit:Priority 4655
At location src/dfa.c:2806
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, d, s, begin, p, size, end, buf_begin, buf_end, mblen_buf, inputwcs, backref)))
    return 1;
int **trans, *t;

....
Skipping nonlast addifexit:Priority 4655
At location src/dfa.c:2806
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, d, s, begin, p, size, end, buf_begin, buf_end, mblen_buf, inputwcs, backref)))
    return 2;
int **trans, *t;

....
Skipping nonlast addifexit:Priority 4655
At location src/dfa.c:2806
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, d, s, begin, p, size, end, buf_begin, buf_end, mblen_buf, inputwcs, backref)))
    return 4;
int **trans, *t;

....
Skipping nonlast addifexit:Priority 4655
At location src/dfa.c:2806
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, d, s, begin, p, size, end, buf_begin, buf_end, mblen_buf, inputwcs, backref)))
    return 8;
int **trans, *t;

....
Skipping nonlast addifexit:Priority 4655
At location src/dfa.c:2806
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, d, s, begin, p, size, end, buf_begin, buf_end, mblen_buf, inputwcs, backref)))
    return 256;
int **trans, *t;

....
Skipping nonlast:Priority -344
At location src/dfa.c:2807
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
unsigned char eol = eolbyte;

....
Skipping nonlast:Priority -344
At location src/dfa.c:2807
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
unsigned char eol = eolbyte;

....
Skipping nonlast:Priority -344
At location src/dfa.c:2807
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
unsigned char eol = eolbyte;

....
Skipping nonlast:Priority -344
At location src/dfa.c:2807
--Src File: src/dfa.c
Fragment 0:
if (p >= end) {
    free(mblen_buf);
    free(inputwcs);
    return (size_t)-1;
}
unsigned char eol = eolbyte;

....
Skipping nonlast:Priority -344
At location src/dfa.c:2807
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
unsigned char eol = eolbyte;

....
Skipping nonlast:Priority -344
At location src/dfa.c:2807
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
unsigned char eol = eolbyte;

....
Skipping nonlast:Priority -344
At location src/dfa.c:2807
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
unsigned char eol = eolbyte;

....
Skipping nonlast addifexit:Priority 4656
At location src/dfa.c:2807
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, d, s, begin, p, size, end, trans, buf_begin, buf_end, mblen_buf, inputwcs, t, backref)))
    return -1;
unsigned char eol = eolbyte;

....
Skipping nonlast addifexit:Priority 4656
At location src/dfa.c:2807
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, d, s, begin, p, size, end, trans, buf_begin, buf_end, mblen_buf, inputwcs, t, backref)))
    return 0;
unsigned char eol = eolbyte;

....
Skipping nonlast addifexit:Priority 4656
At location src/dfa.c:2807
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, d, s, begin, p, size, end, trans, buf_begin, buf_end, mblen_buf, inputwcs, t, backref)))
    return 1;
unsigned char eol = eolbyte;

....
Skipping nonlast addifexit:Priority 4656
At location src/dfa.c:2807
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, d, s, begin, p, size, end, trans, buf_begin, buf_end, mblen_buf, inputwcs, t, backref)))
    return 2;
unsigned char eol = eolbyte;

....
Skipping nonlast addifexit:Priority 4656
At location src/dfa.c:2807
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, d, s, begin, p, size, end, trans, buf_begin, buf_end, mblen_buf, inputwcs, t, backref)))
    return 4;
unsigned char eol = eolbyte;

....
Skipping nonlast addifexit:Priority 4656
At location src/dfa.c:2807
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, d, s, begin, p, size, end, trans, buf_begin, buf_end, mblen_buf, inputwcs, t, backref)))
    return 8;
unsigned char eol = eolbyte;

....
Skipping nonlast addifexit:Priority 4656
At location src/dfa.c:2807
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, d, s, begin, p, size, end, trans, buf_begin, buf_end, mblen_buf, inputwcs, t, backref)))
    return 256;
unsigned char eol = eolbyte;

....
Skipping nonlast:Priority -343
At location src/dfa.c:2808
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
static int sbit[256];

....
Skipping nonlast:Priority -343
At location src/dfa.c:2808
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
static int sbit[256];

....
Skipping nonlast:Priority -343
At location src/dfa.c:2808
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
static int sbit[256];

....
Skipping nonlast:Priority -343
At location src/dfa.c:2808
--Src File: src/dfa.c
Fragment 0:
if (p >= end) {
    free(mblen_buf);
    free(inputwcs);
    return (size_t)-1;
}
static int sbit[256];

....
Skipping nonlast:Priority -343
At location src/dfa.c:2808
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
static int sbit[256];

....
Skipping nonlast:Priority -343
At location src/dfa.c:2808
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
static int sbit[256];

....
Skipping nonlast:Priority -343
At location src/dfa.c:2808
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
static int sbit[256];

....
Skipping nonlast addifexit:Priority 4657
At location src/dfa.c:2808
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, eol, d, s, begin, p, size, end, trans, buf_begin, buf_end, mblen_buf, inputwcs, t, backref)))
    return -1;
static int sbit[256];

....
Skipping nonlast addifexit:Priority 4657
At location src/dfa.c:2808
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, eol, d, s, begin, p, size, end, trans, buf_begin, buf_end, mblen_buf, inputwcs, t, backref)))
    return 0;
static int sbit[256];

....
Skipping nonlast addifexit:Priority 4657
At location src/dfa.c:2808
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, eol, d, s, begin, p, size, end, trans, buf_begin, buf_end, mblen_buf, inputwcs, t, backref)))
    return 1;
static int sbit[256];

....
Skipping nonlast addifexit:Priority 4657
At location src/dfa.c:2808
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, eol, d, s, begin, p, size, end, trans, buf_begin, buf_end, mblen_buf, inputwcs, t, backref)))
    return 2;
static int sbit[256];

....
Skipping nonlast addifexit:Priority 4657
At location src/dfa.c:2808
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, eol, d, s, begin, p, size, end, trans, buf_begin, buf_end, mblen_buf, inputwcs, t, backref)))
    return 4;
static int sbit[256];

....
Skipping nonlast addifexit:Priority 4657
At location src/dfa.c:2808
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, eol, d, s, begin, p, size, end, trans, buf_begin, buf_end, mblen_buf, inputwcs, t, backref)))
    return 8;
static int sbit[256];

....
Skipping nonlast addifexit:Priority 4657
At location src/dfa.c:2808
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, eol, d, s, begin, p, size, end, trans, buf_begin, buf_end, mblen_buf, inputwcs, t, backref)))
    return 256;
static int sbit[256];

....
Skipping nonlast:Priority -342
At location src/dfa.c:2809
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
static int sbit_init;

....
Skipping nonlast:Priority -342
At location src/dfa.c:2809
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
static int sbit_init;

....
Skipping nonlast:Priority -342
At location src/dfa.c:2809
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
static int sbit_init;

....
Skipping nonlast:Priority -342
At location src/dfa.c:2809
--Src File: src/dfa.c
Fragment 0:
if (p >= end) {
    free(mblen_buf);
    free(inputwcs);
    return (size_t)-1;
}
static int sbit_init;

....
Skipping nonlast:Priority -342
At location src/dfa.c:2809
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
static int sbit_init;

....
Skipping nonlast:Priority -342
At location src/dfa.c:2809
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
static int sbit_init;

....
Skipping nonlast:Priority -342
At location src/dfa.c:2809
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
static int sbit_init;

....
Skipping nonlast addifexit:Priority 4658
At location src/dfa.c:2809
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, eol, d, s, begin, p, size, end, trans, buf_begin, buf_end, mblen_buf, inputwcs, t, backref)))
    return -1;
static int sbit_init;

....
Skipping nonlast addifexit:Priority 4658
At location src/dfa.c:2809
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, eol, d, s, begin, p, size, end, trans, buf_begin, buf_end, mblen_buf, inputwcs, t, backref)))
    return 0;
static int sbit_init;

....
Skipping nonlast addifexit:Priority 4658
At location src/dfa.c:2809
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, eol, d, s, begin, p, size, end, trans, buf_begin, buf_end, mblen_buf, inputwcs, t, backref)))
    return 1;
static int sbit_init;

....
Skipping nonlast addifexit:Priority 4658
At location src/dfa.c:2809
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, eol, d, s, begin, p, size, end, trans, buf_begin, buf_end, mblen_buf, inputwcs, t, backref)))
    return 2;
static int sbit_init;

....
Skipping nonlast addifexit:Priority 4658
At location src/dfa.c:2809
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, eol, d, s, begin, p, size, end, trans, buf_begin, buf_end, mblen_buf, inputwcs, t, backref)))
    return 4;
static int sbit_init;

....
Skipping nonlast addifexit:Priority 4658
At location src/dfa.c:2809
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, eol, d, s, begin, p, size, end, trans, buf_begin, buf_end, mblen_buf, inputwcs, t, backref)))
    return 8;
static int sbit_init;

....
Skipping nonlast addifexit:Priority 4658
At location src/dfa.c:2809
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(eolbyte, eol, d, s, begin, p, size, end, trans, buf_begin, buf_end, mblen_buf, inputwcs, t, backref)))
    return 256;
static int sbit_init;

....
Skipping nonlast:Priority 7159
At location src/dfa.c:2811
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (!sbit_init) {
    int i;
    sbit_init = 1;
    for (i = 0; i < (1 << 8); ++i) 
        sbit[i] = ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_')) ? 2 : 1;
    sbit[eol] = 4;
}

....
Skipping nonlast:Priority 7159
At location src/dfa.c:2811
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (!sbit_init) {
    int i;
    sbit_init = 1;
    for (i = 0; i < (1 << 8); ++i) 
        sbit[i] = ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_')) ? 2 : 1;
    sbit[eol] = 4;
}

....
Skipping nonlast:Priority 7159
At location src/dfa.c:2811
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if (!sbit_init) {
    int i;
    sbit_init = 1;
    for (i = 0; i < (1 << 8); ++i) 
        sbit[i] = ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_')) ? 2 : 1;
    sbit[eol] = 4;
}

....
Skipping nonlast:Priority 7159
At location src/dfa.c:2811
--Src File: src/dfa.c
Fragment 0:
if (p >= end) {
    free(mblen_buf);
    free(inputwcs);
    return (size_t)-1;
}
if (!sbit_init) {
    int i;
    sbit_init = 1;
    for (i = 0; i < (1 << 8); ++i) 
        sbit[i] = ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_')) ? 2 : 1;
    sbit[eol] = 4;
}

....
Skipping nonlast:Priority 7159
At location src/dfa.c:2811
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (!sbit_init) {
    int i;
    sbit_init = 1;
    for (i = 0; i < (1 << 8); ++i) 
        sbit[i] = ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_')) ? 2 : 1;
    sbit[eol] = 4;
}

....
Skipping nonlast:Priority 7159
At location src/dfa.c:2811
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (!sbit_init) {
    int i;
    sbit_init = 1;
    for (i = 0; i < (1 << 8); ++i) 
        sbit[i] = ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_')) ? 2 : 1;
    sbit[eol] = 4;
}

....
Skipping nonlast:Priority 7159
At location src/dfa.c:2811
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (!sbit_init) {
    int i;
    sbit_init = 1;
    for (i = 0; i < (1 << 8); ++i) 
        sbit[i] = ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_')) ? 2 : 1;
    sbit[eol] = 4;
}

....
Skipping nonlast addifexit:Priority 10909
At location src/dfa.c:2811
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(sbit_init, eolbyte, eol, d, s, begin, p, size, end, trans, buf_begin, buf_end, mblen_buf, inputwcs, t, backref)))
    return -1;
if (!sbit_init) {
    int i;
    sbit_init = 1;
    for (i = 0; i < (1 << 8); ++i) 
        sbit[i] = ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_')) ? 2 : 1;
    sbit[eol] = 4;
}

....
Skipping nonlast addifexit:Priority 10909
At location src/dfa.c:2811
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(sbit_init, eolbyte, eol, d, s, begin, p, size, end, trans, buf_begin, buf_end, mblen_buf, inputwcs, t, backref)))
    return 0;
if (!sbit_init) {
    int i;
    sbit_init = 1;
    for (i = 0; i < (1 << 8); ++i) 
        sbit[i] = ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_')) ? 2 : 1;
    sbit[eol] = 4;
}

....
Skipping nonlast addifexit:Priority 10909
At location src/dfa.c:2811
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(sbit_init, eolbyte, eol, d, s, begin, p, size, end, trans, buf_begin, buf_end, mblen_buf, inputwcs, t, backref)))
    return 1;
if (!sbit_init) {
    int i;
    sbit_init = 1;
    for (i = 0; i < (1 << 8); ++i) 
        sbit[i] = ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_')) ? 2 : 1;
    sbit[eol] = 4;
}

....
Skipping nonlast addifexit:Priority 10909
At location src/dfa.c:2811
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(sbit_init, eolbyte, eol, d, s, begin, p, size, end, trans, buf_begin, buf_end, mblen_buf, inputwcs, t, backref)))
    return 2;
if (!sbit_init) {
    int i;
    sbit_init = 1;
    for (i = 0; i < (1 << 8); ++i) 
        sbit[i] = ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_')) ? 2 : 1;
    sbit[eol] = 4;
}

....
Skipping nonlast addifexit:Priority 10909
At location src/dfa.c:2811
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(sbit_init, eolbyte, eol, d, s, begin, p, size, end, trans, buf_begin, buf_end, mblen_buf, inputwcs, t, backref)))
    return 4;
if (!sbit_init) {
    int i;
    sbit_init = 1;
    for (i = 0; i < (1 << 8); ++i) 
        sbit[i] = ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_')) ? 2 : 1;
    sbit[eol] = 4;
}

....
Skipping nonlast addifexit:Priority 10909
At location src/dfa.c:2811
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(sbit_init, eolbyte, eol, d, s, begin, p, size, end, trans, buf_begin, buf_end, mblen_buf, inputwcs, t, backref)))
    return 8;
if (!sbit_init) {
    int i;
    sbit_init = 1;
    for (i = 0; i < (1 << 8); ++i) 
        sbit[i] = ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_')) ? 2 : 1;
    sbit[eol] = 4;
}

....
Skipping nonlast addifexit:Priority 10909
At location src/dfa.c:2811
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(sbit_init, eolbyte, eol, d, s, begin, p, size, end, trans, buf_begin, buf_end, mblen_buf, inputwcs, t, backref)))
    return 256;
if (!sbit_init) {
    int i;
    sbit_init = 1;
    for (i = 0; i < (1 << 8); ++i) 
        sbit[i] = ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_')) ? 2 : 1;
    sbit[eol] = 4;
}

....
Skipping nonlast:Priority -340
At location src/dfa.c:2813
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int i;

....
Skipping nonlast:Priority -340
At location src/dfa.c:2813
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int i;

....
Skipping nonlast:Priority -340
At location src/dfa.c:2813
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
int i;

....
Skipping nonlast:Priority -340
At location src/dfa.c:2813
--Src File: src/dfa.c
Fragment 0:
if (p >= end) {
    free(mblen_buf);
    free(inputwcs);
    return (size_t)-1;
}
int i;

....
Skipping nonlast:Priority -340
At location src/dfa.c:2813
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int i;

....
Skipping nonlast:Priority -340
At location src/dfa.c:2813
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int i;

....
Skipping nonlast:Priority -340
At location src/dfa.c:2813
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int i;

....
Skipping nonlast addifexit:Priority 4660
At location src/dfa.c:2813
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(sbit_init, eol, eolbyte, d, s, begin, p, size, end, trans, buf_begin, buf_end, mblen_buf, inputwcs, t, backref)))
    return -1;
int i;

....
Skipping nonlast addifexit:Priority 4660
At location src/dfa.c:2813
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(sbit_init, eol, eolbyte, d, s, begin, p, size, end, trans, buf_begin, buf_end, mblen_buf, inputwcs, t, backref)))
    return 0;
int i;

....
Skipping nonlast addifexit:Priority 4660
At location src/dfa.c:2813
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(sbit_init, eol, eolbyte, d, s, begin, p, size, end, trans, buf_begin, buf_end, mblen_buf, inputwcs, t, backref)))
    return 1;
int i;

....
Skipping nonlast addifexit:Priority 4660
At location src/dfa.c:2813
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(sbit_init, eol, eolbyte, d, s, begin, p, size, end, trans, buf_begin, buf_end, mblen_buf, inputwcs, t, backref)))
    return 2;
int i;

....
Skipping nonlast addifexit:Priority 4660
At location src/dfa.c:2813
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(sbit_init, eol, eolbyte, d, s, begin, p, size, end, trans, buf_begin, buf_end, mblen_buf, inputwcs, t, backref)))
    return 4;
int i;

....
Skipping nonlast addifexit:Priority 4660
At location src/dfa.c:2813
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(sbit_init, eol, eolbyte, d, s, begin, p, size, end, trans, buf_begin, buf_end, mblen_buf, inputwcs, t, backref)))
    return 8;
int i;

....
Skipping nonlast addifexit:Priority 4660
At location src/dfa.c:2813
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(sbit_init, eol, eolbyte, d, s, begin, p, size, end, trans, buf_begin, buf_end, mblen_buf, inputwcs, t, backref)))
    return 256;
int i;

....
Skipping nonlast:Priority 4661
At location src/dfa.c:2815
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
sbit_init = 1;

....
Skipping nonlast:Priority 4661
At location src/dfa.c:2815
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
sbit_init = 1;

....
Skipping nonlast:Priority 4661
At location src/dfa.c:2815
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
sbit_init = 1;

....
Skipping nonlast:Priority 4661
At location src/dfa.c:2815
--Src File: src/dfa.c
Fragment 0:
if (p >= end) {
    free(mblen_buf);
    free(inputwcs);
    return (size_t)-1;
}
sbit_init = 1;

....
Skipping nonlast:Priority 4661
At location src/dfa.c:2815
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
sbit_init = 1;

....
Skipping nonlast:Priority 4661
At location src/dfa.c:2815
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
sbit_init = 1;

....
Skipping nonlast:Priority 4661
At location src/dfa.c:2815
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
sbit_init = 1;

....
Skipping nonlast addifexit:Priority 9661
At location src/dfa.c:2815
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(sbit_init, i, eol, d, eolbyte, s, begin, p, size, end, trans, buf_begin, buf_end, mblen_buf, inputwcs, t, backref)))
    return -1;
sbit_init = 1;

....
Skipping nonlast addifexit:Priority 9661
At location src/dfa.c:2815
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(sbit_init, i, eol, d, eolbyte, s, begin, p, size, end, trans, buf_begin, buf_end, mblen_buf, inputwcs, t, backref)))
    return 0;
sbit_init = 1;

....
Skipping nonlast addifexit:Priority 9661
At location src/dfa.c:2815
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(sbit_init, i, eol, d, eolbyte, s, begin, p, size, end, trans, buf_begin, buf_end, mblen_buf, inputwcs, t, backref)))
    return 1;
sbit_init = 1;

....
Skipping nonlast addifexit:Priority 9661
At location src/dfa.c:2815
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(sbit_init, i, eol, d, eolbyte, s, begin, p, size, end, trans, buf_begin, buf_end, mblen_buf, inputwcs, t, backref)))
    return 2;
sbit_init = 1;

....
Skipping nonlast addifexit:Priority 9661
At location src/dfa.c:2815
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(sbit_init, i, eol, d, eolbyte, s, begin, p, size, end, trans, buf_begin, buf_end, mblen_buf, inputwcs, t, backref)))
    return 4;
sbit_init = 1;

....
Skipping nonlast addifexit:Priority 9661
At location src/dfa.c:2815
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(sbit_init, i, eol, d, eolbyte, s, begin, p, size, end, trans, buf_begin, buf_end, mblen_buf, inputwcs, t, backref)))
    return 8;
sbit_init = 1;

....
Skipping nonlast addifexit:Priority 9661
At location src/dfa.c:2815
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(sbit_init, i, eol, d, eolbyte, s, begin, p, size, end, trans, buf_begin, buf_end, mblen_buf, inputwcs, t, backref)))
    return 256;
sbit_init = 1;

....
Skipping nonlast:Priority -338
At location src/dfa.c:2816
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
for (i = 0; i < (1 << 8); ++i) 
    sbit[i] = ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_')) ? 2 : 1;

....
Skipping nonlast:Priority -338
At location src/dfa.c:2816
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
for (i = 0; i < (1 << 8); ++i) 
    sbit[i] = ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_')) ? 2 : 1;

....
Skipping nonlast:Priority -338
At location src/dfa.c:2816
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
for (i = 0; i < (1 << 8); ++i) 
    sbit[i] = ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_')) ? 2 : 1;

....
Skipping nonlast:Priority -338
At location src/dfa.c:2816
--Src File: src/dfa.c
Fragment 0:
if (p >= end) {
    free(mblen_buf);
    free(inputwcs);
    return (size_t)-1;
}
for (i = 0; i < (1 << 8); ++i) 
    sbit[i] = ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_')) ? 2 : 1;

....
Skipping nonlast:Priority -338
At location src/dfa.c:2816
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
for (i = 0; i < (1 << 8); ++i) 
    sbit[i] = ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_')) ? 2 : 1;

....
Skipping nonlast:Priority -338
At location src/dfa.c:2816
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
for (i = 0; i < (1 << 8); ++i) 
    sbit[i] = ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_')) ? 2 : 1;

....
Skipping nonlast:Priority -338
At location src/dfa.c:2816
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
for (i = 0; i < (1 << 8); ++i) 
    sbit[i] = ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_')) ? 2 : 1;

....
Skipping nonlast addifexit:Priority 4662
At location src/dfa.c:2816
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, sbit_init, eol, d, s, begin, p, eolbyte, size, end, trans, buf_begin, buf_end, mblen_buf, inputwcs, t, backref)))
    return -1;
for (i = 0; i < (1 << 8); ++i) 
    sbit[i] = ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_')) ? 2 : 1;

....
Skipping nonlast addifexit:Priority 4662
At location src/dfa.c:2816
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, sbit_init, eol, d, s, begin, p, eolbyte, size, end, trans, buf_begin, buf_end, mblen_buf, inputwcs, t, backref)))
    return 0;
for (i = 0; i < (1 << 8); ++i) 
    sbit[i] = ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_')) ? 2 : 1;

....
Skipping nonlast addifexit:Priority 4662
At location src/dfa.c:2816
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, sbit_init, eol, d, s, begin, p, eolbyte, size, end, trans, buf_begin, buf_end, mblen_buf, inputwcs, t, backref)))
    return 1;
for (i = 0; i < (1 << 8); ++i) 
    sbit[i] = ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_')) ? 2 : 1;

....
Skipping nonlast addifexit:Priority 4662
At location src/dfa.c:2816
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, sbit_init, eol, d, s, begin, p, eolbyte, size, end, trans, buf_begin, buf_end, mblen_buf, inputwcs, t, backref)))
    return 2;
for (i = 0; i < (1 << 8); ++i) 
    sbit[i] = ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_')) ? 2 : 1;

....
Skipping nonlast addifexit:Priority 4662
At location src/dfa.c:2816
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, sbit_init, eol, d, s, begin, p, eolbyte, size, end, trans, buf_begin, buf_end, mblen_buf, inputwcs, t, backref)))
    return 4;
for (i = 0; i < (1 << 8); ++i) 
    sbit[i] = ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_')) ? 2 : 1;

....
Skipping nonlast addifexit:Priority 4662
At location src/dfa.c:2816
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, sbit_init, eol, d, s, begin, p, eolbyte, size, end, trans, buf_begin, buf_end, mblen_buf, inputwcs, t, backref)))
    return 8;
for (i = 0; i < (1 << 8); ++i) 
    sbit[i] = ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_')) ? 2 : 1;

....
Skipping nonlast addifexit:Priority 4662
At location src/dfa.c:2816
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, sbit_init, eol, d, s, begin, p, eolbyte, size, end, trans, buf_begin, buf_end, mblen_buf, inputwcs, t, backref)))
    return 256;
for (i = 0; i < (1 << 8); ++i) 
    sbit[i] = ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_')) ? 2 : 1;

....
Skipping nonlast:Priority -336
At location src/dfa.c:2821
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (!d->tralloc)
    build_state_zero(d);

....
Skipping nonlast:Priority -336
At location src/dfa.c:2821
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (!d->tralloc)
    build_state_zero(d);

....
Skipping nonlast:Priority -336
At location src/dfa.c:2821
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if (!d->tralloc)
    build_state_zero(d);

....
Skipping nonlast:Priority -336
At location src/dfa.c:2821
--Src File: src/dfa.c
Fragment 0:
if (p >= end) {
    free(mblen_buf);
    free(inputwcs);
    return (size_t)-1;
}
if (!d->tralloc)
    build_state_zero(d);

....
Skipping nonlast:Priority -336
At location src/dfa.c:2821
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (!d->tralloc)
    build_state_zero(d);

....
Skipping nonlast:Priority -336
At location src/dfa.c:2821
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (!d->tralloc)
    build_state_zero(d);

....
Skipping nonlast:Priority -336
At location src/dfa.c:2821
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (!d->tralloc)
    build_state_zero(d);

....
Skipping nonlast addifexit:Priority 3414
At location src/dfa.c:2821
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->tralloc, s, eol, begin, p, size, end, trans, sbit_init, d->trans, buf_begin, buf_end, eolbyte, mblen_buf, inputwcs, t, d->states, d->fails, d->success, backref, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->trcount, d->realtrans, d->musts)))
    return -1;
if (!d->tralloc)
    build_state_zero(d);

....
Skipping nonlast addifexit:Priority 3414
At location src/dfa.c:2821
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->tralloc, s, eol, begin, p, size, end, trans, sbit_init, d->trans, buf_begin, buf_end, eolbyte, mblen_buf, inputwcs, t, d->states, d->fails, d->success, backref, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->trcount, d->realtrans, d->musts)))
    return 0;
if (!d->tralloc)
    build_state_zero(d);

....
Skipping nonlast addifexit:Priority 3414
At location src/dfa.c:2821
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->tralloc, s, eol, begin, p, size, end, trans, sbit_init, d->trans, buf_begin, buf_end, eolbyte, mblen_buf, inputwcs, t, d->states, d->fails, d->success, backref, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->trcount, d->realtrans, d->musts)))
    return 1;
if (!d->tralloc)
    build_state_zero(d);

....
Skipping nonlast addifexit:Priority 3414
At location src/dfa.c:2821
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->tralloc, s, eol, begin, p, size, end, trans, sbit_init, d->trans, buf_begin, buf_end, eolbyte, mblen_buf, inputwcs, t, d->states, d->fails, d->success, backref, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->trcount, d->realtrans, d->musts)))
    return 2;
if (!d->tralloc)
    build_state_zero(d);

....
Skipping nonlast addifexit:Priority 3414
At location src/dfa.c:2821
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->tralloc, s, eol, begin, p, size, end, trans, sbit_init, d->trans, buf_begin, buf_end, eolbyte, mblen_buf, inputwcs, t, d->states, d->fails, d->success, backref, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->trcount, d->realtrans, d->musts)))
    return 4;
if (!d->tralloc)
    build_state_zero(d);

....
Skipping nonlast addifexit:Priority 3414
At location src/dfa.c:2821
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->tralloc, s, eol, begin, p, size, end, trans, sbit_init, d->trans, buf_begin, buf_end, eolbyte, mblen_buf, inputwcs, t, d->states, d->fails, d->success, backref, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->trcount, d->realtrans, d->musts)))
    return 8;
if (!d->tralloc)
    build_state_zero(d);

....
Skipping nonlast addifexit:Priority 3414
At location src/dfa.c:2821
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->tralloc, s, eol, begin, p, size, end, trans, sbit_init, d->trans, buf_begin, buf_end, eolbyte, mblen_buf, inputwcs, t, d->states, d->fails, d->success, backref, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->trcount, d->realtrans, d->musts)))
    return 256;
if (!d->tralloc)
    build_state_zero(d);

....
Skipping nonlast:Priority -335
At location src/dfa.c:2822
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    build_state_zero(d);
}

....
Skipping nonlast:Priority -335
At location src/dfa.c:2822
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    build_state_zero(d);
}

....
Skipping nonlast:Priority -335
At location src/dfa.c:2822
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        return lasttok = parse_bracket_exp_mb();
    }
    build_state_zero(d);
}

....
Skipping nonlast:Priority -335
At location src/dfa.c:2822
--Src File: src/dfa.c
Fragment 0:
{
    if (p >= end) {
        free(mblen_buf);
        free(inputwcs);
        return (size_t)-1;
    }
    build_state_zero(d);
}

....
Skipping nonlast:Priority -335
At location src/dfa.c:2822
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    build_state_zero(d);
}

....
Skipping nonlast:Priority -335
At location src/dfa.c:2822
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    build_state_zero(d);
}

....
Skipping nonlast:Priority -335
At location src/dfa.c:2822
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    build_state_zero(d);
}

....
Skipping nonlast addifexit:Priority 4665
At location src/dfa.c:2822
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(d, d->tralloc, s, begin, p, size, end, eol, trans, d->trans, sbit_init, buf_begin, buf_end, eolbyte, mblen_buf, inputwcs, t, d->states, d->fails, d->success, backref, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->trcount, d->realtrans, d->musts)))
        return -1;
    build_state_zero(d);
}

....
Skipping nonlast addifexit:Priority 4665
At location src/dfa.c:2822
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(d, d->tralloc, s, begin, p, size, end, eol, trans, d->trans, sbit_init, buf_begin, buf_end, eolbyte, mblen_buf, inputwcs, t, d->states, d->fails, d->success, backref, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->trcount, d->realtrans, d->musts)))
        return 0;
    build_state_zero(d);
}

....
Skipping nonlast addifexit:Priority 4665
At location src/dfa.c:2822
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(d, d->tralloc, s, begin, p, size, end, eol, trans, d->trans, sbit_init, buf_begin, buf_end, eolbyte, mblen_buf, inputwcs, t, d->states, d->fails, d->success, backref, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->trcount, d->realtrans, d->musts)))
        return 1;
    build_state_zero(d);
}

....
Skipping nonlast addifexit:Priority 4665
At location src/dfa.c:2822
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(d, d->tralloc, s, begin, p, size, end, eol, trans, d->trans, sbit_init, buf_begin, buf_end, eolbyte, mblen_buf, inputwcs, t, d->states, d->fails, d->success, backref, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->trcount, d->realtrans, d->musts)))
        return 2;
    build_state_zero(d);
}

....
Skipping nonlast addifexit:Priority 4665
At location src/dfa.c:2822
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(d, d->tralloc, s, begin, p, size, end, eol, trans, d->trans, sbit_init, buf_begin, buf_end, eolbyte, mblen_buf, inputwcs, t, d->states, d->fails, d->success, backref, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->trcount, d->realtrans, d->musts)))
        return 4;
    build_state_zero(d);
}

....
Skipping nonlast addifexit:Priority 4665
At location src/dfa.c:2822
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(d, d->tralloc, s, begin, p, size, end, eol, trans, d->trans, sbit_init, buf_begin, buf_end, eolbyte, mblen_buf, inputwcs, t, d->states, d->fails, d->success, backref, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->trcount, d->realtrans, d->musts)))
        return 8;
    build_state_zero(d);
}

....
Skipping nonlast addifexit:Priority 4665
At location src/dfa.c:2822
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(d, d->tralloc, s, begin, p, size, end, eol, trans, d->trans, sbit_init, buf_begin, buf_end, eolbyte, mblen_buf, inputwcs, t, d->states, d->fails, d->success, backref, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->trcount, d->realtrans, d->musts)))
        return 256;
    build_state_zero(d);
}

....
Skipping nonlast:Priority -202
At location src/dfa.c:2824
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
s = 0;

....
Skipping nonlast:Priority -202
At location src/dfa.c:2824
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
s = 0;

....
Skipping nonlast:Priority -202
At location src/dfa.c:2824
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
s = 0;

....
Skipping nonlast:Priority -202
At location src/dfa.c:2824
--Src File: src/dfa.c
Fragment 0:
if (p >= end) {
    free(mblen_buf);
    free(inputwcs);
    return (size_t)-1;
}
s = 0;

....
Skipping nonlast:Priority -202
At location src/dfa.c:2824
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
s = 0;

....
Skipping nonlast:Priority -202
At location src/dfa.c:2824
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
s = 0;

....
Skipping nonlast:Priority -202
At location src/dfa.c:2824
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
s = 0;

....
Skipping nonlast addifexit:Priority 4798
At location src/dfa.c:2824
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, begin, p, d, size, end, trans, eol, sbit_init, buf_begin, buf_end, mblen_buf, inputwcs, eolbyte, t, backref)))
    return -1;
s = 0;

....
Skipping nonlast addifexit:Priority 4798
At location src/dfa.c:2824
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, begin, p, d, size, end, trans, eol, sbit_init, buf_begin, buf_end, mblen_buf, inputwcs, eolbyte, t, backref)))
    return 0;
s = 0;

....
Skipping nonlast addifexit:Priority 4798
At location src/dfa.c:2824
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, begin, p, d, size, end, trans, eol, sbit_init, buf_begin, buf_end, mblen_buf, inputwcs, eolbyte, t, backref)))
    return 1;
s = 0;

....
Skipping nonlast addifexit:Priority 4798
At location src/dfa.c:2824
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, begin, p, d, size, end, trans, eol, sbit_init, buf_begin, buf_end, mblen_buf, inputwcs, eolbyte, t, backref)))
    return 2;
s = 0;

....
Skipping nonlast addifexit:Priority 4798
At location src/dfa.c:2824
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, begin, p, d, size, end, trans, eol, sbit_init, buf_begin, buf_end, mblen_buf, inputwcs, eolbyte, t, backref)))
    return 4;
s = 0;

....
Skipping nonlast addifexit:Priority 4798
At location src/dfa.c:2824
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, begin, p, d, size, end, trans, eol, sbit_init, buf_begin, buf_end, mblen_buf, inputwcs, eolbyte, t, backref)))
    return 8;
s = 0;

....
Skipping nonlast addifexit:Priority 4798
At location src/dfa.c:2824
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, begin, p, d, size, end, trans, eol, sbit_init, buf_begin, buf_end, mblen_buf, inputwcs, eolbyte, t, backref)))
    return 256;
s = 0;

....
Skipping nonlast:Priority -201
At location src/dfa.c:2825
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
p = (const unsigned char *)begin;

....
Skipping nonlast:Priority -201
At location src/dfa.c:2825
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
p = (const unsigned char *)begin;

....
Skipping nonlast:Priority -201
At location src/dfa.c:2825
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
p = (const unsigned char *)begin;

....
Skipping nonlast:Priority -201
At location src/dfa.c:2825
--Src File: src/dfa.c
Fragment 0:
if (p >= end) {
    free(mblen_buf);
    free(inputwcs);
    return (size_t)-1;
}
p = (const unsigned char *)begin;

....
Skipping nonlast:Priority -201
At location src/dfa.c:2825
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
p = (const unsigned char *)begin;

....
Skipping nonlast:Priority -201
At location src/dfa.c:2825
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
p = (const unsigned char *)begin;

....
Skipping nonlast:Priority -201
At location src/dfa.c:2825
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
p = (const unsigned char *)begin;

....
Skipping nonlast addifexit:Priority 4799
At location src/dfa.c:2825
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(begin, p, size, s, end, d, trans, eol, buf_begin, buf_end, sbit_init, mblen_buf, inputwcs, eolbyte, t, backref)))
    return -1;
p = (const unsigned char *)begin;

....
Skipping nonlast addifexit:Priority 4799
At location src/dfa.c:2825
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(begin, p, size, s, end, d, trans, eol, buf_begin, buf_end, sbit_init, mblen_buf, inputwcs, eolbyte, t, backref)))
    return 0;
p = (const unsigned char *)begin;

....
Skipping nonlast addifexit:Priority 4799
At location src/dfa.c:2825
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(begin, p, size, s, end, d, trans, eol, buf_begin, buf_end, sbit_init, mblen_buf, inputwcs, eolbyte, t, backref)))
    return 1;
p = (const unsigned char *)begin;

....
Skipping nonlast addifexit:Priority 4799
At location src/dfa.c:2825
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(begin, p, size, s, end, d, trans, eol, buf_begin, buf_end, sbit_init, mblen_buf, inputwcs, eolbyte, t, backref)))
    return 2;
p = (const unsigned char *)begin;

....
Skipping nonlast addifexit:Priority 4799
At location src/dfa.c:2825
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(begin, p, size, s, end, d, trans, eol, buf_begin, buf_end, sbit_init, mblen_buf, inputwcs, eolbyte, t, backref)))
    return 4;
p = (const unsigned char *)begin;

....
Skipping nonlast addifexit:Priority 4799
At location src/dfa.c:2825
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(begin, p, size, s, end, d, trans, eol, buf_begin, buf_end, sbit_init, mblen_buf, inputwcs, eolbyte, t, backref)))
    return 8;
p = (const unsigned char *)begin;

....
Skipping nonlast addifexit:Priority 4799
At location src/dfa.c:2825
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(begin, p, size, s, end, d, trans, eol, buf_begin, buf_end, sbit_init, mblen_buf, inputwcs, eolbyte, t, backref)))
    return 256;
p = (const unsigned char *)begin;

....
Skipping nonlast:Priority -200
At location src/dfa.c:2826
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
end = p + size;

....
Skipping nonlast:Priority -200
At location src/dfa.c:2826
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
end = p + size;

....
Skipping nonlast:Priority -200
At location src/dfa.c:2826
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
end = p + size;

....
Skipping nonlast:Priority -200
At location src/dfa.c:2826
--Src File: src/dfa.c
Fragment 0:
if (p >= end) {
    free(mblen_buf);
    free(inputwcs);
    return (size_t)-1;
}
end = p + size;

....
Skipping nonlast:Priority -200
At location src/dfa.c:2826
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
end = p + size;

....
Skipping nonlast:Priority -200
At location src/dfa.c:2826
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
end = p + size;

....
Skipping nonlast:Priority -200
At location src/dfa.c:2826
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
end = p + size;

....
Skipping nonlast addifexit:Priority 4800
At location src/dfa.c:2826
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(size, p, end, d, begin, trans, d->trans, s, d->tralloc, buf_begin, eol, buf_end, sbit_init, mblen_buf, inputwcs, eolbyte, t, d->states, d->fails, d->success, backref, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->trcount, d->realtrans, d->musts)))
    return -1;
end = p + size;

....
Skipping nonlast addifexit:Priority 4800
At location src/dfa.c:2826
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(size, p, end, d, begin, trans, d->trans, s, d->tralloc, buf_begin, eol, buf_end, sbit_init, mblen_buf, inputwcs, eolbyte, t, d->states, d->fails, d->success, backref, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->trcount, d->realtrans, d->musts)))
    return 0;
end = p + size;

....
Skipping nonlast addifexit:Priority 4800
At location src/dfa.c:2826
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(size, p, end, d, begin, trans, d->trans, s, d->tralloc, buf_begin, eol, buf_end, sbit_init, mblen_buf, inputwcs, eolbyte, t, d->states, d->fails, d->success, backref, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->trcount, d->realtrans, d->musts)))
    return 1;
end = p + size;

....
Skipping nonlast addifexit:Priority 4800
At location src/dfa.c:2826
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(size, p, end, d, begin, trans, d->trans, s, d->tralloc, buf_begin, eol, buf_end, sbit_init, mblen_buf, inputwcs, eolbyte, t, d->states, d->fails, d->success, backref, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->trcount, d->realtrans, d->musts)))
    return 2;
end = p + size;

....
Skipping nonlast addifexit:Priority 4800
At location src/dfa.c:2826
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(size, p, end, d, begin, trans, d->trans, s, d->tralloc, buf_begin, eol, buf_end, sbit_init, mblen_buf, inputwcs, eolbyte, t, d->states, d->fails, d->success, backref, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->trcount, d->realtrans, d->musts)))
    return 4;
end = p + size;

....
Skipping nonlast addifexit:Priority 4800
At location src/dfa.c:2826
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(size, p, end, d, begin, trans, d->trans, s, d->tralloc, buf_begin, eol, buf_end, sbit_init, mblen_buf, inputwcs, eolbyte, t, d->states, d->fails, d->success, backref, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->trcount, d->realtrans, d->musts)))
    return 8;
end = p + size;

....
Skipping nonlast addifexit:Priority 4800
At location src/dfa.c:2826
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(size, p, end, d, begin, trans, d->trans, s, d->tralloc, buf_begin, eol, buf_end, sbit_init, mblen_buf, inputwcs, eolbyte, t, d->states, d->fails, d->success, backref, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->trcount, d->realtrans, d->musts)))
    return 256;
end = p + size;

....
Skipping nonlast:Priority -199
At location src/dfa.c:2827
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
trans = d->trans;

....
Skipping nonlast:Priority -199
At location src/dfa.c:2827
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
trans = d->trans;

....
Skipping nonlast:Priority -199
At location src/dfa.c:2827
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
trans = d->trans;

....
Skipping nonlast:Priority -199
At location src/dfa.c:2827
--Src File: src/dfa.c
Fragment 0:
if (p >= end) {
    free(mblen_buf);
    free(inputwcs);
    return (size_t)-1;
}
trans = d->trans;

....
Skipping nonlast:Priority -199
At location src/dfa.c:2827
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
trans = d->trans;

....
Skipping nonlast:Priority -199
At location src/dfa.c:2827
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
trans = d->trans;

....
Skipping nonlast:Priority -199
At location src/dfa.c:2827
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
trans = d->trans;

....
Skipping nonlast addifexit:Priority 4801
At location src/dfa.c:2827
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, trans, d->trans, size, p, end, begin, s, buf_begin, d->tralloc, buf_end, eol, mblen_buf, inputwcs, sbit_init, eolbyte, t, d->states, d->fails, d->success, backref, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->trcount, d->realtrans, d->musts)))
    return -1;
trans = d->trans;

....
Skipping nonlast addifexit:Priority 4801
At location src/dfa.c:2827
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, trans, d->trans, size, p, end, begin, s, buf_begin, d->tralloc, buf_end, eol, mblen_buf, inputwcs, sbit_init, eolbyte, t, d->states, d->fails, d->success, backref, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->trcount, d->realtrans, d->musts)))
    return 0;
trans = d->trans;

....
Skipping nonlast addifexit:Priority 4801
At location src/dfa.c:2827
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, trans, d->trans, size, p, end, begin, s, buf_begin, d->tralloc, buf_end, eol, mblen_buf, inputwcs, sbit_init, eolbyte, t, d->states, d->fails, d->success, backref, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->trcount, d->realtrans, d->musts)))
    return 1;
trans = d->trans;

....
Skipping nonlast addifexit:Priority 4801
At location src/dfa.c:2827
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, trans, d->trans, size, p, end, begin, s, buf_begin, d->tralloc, buf_end, eol, mblen_buf, inputwcs, sbit_init, eolbyte, t, d->states, d->fails, d->success, backref, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->trcount, d->realtrans, d->musts)))
    return 2;
trans = d->trans;

....
Skipping nonlast addifexit:Priority 4801
At location src/dfa.c:2827
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, trans, d->trans, size, p, end, begin, s, buf_begin, d->tralloc, buf_end, eol, mblen_buf, inputwcs, sbit_init, eolbyte, t, d->states, d->fails, d->success, backref, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->trcount, d->realtrans, d->musts)))
    return 4;
trans = d->trans;

....
Skipping nonlast addifexit:Priority 4801
At location src/dfa.c:2827
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, trans, d->trans, size, p, end, begin, s, buf_begin, d->tralloc, buf_end, eol, mblen_buf, inputwcs, sbit_init, eolbyte, t, d->states, d->fails, d->success, backref, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->trcount, d->realtrans, d->musts)))
    return 8;
trans = d->trans;

....
Skipping nonlast addifexit:Priority 4801
At location src/dfa.c:2827
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, trans, d->trans, size, p, end, begin, s, buf_begin, d->tralloc, buf_end, eol, mblen_buf, inputwcs, sbit_init, eolbyte, t, d->states, d->fails, d->success, backref, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->trcount, d->realtrans, d->musts)))
    return 256;
trans = d->trans;

....
Skipping nonlast:Priority -198
At location src/dfa.c:2830
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if ((__ctype_get_mb_cur_max()) > 1) {
    int remain_bytes, i;
    buf_begin = (const unsigned char *)begin;
    buf_end = end;
    ((mblen_buf) = xmalloc((end - (const unsigned char *)begin + 2) * sizeof(unsigned char)));
    ((inputwcs) = xmalloc((end - (const unsigned char *)begin + 2) * sizeof(wchar_t)));
    memset(&mbs, 0, sizeof(mbstate_t));
    remain_bytes = 0;
    for (i = 0; i < end - (const unsigned char *)begin; i++) {
        if (remain_bytes == 0) {
            remain_bytes = mbrtowc(inputwcs + i, begin + i, end - (const unsigned char *)begin - i, &mbs);
            if (remain_bytes <= 1) {
                remain_bytes = 0;
                inputwcs[i] = (wchar_t)begin[i];
                mblen_buf[i] = 0;
            } else {
                mblen_buf[i] = remain_bytes;
                remain_bytes--;
            }
        } else {
            mblen_buf[i] = remain_bytes;
            inputwcs[i] = 0;
            remain_bytes--;
        }
    }
    mblen_buf[i] = 0;
    inputwcs[i] = 0;
}

....
Skipping nonlast:Priority -198
At location src/dfa.c:2830
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if ((__ctype_get_mb_cur_max()) > 1) {
    int remain_bytes, i;
    buf_begin = (const unsigned char *)begin;
    buf_end = end;
    ((mblen_buf) = xmalloc((end - (const unsigned char *)begin + 2) * sizeof(unsigned char)));
    ((inputwcs) = xmalloc((end - (const unsigned char *)begin + 2) * sizeof(wchar_t)));
    memset(&mbs, 0, sizeof(mbstate_t));
    remain_bytes = 0;
    for (i = 0; i < end - (const unsigned char *)begin; i++) {
        if (remain_bytes == 0) {
            remain_bytes = mbrtowc(inputwcs + i, begin + i, end - (const unsigned char *)begin - i, &mbs);
            if (remain_bytes <= 1) {
                remain_bytes = 0;
                inputwcs[i] = (wchar_t)begin[i];
                mblen_buf[i] = 0;
            } else {
                mblen_buf[i] = remain_bytes;
                remain_bytes--;
            }
        } else {
            mblen_buf[i] = remain_bytes;
            inputwcs[i] = 0;
            remain_bytes--;
        }
    }
    mblen_buf[i] = 0;
    inputwcs[i] = 0;
}

....
Skipping nonlast:Priority -198
At location src/dfa.c:2830
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if ((__ctype_get_mb_cur_max()) > 1) {
    int remain_bytes, i;
    buf_begin = (const unsigned char *)begin;
    buf_end = end;
    ((mblen_buf) = xmalloc((end - (const unsigned char *)begin + 2) * sizeof(unsigned char)));
    ((inputwcs) = xmalloc((end - (const unsigned char *)begin + 2) * sizeof(wchar_t)));
    memset(&mbs, 0, sizeof(mbstate_t));
    remain_bytes = 0;
    for (i = 0; i < end - (const unsigned char *)begin; i++) {
        if (remain_bytes == 0) {
            remain_bytes = mbrtowc(inputwcs + i, begin + i, end - (const unsigned char *)begin - i, &mbs);
            if (remain_bytes <= 1) {
                remain_bytes = 0;
                inputwcs[i] = (wchar_t)begin[i];
                mblen_buf[i] = 0;
            } else {
                mblen_buf[i] = remain_bytes;
                remain_bytes--;
            }
        } else {
            mblen_buf[i] = remain_bytes;
            inputwcs[i] = 0;
            remain_bytes--;
        }
    }
    mblen_buf[i] = 0;
    inputwcs[i] = 0;
}

....
Skipping nonlast:Priority -198
At location src/dfa.c:2830
--Src File: src/dfa.c
Fragment 0:
if (p >= end) {
    free(mblen_buf);
    free(inputwcs);
    return (size_t)-1;
}
if ((__ctype_get_mb_cur_max()) > 1) {
    int remain_bytes, i;
    buf_begin = (const unsigned char *)begin;
    buf_end = end;
    ((mblen_buf) = xmalloc((end - (const unsigned char *)begin + 2) * sizeof(unsigned char)));
    ((inputwcs) = xmalloc((end - (const unsigned char *)begin + 2) * sizeof(wchar_t)));
    memset(&mbs, 0, sizeof(mbstate_t));
    remain_bytes = 0;
    for (i = 0; i < end - (const unsigned char *)begin; i++) {
        if (remain_bytes == 0) {
            remain_bytes = mbrtowc(inputwcs + i, begin + i, end - (const unsigned char *)begin - i, &mbs);
            if (remain_bytes <= 1) {
                remain_bytes = 0;
                inputwcs[i] = (wchar_t)begin[i];
                mblen_buf[i] = 0;
            } else {
                mblen_buf[i] = remain_bytes;
                remain_bytes--;
            }
        } else {
            mblen_buf[i] = remain_bytes;
            inputwcs[i] = 0;
            remain_bytes--;
        }
    }
    mblen_buf[i] = 0;
    inputwcs[i] = 0;
}

....
Skipping nonlast:Priority -198
At location src/dfa.c:2830
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if ((__ctype_get_mb_cur_max()) > 1) {
    int remain_bytes, i;
    buf_begin = (const unsigned char *)begin;
    buf_end = end;
    ((mblen_buf) = xmalloc((end - (const unsigned char *)begin + 2) * sizeof(unsigned char)));
    ((inputwcs) = xmalloc((end - (const unsigned char *)begin + 2) * sizeof(wchar_t)));
    memset(&mbs, 0, sizeof(mbstate_t));
    remain_bytes = 0;
    for (i = 0; i < end - (const unsigned char *)begin; i++) {
        if (remain_bytes == 0) {
            remain_bytes = mbrtowc(inputwcs + i, begin + i, end - (const unsigned char *)begin - i, &mbs);
            if (remain_bytes <= 1) {
                remain_bytes = 0;
                inputwcs[i] = (wchar_t)begin[i];
                mblen_buf[i] = 0;
            } else {
                mblen_buf[i] = remain_bytes;
                remain_bytes--;
            }
        } else {
            mblen_buf[i] = remain_bytes;
            inputwcs[i] = 0;
            remain_bytes--;
        }
    }
    mblen_buf[i] = 0;
    inputwcs[i] = 0;
}

....
Skipping nonlast:Priority -198
At location src/dfa.c:2830
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if ((__ctype_get_mb_cur_max()) > 1) {
    int remain_bytes, i;
    buf_begin = (const unsigned char *)begin;
    buf_end = end;
    ((mblen_buf) = xmalloc((end - (const unsigned char *)begin + 2) * sizeof(unsigned char)));
    ((inputwcs) = xmalloc((end - (const unsigned char *)begin + 2) * sizeof(wchar_t)));
    memset(&mbs, 0, sizeof(mbstate_t));
    remain_bytes = 0;
    for (i = 0; i < end - (const unsigned char *)begin; i++) {
        if (remain_bytes == 0) {
            remain_bytes = mbrtowc(inputwcs + i, begin + i, end - (const unsigned char *)begin - i, &mbs);
            if (remain_bytes <= 1) {
                remain_bytes = 0;
                inputwcs[i] = (wchar_t)begin[i];
                mblen_buf[i] = 0;
            } else {
                mblen_buf[i] = remain_bytes;
                remain_bytes--;
            }
        } else {
            mblen_buf[i] = remain_bytes;
            inputwcs[i] = 0;
            remain_bytes--;
        }
    }
    mblen_buf[i] = 0;
    inputwcs[i] = 0;
}

....
Skipping nonlast:Priority -198
At location src/dfa.c:2830
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if ((__ctype_get_mb_cur_max()) > 1) {
    int remain_bytes, i;
    buf_begin = (const unsigned char *)begin;
    buf_end = end;
    ((mblen_buf) = xmalloc((end - (const unsigned char *)begin + 2) * sizeof(unsigned char)));
    ((inputwcs) = xmalloc((end - (const unsigned char *)begin + 2) * sizeof(wchar_t)));
    memset(&mbs, 0, sizeof(mbstate_t));
    remain_bytes = 0;
    for (i = 0; i < end - (const unsigned char *)begin; i++) {
        if (remain_bytes == 0) {
            remain_bytes = mbrtowc(inputwcs + i, begin + i, end - (const unsigned char *)begin - i, &mbs);
            if (remain_bytes <= 1) {
                remain_bytes = 0;
                inputwcs[i] = (wchar_t)begin[i];
                mblen_buf[i] = 0;
            } else {
                mblen_buf[i] = remain_bytes;
                remain_bytes--;
            }
        } else {
            mblen_buf[i] = remain_bytes;
            inputwcs[i] = 0;
            remain_bytes--;
        }
    }
    mblen_buf[i] = 0;
    inputwcs[i] = 0;
}

....
Skipping nonlast addifexit:Priority 3552
At location src/dfa.c:2830
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, begin, trans, buf_begin, size, p, end, buf_end, s, mblen_buf, inputwcs, eol, sbit_init, eolbyte, t, backref)))
    return -1;
if ((__ctype_get_mb_cur_max()) > 1) {
    int remain_bytes, i;
    buf_begin = (const unsigned char *)begin;
    buf_end = end;
    ((mblen_buf) = xmalloc((end - (const unsigned char *)begin + 2) * sizeof(unsigned char)));
    ((inputwcs) = xmalloc((end - (const unsigned char *)begin + 2) * sizeof(wchar_t)));
    memset(&mbs, 0, sizeof(mbstate_t));
    remain_bytes = 0;
    for (i = 0; i < end - (const unsigned char *)begin; i++) {
        if (remain_bytes == 0) {
            remain_bytes = mbrtowc(inputwcs + i, begin + i, end - (const unsigned char *)begin - i, &mbs);
            if (remain_bytes <= 1) {
                remain_bytes = 0;
                inputwcs[i] = (wchar_t)begin[i];
                mblen_buf[i] = 0;
            } else {
                mblen_buf[i] = remain_bytes;
                remain_bytes--;
            }
        } else {
            mblen_buf[i] = remain_bytes;
            inputwcs[i] = 0;
            remain_bytes--;
        }
    }
    mblen_buf[i] = 0;
    inputwcs[i] = 0;
}

....
Skipping nonlast addifexit:Priority 3552
At location src/dfa.c:2830
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, begin, trans, buf_begin, size, p, end, buf_end, s, mblen_buf, inputwcs, eol, sbit_init, eolbyte, t, backref)))
    return 0;
if ((__ctype_get_mb_cur_max()) > 1) {
    int remain_bytes, i;
    buf_begin = (const unsigned char *)begin;
    buf_end = end;
    ((mblen_buf) = xmalloc((end - (const unsigned char *)begin + 2) * sizeof(unsigned char)));
    ((inputwcs) = xmalloc((end - (const unsigned char *)begin + 2) * sizeof(wchar_t)));
    memset(&mbs, 0, sizeof(mbstate_t));
    remain_bytes = 0;
    for (i = 0; i < end - (const unsigned char *)begin; i++) {
        if (remain_bytes == 0) {
            remain_bytes = mbrtowc(inputwcs + i, begin + i, end - (const unsigned char *)begin - i, &mbs);
            if (remain_bytes <= 1) {
                remain_bytes = 0;
                inputwcs[i] = (wchar_t)begin[i];
                mblen_buf[i] = 0;
            } else {
                mblen_buf[i] = remain_bytes;
                remain_bytes--;
            }
        } else {
            mblen_buf[i] = remain_bytes;
            inputwcs[i] = 0;
            remain_bytes--;
        }
    }
    mblen_buf[i] = 0;
    inputwcs[i] = 0;
}

....
Skipping nonlast addifexit:Priority 3552
At location src/dfa.c:2830
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, begin, trans, buf_begin, size, p, end, buf_end, s, mblen_buf, inputwcs, eol, sbit_init, eolbyte, t, backref)))
    return 1;
if ((__ctype_get_mb_cur_max()) > 1) {
    int remain_bytes, i;
    buf_begin = (const unsigned char *)begin;
    buf_end = end;
    ((mblen_buf) = xmalloc((end - (const unsigned char *)begin + 2) * sizeof(unsigned char)));
    ((inputwcs) = xmalloc((end - (const unsigned char *)begin + 2) * sizeof(wchar_t)));
    memset(&mbs, 0, sizeof(mbstate_t));
    remain_bytes = 0;
    for (i = 0; i < end - (const unsigned char *)begin; i++) {
        if (remain_bytes == 0) {
            remain_bytes = mbrtowc(inputwcs + i, begin + i, end - (const unsigned char *)begin - i, &mbs);
            if (remain_bytes <= 1) {
                remain_bytes = 0;
                inputwcs[i] = (wchar_t)begin[i];
                mblen_buf[i] = 0;
            } else {
                mblen_buf[i] = remain_bytes;
                remain_bytes--;
            }
        } else {
            mblen_buf[i] = remain_bytes;
            inputwcs[i] = 0;
            remain_bytes--;
        }
    }
    mblen_buf[i] = 0;
    inputwcs[i] = 0;
}

....
Skipping nonlast addifexit:Priority 3552
At location src/dfa.c:2830
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, begin, trans, buf_begin, size, p, end, buf_end, s, mblen_buf, inputwcs, eol, sbit_init, eolbyte, t, backref)))
    return 2;
if ((__ctype_get_mb_cur_max()) > 1) {
    int remain_bytes, i;
    buf_begin = (const unsigned char *)begin;
    buf_end = end;
    ((mblen_buf) = xmalloc((end - (const unsigned char *)begin + 2) * sizeof(unsigned char)));
    ((inputwcs) = xmalloc((end - (const unsigned char *)begin + 2) * sizeof(wchar_t)));
    memset(&mbs, 0, sizeof(mbstate_t));
    remain_bytes = 0;
    for (i = 0; i < end - (const unsigned char *)begin; i++) {
        if (remain_bytes == 0) {
            remain_bytes = mbrtowc(inputwcs + i, begin + i, end - (const unsigned char *)begin - i, &mbs);
            if (remain_bytes <= 1) {
                remain_bytes = 0;
                inputwcs[i] = (wchar_t)begin[i];
                mblen_buf[i] = 0;
            } else {
                mblen_buf[i] = remain_bytes;
                remain_bytes--;
            }
        } else {
            mblen_buf[i] = remain_bytes;
            inputwcs[i] = 0;
            remain_bytes--;
        }
    }
    mblen_buf[i] = 0;
    inputwcs[i] = 0;
}

....
Skipping nonlast addifexit:Priority 3552
At location src/dfa.c:2830
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, begin, trans, buf_begin, size, p, end, buf_end, s, mblen_buf, inputwcs, eol, sbit_init, eolbyte, t, backref)))
    return 4;
if ((__ctype_get_mb_cur_max()) > 1) {
    int remain_bytes, i;
    buf_begin = (const unsigned char *)begin;
    buf_end = end;
    ((mblen_buf) = xmalloc((end - (const unsigned char *)begin + 2) * sizeof(unsigned char)));
    ((inputwcs) = xmalloc((end - (const unsigned char *)begin + 2) * sizeof(wchar_t)));
    memset(&mbs, 0, sizeof(mbstate_t));
    remain_bytes = 0;
    for (i = 0; i < end - (const unsigned char *)begin; i++) {
        if (remain_bytes == 0) {
            remain_bytes = mbrtowc(inputwcs + i, begin + i, end - (const unsigned char *)begin - i, &mbs);
            if (remain_bytes <= 1) {
                remain_bytes = 0;
                inputwcs[i] = (wchar_t)begin[i];
                mblen_buf[i] = 0;
            } else {
                mblen_buf[i] = remain_bytes;
                remain_bytes--;
            }
        } else {
            mblen_buf[i] = remain_bytes;
            inputwcs[i] = 0;
            remain_bytes--;
        }
    }
    mblen_buf[i] = 0;
    inputwcs[i] = 0;
}

....
Skipping nonlast addifexit:Priority 3552
At location src/dfa.c:2830
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, begin, trans, buf_begin, size, p, end, buf_end, s, mblen_buf, inputwcs, eol, sbit_init, eolbyte, t, backref)))
    return 8;
if ((__ctype_get_mb_cur_max()) > 1) {
    int remain_bytes, i;
    buf_begin = (const unsigned char *)begin;
    buf_end = end;
    ((mblen_buf) = xmalloc((end - (const unsigned char *)begin + 2) * sizeof(unsigned char)));
    ((inputwcs) = xmalloc((end - (const unsigned char *)begin + 2) * sizeof(wchar_t)));
    memset(&mbs, 0, sizeof(mbstate_t));
    remain_bytes = 0;
    for (i = 0; i < end - (const unsigned char *)begin; i++) {
        if (remain_bytes == 0) {
            remain_bytes = mbrtowc(inputwcs + i, begin + i, end - (const unsigned char *)begin - i, &mbs);
            if (remain_bytes <= 1) {
                remain_bytes = 0;
                inputwcs[i] = (wchar_t)begin[i];
                mblen_buf[i] = 0;
            } else {
                mblen_buf[i] = remain_bytes;
                remain_bytes--;
            }
        } else {
            mblen_buf[i] = remain_bytes;
            inputwcs[i] = 0;
            remain_bytes--;
        }
    }
    mblen_buf[i] = 0;
    inputwcs[i] = 0;
}

....
Skipping nonlast addifexit:Priority 3552
At location src/dfa.c:2830
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, begin, trans, buf_begin, size, p, end, buf_end, s, mblen_buf, inputwcs, eol, sbit_init, eolbyte, t, backref)))
    return 256;
if ((__ctype_get_mb_cur_max()) > 1) {
    int remain_bytes, i;
    buf_begin = (const unsigned char *)begin;
    buf_end = end;
    ((mblen_buf) = xmalloc((end - (const unsigned char *)begin + 2) * sizeof(unsigned char)));
    ((inputwcs) = xmalloc((end - (const unsigned char *)begin + 2) * sizeof(wchar_t)));
    memset(&mbs, 0, sizeof(mbstate_t));
    remain_bytes = 0;
    for (i = 0; i < end - (const unsigned char *)begin; i++) {
        if (remain_bytes == 0) {
            remain_bytes = mbrtowc(inputwcs + i, begin + i, end - (const unsigned char *)begin - i, &mbs);
            if (remain_bytes <= 1) {
                remain_bytes = 0;
                inputwcs[i] = (wchar_t)begin[i];
                mblen_buf[i] = 0;
            } else {
                mblen_buf[i] = remain_bytes;
                remain_bytes--;
            }
        } else {
            mblen_buf[i] = remain_bytes;
            inputwcs[i] = 0;
            remain_bytes--;
        }
    }
    mblen_buf[i] = 0;
    inputwcs[i] = 0;
}

....
Skipping returnreturn addifexit:Priority 4803
At location src/dfa.c:2872
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, trans, t, inputwcs, mblen_buf, p, end, buf_begin, buf_end, d, begin, backref, size, eol, sbit_init, eolbyte)))
    return -1;
for (;;) {
    if ((__ctype_get_mb_cur_max()) > 1)
        while ((t = trans[s]))
            {
                if (s == 0) {
                    while (inputwcs[p - buf_begin] == 0 && mblen_buf[p - buf_begin] > 0 && p < buf_end)
                        ++p;
                    if (p >= end) {
                        free(mblen_buf);
                        free(inputwcs);
                        return (size_t)-1;
                    }
                }
                ;
                if (d->states[s].mbps.nelem == 0) {
                    s = t[*p++];
                    continue;
                }
                s = transit_state(d, s, &p);
                trans = d->trans;
            }
    else
        while ((t = trans[s]))
            s = t[*p++];
    if (s < 0) {
        if (p == end) {
            if ((__ctype_get_mb_cur_max()) > 1) {
                free(mblen_buf);
                free(inputwcs);
            }
            return (size_t)-1;
        }
        s = 0;
    } else if ((t = d->fails[s])) {
        if (d->success[s] & sbit[*p]) {
            if (backref)
                *backref = (d->states[s].backref != 0);
            if ((__ctype_get_mb_cur_max()) > 1) {
                free(mblen_buf);
                free(inputwcs);
            }
            return (const char *)p - begin;
        }
        if ((__ctype_get_mb_cur_max()) > 1) {
            if (s == 0) {
                while (inputwcs[p - buf_begin] == 0 && mblen_buf[p - buf_begin] > 0 && p < buf_end)
                    ++p;
                if (p >= end) {
                    free(mblen_buf);
                    free(inputwcs);
                    return (size_t)-1;
                }
            }
            ;
            if (d->states[s].mbps.nelem == 0) {
                s = t[*p++];
                continue;
            }
            s = transit_state(d, s, &p);
            trans = d->trans;
        } else
            s = t[*p++];
    } else {
        build_state(s, d);
        trans = d->trans;
    }
}

....
Skipping returnreturn addifexit:Priority 4803
At location src/dfa.c:2872
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, trans, t, inputwcs, mblen_buf, p, end, buf_begin, buf_end, d, begin, backref, size, eol, sbit_init, eolbyte)))
    return 0;
for (;;) {
    if ((__ctype_get_mb_cur_max()) > 1)
        while ((t = trans[s]))
            {
                if (s == 0) {
                    while (inputwcs[p - buf_begin] == 0 && mblen_buf[p - buf_begin] > 0 && p < buf_end)
                        ++p;
                    if (p >= end) {
                        free(mblen_buf);
                        free(inputwcs);
                        return (size_t)-1;
                    }
                }
                ;
                if (d->states[s].mbps.nelem == 0) {
                    s = t[*p++];
                    continue;
                }
                s = transit_state(d, s, &p);
                trans = d->trans;
            }
    else
        while ((t = trans[s]))
            s = t[*p++];
    if (s < 0) {
        if (p == end) {
            if ((__ctype_get_mb_cur_max()) > 1) {
                free(mblen_buf);
                free(inputwcs);
            }
            return (size_t)-1;
        }
        s = 0;
    } else if ((t = d->fails[s])) {
        if (d->success[s] & sbit[*p]) {
            if (backref)
                *backref = (d->states[s].backref != 0);
            if ((__ctype_get_mb_cur_max()) > 1) {
                free(mblen_buf);
                free(inputwcs);
            }
            return (const char *)p - begin;
        }
        if ((__ctype_get_mb_cur_max()) > 1) {
            if (s == 0) {
                while (inputwcs[p - buf_begin] == 0 && mblen_buf[p - buf_begin] > 0 && p < buf_end)
                    ++p;
                if (p >= end) {
                    free(mblen_buf);
                    free(inputwcs);
                    return (size_t)-1;
                }
            }
            ;
            if (d->states[s].mbps.nelem == 0) {
                s = t[*p++];
                continue;
            }
            s = transit_state(d, s, &p);
            trans = d->trans;
        } else
            s = t[*p++];
    } else {
        build_state(s, d);
        trans = d->trans;
    }
}

....
Skipping returnreturn addifexit:Priority 4803
At location src/dfa.c:2872
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, trans, t, inputwcs, mblen_buf, p, end, buf_begin, buf_end, d, begin, backref, size, eol, sbit_init, eolbyte)))
    return 1;
for (;;) {
    if ((__ctype_get_mb_cur_max()) > 1)
        while ((t = trans[s]))
            {
                if (s == 0) {
                    while (inputwcs[p - buf_begin] == 0 && mblen_buf[p - buf_begin] > 0 && p < buf_end)
                        ++p;
                    if (p >= end) {
                        free(mblen_buf);
                        free(inputwcs);
                        return (size_t)-1;
                    }
                }
                ;
                if (d->states[s].mbps.nelem == 0) {
                    s = t[*p++];
                    continue;
                }
                s = transit_state(d, s, &p);
                trans = d->trans;
            }
    else
        while ((t = trans[s]))
            s = t[*p++];
    if (s < 0) {
        if (p == end) {
            if ((__ctype_get_mb_cur_max()) > 1) {
                free(mblen_buf);
                free(inputwcs);
            }
            return (size_t)-1;
        }
        s = 0;
    } else if ((t = d->fails[s])) {
        if (d->success[s] & sbit[*p]) {
            if (backref)
                *backref = (d->states[s].backref != 0);
            if ((__ctype_get_mb_cur_max()) > 1) {
                free(mblen_buf);
                free(inputwcs);
            }
            return (const char *)p - begin;
        }
        if ((__ctype_get_mb_cur_max()) > 1) {
            if (s == 0) {
                while (inputwcs[p - buf_begin] == 0 && mblen_buf[p - buf_begin] > 0 && p < buf_end)
                    ++p;
                if (p >= end) {
                    free(mblen_buf);
                    free(inputwcs);
                    return (size_t)-1;
                }
            }
            ;
            if (d->states[s].mbps.nelem == 0) {
                s = t[*p++];
                continue;
            }
            s = transit_state(d, s, &p);
            trans = d->trans;
        } else
            s = t[*p++];
    } else {
        build_state(s, d);
        trans = d->trans;
    }
}

....
Skipping returnreturn addifexit:Priority 4803
At location src/dfa.c:2872
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, trans, t, inputwcs, mblen_buf, p, end, buf_begin, buf_end, d, begin, backref, size, eol, sbit_init, eolbyte)))
    return 2;
for (;;) {
    if ((__ctype_get_mb_cur_max()) > 1)
        while ((t = trans[s]))
            {
                if (s == 0) {
                    while (inputwcs[p - buf_begin] == 0 && mblen_buf[p - buf_begin] > 0 && p < buf_end)
                        ++p;
                    if (p >= end) {
                        free(mblen_buf);
                        free(inputwcs);
                        return (size_t)-1;
                    }
                }
                ;
                if (d->states[s].mbps.nelem == 0) {
                    s = t[*p++];
                    continue;
                }
                s = transit_state(d, s, &p);
                trans = d->trans;
            }
    else
        while ((t = trans[s]))
            s = t[*p++];
    if (s < 0) {
        if (p == end) {
            if ((__ctype_get_mb_cur_max()) > 1) {
                free(mblen_buf);
                free(inputwcs);
            }
            return (size_t)-1;
        }
        s = 0;
    } else if ((t = d->fails[s])) {
        if (d->success[s] & sbit[*p]) {
            if (backref)
                *backref = (d->states[s].backref != 0);
            if ((__ctype_get_mb_cur_max()) > 1) {
                free(mblen_buf);
                free(inputwcs);
            }
            return (const char *)p - begin;
        }
        if ((__ctype_get_mb_cur_max()) > 1) {
            if (s == 0) {
                while (inputwcs[p - buf_begin] == 0 && mblen_buf[p - buf_begin] > 0 && p < buf_end)
                    ++p;
                if (p >= end) {
                    free(mblen_buf);
                    free(inputwcs);
                    return (size_t)-1;
                }
            }
            ;
            if (d->states[s].mbps.nelem == 0) {
                s = t[*p++];
                continue;
            }
            s = transit_state(d, s, &p);
            trans = d->trans;
        } else
            s = t[*p++];
    } else {
        build_state(s, d);
        trans = d->trans;
    }
}

....
Skipping returnreturn addifexit:Priority 4803
At location src/dfa.c:2872
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, trans, t, inputwcs, mblen_buf, p, end, buf_begin, buf_end, d, begin, backref, size, eol, sbit_init, eolbyte)))
    return 4;
for (;;) {
    if ((__ctype_get_mb_cur_max()) > 1)
        while ((t = trans[s]))
            {
                if (s == 0) {
                    while (inputwcs[p - buf_begin] == 0 && mblen_buf[p - buf_begin] > 0 && p < buf_end)
                        ++p;
                    if (p >= end) {
                        free(mblen_buf);
                        free(inputwcs);
                        return (size_t)-1;
                    }
                }
                ;
                if (d->states[s].mbps.nelem == 0) {
                    s = t[*p++];
                    continue;
                }
                s = transit_state(d, s, &p);
                trans = d->trans;
            }
    else
        while ((t = trans[s]))
            s = t[*p++];
    if (s < 0) {
        if (p == end) {
            if ((__ctype_get_mb_cur_max()) > 1) {
                free(mblen_buf);
                free(inputwcs);
            }
            return (size_t)-1;
        }
        s = 0;
    } else if ((t = d->fails[s])) {
        if (d->success[s] & sbit[*p]) {
            if (backref)
                *backref = (d->states[s].backref != 0);
            if ((__ctype_get_mb_cur_max()) > 1) {
                free(mblen_buf);
                free(inputwcs);
            }
            return (const char *)p - begin;
        }
        if ((__ctype_get_mb_cur_max()) > 1) {
            if (s == 0) {
                while (inputwcs[p - buf_begin] == 0 && mblen_buf[p - buf_begin] > 0 && p < buf_end)
                    ++p;
                if (p >= end) {
                    free(mblen_buf);
                    free(inputwcs);
                    return (size_t)-1;
                }
            }
            ;
            if (d->states[s].mbps.nelem == 0) {
                s = t[*p++];
                continue;
            }
            s = transit_state(d, s, &p);
            trans = d->trans;
        } else
            s = t[*p++];
    } else {
        build_state(s, d);
        trans = d->trans;
    }
}

....
Skipping returnreturn addifexit:Priority 4803
At location src/dfa.c:2872
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, trans, t, inputwcs, mblen_buf, p, end, buf_begin, buf_end, d, begin, backref, size, eol, sbit_init, eolbyte)))
    return 8;
for (;;) {
    if ((__ctype_get_mb_cur_max()) > 1)
        while ((t = trans[s]))
            {
                if (s == 0) {
                    while (inputwcs[p - buf_begin] == 0 && mblen_buf[p - buf_begin] > 0 && p < buf_end)
                        ++p;
                    if (p >= end) {
                        free(mblen_buf);
                        free(inputwcs);
                        return (size_t)-1;
                    }
                }
                ;
                if (d->states[s].mbps.nelem == 0) {
                    s = t[*p++];
                    continue;
                }
                s = transit_state(d, s, &p);
                trans = d->trans;
            }
    else
        while ((t = trans[s]))
            s = t[*p++];
    if (s < 0) {
        if (p == end) {
            if ((__ctype_get_mb_cur_max()) > 1) {
                free(mblen_buf);
                free(inputwcs);
            }
            return (size_t)-1;
        }
        s = 0;
    } else if ((t = d->fails[s])) {
        if (d->success[s] & sbit[*p]) {
            if (backref)
                *backref = (d->states[s].backref != 0);
            if ((__ctype_get_mb_cur_max()) > 1) {
                free(mblen_buf);
                free(inputwcs);
            }
            return (const char *)p - begin;
        }
        if ((__ctype_get_mb_cur_max()) > 1) {
            if (s == 0) {
                while (inputwcs[p - buf_begin] == 0 && mblen_buf[p - buf_begin] > 0 && p < buf_end)
                    ++p;
                if (p >= end) {
                    free(mblen_buf);
                    free(inputwcs);
                    return (size_t)-1;
                }
            }
            ;
            if (d->states[s].mbps.nelem == 0) {
                s = t[*p++];
                continue;
            }
            s = transit_state(d, s, &p);
            trans = d->trans;
        } else
            s = t[*p++];
    } else {
        build_state(s, d);
        trans = d->trans;
    }
}

....
Skipping returnreturn addifexit:Priority 4803
At location src/dfa.c:2872
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, trans, t, inputwcs, mblen_buf, p, end, buf_begin, buf_end, d, begin, backref, size, eol, sbit_init, eolbyte)))
    return 256;
for (;;) {
    if ((__ctype_get_mb_cur_max()) > 1)
        while ((t = trans[s]))
            {
                if (s == 0) {
                    while (inputwcs[p - buf_begin] == 0 && mblen_buf[p - buf_begin] > 0 && p < buf_end)
                        ++p;
                    if (p >= end) {
                        free(mblen_buf);
                        free(inputwcs);
                        return (size_t)-1;
                    }
                }
                ;
                if (d->states[s].mbps.nelem == 0) {
                    s = t[*p++];
                    continue;
                }
                s = transit_state(d, s, &p);
                trans = d->trans;
            }
    else
        while ((t = trans[s]))
            s = t[*p++];
    if (s < 0) {
        if (p == end) {
            if ((__ctype_get_mb_cur_max()) > 1) {
                free(mblen_buf);
                free(inputwcs);
            }
            return (size_t)-1;
        }
        s = 0;
    } else if ((t = d->fails[s])) {
        if (d->success[s] & sbit[*p]) {
            if (backref)
                *backref = (d->states[s].backref != 0);
            if ((__ctype_get_mb_cur_max()) > 1) {
                free(mblen_buf);
                free(inputwcs);
            }
            return (const char *)p - begin;
        }
        if ((__ctype_get_mb_cur_max()) > 1) {
            if (s == 0) {
                while (inputwcs[p - buf_begin] == 0 && mblen_buf[p - buf_begin] > 0 && p < buf_end)
                    ++p;
                if (p >= end) {
                    free(mblen_buf);
                    free(inputwcs);
                    return (size_t)-1;
                }
            }
            ;
            if (d->states[s].mbps.nelem == 0) {
                s = t[*p++];
                continue;
            }
            s = transit_state(d, s, &p);
            trans = d->trans;
        } else
            s = t[*p++];
    } else {
        build_state(s, d);
        trans = d->trans;
    }
}

....
Skipping nonlast:Priority 4804
At location src/dfa.c:2875
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if ((__ctype_get_mb_cur_max()) > 1)
    while ((t = trans[s]))
        {
            if (s == 0) {
                while (inputwcs[p - buf_begin] == 0 && mblen_buf[p - buf_begin] > 0 && p < buf_end)
                    ++p;
                if (p >= end) {
                    free(mblen_buf);
                    free(inputwcs);
                    return (size_t)-1;
                }
            }
            ;
            if (d->states[s].mbps.nelem == 0) {
                s = t[*p++];
                continue;
            }
            s = transit_state(d, s, &p);
            trans = d->trans;
        }
else
    while ((t = trans[s]))
        s = t[*p++];

....
Skipping nonlast:Priority 4804
At location src/dfa.c:2875
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if ((__ctype_get_mb_cur_max()) > 1)
    while ((t = trans[s]))
        {
            if (s == 0) {
                while (inputwcs[p - buf_begin] == 0 && mblen_buf[p - buf_begin] > 0 && p < buf_end)
                    ++p;
                if (p >= end) {
                    free(mblen_buf);
                    free(inputwcs);
                    return (size_t)-1;
                }
            }
            ;
            if (d->states[s].mbps.nelem == 0) {
                s = t[*p++];
                continue;
            }
            s = transit_state(d, s, &p);
            trans = d->trans;
        }
else
    while ((t = trans[s]))
        s = t[*p++];

....
Skipping nonlast:Priority 4804
At location src/dfa.c:2875
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if ((__ctype_get_mb_cur_max()) > 1)
    while ((t = trans[s]))
        {
            if (s == 0) {
                while (inputwcs[p - buf_begin] == 0 && mblen_buf[p - buf_begin] > 0 && p < buf_end)
                    ++p;
                if (p >= end) {
                    free(mblen_buf);
                    free(inputwcs);
                    return (size_t)-1;
                }
            }
            ;
            if (d->states[s].mbps.nelem == 0) {
                s = t[*p++];
                continue;
            }
            s = transit_state(d, s, &p);
            trans = d->trans;
        }
else
    while ((t = trans[s]))
        s = t[*p++];

....
Skipping nonlast:Priority 4804
At location src/dfa.c:2875
--Src File: src/dfa.c
Fragment 0:
if (p >= end) {
    free(mblen_buf);
    free(inputwcs);
    return (size_t)-1;
}
if ((__ctype_get_mb_cur_max()) > 1)
    while ((t = trans[s]))
        {
            if (s == 0) {
                while (inputwcs[p - buf_begin] == 0 && mblen_buf[p - buf_begin] > 0 && p < buf_end)
                    ++p;
                if (p >= end) {
                    free(mblen_buf);
                    free(inputwcs);
                    return (size_t)-1;
                }
            }
            ;
            if (d->states[s].mbps.nelem == 0) {
                s = t[*p++];
                continue;
            }
            s = transit_state(d, s, &p);
            trans = d->trans;
        }
else
    while ((t = trans[s]))
        s = t[*p++];

....
Skipping nonlast:Priority 4804
At location src/dfa.c:2875
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if ((__ctype_get_mb_cur_max()) > 1)
    while ((t = trans[s]))
        {
            if (s == 0) {
                while (inputwcs[p - buf_begin] == 0 && mblen_buf[p - buf_begin] > 0 && p < buf_end)
                    ++p;
                if (p >= end) {
                    free(mblen_buf);
                    free(inputwcs);
                    return (size_t)-1;
                }
            }
            ;
            if (d->states[s].mbps.nelem == 0) {
                s = t[*p++];
                continue;
            }
            s = transit_state(d, s, &p);
            trans = d->trans;
        }
else
    while ((t = trans[s]))
        s = t[*p++];

....
Skipping nonlast:Priority 4804
At location src/dfa.c:2875
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if ((__ctype_get_mb_cur_max()) > 1)
    while ((t = trans[s]))
        {
            if (s == 0) {
                while (inputwcs[p - buf_begin] == 0 && mblen_buf[p - buf_begin] > 0 && p < buf_end)
                    ++p;
                if (p >= end) {
                    free(mblen_buf);
                    free(inputwcs);
                    return (size_t)-1;
                }
            }
            ;
            if (d->states[s].mbps.nelem == 0) {
                s = t[*p++];
                continue;
            }
            s = transit_state(d, s, &p);
            trans = d->trans;
        }
else
    while ((t = trans[s]))
        s = t[*p++];

....
Skipping nonlast:Priority 4804
At location src/dfa.c:2875
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if ((__ctype_get_mb_cur_max()) > 1)
    while ((t = trans[s]))
        {
            if (s == 0) {
                while (inputwcs[p - buf_begin] == 0 && mblen_buf[p - buf_begin] > 0 && p < buf_end)
                    ++p;
                if (p >= end) {
                    free(mblen_buf);
                    free(inputwcs);
                    return (size_t)-1;
                }
            }
            ;
            if (d->states[s].mbps.nelem == 0) {
                s = t[*p++];
                continue;
            }
            s = transit_state(d, s, &p);
            trans = d->trans;
        }
else
    while ((t = trans[s]))
        s = t[*p++];

....
Skipping nonlast addifexit:Priority 8554
At location src/dfa.c:2875
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, trans, t, p, end, mblen_buf, inputwcs, buf_begin, buf_end, d, begin, backref, size, eol, sbit_init, eolbyte)))
    return -1;
if ((__ctype_get_mb_cur_max()) > 1)
    while ((t = trans[s]))
        {
            if (s == 0) {
                while (inputwcs[p - buf_begin] == 0 && mblen_buf[p - buf_begin] > 0 && p < buf_end)
                    ++p;
                if (p >= end) {
                    free(mblen_buf);
                    free(inputwcs);
                    return (size_t)-1;
                }
            }
            ;
            if (d->states[s].mbps.nelem == 0) {
                s = t[*p++];
                continue;
            }
            s = transit_state(d, s, &p);
            trans = d->trans;
        }
else
    while ((t = trans[s]))
        s = t[*p++];

....
Skipping nonlast addifexit:Priority 8554
At location src/dfa.c:2875
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, trans, t, p, end, mblen_buf, inputwcs, buf_begin, buf_end, d, begin, backref, size, eol, sbit_init, eolbyte)))
    return 0;
if ((__ctype_get_mb_cur_max()) > 1)
    while ((t = trans[s]))
        {
            if (s == 0) {
                while (inputwcs[p - buf_begin] == 0 && mblen_buf[p - buf_begin] > 0 && p < buf_end)
                    ++p;
                if (p >= end) {
                    free(mblen_buf);
                    free(inputwcs);
                    return (size_t)-1;
                }
            }
            ;
            if (d->states[s].mbps.nelem == 0) {
                s = t[*p++];
                continue;
            }
            s = transit_state(d, s, &p);
            trans = d->trans;
        }
else
    while ((t = trans[s]))
        s = t[*p++];

....
Skipping nonlast addifexit:Priority 8554
At location src/dfa.c:2875
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, trans, t, p, end, mblen_buf, inputwcs, buf_begin, buf_end, d, begin, backref, size, eol, sbit_init, eolbyte)))
    return 1;
if ((__ctype_get_mb_cur_max()) > 1)
    while ((t = trans[s]))
        {
            if (s == 0) {
                while (inputwcs[p - buf_begin] == 0 && mblen_buf[p - buf_begin] > 0 && p < buf_end)
                    ++p;
                if (p >= end) {
                    free(mblen_buf);
                    free(inputwcs);
                    return (size_t)-1;
                }
            }
            ;
            if (d->states[s].mbps.nelem == 0) {
                s = t[*p++];
                continue;
            }
            s = transit_state(d, s, &p);
            trans = d->trans;
        }
else
    while ((t = trans[s]))
        s = t[*p++];

....
Skipping nonlast addifexit:Priority 8554
At location src/dfa.c:2875
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, trans, t, p, end, mblen_buf, inputwcs, buf_begin, buf_end, d, begin, backref, size, eol, sbit_init, eolbyte)))
    return 2;
if ((__ctype_get_mb_cur_max()) > 1)
    while ((t = trans[s]))
        {
            if (s == 0) {
                while (inputwcs[p - buf_begin] == 0 && mblen_buf[p - buf_begin] > 0 && p < buf_end)
                    ++p;
                if (p >= end) {
                    free(mblen_buf);
                    free(inputwcs);
                    return (size_t)-1;
                }
            }
            ;
            if (d->states[s].mbps.nelem == 0) {
                s = t[*p++];
                continue;
            }
            s = transit_state(d, s, &p);
            trans = d->trans;
        }
else
    while ((t = trans[s]))
        s = t[*p++];

....
Skipping nonlast addifexit:Priority 8554
At location src/dfa.c:2875
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, trans, t, p, end, mblen_buf, inputwcs, buf_begin, buf_end, d, begin, backref, size, eol, sbit_init, eolbyte)))
    return 4;
if ((__ctype_get_mb_cur_max()) > 1)
    while ((t = trans[s]))
        {
            if (s == 0) {
                while (inputwcs[p - buf_begin] == 0 && mblen_buf[p - buf_begin] > 0 && p < buf_end)
                    ++p;
                if (p >= end) {
                    free(mblen_buf);
                    free(inputwcs);
                    return (size_t)-1;
                }
            }
            ;
            if (d->states[s].mbps.nelem == 0) {
                s = t[*p++];
                continue;
            }
            s = transit_state(d, s, &p);
            trans = d->trans;
        }
else
    while ((t = trans[s]))
        s = t[*p++];

....
Skipping nonlast addifexit:Priority 8554
At location src/dfa.c:2875
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, trans, t, p, end, mblen_buf, inputwcs, buf_begin, buf_end, d, begin, backref, size, eol, sbit_init, eolbyte)))
    return 8;
if ((__ctype_get_mb_cur_max()) > 1)
    while ((t = trans[s]))
        {
            if (s == 0) {
                while (inputwcs[p - buf_begin] == 0 && mblen_buf[p - buf_begin] > 0 && p < buf_end)
                    ++p;
                if (p >= end) {
                    free(mblen_buf);
                    free(inputwcs);
                    return (size_t)-1;
                }
            }
            ;
            if (d->states[s].mbps.nelem == 0) {
                s = t[*p++];
                continue;
            }
            s = transit_state(d, s, &p);
            trans = d->trans;
        }
else
    while ((t = trans[s]))
        s = t[*p++];

....
Skipping nonlast addifexit:Priority 8554
At location src/dfa.c:2875
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, trans, t, p, end, mblen_buf, inputwcs, buf_begin, buf_end, d, begin, backref, size, eol, sbit_init, eolbyte)))
    return 256;
if ((__ctype_get_mb_cur_max()) > 1)
    while ((t = trans[s]))
        {
            if (s == 0) {
                while (inputwcs[p - buf_begin] == 0 && mblen_buf[p - buf_begin] > 0 && p < buf_end)
                    ++p;
                if (p >= end) {
                    free(mblen_buf);
                    free(inputwcs);
                    return (size_t)-1;
                }
            }
            ;
            if (d->states[s].mbps.nelem == 0) {
                s = t[*p++];
                continue;
            }
            s = transit_state(d, s, &p);
            trans = d->trans;
        }
else
    while ((t = trans[s]))
        s = t[*p++];

....
Skipping nonlast addifexit:Priority 8554
At location src/dfa.c:2875
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, trans, t, p, end, mblen_buf, inputwcs, buf_begin, buf_end, d, begin, backref, size, eol, sbit_init, eolbyte)))
    break;
if ((__ctype_get_mb_cur_max()) > 1)
    while ((t = trans[s]))
        {
            if (s == 0) {
                while (inputwcs[p - buf_begin] == 0 && mblen_buf[p - buf_begin] > 0 && p < buf_end)
                    ++p;
                if (p >= end) {
                    free(mblen_buf);
                    free(inputwcs);
                    return (size_t)-1;
                }
            }
            ;
            if (d->states[s].mbps.nelem == 0) {
                s = t[*p++];
                continue;
            }
            s = transit_state(d, s, &p);
            trans = d->trans;
        }
else
    while ((t = trans[s]))
        s = t[*p++];

....
Skipping nonlast:Priority -195
At location src/dfa.c:2893
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    while ((t = trans[s]))
        s = t[*p++];
}

....
Skipping nonlast:Priority -195
At location src/dfa.c:2893
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    while ((t = trans[s]))
        s = t[*p++];
}

....
Skipping nonlast:Priority -195
At location src/dfa.c:2893
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        return lasttok = parse_bracket_exp_mb();
    }
    while ((t = trans[s]))
        s = t[*p++];
}

....
Skipping nonlast:Priority -195
At location src/dfa.c:2893
--Src File: src/dfa.c
Fragment 0:
{
    if (p >= end) {
        free(mblen_buf);
        free(inputwcs);
        return (size_t)-1;
    }
    while ((t = trans[s]))
        s = t[*p++];
}

....
Skipping nonlast:Priority -195
At location src/dfa.c:2893
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    while ((t = trans[s]))
        s = t[*p++];
}

....
Skipping nonlast:Priority -195
At location src/dfa.c:2893
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    while ((t = trans[s]))
        s = t[*p++];
}

....
Skipping nonlast:Priority -195
At location src/dfa.c:2893
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    while ((t = trans[s]))
        s = t[*p++];
}

....
Skipping nonlast addifexit:Priority 4805
At location src/dfa.c:2893
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(s, trans, t, p, d, end, mblen_buf, inputwcs, buf_begin, buf_end, backref, begin, size, eol, sbit_init, eolbyte)))
        return -1;
    while ((t = trans[s]))
        s = t[*p++];
}

....
Skipping nonlast addifexit:Priority 4805
At location src/dfa.c:2893
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(s, trans, t, p, d, end, mblen_buf, inputwcs, buf_begin, buf_end, backref, begin, size, eol, sbit_init, eolbyte)))
        return 0;
    while ((t = trans[s]))
        s = t[*p++];
}

....
Skipping nonlast addifexit:Priority 4805
At location src/dfa.c:2893
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(s, trans, t, p, d, end, mblen_buf, inputwcs, buf_begin, buf_end, backref, begin, size, eol, sbit_init, eolbyte)))
        return 1;
    while ((t = trans[s]))
        s = t[*p++];
}

....
Skipping nonlast addifexit:Priority 4805
At location src/dfa.c:2893
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(s, trans, t, p, d, end, mblen_buf, inputwcs, buf_begin, buf_end, backref, begin, size, eol, sbit_init, eolbyte)))
        return 2;
    while ((t = trans[s]))
        s = t[*p++];
}

....
Skipping nonlast addifexit:Priority 4805
At location src/dfa.c:2893
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(s, trans, t, p, d, end, mblen_buf, inputwcs, buf_begin, buf_end, backref, begin, size, eol, sbit_init, eolbyte)))
        return 4;
    while ((t = trans[s]))
        s = t[*p++];
}

....
Skipping nonlast addifexit:Priority 4805
At location src/dfa.c:2893
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(s, trans, t, p, d, end, mblen_buf, inputwcs, buf_begin, buf_end, backref, begin, size, eol, sbit_init, eolbyte)))
        return 8;
    while ((t = trans[s]))
        s = t[*p++];
}

....
Skipping nonlast addifexit:Priority 4805
At location src/dfa.c:2893
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(s, trans, t, p, d, end, mblen_buf, inputwcs, buf_begin, buf_end, backref, begin, size, eol, sbit_init, eolbyte)))
        return 256;
    while ((t = trans[s]))
        s = t[*p++];
}

....
Skipping nonlast addifexit:Priority 4805
At location src/dfa.c:2893
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(s, trans, t, p, d, end, mblen_buf, inputwcs, buf_begin, buf_end, backref, begin, size, eol, sbit_init, eolbyte)))
        break;
    while ((t = trans[s]))
        s = t[*p++];
}

....
Skipping returnreturn addifexit:Priority 3556
At location src/dfa.c:2896
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, p, end, t, trans, d, mblen_buf, inputwcs, buf_begin, buf_end, backref, begin, size, eol, sbit_init, eolbyte)))
    return -1;
if (s < 0) {
    if (p == end) {
        if ((__ctype_get_mb_cur_max()) > 1) {
            free(mblen_buf);
            free(inputwcs);
        }
        return (size_t)-1;
    }
    s = 0;
} else if ((t = d->fails[s])) {
    if (d->success[s] & sbit[*p]) {
        if (backref)
            *backref = (d->states[s].backref != 0);
        if ((__ctype_get_mb_cur_max()) > 1) {
            free(mblen_buf);
            free(inputwcs);
        }
        return (const char *)p - begin;
    }
    if ((__ctype_get_mb_cur_max()) > 1) {
        if (s == 0) {
            while (inputwcs[p - buf_begin] == 0 && mblen_buf[p - buf_begin] > 0 && p < buf_end)
                ++p;
            if (p >= end) {
                free(mblen_buf);
                free(inputwcs);
                return (size_t)-1;
            }
        }
        ;
        if (d->states[s].mbps.nelem == 0) {
            s = t[*p++];
            continue;
        }
        s = transit_state(d, s, &p);
        trans = d->trans;
    } else
        s = t[*p++];
} else {
    build_state(s, d);
    trans = d->trans;
}

....
Skipping returnreturn addifexit:Priority 3556
At location src/dfa.c:2896
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, p, end, t, trans, d, mblen_buf, inputwcs, buf_begin, buf_end, backref, begin, size, eol, sbit_init, eolbyte)))
    return 0;
if (s < 0) {
    if (p == end) {
        if ((__ctype_get_mb_cur_max()) > 1) {
            free(mblen_buf);
            free(inputwcs);
        }
        return (size_t)-1;
    }
    s = 0;
} else if ((t = d->fails[s])) {
    if (d->success[s] & sbit[*p]) {
        if (backref)
            *backref = (d->states[s].backref != 0);
        if ((__ctype_get_mb_cur_max()) > 1) {
            free(mblen_buf);
            free(inputwcs);
        }
        return (const char *)p - begin;
    }
    if ((__ctype_get_mb_cur_max()) > 1) {
        if (s == 0) {
            while (inputwcs[p - buf_begin] == 0 && mblen_buf[p - buf_begin] > 0 && p < buf_end)
                ++p;
            if (p >= end) {
                free(mblen_buf);
                free(inputwcs);
                return (size_t)-1;
            }
        }
        ;
        if (d->states[s].mbps.nelem == 0) {
            s = t[*p++];
            continue;
        }
        s = transit_state(d, s, &p);
        trans = d->trans;
    } else
        s = t[*p++];
} else {
    build_state(s, d);
    trans = d->trans;
}

....
Skipping returnreturn addifexit:Priority 3556
At location src/dfa.c:2896
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, p, end, t, trans, d, mblen_buf, inputwcs, buf_begin, buf_end, backref, begin, size, eol, sbit_init, eolbyte)))
    return 1;
if (s < 0) {
    if (p == end) {
        if ((__ctype_get_mb_cur_max()) > 1) {
            free(mblen_buf);
            free(inputwcs);
        }
        return (size_t)-1;
    }
    s = 0;
} else if ((t = d->fails[s])) {
    if (d->success[s] & sbit[*p]) {
        if (backref)
            *backref = (d->states[s].backref != 0);
        if ((__ctype_get_mb_cur_max()) > 1) {
            free(mblen_buf);
            free(inputwcs);
        }
        return (const char *)p - begin;
    }
    if ((__ctype_get_mb_cur_max()) > 1) {
        if (s == 0) {
            while (inputwcs[p - buf_begin] == 0 && mblen_buf[p - buf_begin] > 0 && p < buf_end)
                ++p;
            if (p >= end) {
                free(mblen_buf);
                free(inputwcs);
                return (size_t)-1;
            }
        }
        ;
        if (d->states[s].mbps.nelem == 0) {
            s = t[*p++];
            continue;
        }
        s = transit_state(d, s, &p);
        trans = d->trans;
    } else
        s = t[*p++];
} else {
    build_state(s, d);
    trans = d->trans;
}

....
Skipping returnreturn addifexit:Priority 3556
At location src/dfa.c:2896
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, p, end, t, trans, d, mblen_buf, inputwcs, buf_begin, buf_end, backref, begin, size, eol, sbit_init, eolbyte)))
    return 2;
if (s < 0) {
    if (p == end) {
        if ((__ctype_get_mb_cur_max()) > 1) {
            free(mblen_buf);
            free(inputwcs);
        }
        return (size_t)-1;
    }
    s = 0;
} else if ((t = d->fails[s])) {
    if (d->success[s] & sbit[*p]) {
        if (backref)
            *backref = (d->states[s].backref != 0);
        if ((__ctype_get_mb_cur_max()) > 1) {
            free(mblen_buf);
            free(inputwcs);
        }
        return (const char *)p - begin;
    }
    if ((__ctype_get_mb_cur_max()) > 1) {
        if (s == 0) {
            while (inputwcs[p - buf_begin] == 0 && mblen_buf[p - buf_begin] > 0 && p < buf_end)
                ++p;
            if (p >= end) {
                free(mblen_buf);
                free(inputwcs);
                return (size_t)-1;
            }
        }
        ;
        if (d->states[s].mbps.nelem == 0) {
            s = t[*p++];
            continue;
        }
        s = transit_state(d, s, &p);
        trans = d->trans;
    } else
        s = t[*p++];
} else {
    build_state(s, d);
    trans = d->trans;
}

....
Skipping returnreturn addifexit:Priority 3556
At location src/dfa.c:2896
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, p, end, t, trans, d, mblen_buf, inputwcs, buf_begin, buf_end, backref, begin, size, eol, sbit_init, eolbyte)))
    return 4;
if (s < 0) {
    if (p == end) {
        if ((__ctype_get_mb_cur_max()) > 1) {
            free(mblen_buf);
            free(inputwcs);
        }
        return (size_t)-1;
    }
    s = 0;
} else if ((t = d->fails[s])) {
    if (d->success[s] & sbit[*p]) {
        if (backref)
            *backref = (d->states[s].backref != 0);
        if ((__ctype_get_mb_cur_max()) > 1) {
            free(mblen_buf);
            free(inputwcs);
        }
        return (const char *)p - begin;
    }
    if ((__ctype_get_mb_cur_max()) > 1) {
        if (s == 0) {
            while (inputwcs[p - buf_begin] == 0 && mblen_buf[p - buf_begin] > 0 && p < buf_end)
                ++p;
            if (p >= end) {
                free(mblen_buf);
                free(inputwcs);
                return (size_t)-1;
            }
        }
        ;
        if (d->states[s].mbps.nelem == 0) {
            s = t[*p++];
            continue;
        }
        s = transit_state(d, s, &p);
        trans = d->trans;
    } else
        s = t[*p++];
} else {
    build_state(s, d);
    trans = d->trans;
}

....
Skipping returnreturn addifexit:Priority 3556
At location src/dfa.c:2896
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, p, end, t, trans, d, mblen_buf, inputwcs, buf_begin, buf_end, backref, begin, size, eol, sbit_init, eolbyte)))
    return 8;
if (s < 0) {
    if (p == end) {
        if ((__ctype_get_mb_cur_max()) > 1) {
            free(mblen_buf);
            free(inputwcs);
        }
        return (size_t)-1;
    }
    s = 0;
} else if ((t = d->fails[s])) {
    if (d->success[s] & sbit[*p]) {
        if (backref)
            *backref = (d->states[s].backref != 0);
        if ((__ctype_get_mb_cur_max()) > 1) {
            free(mblen_buf);
            free(inputwcs);
        }
        return (const char *)p - begin;
    }
    if ((__ctype_get_mb_cur_max()) > 1) {
        if (s == 0) {
            while (inputwcs[p - buf_begin] == 0 && mblen_buf[p - buf_begin] > 0 && p < buf_end)
                ++p;
            if (p >= end) {
                free(mblen_buf);
                free(inputwcs);
                return (size_t)-1;
            }
        }
        ;
        if (d->states[s].mbps.nelem == 0) {
            s = t[*p++];
            continue;
        }
        s = transit_state(d, s, &p);
        trans = d->trans;
    } else
        s = t[*p++];
} else {
    build_state(s, d);
    trans = d->trans;
}

....
Skipping returnreturn addifexit:Priority 3556
At location src/dfa.c:2896
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, p, end, t, trans, d, mblen_buf, inputwcs, buf_begin, buf_end, backref, begin, size, eol, sbit_init, eolbyte)))
    return 256;
if (s < 0) {
    if (p == end) {
        if ((__ctype_get_mb_cur_max()) > 1) {
            free(mblen_buf);
            free(inputwcs);
        }
        return (size_t)-1;
    }
    s = 0;
} else if ((t = d->fails[s])) {
    if (d->success[s] & sbit[*p]) {
        if (backref)
            *backref = (d->states[s].backref != 0);
        if ((__ctype_get_mb_cur_max()) > 1) {
            free(mblen_buf);
            free(inputwcs);
        }
        return (const char *)p - begin;
    }
    if ((__ctype_get_mb_cur_max()) > 1) {
        if (s == 0) {
            while (inputwcs[p - buf_begin] == 0 && mblen_buf[p - buf_begin] > 0 && p < buf_end)
                ++p;
            if (p >= end) {
                free(mblen_buf);
                free(inputwcs);
                return (size_t)-1;
            }
        }
        ;
        if (d->states[s].mbps.nelem == 0) {
            s = t[*p++];
            continue;
        }
        s = transit_state(d, s, &p);
        trans = d->trans;
    } else
        s = t[*p++];
} else {
    build_state(s, d);
    trans = d->trans;
}

....
Skipping returnreturn addifexit:Priority 3556
At location src/dfa.c:2896
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, p, end, t, trans, d, mblen_buf, inputwcs, buf_begin, buf_end, backref, begin, size, eol, sbit_init, eolbyte)))
    break;
if (s < 0) {
    if (p == end) {
        if ((__ctype_get_mb_cur_max()) > 1) {
            free(mblen_buf);
            free(inputwcs);
        }
        return (size_t)-1;
    }
    s = 0;
} else if ((t = d->fails[s])) {
    if (d->success[s] & sbit[*p]) {
        if (backref)
            *backref = (d->states[s].backref != 0);
        if ((__ctype_get_mb_cur_max()) > 1) {
            free(mblen_buf);
            free(inputwcs);
        }
        return (const char *)p - begin;
    }
    if ((__ctype_get_mb_cur_max()) > 1) {
        if (s == 0) {
            while (inputwcs[p - buf_begin] == 0 && mblen_buf[p - buf_begin] > 0 && p < buf_end)
                ++p;
            if (p >= end) {
                free(mblen_buf);
                free(inputwcs);
                return (size_t)-1;
            }
        }
        ;
        if (d->states[s].mbps.nelem == 0) {
            s = t[*p++];
            continue;
        }
        s = transit_state(d, s, &p);
        trans = d->trans;
    } else
        s = t[*p++];
} else {
    build_state(s, d);
    trans = d->trans;
}

....
Skipping nonlast:Priority 4933
At location src/dfa.c:2898
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (p == end) {
    if ((__ctype_get_mb_cur_max()) > 1) {
        free(mblen_buf);
        free(inputwcs);
    }
    return (size_t)-1;
}

....
Skipping nonlast:Priority 4933
At location src/dfa.c:2898
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (p == end) {
    if ((__ctype_get_mb_cur_max()) > 1) {
        free(mblen_buf);
        free(inputwcs);
    }
    return (size_t)-1;
}

....
Skipping nonlast:Priority 4933
At location src/dfa.c:2898
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if (p == end) {
    if ((__ctype_get_mb_cur_max()) > 1) {
        free(mblen_buf);
        free(inputwcs);
    }
    return (size_t)-1;
}

....
Skipping nonlast:Priority 4933
At location src/dfa.c:2898
--Src File: src/dfa.c
Fragment 0:
if (p >= end) {
    free(mblen_buf);
    free(inputwcs);
    return (size_t)-1;
}
if (p == end) {
    if ((__ctype_get_mb_cur_max()) > 1) {
        free(mblen_buf);
        free(inputwcs);
    }
    return (size_t)-1;
}

....
Skipping nonlast:Priority 4933
At location src/dfa.c:2898
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (p == end) {
    if ((__ctype_get_mb_cur_max()) > 1) {
        free(mblen_buf);
        free(inputwcs);
    }
    return (size_t)-1;
}

....
Skipping nonlast:Priority 4933
At location src/dfa.c:2898
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (p == end) {
    if ((__ctype_get_mb_cur_max()) > 1) {
        free(mblen_buf);
        free(inputwcs);
    }
    return (size_t)-1;
}

....
Skipping nonlast:Priority 4933
At location src/dfa.c:2898
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (p == end) {
    if ((__ctype_get_mb_cur_max()) > 1) {
        free(mblen_buf);
        free(inputwcs);
    }
    return (size_t)-1;
}

....
Skipping nonlast addifexit:Priority 8683
At location src/dfa.c:2898
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(p, end, s, t, trans, mblen_buf, inputwcs, d, backref, buf_begin, buf_end, begin, size, eol, sbit_init, eolbyte)))
    return -1;
if (p == end) {
    if ((__ctype_get_mb_cur_max()) > 1) {
        free(mblen_buf);
        free(inputwcs);
    }
    return (size_t)-1;
}

....
Skipping nonlast addifexit:Priority 8683
At location src/dfa.c:2898
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(p, end, s, t, trans, mblen_buf, inputwcs, d, backref, buf_begin, buf_end, begin, size, eol, sbit_init, eolbyte)))
    return 0;
if (p == end) {
    if ((__ctype_get_mb_cur_max()) > 1) {
        free(mblen_buf);
        free(inputwcs);
    }
    return (size_t)-1;
}

....
Skipping nonlast addifexit:Priority 8683
At location src/dfa.c:2898
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(p, end, s, t, trans, mblen_buf, inputwcs, d, backref, buf_begin, buf_end, begin, size, eol, sbit_init, eolbyte)))
    return 1;
if (p == end) {
    if ((__ctype_get_mb_cur_max()) > 1) {
        free(mblen_buf);
        free(inputwcs);
    }
    return (size_t)-1;
}

....
Skipping nonlast addifexit:Priority 8683
At location src/dfa.c:2898
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(p, end, s, t, trans, mblen_buf, inputwcs, d, backref, buf_begin, buf_end, begin, size, eol, sbit_init, eolbyte)))
    return 2;
if (p == end) {
    if ((__ctype_get_mb_cur_max()) > 1) {
        free(mblen_buf);
        free(inputwcs);
    }
    return (size_t)-1;
}

....
Skipping nonlast addifexit:Priority 8683
At location src/dfa.c:2898
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(p, end, s, t, trans, mblen_buf, inputwcs, d, backref, buf_begin, buf_end, begin, size, eol, sbit_init, eolbyte)))
    return 4;
if (p == end) {
    if ((__ctype_get_mb_cur_max()) > 1) {
        free(mblen_buf);
        free(inputwcs);
    }
    return (size_t)-1;
}

....
Skipping nonlast addifexit:Priority 8683
At location src/dfa.c:2898
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(p, end, s, t, trans, mblen_buf, inputwcs, d, backref, buf_begin, buf_end, begin, size, eol, sbit_init, eolbyte)))
    return 8;
if (p == end) {
    if ((__ctype_get_mb_cur_max()) > 1) {
        free(mblen_buf);
        free(inputwcs);
    }
    return (size_t)-1;
}

....
Skipping nonlast addifexit:Priority 8683
At location src/dfa.c:2898
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(p, end, s, t, trans, mblen_buf, inputwcs, d, backref, buf_begin, buf_end, begin, size, eol, sbit_init, eolbyte)))
    return 256;
if (p == end) {
    if ((__ctype_get_mb_cur_max()) > 1) {
        free(mblen_buf);
        free(inputwcs);
    }
    return (size_t)-1;
}

....
Skipping nonlast addifexit:Priority 8683
At location src/dfa.c:2898
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(p, end, s, t, trans, mblen_buf, inputwcs, d, backref, buf_begin, buf_end, begin, size, eol, sbit_init, eolbyte)))
    break;
if (p == end) {
    if ((__ctype_get_mb_cur_max()) > 1) {
        free(mblen_buf);
        free(inputwcs);
    }
    return (size_t)-1;
}

....
Skipping nonlast:Priority 4934
At location src/dfa.c:2901
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if ((__ctype_get_mb_cur_max()) > 1) {
    free(mblen_buf);
    free(inputwcs);
}

....
Skipping nonlast:Priority 4934
At location src/dfa.c:2901
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if ((__ctype_get_mb_cur_max()) > 1) {
    free(mblen_buf);
    free(inputwcs);
}

....
Skipping nonlast:Priority 4934
At location src/dfa.c:2901
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if ((__ctype_get_mb_cur_max()) > 1) {
    free(mblen_buf);
    free(inputwcs);
}

....
Skipping nonlast:Priority 4934
At location src/dfa.c:2901
--Src File: src/dfa.c
Fragment 0:
if (p >= end) {
    free(mblen_buf);
    free(inputwcs);
    return (size_t)-1;
}
if ((__ctype_get_mb_cur_max()) > 1) {
    free(mblen_buf);
    free(inputwcs);
}

....
Skipping nonlast:Priority 4934
At location src/dfa.c:2901
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if ((__ctype_get_mb_cur_max()) > 1) {
    free(mblen_buf);
    free(inputwcs);
}

....
Skipping nonlast:Priority 4934
At location src/dfa.c:2901
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if ((__ctype_get_mb_cur_max()) > 1) {
    free(mblen_buf);
    free(inputwcs);
}

....
Skipping nonlast:Priority 4934
At location src/dfa.c:2901
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if ((__ctype_get_mb_cur_max()) > 1) {
    free(mblen_buf);
    free(inputwcs);
}

....
Skipping nonlast addifexit:Priority 8684
At location src/dfa.c:2901
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mblen_buf, p, end, inputwcs, s, t, trans, d, backref, begin, buf_begin, buf_end, size, eol, sbit_init, eolbyte)))
    return -1;
if ((__ctype_get_mb_cur_max()) > 1) {
    free(mblen_buf);
    free(inputwcs);
}

....
Skipping nonlast addifexit:Priority 8684
At location src/dfa.c:2901
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mblen_buf, p, end, inputwcs, s, t, trans, d, backref, begin, buf_begin, buf_end, size, eol, sbit_init, eolbyte)))
    return 0;
if ((__ctype_get_mb_cur_max()) > 1) {
    free(mblen_buf);
    free(inputwcs);
}

....
Skipping nonlast addifexit:Priority 8684
At location src/dfa.c:2901
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mblen_buf, p, end, inputwcs, s, t, trans, d, backref, begin, buf_begin, buf_end, size, eol, sbit_init, eolbyte)))
    return 1;
if ((__ctype_get_mb_cur_max()) > 1) {
    free(mblen_buf);
    free(inputwcs);
}

....
Skipping nonlast addifexit:Priority 8684
At location src/dfa.c:2901
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mblen_buf, p, end, inputwcs, s, t, trans, d, backref, begin, buf_begin, buf_end, size, eol, sbit_init, eolbyte)))
    return 2;
if ((__ctype_get_mb_cur_max()) > 1) {
    free(mblen_buf);
    free(inputwcs);
}

....
Skipping nonlast addifexit:Priority 8684
At location src/dfa.c:2901
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mblen_buf, p, end, inputwcs, s, t, trans, d, backref, begin, buf_begin, buf_end, size, eol, sbit_init, eolbyte)))
    return 4;
if ((__ctype_get_mb_cur_max()) > 1) {
    free(mblen_buf);
    free(inputwcs);
}

....
Skipping nonlast addifexit:Priority 8684
At location src/dfa.c:2901
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mblen_buf, p, end, inputwcs, s, t, trans, d, backref, begin, buf_begin, buf_end, size, eol, sbit_init, eolbyte)))
    return 8;
if ((__ctype_get_mb_cur_max()) > 1) {
    free(mblen_buf);
    free(inputwcs);
}

....
Skipping nonlast addifexit:Priority 8684
At location src/dfa.c:2901
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mblen_buf, p, end, inputwcs, s, t, trans, d, backref, begin, buf_begin, buf_end, size, eol, sbit_init, eolbyte)))
    return 256;
if ((__ctype_get_mb_cur_max()) > 1) {
    free(mblen_buf);
    free(inputwcs);
}

....
Skipping nonlast addifexit:Priority 8684
At location src/dfa.c:2901
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mblen_buf, p, end, inputwcs, s, t, trans, d, backref, begin, buf_begin, buf_end, size, eol, sbit_init, eolbyte)))
    break;
if ((__ctype_get_mb_cur_max()) > 1) {
    free(mblen_buf);
    free(inputwcs);
}

....
Skipping returnreturn addifexit:Priority 4935
At location src/dfa.c:2907
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, inputwcs, d, t, mblen_buf, p, backref, end, trans, begin, buf_begin, buf_end, size, eol, sbit_init, eolbyte)))
    return -1;
return (size_t)-1;

....
Skipping returnreturn addifexit:Priority 4935
At location src/dfa.c:2907
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, inputwcs, d, t, mblen_buf, p, backref, end, trans, begin, buf_begin, buf_end, size, eol, sbit_init, eolbyte)))
    return 0;
return (size_t)-1;

....
Skipping returnreturn addifexit:Priority 4935
At location src/dfa.c:2907
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, inputwcs, d, t, mblen_buf, p, backref, end, trans, begin, buf_begin, buf_end, size, eol, sbit_init, eolbyte)))
    return 1;
return (size_t)-1;

....
Skipping returnreturn addifexit:Priority 4935
At location src/dfa.c:2907
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, inputwcs, d, t, mblen_buf, p, backref, end, trans, begin, buf_begin, buf_end, size, eol, sbit_init, eolbyte)))
    return 2;
return (size_t)-1;

....
Skipping returnreturn addifexit:Priority 4935
At location src/dfa.c:2907
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, inputwcs, d, t, mblen_buf, p, backref, end, trans, begin, buf_begin, buf_end, size, eol, sbit_init, eolbyte)))
    return 4;
return (size_t)-1;

....
Skipping returnreturn addifexit:Priority 4935
At location src/dfa.c:2907
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, inputwcs, d, t, mblen_buf, p, backref, end, trans, begin, buf_begin, buf_end, size, eol, sbit_init, eolbyte)))
    return 8;
return (size_t)-1;

....
Skipping returnreturn addifexit:Priority 4935
At location src/dfa.c:2907
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, inputwcs, d, t, mblen_buf, p, backref, end, trans, begin, buf_begin, buf_end, size, eol, sbit_init, eolbyte)))
    return 256;
return (size_t)-1;

....
Skipping returnreturn addifexit:Priority 4935
At location src/dfa.c:2907
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, inputwcs, d, t, mblen_buf, p, backref, end, trans, begin, buf_begin, buf_end, size, eol, sbit_init, eolbyte)))
    break;
return (size_t)-1;

....
Skipping nonlast:Priority 6753
At location src/dfa.c:2959
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
d->calloc = 1;

....
Skipping nonlast:Priority 6753
At location src/dfa.c:2959
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
d->calloc = 1;

....
Skipping nonlast:Priority 6753
At location src/dfa.c:2959
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
d->calloc = 1;

....
Skipping nonlast:Priority 6753
At location src/dfa.c:2959
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
d->calloc = 1;

....
Skipping nonlast:Priority 6753
At location src/dfa.c:2959
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
d->calloc = 1;

....
Skipping nonlast:Priority 6753
At location src/dfa.c:2959
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
d->calloc = 1;

....
Skipping nonlast addifexit:Priority 11753
At location src/dfa.c:2959
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->calloc, d->charclasses, d->cindex, d->talloc, d->tokens, d->tindex, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->nmbcsets, d->mbcsets_alloc, d->mbcsets, d->searchflag, d->tralloc, d->musts, d->states, d->sindex, d->salloc, d->follows, d->trcount, d->trans, d->realtrans, d->fails, d->success)))
    return;
d->calloc = 1;

....
Skipping nonlast:Priority -746
At location src/dfa.c:2960
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
((d->charclasses) = xmalloc((d->calloc) * sizeof(charclass)));

....
Skipping nonlast:Priority -746
At location src/dfa.c:2960
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
((d->charclasses) = xmalloc((d->calloc) * sizeof(charclass)));

....
Skipping nonlast:Priority -746
At location src/dfa.c:2960
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
((d->charclasses) = xmalloc((d->calloc) * sizeof(charclass)));

....
Skipping nonlast:Priority -746
At location src/dfa.c:2960
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
((d->charclasses) = xmalloc((d->calloc) * sizeof(charclass)));

....
Skipping nonlast:Priority -746
At location src/dfa.c:2960
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
((d->charclasses) = xmalloc((d->calloc) * sizeof(charclass)));

....
Skipping nonlast:Priority -746
At location src/dfa.c:2960
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
((d->charclasses) = xmalloc((d->calloc) * sizeof(charclass)));

....
Skipping nonlast addifexit:Priority 4254
At location src/dfa.c:2960
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->charclasses, d->calloc, d->cindex, d->talloc, d->tokens, d->tindex, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->nmbcsets, d->mbcsets_alloc, d->mbcsets, d->searchflag, d->tralloc, d->musts, d->states, d->sindex, d->salloc, d->follows, d->trcount, d->trans, d->realtrans, d->fails, d->success)))
    return;
((d->charclasses) = xmalloc((d->calloc) * sizeof(charclass)));

....
Skipping nonlast:Priority -745
At location src/dfa.c:2961
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
d->cindex = 0;

....
Skipping nonlast:Priority -745
At location src/dfa.c:2961
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
d->cindex = 0;

....
Skipping nonlast:Priority -745
At location src/dfa.c:2961
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
d->cindex = 0;

....
Skipping nonlast:Priority -745
At location src/dfa.c:2961
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
d->cindex = 0;

....
Skipping nonlast:Priority -745
At location src/dfa.c:2961
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
d->cindex = 0;

....
Skipping nonlast:Priority -745
At location src/dfa.c:2961
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
d->cindex = 0;

....
Skipping nonlast addifexit:Priority 4255
At location src/dfa.c:2961
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->cindex, d->charclasses, d->calloc, d->talloc, d->tokens, d->tindex, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->nmbcsets, d->mbcsets_alloc, d->mbcsets, d->searchflag, d->tralloc, d->musts, d->states, d->sindex, d->salloc, d->follows, d->trcount, d->trans, d->realtrans, d->fails, d->success)))
    return;
d->cindex = 0;

....
Skipping nonlast:Priority -744
At location src/dfa.c:2963
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
d->talloc = 1;

....
Skipping nonlast:Priority -744
At location src/dfa.c:2963
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
d->talloc = 1;

....
Skipping nonlast:Priority -744
At location src/dfa.c:2963
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
d->talloc = 1;

....
Skipping nonlast:Priority -744
At location src/dfa.c:2963
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
d->talloc = 1;

....
Skipping nonlast:Priority -744
At location src/dfa.c:2963
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
d->talloc = 1;

....
Skipping nonlast:Priority -744
At location src/dfa.c:2963
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
d->talloc = 1;

....
Skipping nonlast addifexit:Priority 4256
At location src/dfa.c:2963
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->talloc, d->tokens, d->cindex, d->tindex, d->depth, d->nleaves, d->nregexps, d->charclasses, d->calloc, d->nmultibyte_prop, d->multibyte_prop, d->nmbcsets, d->mbcsets_alloc, d->mbcsets, d->searchflag, d->tralloc, d->musts, d->states, d->sindex, d->salloc, d->follows, d->trcount, d->trans, d->realtrans, d->fails, d->success)))
    return;
d->talloc = 1;

....
Skipping nonlast:Priority -743
At location src/dfa.c:2964
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
((d->tokens) = xmalloc((d->talloc) * sizeof(token)));

....
Skipping nonlast:Priority -743
At location src/dfa.c:2964
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
((d->tokens) = xmalloc((d->talloc) * sizeof(token)));

....
Skipping nonlast:Priority -743
At location src/dfa.c:2964
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
((d->tokens) = xmalloc((d->talloc) * sizeof(token)));

....
Skipping nonlast:Priority -743
At location src/dfa.c:2964
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
((d->tokens) = xmalloc((d->talloc) * sizeof(token)));

....
Skipping nonlast:Priority -743
At location src/dfa.c:2964
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
((d->tokens) = xmalloc((d->talloc) * sizeof(token)));

....
Skipping nonlast:Priority -743
At location src/dfa.c:2964
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
((d->tokens) = xmalloc((d->talloc) * sizeof(token)));

....
Skipping nonlast addifexit:Priority 4257
At location src/dfa.c:2964
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->tokens, d->talloc, d->tindex, d->depth, d->nleaves, d->nregexps, d->cindex, d->charclasses, d->calloc, d->nmultibyte_prop, d->multibyte_prop, d->nmbcsets, d->mbcsets_alloc, d->mbcsets, d->searchflag, d->tralloc, d->musts, d->states, d->sindex, d->salloc, d->follows, d->trcount, d->trans, d->realtrans, d->fails, d->success)))
    return;
((d->tokens) = xmalloc((d->talloc) * sizeof(token)));

....
Skipping nonlast:Priority -742
At location src/dfa.c:2965
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
d->tindex = d->depth = d->nleaves = d->nregexps = 0;

....
Skipping nonlast:Priority -742
At location src/dfa.c:2965
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
d->tindex = d->depth = d->nleaves = d->nregexps = 0;

....
Skipping nonlast:Priority -742
At location src/dfa.c:2965
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
d->tindex = d->depth = d->nleaves = d->nregexps = 0;

....
Skipping nonlast:Priority -742
At location src/dfa.c:2965
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
d->tindex = d->depth = d->nleaves = d->nregexps = 0;

....
Skipping nonlast:Priority -742
At location src/dfa.c:2965
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
d->tindex = d->depth = d->nleaves = d->nregexps = 0;

....
Skipping nonlast:Priority -742
At location src/dfa.c:2965
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
d->tindex = d->depth = d->nleaves = d->nregexps = 0;

....
Skipping nonlast addifexit:Priority 4258
At location src/dfa.c:2965
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->tindex, d->depth, d->nleaves, d->nregexps, d->tokens, d->talloc, d->cindex, d->nmultibyte_prop, d->charclasses, d->calloc, d->multibyte_prop, d->nmbcsets, d->mbcsets_alloc, d->mbcsets, d->searchflag, d->tralloc, d->musts, d->states, d->sindex, d->salloc, d->follows, d->trcount, d->trans, d->realtrans, d->fails, d->success)))
    return;
d->tindex = d->depth = d->nleaves = d->nregexps = 0;

....
Skipping nonlast:Priority -741
At location src/dfa.c:2967
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if ((__ctype_get_mb_cur_max()) > 1) {
    d->nmultibyte_prop = 1;
    ((d->multibyte_prop) = xmalloc((d->nmultibyte_prop) * sizeof(int)));
    d->nmbcsets = 0;
    d->mbcsets_alloc = 1;
    ((d->mbcsets) = xmalloc((d->mbcsets_alloc) * sizeof(struct mb_char_classes)));
}

....
Skipping nonlast:Priority -741
At location src/dfa.c:2967
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if ((__ctype_get_mb_cur_max()) > 1) {
    d->nmultibyte_prop = 1;
    ((d->multibyte_prop) = xmalloc((d->nmultibyte_prop) * sizeof(int)));
    d->nmbcsets = 0;
    d->mbcsets_alloc = 1;
    ((d->mbcsets) = xmalloc((d->mbcsets_alloc) * sizeof(struct mb_char_classes)));
}

....
Skipping nonlast:Priority -741
At location src/dfa.c:2967
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if ((__ctype_get_mb_cur_max()) > 1) {
    d->nmultibyte_prop = 1;
    ((d->multibyte_prop) = xmalloc((d->nmultibyte_prop) * sizeof(int)));
    d->nmbcsets = 0;
    d->mbcsets_alloc = 1;
    ((d->mbcsets) = xmalloc((d->mbcsets_alloc) * sizeof(struct mb_char_classes)));
}

....
Skipping nonlast:Priority -741
At location src/dfa.c:2967
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if ((__ctype_get_mb_cur_max()) > 1) {
    d->nmultibyte_prop = 1;
    ((d->multibyte_prop) = xmalloc((d->nmultibyte_prop) * sizeof(int)));
    d->nmbcsets = 0;
    d->mbcsets_alloc = 1;
    ((d->mbcsets) = xmalloc((d->mbcsets_alloc) * sizeof(struct mb_char_classes)));
}

....
Skipping nonlast:Priority -741
At location src/dfa.c:2967
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if ((__ctype_get_mb_cur_max()) > 1) {
    d->nmultibyte_prop = 1;
    ((d->multibyte_prop) = xmalloc((d->nmultibyte_prop) * sizeof(int)));
    d->nmbcsets = 0;
    d->mbcsets_alloc = 1;
    ((d->mbcsets) = xmalloc((d->mbcsets_alloc) * sizeof(struct mb_char_classes)));
}

....
Skipping nonlast:Priority -741
At location src/dfa.c:2967
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if ((__ctype_get_mb_cur_max()) > 1) {
    d->nmultibyte_prop = 1;
    ((d->multibyte_prop) = xmalloc((d->nmultibyte_prop) * sizeof(int)));
    d->nmbcsets = 0;
    d->mbcsets_alloc = 1;
    ((d->mbcsets) = xmalloc((d->mbcsets_alloc) * sizeof(struct mb_char_classes)));
}

....
Skipping nonlast addifexit:Priority 3009
At location src/dfa.c:2967
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d)))
    return;
if ((__ctype_get_mb_cur_max()) > 1) {
    d->nmultibyte_prop = 1;
    ((d->multibyte_prop) = xmalloc((d->nmultibyte_prop) * sizeof(int)));
    d->nmbcsets = 0;
    d->mbcsets_alloc = 1;
    ((d->mbcsets) = xmalloc((d->mbcsets_alloc) * sizeof(struct mb_char_classes)));
}

....
Skipping nonlast:Priority -740
At location src/dfa.c:2977
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
d->searchflag = 0;

....
Skipping nonlast:Priority -740
At location src/dfa.c:2977
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
d->searchflag = 0;

....
Skipping nonlast:Priority -740
At location src/dfa.c:2977
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
d->searchflag = 0;

....
Skipping nonlast:Priority -740
At location src/dfa.c:2977
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
d->searchflag = 0;

....
Skipping nonlast:Priority -740
At location src/dfa.c:2977
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
d->searchflag = 0;

....
Skipping nonlast:Priority -740
At location src/dfa.c:2977
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
d->searchflag = 0;

....
Skipping nonlast addifexit:Priority 4260
At location src/dfa.c:2977
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->searchflag, d->tralloc, d->musts, d->mbcsets, d->mbcsets_alloc, d->nmbcsets, d->nmultibyte_prop, d->multibyte_prop, d->tindex, d->depth, d->nleaves, d->nregexps, d->tokens, d->talloc, d->cindex, d->charclasses, d->calloc, d->states, d->sindex, d->salloc, d->follows, d->trcount, d->trans, d->realtrans, d->fails, d->success)))
    return;
d->searchflag = 0;

....
Skipping nonlast:Priority -739
At location src/dfa.c:2978
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
d->tralloc = 0;

....
Skipping nonlast:Priority -739
At location src/dfa.c:2978
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
d->tralloc = 0;

....
Skipping nonlast:Priority -739
At location src/dfa.c:2978
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
d->tralloc = 0;

....
Skipping nonlast:Priority -739
At location src/dfa.c:2978
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
d->tralloc = 0;

....
Skipping nonlast:Priority -739
At location src/dfa.c:2978
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
d->tralloc = 0;

....
Skipping nonlast:Priority -739
At location src/dfa.c:2978
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
d->tralloc = 0;

....
Skipping nonlast addifexit:Priority 4261
At location src/dfa.c:2978
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->tralloc, d->searchflag, d->musts, d->mbcsets, d->mbcsets_alloc, d->nmbcsets, d->nmultibyte_prop, d->multibyte_prop, d->tindex, d->depth, d->nleaves, d->nregexps, d->tokens, d->talloc, d->cindex, d->charclasses, d->calloc, d->states, d->sindex, d->salloc, d->follows, d->trcount, d->trans, d->realtrans, d->fails, d->success)))
    return;
d->tralloc = 0;

....
IsErr:priority 4252
at location src/dfa.c:2987
--src file: src/dfa.c
fragment 0:
if (!(__abst_hole(len, case_fold, s, d, searchflag)))
    if (case_fold && len) {
        char *lcopy;
        int i;
        lcopy = malloc(len);
        if (!lcopy)
            dfaerror(dcgettext(((void *)0), "memory exhausted", 5));
        case_fold = 0;
        for (i = 0; i < len; ++i) 
            if (((*__ctype_b_loc())[(int)(((unsigned char)s[i]))] & (unsigned short)_isupper))
                lcopy[i] = (__extension__ ({
                    int __res;
                    if (sizeof ((unsigned char)s[i]) > 1) {
                        if (__builtin_constant_p((unsigned char)s[i])) {
                            int __c = ((unsigned char)s[i]);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower((unsigned char)s[i]);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)((unsigned char)s[i])];
                    __res;
                }));
            else
                lcopy[i] = s[i];
        dfainit(d);
        dfaparse(lcopy, len, d);
        free(lcopy);
        dfamust(d);
        d->cindex = d->tindex = d->depth = d->nleaves = d->nregexps = 0;
        case_fold = 1;
        dfaparse(s, len, d);
        dfaanalyze(d, searchflag);
    } else {
        dfainit(d);
        dfaparse(s, len, d);
        dfamust(d);
        dfaanalyze(d, searchflag);
    }

....
Skipping error ifguard:Priority 4252
At location src/dfa.c:2987
--Src File: src/dfa.c
Fragment 0:
if (!(__abst_hole(len, case_fold, s, d, searchflag)))
    if (case_fold && len) {
        char *lcopy;
        int i;
        lcopy = malloc(len);
        if (!lcopy)
            dfaerror(dcgettext(((void *)0), "memory exhausted", 5));
        case_fold = 0;
        for (i = 0; i < len; ++i) 
            if (((*__ctype_b_loc())[(int)(((unsigned char)s[i]))] & (unsigned short)_ISupper))
                lcopy[i] = (__extension__ ({
                    int __res;
                    if (sizeof ((unsigned char)s[i]) > 1) {
                        if (__builtin_constant_p((unsigned char)s[i])) {
                            int __c = ((unsigned char)s[i]);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower((unsigned char)s[i]);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)((unsigned char)s[i])];
                    __res;
                }));
            else
                lcopy[i] = s[i];
        dfainit(d);
        dfaparse(lcopy, len, d);
        free(lcopy);
        dfamust(d);
        d->cindex = d->tindex = d->depth = d->nleaves = d->nregexps = 0;
        case_fold = 1;
        dfaparse(s, len, d);
        dfaanalyze(d, searchflag);
    } else {
        dfainit(d);
        dfaparse(s, len, d);
        dfamust(d);
        dfaanalyze(d, searchflag);
    }

....
Skipping isstmt addifexit:Priority 10502
At location src/dfa.c:2987
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(len, case_fold, s, d, searchflag)))
    return;
if (case_fold && len) {
    char *lcopy;
    int i;
    lcopy = malloc(len);
    if (!lcopy)
        dfaerror(dcgettext(((void *)0), "memory exhausted", 5));
    case_fold = 0;
    for (i = 0; i < len; ++i) 
        if (((*__ctype_b_loc())[(int)(((unsigned char)s[i]))] & (unsigned short)_ISupper))
            lcopy[i] = (__extension__ ({
                int __res;
                if (sizeof ((unsigned char)s[i]) > 1) {
                    if (__builtin_constant_p((unsigned char)s[i])) {
                        int __c = ((unsigned char)s[i]);
                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                    } else
                        __res = tolower((unsigned char)s[i]);
                } else
                    __res = (*__ctype_tolower_loc())[(int)((unsigned char)s[i])];
                __res;
            }));
        else
            lcopy[i] = s[i];
    dfainit(d);
    dfaparse(lcopy, len, d);
    free(lcopy);
    dfamust(d);
    d->cindex = d->tindex = d->depth = d->nleaves = d->nregexps = 0;
    case_fold = 1;
    dfaparse(s, len, d);
    dfaanalyze(d, searchflag);
} else {
    dfainit(d);
    dfaparse(s, len, d);
    dfamust(d);
    dfaanalyze(d, searchflag);
}

....
Skipping nonlast:Priority 4822
At location src/dfa.c:3015
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
dfainit(d);

....
Skipping nonlast:Priority 4822
At location src/dfa.c:3015
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
dfainit(d);

....
Skipping nonlast:Priority 4822
At location src/dfa.c:3015
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
dfainit(d);

....
Skipping nonlast:Priority 4822
At location src/dfa.c:3015
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
dfainit(d);

....
Skipping nonlast:Priority 4822
At location src/dfa.c:3015
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
dfainit(d);

....
Skipping nonlast:Priority 4822
At location src/dfa.c:3015
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
dfainit(d);

....
Skipping nonlast addifexit:Priority 9822
At location src/dfa.c:3015
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, s, len, searchflag, case_fold, d->cindex, d->tindex, d->depth, d->nleaves, d->nregexps, d->charclasses, d->calloc, d->tokens, d->talloc, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
dfainit(d);

....
Skipping nonlast:Priority -177
At location src/dfa.c:3016
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
dfaparse(s, len, d);

....
Skipping nonlast:Priority -177
At location src/dfa.c:3016
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
dfaparse(s, len, d);

....
Skipping nonlast:Priority -177
At location src/dfa.c:3016
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
dfaparse(s, len, d);

....
Skipping nonlast:Priority -177
At location src/dfa.c:3016
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
dfaparse(s, len, d);

....
Skipping nonlast:Priority -177
At location src/dfa.c:3016
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
dfaparse(s, len, d);

....
Skipping nonlast:Priority -177
At location src/dfa.c:3016
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
dfaparse(s, len, d);

....
Skipping nonlast addifexit:Priority 4823
At location src/dfa.c:3016
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, len, d, searchflag, case_fold, d->cindex, d->tindex, d->depth, d->nleaves, d->nregexps, d->charclasses, d->calloc, d->tokens, d->talloc, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
dfaparse(s, len, d);

....
Skipping nonlast:Priority -169
At location src/dfa.c:3017
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
dfamust(d);

....
Skipping nonlast:Priority -169
At location src/dfa.c:3017
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
dfamust(d);

....
Skipping nonlast:Priority -169
At location src/dfa.c:3017
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
dfamust(d);

....
Skipping nonlast:Priority -169
At location src/dfa.c:3017
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
dfamust(d);

....
Skipping nonlast:Priority -169
At location src/dfa.c:3017
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
dfamust(d);

....
Skipping nonlast:Priority -169
At location src/dfa.c:3017
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
dfamust(d);

....
Skipping nonlast addifexit:Priority 4831
At location src/dfa.c:3017
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, s, len, searchflag, case_fold, d->cindex, d->tindex, d->depth, d->nleaves, d->nregexps, d->charclasses, d->calloc, d->tokens, d->talloc, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
dfamust(d);

....
Skipping only addifexit:Priority 4833
At location src/dfa.c:3018
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, searchflag, s, len, case_fold, d->cindex, d->tindex, d->depth, d->nleaves, d->nregexps, d->charclasses, d->calloc, d->tokens, d->talloc, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
dfaanalyze(d, searchflag);

....
Skipping isstmt addifexit:Priority 10626
At location src/dfa.c:3213
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cp)))
    return;
if (cp != ((void *)0))
    free(cp);

....
Skipping nonlast:Priority -623
At location src/dfa.c:3214
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    free(cp);
}

....
Skipping nonlast:Priority -623
At location src/dfa.c:3214
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    free(cp);
}

....
Skipping nonlast:Priority -623
At location src/dfa.c:3214
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        return lasttok = parse_bracket_exp_mb();
    }
    free(cp);
}

....
Skipping nonlast:Priority -623
At location src/dfa.c:3214
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    free(cp);
}

....
Skipping nonlast:Priority -623
At location src/dfa.c:3214
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    free(cp);
}

....
Skipping nonlast:Priority -623
At location src/dfa.c:3214
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    free(cp);
}

....
Skipping nonlast addifexit:Priority 4377
At location src/dfa.c:3214
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(cp)))
        return;
    free(cp);
}

....
Skipping nonlast:Priority -631
At location src/dfa.c:3220
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int i;

....
Skipping nonlast:Priority -631
At location src/dfa.c:3220
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int i;

....
Skipping nonlast:Priority -631
At location src/dfa.c:3220
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
int i;

....
Skipping nonlast:Priority -631
At location src/dfa.c:3220
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int i;

....
Skipping nonlast:Priority -631
At location src/dfa.c:3220
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int i;

....
Skipping nonlast:Priority -631
At location src/dfa.c:3220
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int i;

....
Skipping nonlast addifexit:Priority 4369
At location src/dfa.c:3220
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cpp)))
    return;
int i;

....
Skipping nonlast:Priority 6870
At location src/dfa.c:3222
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (cpp == ((void *)0))
    return;

....
Skipping nonlast:Priority 6870
At location src/dfa.c:3222
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (cpp == ((void *)0))
    return;

....
Skipping nonlast:Priority 6870
At location src/dfa.c:3222
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if (cpp == ((void *)0))
    return;

....
Skipping nonlast:Priority 6870
At location src/dfa.c:3222
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (cpp == ((void *)0))
    return;

....
Skipping nonlast:Priority 6870
At location src/dfa.c:3222
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (cpp == ((void *)0))
    return;

....
Skipping nonlast:Priority 6870
At location src/dfa.c:3222
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (cpp == ((void *)0))
    return;

....
Skipping nonlast addifexit:Priority 10620
At location src/dfa.c:3222
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cpp, i)))
    return;
if (cpp == ((void *)0))
    return;

....
Skipping isstmt addifexit:Priority 4371
At location src/dfa.c:3224
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cpp, i)))
    return;
for (i = 0; cpp[i] != ((void *)0); ++i) {
    free(cpp[i]);
    cpp[i] = ((void *)0);
}

....
Skipping nonlast:Priority 6856
At location src/dfa.c:3372
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
mp->left[0] = mp->right[0] = mp->is[0] = '\x00';

....
Skipping nonlast:Priority 6856
At location src/dfa.c:3372
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
mp->left[0] = mp->right[0] = mp->is[0] = '\x00';

....
Skipping nonlast:Priority 6856
At location src/dfa.c:3372
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
mp->left[0] = mp->right[0] = mp->is[0] = '\x00';

....
Skipping nonlast:Priority 6856
At location src/dfa.c:3372
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
mp->left[0] = mp->right[0] = mp->is[0] = '\x00';

....
Skipping nonlast:Priority 6856
At location src/dfa.c:3372
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
mp->left[0] = mp->right[0] = mp->is[0] = '\x00';

....
Skipping nonlast:Priority 6856
At location src/dfa.c:3372
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
mp->left[0] = mp->right[0] = mp->is[0] = '\x00';

....
Skipping nonlast addifexit:Priority 11856
At location src/dfa.c:3372
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, mp->left, mp->right, mp->is, mp->in)))
    return;
mp->left[0] = mp->right[0] = mp->is[0] = '\x00';

....
Skipping nonlast:Priority -671
At location src/dfa.c:3379
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
must *musts;

....
Skipping nonlast:Priority -671
At location src/dfa.c:3379
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
must *musts;

....
Skipping nonlast:Priority -671
At location src/dfa.c:3379
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
must *musts;

....
Skipping nonlast:Priority -671
At location src/dfa.c:3379
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
must *musts;

....
Skipping nonlast:Priority -671
At location src/dfa.c:3379
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
must *musts;

....
Skipping nonlast:Priority -671
At location src/dfa.c:3379
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
must *musts;

....
Skipping nonlast addifexit:Priority 4329
At location src/dfa.c:3379
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d)))
    return;
must *musts;

....
Skipping nonlast addifexit:Priority 4529
At location src/dfa.c:3379
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d)))
    goto done;
must *musts;

....
Skipping nonlast:Priority -670
At location src/dfa.c:3380
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
must *mp;

....
Skipping nonlast:Priority -670
At location src/dfa.c:3380
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
must *mp;

....
Skipping nonlast:Priority -670
At location src/dfa.c:3380
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
must *mp;

....
Skipping nonlast:Priority -670
At location src/dfa.c:3380
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
must *mp;

....
Skipping nonlast:Priority -670
At location src/dfa.c:3380
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
must *mp;

....
Skipping nonlast:Priority -670
At location src/dfa.c:3380
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
must *mp;

....
Skipping nonlast addifexit:Priority 4330
At location src/dfa.c:3380
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, musts)))
    return;
must *mp;

....
Skipping nonlast addifexit:Priority 4530
At location src/dfa.c:3380
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, musts)))
    goto done;
must *mp;

....
Skipping nonlast:Priority -669
At location src/dfa.c:3381
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
char *result;

....
Skipping nonlast:Priority -669
At location src/dfa.c:3381
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
char *result;

....
Skipping nonlast:Priority -669
At location src/dfa.c:3381
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
char *result;

....
Skipping nonlast:Priority -669
At location src/dfa.c:3381
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
char *result;

....
Skipping nonlast:Priority -669
At location src/dfa.c:3381
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
char *result;

....
Skipping nonlast:Priority -669
At location src/dfa.c:3381
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
char *result;

....
Skipping nonlast addifexit:Priority 4331
At location src/dfa.c:3381
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, musts, mp)))
    return;
char *result;

....
Skipping nonlast addifexit:Priority 4531
At location src/dfa.c:3381
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, musts, mp)))
    goto done;
char *result;

....
Skipping nonlast:Priority -668
At location src/dfa.c:3382
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int ri;

....
Skipping nonlast:Priority -668
At location src/dfa.c:3382
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int ri;

....
Skipping nonlast:Priority -668
At location src/dfa.c:3382
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
int ri;

....
Skipping nonlast:Priority -668
At location src/dfa.c:3382
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int ri;

....
Skipping nonlast:Priority -668
At location src/dfa.c:3382
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int ri;

....
Skipping nonlast:Priority -668
At location src/dfa.c:3382
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int ri;

....
Skipping nonlast addifexit:Priority 4332
At location src/dfa.c:3382
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(result, d, musts, mp)))
    return;
int ri;

....
Skipping nonlast addifexit:Priority 4532
At location src/dfa.c:3382
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(result, d, musts, mp)))
    goto done;
int ri;

....
Skipping nonlast:Priority -667
At location src/dfa.c:3383
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int i;

....
Skipping nonlast:Priority -667
At location src/dfa.c:3383
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int i;

....
Skipping nonlast:Priority -667
At location src/dfa.c:3383
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
int i;

....
Skipping nonlast:Priority -667
At location src/dfa.c:3383
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int i;

....
Skipping nonlast:Priority -667
At location src/dfa.c:3383
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int i;

....
Skipping nonlast:Priority -667
At location src/dfa.c:3383
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int i;

....
Skipping nonlast addifexit:Priority 4333
At location src/dfa.c:3383
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(result, d, musts, mp, ri)))
    return;
int i;

....
Skipping nonlast addifexit:Priority 4533
At location src/dfa.c:3383
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(result, d, musts, mp, ri)))
    goto done;
int i;

....
Skipping nonlast:Priority -666
At location src/dfa.c:3384
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int exact;

....
Skipping nonlast:Priority -666
At location src/dfa.c:3384
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int exact;

....
Skipping nonlast:Priority -666
At location src/dfa.c:3384
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
int exact;

....
Skipping nonlast:Priority -666
At location src/dfa.c:3384
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int exact;

....
Skipping nonlast:Priority -666
At location src/dfa.c:3384
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int exact;

....
Skipping nonlast:Priority -666
At location src/dfa.c:3384
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int exact;

....
Skipping nonlast addifexit:Priority 4334
At location src/dfa.c:3384
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(result, d, musts, mp, i, ri)))
    return;
int exact;

....
Skipping nonlast addifexit:Priority 4534
At location src/dfa.c:3384
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(result, d, musts, mp, i, ri)))
    goto done;
int exact;

....
Skipping nonlast:Priority -665
At location src/dfa.c:3385
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
token t;

....
Skipping nonlast:Priority -665
At location src/dfa.c:3385
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
token t;

....
Skipping nonlast:Priority -665
At location src/dfa.c:3385
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
token t;

....
Skipping nonlast:Priority -665
At location src/dfa.c:3385
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
token t;

....
Skipping nonlast:Priority -665
At location src/dfa.c:3385
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
token t;

....
Skipping nonlast:Priority -665
At location src/dfa.c:3385
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
token t;

....
Skipping nonlast addifexit:Priority 4335
At location src/dfa.c:3385
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(result, exact, d, musts, mp, i, ri)))
    return;
token t;

....
Skipping nonlast addifexit:Priority 4535
At location src/dfa.c:3385
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(result, exact, d, musts, mp, i, ri)))
    goto done;
token t;

....
Skipping nonlast:Priority -664
At location src/dfa.c:3386
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
static must must0;

....
Skipping nonlast:Priority -664
At location src/dfa.c:3386
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
static must must0;

....
Skipping nonlast:Priority -664
At location src/dfa.c:3386
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
static must must0;

....
Skipping nonlast:Priority -664
At location src/dfa.c:3386
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
static must must0;

....
Skipping nonlast:Priority -664
At location src/dfa.c:3386
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
static must must0;

....
Skipping nonlast:Priority -664
At location src/dfa.c:3386
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
static must must0;

....
Skipping nonlast addifexit:Priority 4336
At location src/dfa.c:3386
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(result, exact, d, musts, mp, i, ri, t)))
    return;
static must must0;

....
Skipping nonlast addifexit:Priority 4536
At location src/dfa.c:3386
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(result, exact, d, musts, mp, i, ri, t)))
    goto done;
static must must0;

....
Skipping nonlast:Priority -663
At location src/dfa.c:3387
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
struct dfamust *dm;

....
Skipping nonlast:Priority -663
At location src/dfa.c:3387
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
struct dfamust *dm;

....
Skipping nonlast:Priority -663
At location src/dfa.c:3387
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
struct dfamust *dm;

....
Skipping nonlast:Priority -663
At location src/dfa.c:3387
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
struct dfamust *dm;

....
Skipping nonlast:Priority -663
At location src/dfa.c:3387
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
struct dfamust *dm;

....
Skipping nonlast:Priority -663
At location src/dfa.c:3387
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
struct dfamust *dm;

....
Skipping nonlast addifexit:Priority 4337
At location src/dfa.c:3387
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(result, exact, d, musts, mp, i, ri, t)))
    return;
struct dfamust *dm;

....
Skipping nonlast addifexit:Priority 4537
At location src/dfa.c:3387
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(result, exact, d, musts, mp, i, ri, t)))
    goto done;
struct dfamust *dm;

....
Skipping nonlast:Priority -662
At location src/dfa.c:3388
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
static char empty_string[] = "";

....
Skipping nonlast:Priority -662
At location src/dfa.c:3388
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
static char empty_string[] = "";

....
Skipping nonlast:Priority -662
At location src/dfa.c:3388
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
static char empty_string[] = "";

....
Skipping nonlast:Priority -662
At location src/dfa.c:3388
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
static char empty_string[] = "";

....
Skipping nonlast:Priority -662
At location src/dfa.c:3388
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
static char empty_string[] = "";

....
Skipping nonlast:Priority -662
At location src/dfa.c:3388
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
static char empty_string[] = "";

....
Skipping nonlast addifexit:Priority 4338
At location src/dfa.c:3388
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(result, exact, d, musts, mp, i, ri, t, dm)))
    return;
static char empty_string[] = "";

....
Skipping nonlast addifexit:Priority 4538
At location src/dfa.c:3388
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(result, exact, d, musts, mp, i, ri, t, dm)))
    goto done;
static char empty_string[] = "";

....
Skipping nonlast:Priority 6839
At location src/dfa.c:3390
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
result = empty_string;

....
Skipping nonlast:Priority 6839
At location src/dfa.c:3390
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
result = empty_string;

....
Skipping nonlast:Priority 6839
At location src/dfa.c:3390
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
result = empty_string;

....
Skipping nonlast:Priority 6839
At location src/dfa.c:3390
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
result = empty_string;

....
Skipping nonlast:Priority 6839
At location src/dfa.c:3390
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
result = empty_string;

....
Skipping nonlast:Priority 6839
At location src/dfa.c:3390
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
result = empty_string;

....
Skipping nonlast addifexit:Priority 11839
At location src/dfa.c:3390
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(result, exact, d, musts, mp, i, ri, t, dm)))
    return;
result = empty_string;

....
Skipping nonlast addifexit:Priority 9539
At location src/dfa.c:3390
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(result, exact, d, musts, mp, i, ri, t, dm)))
    goto done;
result = empty_string;

....
Skipping nonlast:Priority -660
At location src/dfa.c:3391
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
exact = 0;

....
Skipping nonlast:Priority -660
At location src/dfa.c:3391
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
exact = 0;

....
Skipping nonlast:Priority -660
At location src/dfa.c:3391
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
exact = 0;

....
Skipping nonlast:Priority -660
At location src/dfa.c:3391
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
exact = 0;

....
Skipping nonlast:Priority -660
At location src/dfa.c:3391
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
exact = 0;

....
Skipping nonlast:Priority -660
At location src/dfa.c:3391
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
exact = 0;

....
Skipping nonlast addifexit:Priority 4340
At location src/dfa.c:3391
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(exact, d, musts, result, d->tindex, mp, i, ri, t, d->tokens, dm, d->musts, d->charclasses, d->cindex, d->calloc, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success)))
    return;
exact = 0;

....
Skipping nonlast addifexit:Priority 4540
At location src/dfa.c:3391
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(exact, d, musts, result, d->tindex, mp, i, ri, t, d->tokens, dm, d->musts, d->charclasses, d->cindex, d->calloc, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success)))
    goto done;
exact = 0;

....
Skipping nonlast:Priority -659
At location src/dfa.c:3392
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
musts = (must *)malloc((d->tindex + 1) * sizeof *musts);

....
Skipping nonlast:Priority -659
At location src/dfa.c:3392
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
musts = (must *)malloc((d->tindex + 1) * sizeof *musts);

....
Skipping nonlast:Priority -659
At location src/dfa.c:3392
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
musts = (must *)malloc((d->tindex + 1) * sizeof *musts);

....
Skipping nonlast:Priority -659
At location src/dfa.c:3392
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
musts = (must *)malloc((d->tindex + 1) * sizeof *musts);

....
Skipping nonlast:Priority -659
At location src/dfa.c:3392
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
musts = (must *)malloc((d->tindex + 1) * sizeof *musts);

....
Skipping nonlast:Priority -659
At location src/dfa.c:3392
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
musts = (must *)malloc((d->tindex + 1) * sizeof *musts);

....
Skipping nonlast addifexit:Priority 4341
At location src/dfa.c:3392
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, musts, d->tindex, exact, result, mp, i, ri, t, d->tokens, dm, d->musts, d->charclasses, d->cindex, d->calloc, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success)))
    return;
musts = (must *)malloc((d->tindex + 1) * sizeof *musts);

....
Skipping nonlast addifexit:Priority 4541
At location src/dfa.c:3392
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, musts, d->tindex, exact, result, mp, i, ri, t, d->tokens, dm, d->musts, d->charclasses, d->cindex, d->calloc, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success)))
    goto done;
musts = (must *)malloc((d->tindex + 1) * sizeof *musts);

....
Skipping nonlast:Priority -658
At location src/dfa.c:3393
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (musts == ((void *)0))
    return;

....
Skipping nonlast:Priority -658
At location src/dfa.c:3393
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (musts == ((void *)0))
    return;

....
Skipping nonlast:Priority -658
At location src/dfa.c:3393
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if (musts == ((void *)0))
    return;

....
Skipping nonlast:Priority -658
At location src/dfa.c:3393
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (musts == ((void *)0))
    return;

....
Skipping nonlast:Priority -658
At location src/dfa.c:3393
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (musts == ((void *)0))
    return;

....
Skipping nonlast:Priority -658
At location src/dfa.c:3393
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (musts == ((void *)0))
    return;

....
Skipping nonlast addifexit:Priority 3092
At location src/dfa.c:3393
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(musts, d, d->tindex, mp, exact, result, i, ri, t, d->tokens, dm, d->musts, d->charclasses, d->cindex, d->calloc, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success)))
    return;
if (musts == ((void *)0))
    return;

....
Skipping nonlast addifexit:Priority 3292
At location src/dfa.c:3393
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(musts, d, d->tindex, mp, exact, result, i, ri, t, d->tokens, dm, d->musts, d->charclasses, d->cindex, d->calloc, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success)))
    goto done;
if (musts == ((void *)0))
    return;

....
Skipping nonlast:Priority -657
At location src/dfa.c:3395
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
mp = musts;

....
Skipping nonlast:Priority -657
At location src/dfa.c:3395
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
mp = musts;

....
Skipping nonlast:Priority -657
At location src/dfa.c:3395
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
mp = musts;

....
Skipping nonlast:Priority -657
At location src/dfa.c:3395
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
mp = musts;

....
Skipping nonlast:Priority -657
At location src/dfa.c:3395
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
mp = musts;

....
Skipping nonlast:Priority -657
At location src/dfa.c:3395
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
mp = musts;

....
Skipping nonlast addifexit:Priority 4343
At location src/dfa.c:3395
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(musts, mp, d, i, d->tindex, exact, result, ri, t, d->tokens, mp->is, mp->left, mp->right, mp->in, dm, d->musts, d->charclasses, d->cindex, d->calloc, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success)))
    return;
mp = musts;

....
Skipping nonlast addifexit:Priority 4543
At location src/dfa.c:3395
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(musts, mp, d, i, d->tindex, exact, result, ri, t, d->tokens, mp->is, mp->left, mp->right, mp->in, dm, d->musts, d->charclasses, d->cindex, d->calloc, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success)))
    goto done;
mp = musts;

....
Skipping nonlast:Priority -656
At location src/dfa.c:3396
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
for (i = 0; i <= d->tindex; ++i) 
    mp[i] = must0;

....
Skipping nonlast:Priority -656
At location src/dfa.c:3396
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
for (i = 0; i <= d->tindex; ++i) 
    mp[i] = must0;

....
Skipping nonlast:Priority -656
At location src/dfa.c:3396
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
for (i = 0; i <= d->tindex; ++i) 
    mp[i] = must0;

....
Skipping nonlast:Priority -656
At location src/dfa.c:3396
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
for (i = 0; i <= d->tindex; ++i) 
    mp[i] = must0;

....
Skipping nonlast:Priority -656
At location src/dfa.c:3396
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
for (i = 0; i <= d->tindex; ++i) 
    mp[i] = must0;

....
Skipping nonlast:Priority -656
At location src/dfa.c:3396
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
for (i = 0; i <= d->tindex; ++i) 
    mp[i] = must0;

....
Skipping nonlast addifexit:Priority 4344
At location src/dfa.c:3396
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->tindex, musts, mp, mp[i].in, exact, mp[i].left, result, mp[i].right, mp[i].is, ri, t, d->tokens, mp->is, mp->left, mp->right, mp->in, dm, d->musts, d->charclasses, d->cindex, d->calloc, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success)))
    return;
for (i = 0; i <= d->tindex; ++i) 
    mp[i] = must0;

....
Skipping nonlast addifexit:Priority 4544
At location src/dfa.c:3396
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->tindex, musts, mp, mp[i].in, exact, mp[i].left, result, mp[i].right, mp[i].is, ri, t, d->tokens, mp->is, mp->left, mp->right, mp->in, dm, d->musts, d->charclasses, d->cindex, d->calloc, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success)))
    goto done;
for (i = 0; i <= d->tindex; ++i) 
    mp[i] = must0;

....
Skipping nonlast:Priority -655
At location src/dfa.c:3398
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
for (i = 0; i <= d->tindex; ++i) {
    mp[i].in = (char **)malloc(sizeof *mp[i].in);
    mp[i].left = malloc(2);
    mp[i].right = malloc(2);
    mp[i].is = malloc(2);
    if (mp[i].in == ((void *)0) || mp[i].left == ((void *)0) || mp[i].right == ((void *)0) || mp[i].is == ((void *)0))
        goto done;
    mp[i].left[0] = mp[i].right[0] = mp[i].is[0] = '\x00';
    mp[i].in[0] = ((void *)0);
}

....
Skipping nonlast:Priority -655
At location src/dfa.c:3398
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
for (i = 0; i <= d->tindex; ++i) {
    mp[i].in = (char **)malloc(sizeof *mp[i].in);
    mp[i].left = malloc(2);
    mp[i].right = malloc(2);
    mp[i].is = malloc(2);
    if (mp[i].in == ((void *)0) || mp[i].left == ((void *)0) || mp[i].right == ((void *)0) || mp[i].is == ((void *)0))
        goto done;
    mp[i].left[0] = mp[i].right[0] = mp[i].is[0] = '\x00';
    mp[i].in[0] = ((void *)0);
}

....
Skipping nonlast:Priority -655
At location src/dfa.c:3398
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
for (i = 0; i <= d->tindex; ++i) {
    mp[i].in = (char **)malloc(sizeof *mp[i].in);
    mp[i].left = malloc(2);
    mp[i].right = malloc(2);
    mp[i].is = malloc(2);
    if (mp[i].in == ((void *)0) || mp[i].left == ((void *)0) || mp[i].right == ((void *)0) || mp[i].is == ((void *)0))
        goto done;
    mp[i].left[0] = mp[i].right[0] = mp[i].is[0] = '\x00';
    mp[i].in[0] = ((void *)0);
}

....
Skipping nonlast:Priority -655
At location src/dfa.c:3398
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
for (i = 0; i <= d->tindex; ++i) {
    mp[i].in = (char **)malloc(sizeof *mp[i].in);
    mp[i].left = malloc(2);
    mp[i].right = malloc(2);
    mp[i].is = malloc(2);
    if (mp[i].in == ((void *)0) || mp[i].left == ((void *)0) || mp[i].right == ((void *)0) || mp[i].is == ((void *)0))
        goto done;
    mp[i].left[0] = mp[i].right[0] = mp[i].is[0] = '\x00';
    mp[i].in[0] = ((void *)0);
}

....
Skipping nonlast:Priority -655
At location src/dfa.c:3398
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
for (i = 0; i <= d->tindex; ++i) {
    mp[i].in = (char **)malloc(sizeof *mp[i].in);
    mp[i].left = malloc(2);
    mp[i].right = malloc(2);
    mp[i].is = malloc(2);
    if (mp[i].in == ((void *)0) || mp[i].left == ((void *)0) || mp[i].right == ((void *)0) || mp[i].is == ((void *)0))
        goto done;
    mp[i].left[0] = mp[i].right[0] = mp[i].is[0] = '\x00';
    mp[i].in[0] = ((void *)0);
}

....
Skipping nonlast:Priority -655
At location src/dfa.c:3398
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
for (i = 0; i <= d->tindex; ++i) {
    mp[i].in = (char **)malloc(sizeof *mp[i].in);
    mp[i].left = malloc(2);
    mp[i].right = malloc(2);
    mp[i].is = malloc(2);
    if (mp[i].in == ((void *)0) || mp[i].left == ((void *)0) || mp[i].right == ((void *)0) || mp[i].is == ((void *)0))
        goto done;
    mp[i].left[0] = mp[i].right[0] = mp[i].is[0] = '\x00';
    mp[i].in[0] = ((void *)0);
}

....
Skipping nonlast addifexit:Priority 4345
At location src/dfa.c:3398
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->tindex, mp, mp[i].in, musts, mp[i].left, mp[i].right, mp[i].is, exact, result, ri, t, d->tokens, mp->is, mp->left, mp->right, mp->in, dm, d->musts, d->charclasses, d->cindex, d->calloc, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success)))
    return;
for (i = 0; i <= d->tindex; ++i) {
    mp[i].in = (char **)malloc(sizeof *mp[i].in);
    mp[i].left = malloc(2);
    mp[i].right = malloc(2);
    mp[i].is = malloc(2);
    if (mp[i].in == ((void *)0) || mp[i].left == ((void *)0) || mp[i].right == ((void *)0) || mp[i].is == ((void *)0))
        goto done;
    mp[i].left[0] = mp[i].right[0] = mp[i].is[0] = '\x00';
    mp[i].in[0] = ((void *)0);
}

....
Skipping nonlast addifexit:Priority 4545
At location src/dfa.c:3398
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->tindex, mp, mp[i].in, musts, mp[i].left, mp[i].right, mp[i].is, exact, result, ri, t, d->tokens, mp->is, mp->left, mp->right, mp->in, dm, d->musts, d->charclasses, d->cindex, d->calloc, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success)))
    goto done;
for (i = 0; i <= d->tindex; ++i) {
    mp[i].in = (char **)malloc(sizeof *mp[i].in);
    mp[i].left = malloc(2);
    mp[i].right = malloc(2);
    mp[i].is = malloc(2);
    if (mp[i].in == ((void *)0) || mp[i].left == ((void *)0) || mp[i].right == ((void *)0) || mp[i].is == ((void *)0))
        goto done;
    mp[i].left[0] = mp[i].right[0] = mp[i].is[0] = '\x00';
    mp[i].in[0] = ((void *)0);
}

....
Skipping nonlast:Priority 4346
At location src/dfa.c:3400
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
mp[i].in = (char **)malloc(sizeof *mp[i].in);

....
Skipping nonlast:Priority 4346
At location src/dfa.c:3400
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
mp[i].in = (char **)malloc(sizeof *mp[i].in);

....
Skipping nonlast:Priority 4346
At location src/dfa.c:3400
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
mp[i].in = (char **)malloc(sizeof *mp[i].in);

....
Skipping nonlast:Priority 4346
At location src/dfa.c:3400
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
mp[i].in = (char **)malloc(sizeof *mp[i].in);

....
Skipping nonlast:Priority 4346
At location src/dfa.c:3400
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
mp[i].in = (char **)malloc(sizeof *mp[i].in);

....
Skipping nonlast:Priority 4346
At location src/dfa.c:3400
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
mp[i].in = (char **)malloc(sizeof *mp[i].in);

....
Skipping nonlast addifexit:Priority 9346
At location src/dfa.c:3400
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].in, mp[i].left, d, mp[i].right, mp[i].is, musts, exact, result, ri, t, mp->is, mp->left, mp->right, mp->in, dm)))
    return;
mp[i].in = (char **)malloc(sizeof *mp[i].in);

....
Skipping nonlast addifexit:Priority 9346
At location src/dfa.c:3400
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].in, mp[i].left, d, mp[i].right, mp[i].is, musts, exact, result, ri, t, mp->is, mp->left, mp->right, mp->in, dm)))
    break;
mp[i].in = (char **)malloc(sizeof *mp[i].in);

....
Skipping nonlast addifexit:Priority 9546
At location src/dfa.c:3400
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].in, mp[i].left, d, mp[i].right, mp[i].is, musts, exact, result, ri, t, mp->is, mp->left, mp->right, mp->in, dm)))
    goto done;
mp[i].in = (char **)malloc(sizeof *mp[i].in);

....
Skipping nonlast:Priority -653
At location src/dfa.c:3401
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
mp[i].left = malloc(2);

....
Skipping nonlast:Priority -653
At location src/dfa.c:3401
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
mp[i].left = malloc(2);

....
Skipping nonlast:Priority -653
At location src/dfa.c:3401
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
mp[i].left = malloc(2);

....
Skipping nonlast:Priority -653
At location src/dfa.c:3401
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
mp[i].left = malloc(2);

....
Skipping nonlast:Priority -653
At location src/dfa.c:3401
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
mp[i].left = malloc(2);

....
Skipping nonlast:Priority -653
At location src/dfa.c:3401
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
mp[i].left = malloc(2);

....
Skipping nonlast addifexit:Priority 4347
At location src/dfa.c:3401
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].left, mp[i].in, mp[i].right, mp[i].is, d, musts, exact, result, ri, t, mp->is, mp->left, mp->right, mp->in, dm)))
    return;
mp[i].left = malloc(2);

....
Skipping nonlast addifexit:Priority 4347
At location src/dfa.c:3401
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].left, mp[i].in, mp[i].right, mp[i].is, d, musts, exact, result, ri, t, mp->is, mp->left, mp->right, mp->in, dm)))
    break;
mp[i].left = malloc(2);

....
Skipping nonlast addifexit:Priority 4547
At location src/dfa.c:3401
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].left, mp[i].in, mp[i].right, mp[i].is, d, musts, exact, result, ri, t, mp->is, mp->left, mp->right, mp->in, dm)))
    goto done;
mp[i].left = malloc(2);

....
Skipping nonlast:Priority -652
At location src/dfa.c:3402
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
mp[i].right = malloc(2);

....
Skipping nonlast:Priority -652
At location src/dfa.c:3402
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
mp[i].right = malloc(2);

....
Skipping nonlast:Priority -652
At location src/dfa.c:3402
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
mp[i].right = malloc(2);

....
Skipping nonlast:Priority -652
At location src/dfa.c:3402
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
mp[i].right = malloc(2);

....
Skipping nonlast:Priority -652
At location src/dfa.c:3402
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
mp[i].right = malloc(2);

....
Skipping nonlast:Priority -652
At location src/dfa.c:3402
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
mp[i].right = malloc(2);

....
Skipping nonlast addifexit:Priority 4348
At location src/dfa.c:3402
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].right, mp[i].left, mp[i].is, mp[i].in, d, musts, exact, result, ri, t, mp->is, mp->left, mp->right, mp->in, dm)))
    return;
mp[i].right = malloc(2);

....
Skipping nonlast addifexit:Priority 4348
At location src/dfa.c:3402
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].right, mp[i].left, mp[i].is, mp[i].in, d, musts, exact, result, ri, t, mp->is, mp->left, mp->right, mp->in, dm)))
    break;
mp[i].right = malloc(2);

....
Skipping nonlast addifexit:Priority 4548
At location src/dfa.c:3402
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].right, mp[i].left, mp[i].is, mp[i].in, d, musts, exact, result, ri, t, mp->is, mp->left, mp->right, mp->in, dm)))
    goto done;
mp[i].right = malloc(2);

....
Skipping nonlast:Priority -651
At location src/dfa.c:3403
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
mp[i].is = malloc(2);

....
Skipping nonlast:Priority -651
At location src/dfa.c:3403
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
mp[i].is = malloc(2);

....
Skipping nonlast:Priority -651
At location src/dfa.c:3403
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
mp[i].is = malloc(2);

....
Skipping nonlast:Priority -651
At location src/dfa.c:3403
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
mp[i].is = malloc(2);

....
Skipping nonlast:Priority -651
At location src/dfa.c:3403
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
mp[i].is = malloc(2);

....
Skipping nonlast:Priority -651
At location src/dfa.c:3403
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
mp[i].is = malloc(2);

....
Skipping nonlast addifexit:Priority 4349
At location src/dfa.c:3403
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].is, mp[i].in, mp[i].left, mp[i].right, d, musts, exact, result, ri, t, mp->is, mp->left, mp->right, mp->in, dm)))
    return;
mp[i].is = malloc(2);

....
Skipping nonlast addifexit:Priority 4349
At location src/dfa.c:3403
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].is, mp[i].in, mp[i].left, mp[i].right, d, musts, exact, result, ri, t, mp->is, mp->left, mp->right, mp->in, dm)))
    break;
mp[i].is = malloc(2);

....
Skipping nonlast addifexit:Priority 4549
At location src/dfa.c:3403
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].is, mp[i].in, mp[i].left, mp[i].right, d, musts, exact, result, ri, t, mp->is, mp->left, mp->right, mp->in, dm)))
    goto done;
mp[i].is = malloc(2);

....
Skipping nonlast:Priority -650
At location src/dfa.c:3404
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (mp[i].in == ((void *)0) || mp[i].left == ((void *)0) || mp[i].right == ((void *)0) || mp[i].is == ((void *)0))
    goto done;

....
Skipping nonlast:Priority -650
At location src/dfa.c:3404
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (mp[i].in == ((void *)0) || mp[i].left == ((void *)0) || mp[i].right == ((void *)0) || mp[i].is == ((void *)0))
    goto done;

....
Skipping nonlast:Priority -650
At location src/dfa.c:3404
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if (mp[i].in == ((void *)0) || mp[i].left == ((void *)0) || mp[i].right == ((void *)0) || mp[i].is == ((void *)0))
    goto done;

....
Skipping nonlast:Priority -650
At location src/dfa.c:3404
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (mp[i].in == ((void *)0) || mp[i].left == ((void *)0) || mp[i].right == ((void *)0) || mp[i].is == ((void *)0))
    goto done;

....
Skipping nonlast:Priority -650
At location src/dfa.c:3404
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (mp[i].in == ((void *)0) || mp[i].left == ((void *)0) || mp[i].right == ((void *)0) || mp[i].is == ((void *)0))
    goto done;

....
Skipping nonlast:Priority -650
At location src/dfa.c:3404
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (mp[i].in == ((void *)0) || mp[i].left == ((void *)0) || mp[i].right == ((void *)0) || mp[i].is == ((void *)0))
    goto done;

....
Skipping nonlast addifexit:Priority 3100
At location src/dfa.c:3404
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].in, mp[i].left, mp[i].right, mp[i].is, d, musts, exact, result, ri, t, mp->is, mp->left, mp->right, mp->in, dm)))
    return;
if (mp[i].in == ((void *)0) || mp[i].left == ((void *)0) || mp[i].right == ((void *)0) || mp[i].is == ((void *)0))
    goto done;

....
Skipping nonlast addifexit:Priority 3100
At location src/dfa.c:3404
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].in, mp[i].left, mp[i].right, mp[i].is, d, musts, exact, result, ri, t, mp->is, mp->left, mp->right, mp->in, dm)))
    break;
if (mp[i].in == ((void *)0) || mp[i].left == ((void *)0) || mp[i].right == ((void *)0) || mp[i].is == ((void *)0))
    goto done;

....
Skipping nonlast addifexit:Priority 3300
At location src/dfa.c:3404
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].in, mp[i].left, mp[i].right, mp[i].is, d, musts, exact, result, ri, t, mp->is, mp->left, mp->right, mp->in, dm)))
    goto done;
if (mp[i].in == ((void *)0) || mp[i].left == ((void *)0) || mp[i].right == ((void *)0) || mp[i].is == ((void *)0))
    goto done;

....
Skipping nonlast:Priority -649
At location src/dfa.c:3407
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
mp[i].left[0] = mp[i].right[0] = mp[i].is[0] = '\x00';

....
Skipping nonlast:Priority -649
At location src/dfa.c:3407
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
mp[i].left[0] = mp[i].right[0] = mp[i].is[0] = '\x00';

....
Skipping nonlast:Priority -649
At location src/dfa.c:3407
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
mp[i].left[0] = mp[i].right[0] = mp[i].is[0] = '\x00';

....
Skipping nonlast:Priority -649
At location src/dfa.c:3407
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
mp[i].left[0] = mp[i].right[0] = mp[i].is[0] = '\x00';

....
Skipping nonlast:Priority -649
At location src/dfa.c:3407
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
mp[i].left[0] = mp[i].right[0] = mp[i].is[0] = '\x00';

....
Skipping nonlast:Priority -649
At location src/dfa.c:3407
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
mp[i].left[0] = mp[i].right[0] = mp[i].is[0] = '\x00';

....
Skipping nonlast addifexit:Priority 4351
At location src/dfa.c:3407
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].left, mp[i].right, mp[i].is, mp[i].in, d, musts, ri, t, exact, result, mp->is, mp->left, mp->right, mp->in, dm)))
    return;
mp[i].left[0] = mp[i].right[0] = mp[i].is[0] = '\x00';

....
Skipping nonlast addifexit:Priority 4351
At location src/dfa.c:3407
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].left, mp[i].right, mp[i].is, mp[i].in, d, musts, ri, t, exact, result, mp->is, mp->left, mp->right, mp->in, dm)))
    break;
mp[i].left[0] = mp[i].right[0] = mp[i].is[0] = '\x00';

....
Skipping nonlast addifexit:Priority 4551
At location src/dfa.c:3407
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].left, mp[i].right, mp[i].is, mp[i].in, d, musts, ri, t, exact, result, mp->is, mp->left, mp->right, mp->in, dm)))
    goto done;
mp[i].left[0] = mp[i].right[0] = mp[i].is[0] = '\x00';

....
Skipping nonlast:Priority -647
At location src/dfa.c:3419
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
for (ri = 0; ri < d->tindex; ++ri) {
    switch (t = d->tokens[ri]) {
      case LPAREN:
      case RPAREN:
        goto done;
      case EMPTY:
      case BEGLINE:
      case ENDLINE:
      case BEGWORD:
      case ENDWORD:
      case LIMWORD:
      case NOTLIMWORD:
      case BACKREF:
        resetmust(mp);
        break;
      case STAR:
      case QMARK:
        if (mp <= musts)
            goto done;
        --mp;
        resetmust(mp);
        break;
      case OR:
      case ORTOP:
        if (mp < &musts[2])
            goto done;
        {
            char **new;
            must *lmp;
            must *rmp;
            int j, ln, rn, n;
            rmp = --mp;
            lmp = --mp;
            if (__extension__ ({
                size_t __s1_len, __s2_len;
                (__builtin_constant_p(lmp->is) && __builtin_constant_p(rmp->is) && (__s1_len = __builtin_strlen(lmp->is) , __s2_len = __builtin_strlen(rmp->is) , (!((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(lmp->is, rmp->is) : (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) && (__s1_len = __builtin_strlen(lmp->is) , __s1_len < 4) ? (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (__extension__ ({
                    const unsigned char *__s2 = (const unsigned char *)(const char *)(rmp->is);
                    int __result = (((const unsigned char *)(const char *)(lmp->is))[0] - __s2[0]);
                    if (__s1_len > 0 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(lmp->is))[1] - __s2[1]);
                        if (__s1_len > 1 && __result == 0) {
                            __result = (((const unsigned char *)(const char *)(lmp->is))[2] - __s2[2]);
                            if (__s1_len > 2 && __result == 0)
                                __result = (((const unsigned char *)(const char *)(lmp->is))[3] - __s2[3]);
                        }
                    }
                    __result;
                }))) : (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) && (__s2_len = __builtin_strlen(rmp->is) , __s2_len < 4) ? (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (-(__extension__ ({
                    const unsigned char *__s2 = (const unsigned char *)(const char *)(lmp->is);
                    int __result = (((const unsigned char *)(const char *)(rmp->is))[0] - __s2[0]);
                    if (__s2_len > 0 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(rmp->is))[1] - __s2[1]);
                        if (__s2_len > 1 && __result == 0) {
                            __result = (((const unsigned char *)(const char *)(rmp->is))[2] - __s2[2]);
                            if (__s2_len > 2 && __result == 0)
                                __result = (((const unsigned char *)(const char *)(rmp->is))[3] - __s2[3]);
                        }
                    }
                    __result;
                })))) : __builtin_strcmp(lmp->is, rmp->is))));
            }) != 0)
                lmp->is[0] = '\x00';
            i = 0;
            while (lmp->left[i] != '\x00' && lmp->left[i] == rmp->left[i])
                ++i;
            lmp->left[i] = '\x00';
            ln = strlen(lmp->right);
            rn = strlen(rmp->right);
            n = ln;
            if (n > rn)
                n = rn;
            for (i = 0; i < n; ++i) 
                if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
                    break;
            for (j = 0; j < i; ++j) 
                lmp->right[j] = lmp->right[(ln - i) + j];
            lmp->right[j] = '\x00';
            new = inboth(lmp->in, rmp->in);
            if (new == ((void *)0))
                goto done;
            freelist(lmp->in);
            free((char *)lmp->in);
            lmp->in = new;
        }
        break;
      case PLUS:
        if (mp <= musts)
            goto done;
        --mp;
        mp->is[0] = '\x00';
        break;
      case END:
        if (mp != &musts[1])
            goto done;
        for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
            if (strlen(musts[0].in[i]) > strlen(result))
                result = musts[0].in[i];
        if (__extension__ ({
            size_t __s1_len, __s2_len;
            (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
                int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
                if (__s1_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
                    if (__s1_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                        if (__s1_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
                    }
                }
                __result;
            }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
                int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
                if (__s2_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
                    if (__s2_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                        if (__s2_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
                    }
                }
                __result;
            })))) : __builtin_strcmp(result, musts[0].is))));
        }) == 0)
            exact = 1;
        goto done;
      case CAT:
        if (mp < &musts[2])
            goto done;
        {
            must *lmp;
            must *rmp;
            rmp = --mp;
            lmp = --mp;
            lmp->in = addlists(lmp->in, rmp->in);
            if (lmp->in == ((void *)0))
                goto done;
            if (lmp->right[0] != '\x00' && rmp->left[0] != '\x00') {
                char *tp;
                tp = icpyalloc(lmp->right);
                if (tp == ((void *)0))
                    goto done;
                tp = icatalloc(tp, rmp->left);
                if (tp == ((void *)0))
                    goto done;
                lmp->in = enlist(lmp->in, tp, strlen(tp));
                free(tp);
                if (lmp->in == ((void *)0))
                    goto done;
            }
            if (lmp->is[0] != '\x00') {
                lmp->left = icatalloc(lmp->left, rmp->left);
                if (lmp->left == ((void *)0))
                    goto done;
            }
            if (rmp->is[0] == '\x00')
                lmp->right[0] = '\x00';
            lmp->right = icatalloc(lmp->right, rmp->right);
            if (lmp->right == ((void *)0))
                goto done;
            if (lmp->is[0] != '\x00' && rmp->is[0] != '\x00') {
                lmp->is = icatalloc(lmp->is, rmp->is);
                if (lmp->is == ((void *)0))
                    goto done;
            } else
                lmp->is[0] = '\x00';
        }
        break;
      default:
        if (t < END) {
            goto done;
        } else if (t == '\x00') {
            goto done;
        } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
            resetmust(mp);
        } else {
            resetmust(mp);
            mp->is[0] = mp->left[0] = mp->right[0] = t;
            mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
            mp->in = enlist(mp->in, mp->is, (size_t)1);
            if (mp->in == ((void *)0))
                goto done;
        }
        break;
    }
    ++mp;
}

....
Skipping nonlast:Priority -647
At location src/dfa.c:3419
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
for (ri = 0; ri < d->tindex; ++ri) {
    switch (t = d->tokens[ri]) {
      case LPAREN:
      case RPAREN:
        goto done;
      case EMPTY:
      case BEGLINE:
      case ENDLINE:
      case BEGWORD:
      case ENDWORD:
      case LIMWORD:
      case NOTLIMWORD:
      case BACKREF:
        resetmust(mp);
        break;
      case STAR:
      case QMARK:
        if (mp <= musts)
            goto done;
        --mp;
        resetmust(mp);
        break;
      case OR:
      case ORTOP:
        if (mp < &musts[2])
            goto done;
        {
            char **new;
            must *lmp;
            must *rmp;
            int j, ln, rn, n;
            rmp = --mp;
            lmp = --mp;
            if (__extension__ ({
                size_t __s1_len, __s2_len;
                (__builtin_constant_p(lmp->is) && __builtin_constant_p(rmp->is) && (__s1_len = __builtin_strlen(lmp->is) , __s2_len = __builtin_strlen(rmp->is) , (!((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(lmp->is, rmp->is) : (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) && (__s1_len = __builtin_strlen(lmp->is) , __s1_len < 4) ? (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (__extension__ ({
                    const unsigned char *__s2 = (const unsigned char *)(const char *)(rmp->is);
                    int __result = (((const unsigned char *)(const char *)(lmp->is))[0] - __s2[0]);
                    if (__s1_len > 0 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(lmp->is))[1] - __s2[1]);
                        if (__s1_len > 1 && __result == 0) {
                            __result = (((const unsigned char *)(const char *)(lmp->is))[2] - __s2[2]);
                            if (__s1_len > 2 && __result == 0)
                                __result = (((const unsigned char *)(const char *)(lmp->is))[3] - __s2[3]);
                        }
                    }
                    __result;
                }))) : (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) && (__s2_len = __builtin_strlen(rmp->is) , __s2_len < 4) ? (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (-(__extension__ ({
                    const unsigned char *__s2 = (const unsigned char *)(const char *)(lmp->is);
                    int __result = (((const unsigned char *)(const char *)(rmp->is))[0] - __s2[0]);
                    if (__s2_len > 0 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(rmp->is))[1] - __s2[1]);
                        if (__s2_len > 1 && __result == 0) {
                            __result = (((const unsigned char *)(const char *)(rmp->is))[2] - __s2[2]);
                            if (__s2_len > 2 && __result == 0)
                                __result = (((const unsigned char *)(const char *)(rmp->is))[3] - __s2[3]);
                        }
                    }
                    __result;
                })))) : __builtin_strcmp(lmp->is, rmp->is))));
            }) != 0)
                lmp->is[0] = '\x00';
            i = 0;
            while (lmp->left[i] != '\x00' && lmp->left[i] == rmp->left[i])
                ++i;
            lmp->left[i] = '\x00';
            ln = strlen(lmp->right);
            rn = strlen(rmp->right);
            n = ln;
            if (n > rn)
                n = rn;
            for (i = 0; i < n; ++i) 
                if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
                    break;
            for (j = 0; j < i; ++j) 
                lmp->right[j] = lmp->right[(ln - i) + j];
            lmp->right[j] = '\x00';
            new = inboth(lmp->in, rmp->in);
            if (new == ((void *)0))
                goto done;
            freelist(lmp->in);
            free((char *)lmp->in);
            lmp->in = new;
        }
        break;
      case PLUS:
        if (mp <= musts)
            goto done;
        --mp;
        mp->is[0] = '\x00';
        break;
      case END:
        if (mp != &musts[1])
            goto done;
        for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
            if (strlen(musts[0].in[i]) > strlen(result))
                result = musts[0].in[i];
        if (__extension__ ({
            size_t __s1_len, __s2_len;
            (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
                int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
                if (__s1_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
                    if (__s1_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                        if (__s1_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
                    }
                }
                __result;
            }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
                int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
                if (__s2_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
                    if (__s2_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                        if (__s2_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
                    }
                }
                __result;
            })))) : __builtin_strcmp(result, musts[0].is))));
        }) == 0)
            exact = 1;
        goto done;
      case CAT:
        if (mp < &musts[2])
            goto done;
        {
            must *lmp;
            must *rmp;
            rmp = --mp;
            lmp = --mp;
            lmp->in = addlists(lmp->in, rmp->in);
            if (lmp->in == ((void *)0))
                goto done;
            if (lmp->right[0] != '\x00' && rmp->left[0] != '\x00') {
                char *tp;
                tp = icpyalloc(lmp->right);
                if (tp == ((void *)0))
                    goto done;
                tp = icatalloc(tp, rmp->left);
                if (tp == ((void *)0))
                    goto done;
                lmp->in = enlist(lmp->in, tp, strlen(tp));
                free(tp);
                if (lmp->in == ((void *)0))
                    goto done;
            }
            if (lmp->is[0] != '\x00') {
                lmp->left = icatalloc(lmp->left, rmp->left);
                if (lmp->left == ((void *)0))
                    goto done;
            }
            if (rmp->is[0] == '\x00')
                lmp->right[0] = '\x00';
            lmp->right = icatalloc(lmp->right, rmp->right);
            if (lmp->right == ((void *)0))
                goto done;
            if (lmp->is[0] != '\x00' && rmp->is[0] != '\x00') {
                lmp->is = icatalloc(lmp->is, rmp->is);
                if (lmp->is == ((void *)0))
                    goto done;
            } else
                lmp->is[0] = '\x00';
        }
        break;
      default:
        if (t < END) {
            goto done;
        } else if (t == '\x00') {
            goto done;
        } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
            resetmust(mp);
        } else {
            resetmust(mp);
            mp->is[0] = mp->left[0] = mp->right[0] = t;
            mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
            mp->in = enlist(mp->in, mp->is, (size_t)1);
            if (mp->in == ((void *)0))
                goto done;
        }
        break;
    }
    ++mp;
}

....
Skipping nonlast:Priority -647
At location src/dfa.c:3419
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
for (ri = 0; ri < d->tindex; ++ri) {
    switch (t = d->tokens[ri]) {
      case LPAREN:
      case RPAREN:
        goto done;
      case EMPTY:
      case BEGLINE:
      case ENDLINE:
      case BEGWORD:
      case ENDWORD:
      case LIMWORD:
      case NOTLIMWORD:
      case BACKREF:
        resetmust(mp);
        break;
      case STAR:
      case QMARK:
        if (mp <= musts)
            goto done;
        --mp;
        resetmust(mp);
        break;
      case OR:
      case ORTOP:
        if (mp < &musts[2])
            goto done;
        {
            char **new;
            must *lmp;
            must *rmp;
            int j, ln, rn, n;
            rmp = --mp;
            lmp = --mp;
            if (__extension__ ({
                size_t __s1_len, __s2_len;
                (__builtin_constant_p(lmp->is) && __builtin_constant_p(rmp->is) && (__s1_len = __builtin_strlen(lmp->is) , __s2_len = __builtin_strlen(rmp->is) , (!((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(lmp->is, rmp->is) : (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) && (__s1_len = __builtin_strlen(lmp->is) , __s1_len < 4) ? (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (__extension__ ({
                    const unsigned char *__s2 = (const unsigned char *)(const char *)(rmp->is);
                    int __result = (((const unsigned char *)(const char *)(lmp->is))[0] - __s2[0]);
                    if (__s1_len > 0 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(lmp->is))[1] - __s2[1]);
                        if (__s1_len > 1 && __result == 0) {
                            __result = (((const unsigned char *)(const char *)(lmp->is))[2] - __s2[2]);
                            if (__s1_len > 2 && __result == 0)
                                __result = (((const unsigned char *)(const char *)(lmp->is))[3] - __s2[3]);
                        }
                    }
                    __result;
                }))) : (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) && (__s2_len = __builtin_strlen(rmp->is) , __s2_len < 4) ? (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (-(__extension__ ({
                    const unsigned char *__s2 = (const unsigned char *)(const char *)(lmp->is);
                    int __result = (((const unsigned char *)(const char *)(rmp->is))[0] - __s2[0]);
                    if (__s2_len > 0 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(rmp->is))[1] - __s2[1]);
                        if (__s2_len > 1 && __result == 0) {
                            __result = (((const unsigned char *)(const char *)(rmp->is))[2] - __s2[2]);
                            if (__s2_len > 2 && __result == 0)
                                __result = (((const unsigned char *)(const char *)(rmp->is))[3] - __s2[3]);
                        }
                    }
                    __result;
                })))) : __builtin_strcmp(lmp->is, rmp->is))));
            }) != 0)
                lmp->is[0] = '\x00';
            i = 0;
            while (lmp->left[i] != '\x00' && lmp->left[i] == rmp->left[i])
                ++i;
            lmp->left[i] = '\x00';
            ln = strlen(lmp->right);
            rn = strlen(rmp->right);
            n = ln;
            if (n > rn)
                n = rn;
            for (i = 0; i < n; ++i) 
                if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
                    break;
            for (j = 0; j < i; ++j) 
                lmp->right[j] = lmp->right[(ln - i) + j];
            lmp->right[j] = '\x00';
            new = inboth(lmp->in, rmp->in);
            if (new == ((void *)0))
                goto done;
            freelist(lmp->in);
            free((char *)lmp->in);
            lmp->in = new;
        }
        break;
      case PLUS:
        if (mp <= musts)
            goto done;
        --mp;
        mp->is[0] = '\x00';
        break;
      case END:
        if (mp != &musts[1])
            goto done;
        for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
            if (strlen(musts[0].in[i]) > strlen(result))
                result = musts[0].in[i];
        if (__extension__ ({
            size_t __s1_len, __s2_len;
            (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
                int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
                if (__s1_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
                    if (__s1_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                        if (__s1_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
                    }
                }
                __result;
            }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
                int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
                if (__s2_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
                    if (__s2_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                        if (__s2_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
                    }
                }
                __result;
            })))) : __builtin_strcmp(result, musts[0].is))));
        }) == 0)
            exact = 1;
        goto done;
      case CAT:
        if (mp < &musts[2])
            goto done;
        {
            must *lmp;
            must *rmp;
            rmp = --mp;
            lmp = --mp;
            lmp->in = addlists(lmp->in, rmp->in);
            if (lmp->in == ((void *)0))
                goto done;
            if (lmp->right[0] != '\x00' && rmp->left[0] != '\x00') {
                char *tp;
                tp = icpyalloc(lmp->right);
                if (tp == ((void *)0))
                    goto done;
                tp = icatalloc(tp, rmp->left);
                if (tp == ((void *)0))
                    goto done;
                lmp->in = enlist(lmp->in, tp, strlen(tp));
                free(tp);
                if (lmp->in == ((void *)0))
                    goto done;
            }
            if (lmp->is[0] != '\x00') {
                lmp->left = icatalloc(lmp->left, rmp->left);
                if (lmp->left == ((void *)0))
                    goto done;
            }
            if (rmp->is[0] == '\x00')
                lmp->right[0] = '\x00';
            lmp->right = icatalloc(lmp->right, rmp->right);
            if (lmp->right == ((void *)0))
                goto done;
            if (lmp->is[0] != '\x00' && rmp->is[0] != '\x00') {
                lmp->is = icatalloc(lmp->is, rmp->is);
                if (lmp->is == ((void *)0))
                    goto done;
            } else
                lmp->is[0] = '\x00';
        }
        break;
      default:
        if (t < END) {
            goto done;
        } else if (t == '\x00') {
            goto done;
        } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
            resetmust(mp);
        } else {
            resetmust(mp);
            mp->is[0] = mp->left[0] = mp->right[0] = t;
            mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
            mp->in = enlist(mp->in, mp->is, (size_t)1);
            if (mp->in == ((void *)0))
                goto done;
        }
        break;
    }
    ++mp;
}

....
Skipping nonlast:Priority -647
At location src/dfa.c:3419
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
for (ri = 0; ri < d->tindex; ++ri) {
    switch (t = d->tokens[ri]) {
      case LPAREN:
      case RPAREN:
        goto done;
      case EMPTY:
      case BEGLINE:
      case ENDLINE:
      case BEGWORD:
      case ENDWORD:
      case LIMWORD:
      case NOTLIMWORD:
      case BACKREF:
        resetmust(mp);
        break;
      case STAR:
      case QMARK:
        if (mp <= musts)
            goto done;
        --mp;
        resetmust(mp);
        break;
      case OR:
      case ORTOP:
        if (mp < &musts[2])
            goto done;
        {
            char **new;
            must *lmp;
            must *rmp;
            int j, ln, rn, n;
            rmp = --mp;
            lmp = --mp;
            if (__extension__ ({
                size_t __s1_len, __s2_len;
                (__builtin_constant_p(lmp->is) && __builtin_constant_p(rmp->is) && (__s1_len = __builtin_strlen(lmp->is) , __s2_len = __builtin_strlen(rmp->is) , (!((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(lmp->is, rmp->is) : (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) && (__s1_len = __builtin_strlen(lmp->is) , __s1_len < 4) ? (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (__extension__ ({
                    const unsigned char *__s2 = (const unsigned char *)(const char *)(rmp->is);
                    int __result = (((const unsigned char *)(const char *)(lmp->is))[0] - __s2[0]);
                    if (__s1_len > 0 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(lmp->is))[1] - __s2[1]);
                        if (__s1_len > 1 && __result == 0) {
                            __result = (((const unsigned char *)(const char *)(lmp->is))[2] - __s2[2]);
                            if (__s1_len > 2 && __result == 0)
                                __result = (((const unsigned char *)(const char *)(lmp->is))[3] - __s2[3]);
                        }
                    }
                    __result;
                }))) : (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) && (__s2_len = __builtin_strlen(rmp->is) , __s2_len < 4) ? (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (-(__extension__ ({
                    const unsigned char *__s2 = (const unsigned char *)(const char *)(lmp->is);
                    int __result = (((const unsigned char *)(const char *)(rmp->is))[0] - __s2[0]);
                    if (__s2_len > 0 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(rmp->is))[1] - __s2[1]);
                        if (__s2_len > 1 && __result == 0) {
                            __result = (((const unsigned char *)(const char *)(rmp->is))[2] - __s2[2]);
                            if (__s2_len > 2 && __result == 0)
                                __result = (((const unsigned char *)(const char *)(rmp->is))[3] - __s2[3]);
                        }
                    }
                    __result;
                })))) : __builtin_strcmp(lmp->is, rmp->is))));
            }) != 0)
                lmp->is[0] = '\x00';
            i = 0;
            while (lmp->left[i] != '\x00' && lmp->left[i] == rmp->left[i])
                ++i;
            lmp->left[i] = '\x00';
            ln = strlen(lmp->right);
            rn = strlen(rmp->right);
            n = ln;
            if (n > rn)
                n = rn;
            for (i = 0; i < n; ++i) 
                if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
                    break;
            for (j = 0; j < i; ++j) 
                lmp->right[j] = lmp->right[(ln - i) + j];
            lmp->right[j] = '\x00';
            new = inboth(lmp->in, rmp->in);
            if (new == ((void *)0))
                goto done;
            freelist(lmp->in);
            free((char *)lmp->in);
            lmp->in = new;
        }
        break;
      case PLUS:
        if (mp <= musts)
            goto done;
        --mp;
        mp->is[0] = '\x00';
        break;
      case END:
        if (mp != &musts[1])
            goto done;
        for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
            if (strlen(musts[0].in[i]) > strlen(result))
                result = musts[0].in[i];
        if (__extension__ ({
            size_t __s1_len, __s2_len;
            (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
                int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
                if (__s1_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
                    if (__s1_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                        if (__s1_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
                    }
                }
                __result;
            }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
                int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
                if (__s2_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
                    if (__s2_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                        if (__s2_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
                    }
                }
                __result;
            })))) : __builtin_strcmp(result, musts[0].is))));
        }) == 0)
            exact = 1;
        goto done;
      case CAT:
        if (mp < &musts[2])
            goto done;
        {
            must *lmp;
            must *rmp;
            rmp = --mp;
            lmp = --mp;
            lmp->in = addlists(lmp->in, rmp->in);
            if (lmp->in == ((void *)0))
                goto done;
            if (lmp->right[0] != '\x00' && rmp->left[0] != '\x00') {
                char *tp;
                tp = icpyalloc(lmp->right);
                if (tp == ((void *)0))
                    goto done;
                tp = icatalloc(tp, rmp->left);
                if (tp == ((void *)0))
                    goto done;
                lmp->in = enlist(lmp->in, tp, strlen(tp));
                free(tp);
                if (lmp->in == ((void *)0))
                    goto done;
            }
            if (lmp->is[0] != '\x00') {
                lmp->left = icatalloc(lmp->left, rmp->left);
                if (lmp->left == ((void *)0))
                    goto done;
            }
            if (rmp->is[0] == '\x00')
                lmp->right[0] = '\x00';
            lmp->right = icatalloc(lmp->right, rmp->right);
            if (lmp->right == ((void *)0))
                goto done;
            if (lmp->is[0] != '\x00' && rmp->is[0] != '\x00') {
                lmp->is = icatalloc(lmp->is, rmp->is);
                if (lmp->is == ((void *)0))
                    goto done;
            } else
                lmp->is[0] = '\x00';
        }
        break;
      default:
        if (t < END) {
            goto done;
        } else if (t == '\x00') {
            goto done;
        } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
            resetmust(mp);
        } else {
            resetmust(mp);
            mp->is[0] = mp->left[0] = mp->right[0] = t;
            mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
            mp->in = enlist(mp->in, mp->is, (size_t)1);
            if (mp->in == ((void *)0))
                goto done;
        }
        break;
    }
    ++mp;
}

....
Skipping nonlast:Priority -647
At location src/dfa.c:3419
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
for (ri = 0; ri < d->tindex; ++ri) {
    switch (t = d->tokens[ri]) {
      case LPAREN:
      case RPAREN:
        goto done;
      case EMPTY:
      case BEGLINE:
      case ENDLINE:
      case BEGWORD:
      case ENDWORD:
      case LIMWORD:
      case NOTLIMWORD:
      case BACKREF:
        resetmust(mp);
        break;
      case STAR:
      case QMARK:
        if (mp <= musts)
            goto done;
        --mp;
        resetmust(mp);
        break;
      case OR:
      case ORTOP:
        if (mp < &musts[2])
            goto done;
        {
            char **new;
            must *lmp;
            must *rmp;
            int j, ln, rn, n;
            rmp = --mp;
            lmp = --mp;
            if (__extension__ ({
                size_t __s1_len, __s2_len;
                (__builtin_constant_p(lmp->is) && __builtin_constant_p(rmp->is) && (__s1_len = __builtin_strlen(lmp->is) , __s2_len = __builtin_strlen(rmp->is) , (!((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(lmp->is, rmp->is) : (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) && (__s1_len = __builtin_strlen(lmp->is) , __s1_len < 4) ? (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (__extension__ ({
                    const unsigned char *__s2 = (const unsigned char *)(const char *)(rmp->is);
                    int __result = (((const unsigned char *)(const char *)(lmp->is))[0] - __s2[0]);
                    if (__s1_len > 0 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(lmp->is))[1] - __s2[1]);
                        if (__s1_len > 1 && __result == 0) {
                            __result = (((const unsigned char *)(const char *)(lmp->is))[2] - __s2[2]);
                            if (__s1_len > 2 && __result == 0)
                                __result = (((const unsigned char *)(const char *)(lmp->is))[3] - __s2[3]);
                        }
                    }
                    __result;
                }))) : (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) && (__s2_len = __builtin_strlen(rmp->is) , __s2_len < 4) ? (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (-(__extension__ ({
                    const unsigned char *__s2 = (const unsigned char *)(const char *)(lmp->is);
                    int __result = (((const unsigned char *)(const char *)(rmp->is))[0] - __s2[0]);
                    if (__s2_len > 0 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(rmp->is))[1] - __s2[1]);
                        if (__s2_len > 1 && __result == 0) {
                            __result = (((const unsigned char *)(const char *)(rmp->is))[2] - __s2[2]);
                            if (__s2_len > 2 && __result == 0)
                                __result = (((const unsigned char *)(const char *)(rmp->is))[3] - __s2[3]);
                        }
                    }
                    __result;
                })))) : __builtin_strcmp(lmp->is, rmp->is))));
            }) != 0)
                lmp->is[0] = '\x00';
            i = 0;
            while (lmp->left[i] != '\x00' && lmp->left[i] == rmp->left[i])
                ++i;
            lmp->left[i] = '\x00';
            ln = strlen(lmp->right);
            rn = strlen(rmp->right);
            n = ln;
            if (n > rn)
                n = rn;
            for (i = 0; i < n; ++i) 
                if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
                    break;
            for (j = 0; j < i; ++j) 
                lmp->right[j] = lmp->right[(ln - i) + j];
            lmp->right[j] = '\x00';
            new = inboth(lmp->in, rmp->in);
            if (new == ((void *)0))
                goto done;
            freelist(lmp->in);
            free((char *)lmp->in);
            lmp->in = new;
        }
        break;
      case PLUS:
        if (mp <= musts)
            goto done;
        --mp;
        mp->is[0] = '\x00';
        break;
      case END:
        if (mp != &musts[1])
            goto done;
        for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
            if (strlen(musts[0].in[i]) > strlen(result))
                result = musts[0].in[i];
        if (__extension__ ({
            size_t __s1_len, __s2_len;
            (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
                int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
                if (__s1_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
                    if (__s1_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                        if (__s1_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
                    }
                }
                __result;
            }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
                int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
                if (__s2_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
                    if (__s2_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                        if (__s2_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
                    }
                }
                __result;
            })))) : __builtin_strcmp(result, musts[0].is))));
        }) == 0)
            exact = 1;
        goto done;
      case CAT:
        if (mp < &musts[2])
            goto done;
        {
            must *lmp;
            must *rmp;
            rmp = --mp;
            lmp = --mp;
            lmp->in = addlists(lmp->in, rmp->in);
            if (lmp->in == ((void *)0))
                goto done;
            if (lmp->right[0] != '\x00' && rmp->left[0] != '\x00') {
                char *tp;
                tp = icpyalloc(lmp->right);
                if (tp == ((void *)0))
                    goto done;
                tp = icatalloc(tp, rmp->left);
                if (tp == ((void *)0))
                    goto done;
                lmp->in = enlist(lmp->in, tp, strlen(tp));
                free(tp);
                if (lmp->in == ((void *)0))
                    goto done;
            }
            if (lmp->is[0] != '\x00') {
                lmp->left = icatalloc(lmp->left, rmp->left);
                if (lmp->left == ((void *)0))
                    goto done;
            }
            if (rmp->is[0] == '\x00')
                lmp->right[0] = '\x00';
            lmp->right = icatalloc(lmp->right, rmp->right);
            if (lmp->right == ((void *)0))
                goto done;
            if (lmp->is[0] != '\x00' && rmp->is[0] != '\x00') {
                lmp->is = icatalloc(lmp->is, rmp->is);
                if (lmp->is == ((void *)0))
                    goto done;
            } else
                lmp->is[0] = '\x00';
        }
        break;
      default:
        if (t < END) {
            goto done;
        } else if (t == '\x00') {
            goto done;
        } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
            resetmust(mp);
        } else {
            resetmust(mp);
            mp->is[0] = mp->left[0] = mp->right[0] = t;
            mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
            mp->in = enlist(mp->in, mp->is, (size_t)1);
            if (mp->in == ((void *)0))
                goto done;
        }
        break;
    }
    ++mp;
}

....
Skipping nonlast:Priority -647
At location src/dfa.c:3419
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
for (ri = 0; ri < d->tindex; ++ri) {
    switch (t = d->tokens[ri]) {
      case LPAREN:
      case RPAREN:
        goto done;
      case EMPTY:
      case BEGLINE:
      case ENDLINE:
      case BEGWORD:
      case ENDWORD:
      case LIMWORD:
      case NOTLIMWORD:
      case BACKREF:
        resetmust(mp);
        break;
      case STAR:
      case QMARK:
        if (mp <= musts)
            goto done;
        --mp;
        resetmust(mp);
        break;
      case OR:
      case ORTOP:
        if (mp < &musts[2])
            goto done;
        {
            char **new;
            must *lmp;
            must *rmp;
            int j, ln, rn, n;
            rmp = --mp;
            lmp = --mp;
            if (__extension__ ({
                size_t __s1_len, __s2_len;
                (__builtin_constant_p(lmp->is) && __builtin_constant_p(rmp->is) && (__s1_len = __builtin_strlen(lmp->is) , __s2_len = __builtin_strlen(rmp->is) , (!((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(lmp->is, rmp->is) : (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) && (__s1_len = __builtin_strlen(lmp->is) , __s1_len < 4) ? (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (__extension__ ({
                    const unsigned char *__s2 = (const unsigned char *)(const char *)(rmp->is);
                    int __result = (((const unsigned char *)(const char *)(lmp->is))[0] - __s2[0]);
                    if (__s1_len > 0 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(lmp->is))[1] - __s2[1]);
                        if (__s1_len > 1 && __result == 0) {
                            __result = (((const unsigned char *)(const char *)(lmp->is))[2] - __s2[2]);
                            if (__s1_len > 2 && __result == 0)
                                __result = (((const unsigned char *)(const char *)(lmp->is))[3] - __s2[3]);
                        }
                    }
                    __result;
                }))) : (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) && (__s2_len = __builtin_strlen(rmp->is) , __s2_len < 4) ? (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (-(__extension__ ({
                    const unsigned char *__s2 = (const unsigned char *)(const char *)(lmp->is);
                    int __result = (((const unsigned char *)(const char *)(rmp->is))[0] - __s2[0]);
                    if (__s2_len > 0 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(rmp->is))[1] - __s2[1]);
                        if (__s2_len > 1 && __result == 0) {
                            __result = (((const unsigned char *)(const char *)(rmp->is))[2] - __s2[2]);
                            if (__s2_len > 2 && __result == 0)
                                __result = (((const unsigned char *)(const char *)(rmp->is))[3] - __s2[3]);
                        }
                    }
                    __result;
                })))) : __builtin_strcmp(lmp->is, rmp->is))));
            }) != 0)
                lmp->is[0] = '\x00';
            i = 0;
            while (lmp->left[i] != '\x00' && lmp->left[i] == rmp->left[i])
                ++i;
            lmp->left[i] = '\x00';
            ln = strlen(lmp->right);
            rn = strlen(rmp->right);
            n = ln;
            if (n > rn)
                n = rn;
            for (i = 0; i < n; ++i) 
                if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
                    break;
            for (j = 0; j < i; ++j) 
                lmp->right[j] = lmp->right[(ln - i) + j];
            lmp->right[j] = '\x00';
            new = inboth(lmp->in, rmp->in);
            if (new == ((void *)0))
                goto done;
            freelist(lmp->in);
            free((char *)lmp->in);
            lmp->in = new;
        }
        break;
      case PLUS:
        if (mp <= musts)
            goto done;
        --mp;
        mp->is[0] = '\x00';
        break;
      case END:
        if (mp != &musts[1])
            goto done;
        for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
            if (strlen(musts[0].in[i]) > strlen(result))
                result = musts[0].in[i];
        if (__extension__ ({
            size_t __s1_len, __s2_len;
            (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
                int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
                if (__s1_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
                    if (__s1_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                        if (__s1_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
                    }
                }
                __result;
            }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
                int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
                if (__s2_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
                    if (__s2_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                        if (__s2_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
                    }
                }
                __result;
            })))) : __builtin_strcmp(result, musts[0].is))));
        }) == 0)
            exact = 1;
        goto done;
      case CAT:
        if (mp < &musts[2])
            goto done;
        {
            must *lmp;
            must *rmp;
            rmp = --mp;
            lmp = --mp;
            lmp->in = addlists(lmp->in, rmp->in);
            if (lmp->in == ((void *)0))
                goto done;
            if (lmp->right[0] != '\x00' && rmp->left[0] != '\x00') {
                char *tp;
                tp = icpyalloc(lmp->right);
                if (tp == ((void *)0))
                    goto done;
                tp = icatalloc(tp, rmp->left);
                if (tp == ((void *)0))
                    goto done;
                lmp->in = enlist(lmp->in, tp, strlen(tp));
                free(tp);
                if (lmp->in == ((void *)0))
                    goto done;
            }
            if (lmp->is[0] != '\x00') {
                lmp->left = icatalloc(lmp->left, rmp->left);
                if (lmp->left == ((void *)0))
                    goto done;
            }
            if (rmp->is[0] == '\x00')
                lmp->right[0] = '\x00';
            lmp->right = icatalloc(lmp->right, rmp->right);
            if (lmp->right == ((void *)0))
                goto done;
            if (lmp->is[0] != '\x00' && rmp->is[0] != '\x00') {
                lmp->is = icatalloc(lmp->is, rmp->is);
                if (lmp->is == ((void *)0))
                    goto done;
            } else
                lmp->is[0] = '\x00';
        }
        break;
      default:
        if (t < END) {
            goto done;
        } else if (t == '\x00') {
            goto done;
        } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
            resetmust(mp);
        } else {
            resetmust(mp);
            mp->is[0] = mp->left[0] = mp->right[0] = t;
            mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
            mp->in = enlist(mp->in, mp->is, (size_t)1);
            if (mp->in == ((void *)0))
                goto done;
        }
        break;
    }
    ++mp;
}

....
Skipping nonlast addifexit:Priority 4353
At location src/dfa.c:3419
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, ri, d->tindex, t, d->tokens, mp, i, musts, exact, result, dm, d->musts, d->charclasses, d->cindex, d->calloc, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success)))
    return;
for (ri = 0; ri < d->tindex; ++ri) {
    switch (t = d->tokens[ri]) {
      case LPAREN:
      case RPAREN:
        goto done;
      case EMPTY:
      case BEGLINE:
      case ENDLINE:
      case BEGWORD:
      case ENDWORD:
      case LIMWORD:
      case NOTLIMWORD:
      case BACKREF:
        resetmust(mp);
        break;
      case STAR:
      case QMARK:
        if (mp <= musts)
            goto done;
        --mp;
        resetmust(mp);
        break;
      case OR:
      case ORTOP:
        if (mp < &musts[2])
            goto done;
        {
            char **new;
            must *lmp;
            must *rmp;
            int j, ln, rn, n;
            rmp = --mp;
            lmp = --mp;
            if (__extension__ ({
                size_t __s1_len, __s2_len;
                (__builtin_constant_p(lmp->is) && __builtin_constant_p(rmp->is) && (__s1_len = __builtin_strlen(lmp->is) , __s2_len = __builtin_strlen(rmp->is) , (!((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(lmp->is, rmp->is) : (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) && (__s1_len = __builtin_strlen(lmp->is) , __s1_len < 4) ? (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (__extension__ ({
                    const unsigned char *__s2 = (const unsigned char *)(const char *)(rmp->is);
                    int __result = (((const unsigned char *)(const char *)(lmp->is))[0] - __s2[0]);
                    if (__s1_len > 0 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(lmp->is))[1] - __s2[1]);
                        if (__s1_len > 1 && __result == 0) {
                            __result = (((const unsigned char *)(const char *)(lmp->is))[2] - __s2[2]);
                            if (__s1_len > 2 && __result == 0)
                                __result = (((const unsigned char *)(const char *)(lmp->is))[3] - __s2[3]);
                        }
                    }
                    __result;
                }))) : (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) && (__s2_len = __builtin_strlen(rmp->is) , __s2_len < 4) ? (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (-(__extension__ ({
                    const unsigned char *__s2 = (const unsigned char *)(const char *)(lmp->is);
                    int __result = (((const unsigned char *)(const char *)(rmp->is))[0] - __s2[0]);
                    if (__s2_len > 0 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(rmp->is))[1] - __s2[1]);
                        if (__s2_len > 1 && __result == 0) {
                            __result = (((const unsigned char *)(const char *)(rmp->is))[2] - __s2[2]);
                            if (__s2_len > 2 && __result == 0)
                                __result = (((const unsigned char *)(const char *)(rmp->is))[3] - __s2[3]);
                        }
                    }
                    __result;
                })))) : __builtin_strcmp(lmp->is, rmp->is))));
            }) != 0)
                lmp->is[0] = '\x00';
            i = 0;
            while (lmp->left[i] != '\x00' && lmp->left[i] == rmp->left[i])
                ++i;
            lmp->left[i] = '\x00';
            ln = strlen(lmp->right);
            rn = strlen(rmp->right);
            n = ln;
            if (n > rn)
                n = rn;
            for (i = 0; i < n; ++i) 
                if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
                    break;
            for (j = 0; j < i; ++j) 
                lmp->right[j] = lmp->right[(ln - i) + j];
            lmp->right[j] = '\x00';
            new = inboth(lmp->in, rmp->in);
            if (new == ((void *)0))
                goto done;
            freelist(lmp->in);
            free((char *)lmp->in);
            lmp->in = new;
        }
        break;
      case PLUS:
        if (mp <= musts)
            goto done;
        --mp;
        mp->is[0] = '\x00';
        break;
      case END:
        if (mp != &musts[1])
            goto done;
        for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
            if (strlen(musts[0].in[i]) > strlen(result))
                result = musts[0].in[i];
        if (__extension__ ({
            size_t __s1_len, __s2_len;
            (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
                int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
                if (__s1_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
                    if (__s1_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                        if (__s1_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
                    }
                }
                __result;
            }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
                int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
                if (__s2_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
                    if (__s2_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                        if (__s2_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
                    }
                }
                __result;
            })))) : __builtin_strcmp(result, musts[0].is))));
        }) == 0)
            exact = 1;
        goto done;
      case CAT:
        if (mp < &musts[2])
            goto done;
        {
            must *lmp;
            must *rmp;
            rmp = --mp;
            lmp = --mp;
            lmp->in = addlists(lmp->in, rmp->in);
            if (lmp->in == ((void *)0))
                goto done;
            if (lmp->right[0] != '\x00' && rmp->left[0] != '\x00') {
                char *tp;
                tp = icpyalloc(lmp->right);
                if (tp == ((void *)0))
                    goto done;
                tp = icatalloc(tp, rmp->left);
                if (tp == ((void *)0))
                    goto done;
                lmp->in = enlist(lmp->in, tp, strlen(tp));
                free(tp);
                if (lmp->in == ((void *)0))
                    goto done;
            }
            if (lmp->is[0] != '\x00') {
                lmp->left = icatalloc(lmp->left, rmp->left);
                if (lmp->left == ((void *)0))
                    goto done;
            }
            if (rmp->is[0] == '\x00')
                lmp->right[0] = '\x00';
            lmp->right = icatalloc(lmp->right, rmp->right);
            if (lmp->right == ((void *)0))
                goto done;
            if (lmp->is[0] != '\x00' && rmp->is[0] != '\x00') {
                lmp->is = icatalloc(lmp->is, rmp->is);
                if (lmp->is == ((void *)0))
                    goto done;
            } else
                lmp->is[0] = '\x00';
        }
        break;
      default:
        if (t < END) {
            goto done;
        } else if (t == '\x00') {
            goto done;
        } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
            resetmust(mp);
        } else {
            resetmust(mp);
            mp->is[0] = mp->left[0] = mp->right[0] = t;
            mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
            mp->in = enlist(mp->in, mp->is, (size_t)1);
            if (mp->in == ((void *)0))
                goto done;
        }
        break;
    }
    ++mp;
}

....
Skipping nonlast addifexit:Priority 4553
At location src/dfa.c:3419
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, ri, d->tindex, t, d->tokens, mp, i, musts, exact, result, dm, d->musts, d->charclasses, d->cindex, d->calloc, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success)))
    goto done;
for (ri = 0; ri < d->tindex; ++ri) {
    switch (t = d->tokens[ri]) {
      case LPAREN:
      case RPAREN:
        goto done;
      case EMPTY:
      case BEGLINE:
      case ENDLINE:
      case BEGWORD:
      case ENDWORD:
      case LIMWORD:
      case NOTLIMWORD:
      case BACKREF:
        resetmust(mp);
        break;
      case STAR:
      case QMARK:
        if (mp <= musts)
            goto done;
        --mp;
        resetmust(mp);
        break;
      case OR:
      case ORTOP:
        if (mp < &musts[2])
            goto done;
        {
            char **new;
            must *lmp;
            must *rmp;
            int j, ln, rn, n;
            rmp = --mp;
            lmp = --mp;
            if (__extension__ ({
                size_t __s1_len, __s2_len;
                (__builtin_constant_p(lmp->is) && __builtin_constant_p(rmp->is) && (__s1_len = __builtin_strlen(lmp->is) , __s2_len = __builtin_strlen(rmp->is) , (!((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(lmp->is, rmp->is) : (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) && (__s1_len = __builtin_strlen(lmp->is) , __s1_len < 4) ? (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (__extension__ ({
                    const unsigned char *__s2 = (const unsigned char *)(const char *)(rmp->is);
                    int __result = (((const unsigned char *)(const char *)(lmp->is))[0] - __s2[0]);
                    if (__s1_len > 0 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(lmp->is))[1] - __s2[1]);
                        if (__s1_len > 1 && __result == 0) {
                            __result = (((const unsigned char *)(const char *)(lmp->is))[2] - __s2[2]);
                            if (__s1_len > 2 && __result == 0)
                                __result = (((const unsigned char *)(const char *)(lmp->is))[3] - __s2[3]);
                        }
                    }
                    __result;
                }))) : (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) && (__s2_len = __builtin_strlen(rmp->is) , __s2_len < 4) ? (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (-(__extension__ ({
                    const unsigned char *__s2 = (const unsigned char *)(const char *)(lmp->is);
                    int __result = (((const unsigned char *)(const char *)(rmp->is))[0] - __s2[0]);
                    if (__s2_len > 0 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(rmp->is))[1] - __s2[1]);
                        if (__s2_len > 1 && __result == 0) {
                            __result = (((const unsigned char *)(const char *)(rmp->is))[2] - __s2[2]);
                            if (__s2_len > 2 && __result == 0)
                                __result = (((const unsigned char *)(const char *)(rmp->is))[3] - __s2[3]);
                        }
                    }
                    __result;
                })))) : __builtin_strcmp(lmp->is, rmp->is))));
            }) != 0)
                lmp->is[0] = '\x00';
            i = 0;
            while (lmp->left[i] != '\x00' && lmp->left[i] == rmp->left[i])
                ++i;
            lmp->left[i] = '\x00';
            ln = strlen(lmp->right);
            rn = strlen(rmp->right);
            n = ln;
            if (n > rn)
                n = rn;
            for (i = 0; i < n; ++i) 
                if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
                    break;
            for (j = 0; j < i; ++j) 
                lmp->right[j] = lmp->right[(ln - i) + j];
            lmp->right[j] = '\x00';
            new = inboth(lmp->in, rmp->in);
            if (new == ((void *)0))
                goto done;
            freelist(lmp->in);
            free((char *)lmp->in);
            lmp->in = new;
        }
        break;
      case PLUS:
        if (mp <= musts)
            goto done;
        --mp;
        mp->is[0] = '\x00';
        break;
      case END:
        if (mp != &musts[1])
            goto done;
        for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
            if (strlen(musts[0].in[i]) > strlen(result))
                result = musts[0].in[i];
        if (__extension__ ({
            size_t __s1_len, __s2_len;
            (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
                int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
                if (__s1_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
                    if (__s1_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                        if (__s1_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
                    }
                }
                __result;
            }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
                int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
                if (__s2_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
                    if (__s2_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                        if (__s2_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
                    }
                }
                __result;
            })))) : __builtin_strcmp(result, musts[0].is))));
        }) == 0)
            exact = 1;
        goto done;
      case CAT:
        if (mp < &musts[2])
            goto done;
        {
            must *lmp;
            must *rmp;
            rmp = --mp;
            lmp = --mp;
            lmp->in = addlists(lmp->in, rmp->in);
            if (lmp->in == ((void *)0))
                goto done;
            if (lmp->right[0] != '\x00' && rmp->left[0] != '\x00') {
                char *tp;
                tp = icpyalloc(lmp->right);
                if (tp == ((void *)0))
                    goto done;
                tp = icatalloc(tp, rmp->left);
                if (tp == ((void *)0))
                    goto done;
                lmp->in = enlist(lmp->in, tp, strlen(tp));
                free(tp);
                if (lmp->in == ((void *)0))
                    goto done;
            }
            if (lmp->is[0] != '\x00') {
                lmp->left = icatalloc(lmp->left, rmp->left);
                if (lmp->left == ((void *)0))
                    goto done;
            }
            if (rmp->is[0] == '\x00')
                lmp->right[0] = '\x00';
            lmp->right = icatalloc(lmp->right, rmp->right);
            if (lmp->right == ((void *)0))
                goto done;
            if (lmp->is[0] != '\x00' && rmp->is[0] != '\x00') {
                lmp->is = icatalloc(lmp->is, rmp->is);
                if (lmp->is == ((void *)0))
                    goto done;
            } else
                lmp->is[0] = '\x00';
        }
        break;
      default:
        if (t < END) {
            goto done;
        } else if (t == '\x00') {
            goto done;
        } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
            resetmust(mp);
        } else {
            resetmust(mp);
            mp->is[0] = mp->left[0] = mp->right[0] = t;
            mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
            mp->in = enlist(mp->in, mp->is, (size_t)1);
            if (mp->in == ((void *)0))
                goto done;
        }
        break;
    }
    ++mp;
}

....
Skipping nonlast:Priority 4360
At location src/dfa.c:3421
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
switch (t = d->tokens[ri]) {
  case LPAREN:
  case RPAREN:
    goto done;
  case EMPTY:
  case BEGLINE:
  case ENDLINE:
  case BEGWORD:
  case ENDWORD:
  case LIMWORD:
  case NOTLIMWORD:
  case BACKREF:
    resetmust(mp);
    break;
  case STAR:
  case QMARK:
    if (mp <= musts)
        goto done;
    --mp;
    resetmust(mp);
    break;
  case OR:
  case ORTOP:
    if (mp < &musts[2])
        goto done;
    {
        char **new;
        must *lmp;
        must *rmp;
        int j, ln, rn, n;
        rmp = --mp;
        lmp = --mp;
        if (__extension__ ({
            size_t __s1_len, __s2_len;
            (__builtin_constant_p(lmp->is) && __builtin_constant_p(rmp->is) && (__s1_len = __builtin_strlen(lmp->is) , __s2_len = __builtin_strlen(rmp->is) , (!((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(lmp->is, rmp->is) : (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) && (__s1_len = __builtin_strlen(lmp->is) , __s1_len < 4) ? (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(rmp->is);
                int __result = (((const unsigned char *)(const char *)(lmp->is))[0] - __s2[0]);
                if (__s1_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(lmp->is))[1] - __s2[1]);
                    if (__s1_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(lmp->is))[2] - __s2[2]);
                        if (__s1_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(lmp->is))[3] - __s2[3]);
                    }
                }
                __result;
            }))) : (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) && (__s2_len = __builtin_strlen(rmp->is) , __s2_len < 4) ? (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (-(__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(lmp->is);
                int __result = (((const unsigned char *)(const char *)(rmp->is))[0] - __s2[0]);
                if (__s2_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(rmp->is))[1] - __s2[1]);
                    if (__s2_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(rmp->is))[2] - __s2[2]);
                        if (__s2_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(rmp->is))[3] - __s2[3]);
                    }
                }
                __result;
            })))) : __builtin_strcmp(lmp->is, rmp->is))));
        }) != 0)
            lmp->is[0] = '\x00';
        i = 0;
        while (lmp->left[i] != '\x00' && lmp->left[i] == rmp->left[i])
            ++i;
        lmp->left[i] = '\x00';
        ln = strlen(lmp->right);
        rn = strlen(rmp->right);
        n = ln;
        if (n > rn)
            n = rn;
        for (i = 0; i < n; ++i) 
            if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
                break;
        for (j = 0; j < i; ++j) 
            lmp->right[j] = lmp->right[(ln - i) + j];
        lmp->right[j] = '\x00';
        new = inboth(lmp->in, rmp->in);
        if (new == ((void *)0))
            goto done;
        freelist(lmp->in);
        free((char *)lmp->in);
        lmp->in = new;
    }
    break;
  case PLUS:
    if (mp <= musts)
        goto done;
    --mp;
    mp->is[0] = '\x00';
    break;
  case END:
    if (mp != &musts[1])
        goto done;
    for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
        if (strlen(musts[0].in[i]) > strlen(result))
            result = musts[0].in[i];
    if (__extension__ ({
        size_t __s1_len, __s2_len;
        (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
            const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
            int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
            if (__s1_len > 0 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
                if (__s1_len > 1 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                    if (__s1_len > 2 && __result == 0)
                        __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
                }
            }
            __result;
        }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
            const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
            int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
            if (__s2_len > 0 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
                if (__s2_len > 1 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                    if (__s2_len > 2 && __result == 0)
                        __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
                }
            }
            __result;
        })))) : __builtin_strcmp(result, musts[0].is))));
    }) == 0)
        exact = 1;
    goto done;
  case CAT:
    if (mp < &musts[2])
        goto done;
    {
        must *lmp;
        must *rmp;
        rmp = --mp;
        lmp = --mp;
        lmp->in = addlists(lmp->in, rmp->in);
        if (lmp->in == ((void *)0))
            goto done;
        if (lmp->right[0] != '\x00' && rmp->left[0] != '\x00') {
            char *tp;
            tp = icpyalloc(lmp->right);
            if (tp == ((void *)0))
                goto done;
            tp = icatalloc(tp, rmp->left);
            if (tp == ((void *)0))
                goto done;
            lmp->in = enlist(lmp->in, tp, strlen(tp));
            free(tp);
            if (lmp->in == ((void *)0))
                goto done;
        }
        if (lmp->is[0] != '\x00') {
            lmp->left = icatalloc(lmp->left, rmp->left);
            if (lmp->left == ((void *)0))
                goto done;
        }
        if (rmp->is[0] == '\x00')
            lmp->right[0] = '\x00';
        lmp->right = icatalloc(lmp->right, rmp->right);
        if (lmp->right == ((void *)0))
            goto done;
        if (lmp->is[0] != '\x00' && rmp->is[0] != '\x00') {
            lmp->is = icatalloc(lmp->is, rmp->is);
            if (lmp->is == ((void *)0))
                goto done;
        } else
            lmp->is[0] = '\x00';
    }
    break;
  default:
    if (t < END) {
        goto done;
    } else if (t == '\x00') {
        goto done;
    } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
    break;
}

....
Skipping nonlast:Priority 4360
At location src/dfa.c:3421
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
switch (t = d->tokens[ri]) {
  case LPAREN:
  case RPAREN:
    goto done;
  case EMPTY:
  case BEGLINE:
  case ENDLINE:
  case BEGWORD:
  case ENDWORD:
  case LIMWORD:
  case NOTLIMWORD:
  case BACKREF:
    resetmust(mp);
    break;
  case STAR:
  case QMARK:
    if (mp <= musts)
        goto done;
    --mp;
    resetmust(mp);
    break;
  case OR:
  case ORTOP:
    if (mp < &musts[2])
        goto done;
    {
        char **new;
        must *lmp;
        must *rmp;
        int j, ln, rn, n;
        rmp = --mp;
        lmp = --mp;
        if (__extension__ ({
            size_t __s1_len, __s2_len;
            (__builtin_constant_p(lmp->is) && __builtin_constant_p(rmp->is) && (__s1_len = __builtin_strlen(lmp->is) , __s2_len = __builtin_strlen(rmp->is) , (!((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(lmp->is, rmp->is) : (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) && (__s1_len = __builtin_strlen(lmp->is) , __s1_len < 4) ? (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(rmp->is);
                int __result = (((const unsigned char *)(const char *)(lmp->is))[0] - __s2[0]);
                if (__s1_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(lmp->is))[1] - __s2[1]);
                    if (__s1_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(lmp->is))[2] - __s2[2]);
                        if (__s1_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(lmp->is))[3] - __s2[3]);
                    }
                }
                __result;
            }))) : (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) && (__s2_len = __builtin_strlen(rmp->is) , __s2_len < 4) ? (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (-(__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(lmp->is);
                int __result = (((const unsigned char *)(const char *)(rmp->is))[0] - __s2[0]);
                if (__s2_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(rmp->is))[1] - __s2[1]);
                    if (__s2_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(rmp->is))[2] - __s2[2]);
                        if (__s2_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(rmp->is))[3] - __s2[3]);
                    }
                }
                __result;
            })))) : __builtin_strcmp(lmp->is, rmp->is))));
        }) != 0)
            lmp->is[0] = '\x00';
        i = 0;
        while (lmp->left[i] != '\x00' && lmp->left[i] == rmp->left[i])
            ++i;
        lmp->left[i] = '\x00';
        ln = strlen(lmp->right);
        rn = strlen(rmp->right);
        n = ln;
        if (n > rn)
            n = rn;
        for (i = 0; i < n; ++i) 
            if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
                break;
        for (j = 0; j < i; ++j) 
            lmp->right[j] = lmp->right[(ln - i) + j];
        lmp->right[j] = '\x00';
        new = inboth(lmp->in, rmp->in);
        if (new == ((void *)0))
            goto done;
        freelist(lmp->in);
        free((char *)lmp->in);
        lmp->in = new;
    }
    break;
  case PLUS:
    if (mp <= musts)
        goto done;
    --mp;
    mp->is[0] = '\x00';
    break;
  case END:
    if (mp != &musts[1])
        goto done;
    for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
        if (strlen(musts[0].in[i]) > strlen(result))
            result = musts[0].in[i];
    if (__extension__ ({
        size_t __s1_len, __s2_len;
        (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
            const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
            int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
            if (__s1_len > 0 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
                if (__s1_len > 1 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                    if (__s1_len > 2 && __result == 0)
                        __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
                }
            }
            __result;
        }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
            const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
            int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
            if (__s2_len > 0 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
                if (__s2_len > 1 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                    if (__s2_len > 2 && __result == 0)
                        __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
                }
            }
            __result;
        })))) : __builtin_strcmp(result, musts[0].is))));
    }) == 0)
        exact = 1;
    goto done;
  case CAT:
    if (mp < &musts[2])
        goto done;
    {
        must *lmp;
        must *rmp;
        rmp = --mp;
        lmp = --mp;
        lmp->in = addlists(lmp->in, rmp->in);
        if (lmp->in == ((void *)0))
            goto done;
        if (lmp->right[0] != '\x00' && rmp->left[0] != '\x00') {
            char *tp;
            tp = icpyalloc(lmp->right);
            if (tp == ((void *)0))
                goto done;
            tp = icatalloc(tp, rmp->left);
            if (tp == ((void *)0))
                goto done;
            lmp->in = enlist(lmp->in, tp, strlen(tp));
            free(tp);
            if (lmp->in == ((void *)0))
                goto done;
        }
        if (lmp->is[0] != '\x00') {
            lmp->left = icatalloc(lmp->left, rmp->left);
            if (lmp->left == ((void *)0))
                goto done;
        }
        if (rmp->is[0] == '\x00')
            lmp->right[0] = '\x00';
        lmp->right = icatalloc(lmp->right, rmp->right);
        if (lmp->right == ((void *)0))
            goto done;
        if (lmp->is[0] != '\x00' && rmp->is[0] != '\x00') {
            lmp->is = icatalloc(lmp->is, rmp->is);
            if (lmp->is == ((void *)0))
                goto done;
        } else
            lmp->is[0] = '\x00';
    }
    break;
  default:
    if (t < END) {
        goto done;
    } else if (t == '\x00') {
        goto done;
    } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
    break;
}

....
Skipping nonlast:Priority 4360
At location src/dfa.c:3421
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
switch (t = d->tokens[ri]) {
  case LPAREN:
  case RPAREN:
    goto done;
  case EMPTY:
  case BEGLINE:
  case ENDLINE:
  case BEGWORD:
  case ENDWORD:
  case LIMWORD:
  case NOTLIMWORD:
  case BACKREF:
    resetmust(mp);
    break;
  case STAR:
  case QMARK:
    if (mp <= musts)
        goto done;
    --mp;
    resetmust(mp);
    break;
  case OR:
  case ORTOP:
    if (mp < &musts[2])
        goto done;
    {
        char **new;
        must *lmp;
        must *rmp;
        int j, ln, rn, n;
        rmp = --mp;
        lmp = --mp;
        if (__extension__ ({
            size_t __s1_len, __s2_len;
            (__builtin_constant_p(lmp->is) && __builtin_constant_p(rmp->is) && (__s1_len = __builtin_strlen(lmp->is) , __s2_len = __builtin_strlen(rmp->is) , (!((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(lmp->is, rmp->is) : (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) && (__s1_len = __builtin_strlen(lmp->is) , __s1_len < 4) ? (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(rmp->is);
                int __result = (((const unsigned char *)(const char *)(lmp->is))[0] - __s2[0]);
                if (__s1_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(lmp->is))[1] - __s2[1]);
                    if (__s1_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(lmp->is))[2] - __s2[2]);
                        if (__s1_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(lmp->is))[3] - __s2[3]);
                    }
                }
                __result;
            }))) : (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) && (__s2_len = __builtin_strlen(rmp->is) , __s2_len < 4) ? (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (-(__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(lmp->is);
                int __result = (((const unsigned char *)(const char *)(rmp->is))[0] - __s2[0]);
                if (__s2_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(rmp->is))[1] - __s2[1]);
                    if (__s2_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(rmp->is))[2] - __s2[2]);
                        if (__s2_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(rmp->is))[3] - __s2[3]);
                    }
                }
                __result;
            })))) : __builtin_strcmp(lmp->is, rmp->is))));
        }) != 0)
            lmp->is[0] = '\x00';
        i = 0;
        while (lmp->left[i] != '\x00' && lmp->left[i] == rmp->left[i])
            ++i;
        lmp->left[i] = '\x00';
        ln = strlen(lmp->right);
        rn = strlen(rmp->right);
        n = ln;
        if (n > rn)
            n = rn;
        for (i = 0; i < n; ++i) 
            if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
                break;
        for (j = 0; j < i; ++j) 
            lmp->right[j] = lmp->right[(ln - i) + j];
        lmp->right[j] = '\x00';
        new = inboth(lmp->in, rmp->in);
        if (new == ((void *)0))
            goto done;
        freelist(lmp->in);
        free((char *)lmp->in);
        lmp->in = new;
    }
    break;
  case PLUS:
    if (mp <= musts)
        goto done;
    --mp;
    mp->is[0] = '\x00';
    break;
  case END:
    if (mp != &musts[1])
        goto done;
    for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
        if (strlen(musts[0].in[i]) > strlen(result))
            result = musts[0].in[i];
    if (__extension__ ({
        size_t __s1_len, __s2_len;
        (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
            const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
            int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
            if (__s1_len > 0 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
                if (__s1_len > 1 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                    if (__s1_len > 2 && __result == 0)
                        __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
                }
            }
            __result;
        }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
            const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
            int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
            if (__s2_len > 0 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
                if (__s2_len > 1 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                    if (__s2_len > 2 && __result == 0)
                        __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
                }
            }
            __result;
        })))) : __builtin_strcmp(result, musts[0].is))));
    }) == 0)
        exact = 1;
    goto done;
  case CAT:
    if (mp < &musts[2])
        goto done;
    {
        must *lmp;
        must *rmp;
        rmp = --mp;
        lmp = --mp;
        lmp->in = addlists(lmp->in, rmp->in);
        if (lmp->in == ((void *)0))
            goto done;
        if (lmp->right[0] != '\x00' && rmp->left[0] != '\x00') {
            char *tp;
            tp = icpyalloc(lmp->right);
            if (tp == ((void *)0))
                goto done;
            tp = icatalloc(tp, rmp->left);
            if (tp == ((void *)0))
                goto done;
            lmp->in = enlist(lmp->in, tp, strlen(tp));
            free(tp);
            if (lmp->in == ((void *)0))
                goto done;
        }
        if (lmp->is[0] != '\x00') {
            lmp->left = icatalloc(lmp->left, rmp->left);
            if (lmp->left == ((void *)0))
                goto done;
        }
        if (rmp->is[0] == '\x00')
            lmp->right[0] = '\x00';
        lmp->right = icatalloc(lmp->right, rmp->right);
        if (lmp->right == ((void *)0))
            goto done;
        if (lmp->is[0] != '\x00' && rmp->is[0] != '\x00') {
            lmp->is = icatalloc(lmp->is, rmp->is);
            if (lmp->is == ((void *)0))
                goto done;
        } else
            lmp->is[0] = '\x00';
    }
    break;
  default:
    if (t < END) {
        goto done;
    } else if (t == '\x00') {
        goto done;
    } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
    break;
}

....
Skipping nonlast:Priority 4360
At location src/dfa.c:3421
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
switch (t = d->tokens[ri]) {
  case LPAREN:
  case RPAREN:
    goto done;
  case EMPTY:
  case BEGLINE:
  case ENDLINE:
  case BEGWORD:
  case ENDWORD:
  case LIMWORD:
  case NOTLIMWORD:
  case BACKREF:
    resetmust(mp);
    break;
  case STAR:
  case QMARK:
    if (mp <= musts)
        goto done;
    --mp;
    resetmust(mp);
    break;
  case OR:
  case ORTOP:
    if (mp < &musts[2])
        goto done;
    {
        char **new;
        must *lmp;
        must *rmp;
        int j, ln, rn, n;
        rmp = --mp;
        lmp = --mp;
        if (__extension__ ({
            size_t __s1_len, __s2_len;
            (__builtin_constant_p(lmp->is) && __builtin_constant_p(rmp->is) && (__s1_len = __builtin_strlen(lmp->is) , __s2_len = __builtin_strlen(rmp->is) , (!((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(lmp->is, rmp->is) : (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) && (__s1_len = __builtin_strlen(lmp->is) , __s1_len < 4) ? (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(rmp->is);
                int __result = (((const unsigned char *)(const char *)(lmp->is))[0] - __s2[0]);
                if (__s1_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(lmp->is))[1] - __s2[1]);
                    if (__s1_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(lmp->is))[2] - __s2[2]);
                        if (__s1_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(lmp->is))[3] - __s2[3]);
                    }
                }
                __result;
            }))) : (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) && (__s2_len = __builtin_strlen(rmp->is) , __s2_len < 4) ? (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (-(__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(lmp->is);
                int __result = (((const unsigned char *)(const char *)(rmp->is))[0] - __s2[0]);
                if (__s2_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(rmp->is))[1] - __s2[1]);
                    if (__s2_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(rmp->is))[2] - __s2[2]);
                        if (__s2_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(rmp->is))[3] - __s2[3]);
                    }
                }
                __result;
            })))) : __builtin_strcmp(lmp->is, rmp->is))));
        }) != 0)
            lmp->is[0] = '\x00';
        i = 0;
        while (lmp->left[i] != '\x00' && lmp->left[i] == rmp->left[i])
            ++i;
        lmp->left[i] = '\x00';
        ln = strlen(lmp->right);
        rn = strlen(rmp->right);
        n = ln;
        if (n > rn)
            n = rn;
        for (i = 0; i < n; ++i) 
            if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
                break;
        for (j = 0; j < i; ++j) 
            lmp->right[j] = lmp->right[(ln - i) + j];
        lmp->right[j] = '\x00';
        new = inboth(lmp->in, rmp->in);
        if (new == ((void *)0))
            goto done;
        freelist(lmp->in);
        free((char *)lmp->in);
        lmp->in = new;
    }
    break;
  case PLUS:
    if (mp <= musts)
        goto done;
    --mp;
    mp->is[0] = '\x00';
    break;
  case END:
    if (mp != &musts[1])
        goto done;
    for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
        if (strlen(musts[0].in[i]) > strlen(result))
            result = musts[0].in[i];
    if (__extension__ ({
        size_t __s1_len, __s2_len;
        (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
            const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
            int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
            if (__s1_len > 0 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
                if (__s1_len > 1 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                    if (__s1_len > 2 && __result == 0)
                        __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
                }
            }
            __result;
        }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
            const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
            int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
            if (__s2_len > 0 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
                if (__s2_len > 1 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                    if (__s2_len > 2 && __result == 0)
                        __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
                }
            }
            __result;
        })))) : __builtin_strcmp(result, musts[0].is))));
    }) == 0)
        exact = 1;
    goto done;
  case CAT:
    if (mp < &musts[2])
        goto done;
    {
        must *lmp;
        must *rmp;
        rmp = --mp;
        lmp = --mp;
        lmp->in = addlists(lmp->in, rmp->in);
        if (lmp->in == ((void *)0))
            goto done;
        if (lmp->right[0] != '\x00' && rmp->left[0] != '\x00') {
            char *tp;
            tp = icpyalloc(lmp->right);
            if (tp == ((void *)0))
                goto done;
            tp = icatalloc(tp, rmp->left);
            if (tp == ((void *)0))
                goto done;
            lmp->in = enlist(lmp->in, tp, strlen(tp));
            free(tp);
            if (lmp->in == ((void *)0))
                goto done;
        }
        if (lmp->is[0] != '\x00') {
            lmp->left = icatalloc(lmp->left, rmp->left);
            if (lmp->left == ((void *)0))
                goto done;
        }
        if (rmp->is[0] == '\x00')
            lmp->right[0] = '\x00';
        lmp->right = icatalloc(lmp->right, rmp->right);
        if (lmp->right == ((void *)0))
            goto done;
        if (lmp->is[0] != '\x00' && rmp->is[0] != '\x00') {
            lmp->is = icatalloc(lmp->is, rmp->is);
            if (lmp->is == ((void *)0))
                goto done;
        } else
            lmp->is[0] = '\x00';
    }
    break;
  default:
    if (t < END) {
        goto done;
    } else if (t == '\x00') {
        goto done;
    } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
    break;
}

....
Skipping nonlast:Priority 4360
At location src/dfa.c:3421
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
switch (t = d->tokens[ri]) {
  case LPAREN:
  case RPAREN:
    goto done;
  case EMPTY:
  case BEGLINE:
  case ENDLINE:
  case BEGWORD:
  case ENDWORD:
  case LIMWORD:
  case NOTLIMWORD:
  case BACKREF:
    resetmust(mp);
    break;
  case STAR:
  case QMARK:
    if (mp <= musts)
        goto done;
    --mp;
    resetmust(mp);
    break;
  case OR:
  case ORTOP:
    if (mp < &musts[2])
        goto done;
    {
        char **new;
        must *lmp;
        must *rmp;
        int j, ln, rn, n;
        rmp = --mp;
        lmp = --mp;
        if (__extension__ ({
            size_t __s1_len, __s2_len;
            (__builtin_constant_p(lmp->is) && __builtin_constant_p(rmp->is) && (__s1_len = __builtin_strlen(lmp->is) , __s2_len = __builtin_strlen(rmp->is) , (!((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(lmp->is, rmp->is) : (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) && (__s1_len = __builtin_strlen(lmp->is) , __s1_len < 4) ? (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(rmp->is);
                int __result = (((const unsigned char *)(const char *)(lmp->is))[0] - __s2[0]);
                if (__s1_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(lmp->is))[1] - __s2[1]);
                    if (__s1_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(lmp->is))[2] - __s2[2]);
                        if (__s1_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(lmp->is))[3] - __s2[3]);
                    }
                }
                __result;
            }))) : (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) && (__s2_len = __builtin_strlen(rmp->is) , __s2_len < 4) ? (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (-(__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(lmp->is);
                int __result = (((const unsigned char *)(const char *)(rmp->is))[0] - __s2[0]);
                if (__s2_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(rmp->is))[1] - __s2[1]);
                    if (__s2_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(rmp->is))[2] - __s2[2]);
                        if (__s2_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(rmp->is))[3] - __s2[3]);
                    }
                }
                __result;
            })))) : __builtin_strcmp(lmp->is, rmp->is))));
        }) != 0)
            lmp->is[0] = '\x00';
        i = 0;
        while (lmp->left[i] != '\x00' && lmp->left[i] == rmp->left[i])
            ++i;
        lmp->left[i] = '\x00';
        ln = strlen(lmp->right);
        rn = strlen(rmp->right);
        n = ln;
        if (n > rn)
            n = rn;
        for (i = 0; i < n; ++i) 
            if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
                break;
        for (j = 0; j < i; ++j) 
            lmp->right[j] = lmp->right[(ln - i) + j];
        lmp->right[j] = '\x00';
        new = inboth(lmp->in, rmp->in);
        if (new == ((void *)0))
            goto done;
        freelist(lmp->in);
        free((char *)lmp->in);
        lmp->in = new;
    }
    break;
  case PLUS:
    if (mp <= musts)
        goto done;
    --mp;
    mp->is[0] = '\x00';
    break;
  case END:
    if (mp != &musts[1])
        goto done;
    for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
        if (strlen(musts[0].in[i]) > strlen(result))
            result = musts[0].in[i];
    if (__extension__ ({
        size_t __s1_len, __s2_len;
        (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
            const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
            int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
            if (__s1_len > 0 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
                if (__s1_len > 1 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                    if (__s1_len > 2 && __result == 0)
                        __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
                }
            }
            __result;
        }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
            const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
            int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
            if (__s2_len > 0 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
                if (__s2_len > 1 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                    if (__s2_len > 2 && __result == 0)
                        __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
                }
            }
            __result;
        })))) : __builtin_strcmp(result, musts[0].is))));
    }) == 0)
        exact = 1;
    goto done;
  case CAT:
    if (mp < &musts[2])
        goto done;
    {
        must *lmp;
        must *rmp;
        rmp = --mp;
        lmp = --mp;
        lmp->in = addlists(lmp->in, rmp->in);
        if (lmp->in == ((void *)0))
            goto done;
        if (lmp->right[0] != '\x00' && rmp->left[0] != '\x00') {
            char *tp;
            tp = icpyalloc(lmp->right);
            if (tp == ((void *)0))
                goto done;
            tp = icatalloc(tp, rmp->left);
            if (tp == ((void *)0))
                goto done;
            lmp->in = enlist(lmp->in, tp, strlen(tp));
            free(tp);
            if (lmp->in == ((void *)0))
                goto done;
        }
        if (lmp->is[0] != '\x00') {
            lmp->left = icatalloc(lmp->left, rmp->left);
            if (lmp->left == ((void *)0))
                goto done;
        }
        if (rmp->is[0] == '\x00')
            lmp->right[0] = '\x00';
        lmp->right = icatalloc(lmp->right, rmp->right);
        if (lmp->right == ((void *)0))
            goto done;
        if (lmp->is[0] != '\x00' && rmp->is[0] != '\x00') {
            lmp->is = icatalloc(lmp->is, rmp->is);
            if (lmp->is == ((void *)0))
                goto done;
        } else
            lmp->is[0] = '\x00';
    }
    break;
  default:
    if (t < END) {
        goto done;
    } else if (t == '\x00') {
        goto done;
    } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
    break;
}

....
Skipping nonlast:Priority 4360
At location src/dfa.c:3421
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
switch (t = d->tokens[ri]) {
  case LPAREN:
  case RPAREN:
    goto done;
  case EMPTY:
  case BEGLINE:
  case ENDLINE:
  case BEGWORD:
  case ENDWORD:
  case LIMWORD:
  case NOTLIMWORD:
  case BACKREF:
    resetmust(mp);
    break;
  case STAR:
  case QMARK:
    if (mp <= musts)
        goto done;
    --mp;
    resetmust(mp);
    break;
  case OR:
  case ORTOP:
    if (mp < &musts[2])
        goto done;
    {
        char **new;
        must *lmp;
        must *rmp;
        int j, ln, rn, n;
        rmp = --mp;
        lmp = --mp;
        if (__extension__ ({
            size_t __s1_len, __s2_len;
            (__builtin_constant_p(lmp->is) && __builtin_constant_p(rmp->is) && (__s1_len = __builtin_strlen(lmp->is) , __s2_len = __builtin_strlen(rmp->is) , (!((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(lmp->is, rmp->is) : (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) && (__s1_len = __builtin_strlen(lmp->is) , __s1_len < 4) ? (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(rmp->is);
                int __result = (((const unsigned char *)(const char *)(lmp->is))[0] - __s2[0]);
                if (__s1_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(lmp->is))[1] - __s2[1]);
                    if (__s1_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(lmp->is))[2] - __s2[2]);
                        if (__s1_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(lmp->is))[3] - __s2[3]);
                    }
                }
                __result;
            }))) : (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) && (__s2_len = __builtin_strlen(rmp->is) , __s2_len < 4) ? (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (-(__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(lmp->is);
                int __result = (((const unsigned char *)(const char *)(rmp->is))[0] - __s2[0]);
                if (__s2_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(rmp->is))[1] - __s2[1]);
                    if (__s2_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(rmp->is))[2] - __s2[2]);
                        if (__s2_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(rmp->is))[3] - __s2[3]);
                    }
                }
                __result;
            })))) : __builtin_strcmp(lmp->is, rmp->is))));
        }) != 0)
            lmp->is[0] = '\x00';
        i = 0;
        while (lmp->left[i] != '\x00' && lmp->left[i] == rmp->left[i])
            ++i;
        lmp->left[i] = '\x00';
        ln = strlen(lmp->right);
        rn = strlen(rmp->right);
        n = ln;
        if (n > rn)
            n = rn;
        for (i = 0; i < n; ++i) 
            if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
                break;
        for (j = 0; j < i; ++j) 
            lmp->right[j] = lmp->right[(ln - i) + j];
        lmp->right[j] = '\x00';
        new = inboth(lmp->in, rmp->in);
        if (new == ((void *)0))
            goto done;
        freelist(lmp->in);
        free((char *)lmp->in);
        lmp->in = new;
    }
    break;
  case PLUS:
    if (mp <= musts)
        goto done;
    --mp;
    mp->is[0] = '\x00';
    break;
  case END:
    if (mp != &musts[1])
        goto done;
    for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
        if (strlen(musts[0].in[i]) > strlen(result))
            result = musts[0].in[i];
    if (__extension__ ({
        size_t __s1_len, __s2_len;
        (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
            const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
            int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
            if (__s1_len > 0 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
                if (__s1_len > 1 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                    if (__s1_len > 2 && __result == 0)
                        __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
                }
            }
            __result;
        }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
            const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
            int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
            if (__s2_len > 0 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
                if (__s2_len > 1 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                    if (__s2_len > 2 && __result == 0)
                        __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
                }
            }
            __result;
        })))) : __builtin_strcmp(result, musts[0].is))));
    }) == 0)
        exact = 1;
    goto done;
  case CAT:
    if (mp < &musts[2])
        goto done;
    {
        must *lmp;
        must *rmp;
        rmp = --mp;
        lmp = --mp;
        lmp->in = addlists(lmp->in, rmp->in);
        if (lmp->in == ((void *)0))
            goto done;
        if (lmp->right[0] != '\x00' && rmp->left[0] != '\x00') {
            char *tp;
            tp = icpyalloc(lmp->right);
            if (tp == ((void *)0))
                goto done;
            tp = icatalloc(tp, rmp->left);
            if (tp == ((void *)0))
                goto done;
            lmp->in = enlist(lmp->in, tp, strlen(tp));
            free(tp);
            if (lmp->in == ((void *)0))
                goto done;
        }
        if (lmp->is[0] != '\x00') {
            lmp->left = icatalloc(lmp->left, rmp->left);
            if (lmp->left == ((void *)0))
                goto done;
        }
        if (rmp->is[0] == '\x00')
            lmp->right[0] = '\x00';
        lmp->right = icatalloc(lmp->right, rmp->right);
        if (lmp->right == ((void *)0))
            goto done;
        if (lmp->is[0] != '\x00' && rmp->is[0] != '\x00') {
            lmp->is = icatalloc(lmp->is, rmp->is);
            if (lmp->is == ((void *)0))
                goto done;
        } else
            lmp->is[0] = '\x00';
    }
    break;
  default:
    if (t < END) {
        goto done;
    } else if (t == '\x00') {
        goto done;
    } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
    break;
}

....
Skipping nonlast addifexit:Priority 9360
At location src/dfa.c:3421
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, ri, t, d->tokens, d->tindex, mp, i, musts, exact, result, dm, d->musts, d->charclasses, d->cindex, d->calloc, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success)))
    return;
switch (t = d->tokens[ri]) {
  case LPAREN:
  case RPAREN:
    goto done;
  case EMPTY:
  case BEGLINE:
  case ENDLINE:
  case BEGWORD:
  case ENDWORD:
  case LIMWORD:
  case NOTLIMWORD:
  case BACKREF:
    resetmust(mp);
    break;
  case STAR:
  case QMARK:
    if (mp <= musts)
        goto done;
    --mp;
    resetmust(mp);
    break;
  case OR:
  case ORTOP:
    if (mp < &musts[2])
        goto done;
    {
        char **new;
        must *lmp;
        must *rmp;
        int j, ln, rn, n;
        rmp = --mp;
        lmp = --mp;
        if (__extension__ ({
            size_t __s1_len, __s2_len;
            (__builtin_constant_p(lmp->is) && __builtin_constant_p(rmp->is) && (__s1_len = __builtin_strlen(lmp->is) , __s2_len = __builtin_strlen(rmp->is) , (!((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(lmp->is, rmp->is) : (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) && (__s1_len = __builtin_strlen(lmp->is) , __s1_len < 4) ? (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(rmp->is);
                int __result = (((const unsigned char *)(const char *)(lmp->is))[0] - __s2[0]);
                if (__s1_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(lmp->is))[1] - __s2[1]);
                    if (__s1_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(lmp->is))[2] - __s2[2]);
                        if (__s1_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(lmp->is))[3] - __s2[3]);
                    }
                }
                __result;
            }))) : (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) && (__s2_len = __builtin_strlen(rmp->is) , __s2_len < 4) ? (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (-(__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(lmp->is);
                int __result = (((const unsigned char *)(const char *)(rmp->is))[0] - __s2[0]);
                if (__s2_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(rmp->is))[1] - __s2[1]);
                    if (__s2_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(rmp->is))[2] - __s2[2]);
                        if (__s2_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(rmp->is))[3] - __s2[3]);
                    }
                }
                __result;
            })))) : __builtin_strcmp(lmp->is, rmp->is))));
        }) != 0)
            lmp->is[0] = '\x00';
        i = 0;
        while (lmp->left[i] != '\x00' && lmp->left[i] == rmp->left[i])
            ++i;
        lmp->left[i] = '\x00';
        ln = strlen(lmp->right);
        rn = strlen(rmp->right);
        n = ln;
        if (n > rn)
            n = rn;
        for (i = 0; i < n; ++i) 
            if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
                break;
        for (j = 0; j < i; ++j) 
            lmp->right[j] = lmp->right[(ln - i) + j];
        lmp->right[j] = '\x00';
        new = inboth(lmp->in, rmp->in);
        if (new == ((void *)0))
            goto done;
        freelist(lmp->in);
        free((char *)lmp->in);
        lmp->in = new;
    }
    break;
  case PLUS:
    if (mp <= musts)
        goto done;
    --mp;
    mp->is[0] = '\x00';
    break;
  case END:
    if (mp != &musts[1])
        goto done;
    for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
        if (strlen(musts[0].in[i]) > strlen(result))
            result = musts[0].in[i];
    if (__extension__ ({
        size_t __s1_len, __s2_len;
        (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
            const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
            int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
            if (__s1_len > 0 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
                if (__s1_len > 1 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                    if (__s1_len > 2 && __result == 0)
                        __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
                }
            }
            __result;
        }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
            const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
            int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
            if (__s2_len > 0 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
                if (__s2_len > 1 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                    if (__s2_len > 2 && __result == 0)
                        __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
                }
            }
            __result;
        })))) : __builtin_strcmp(result, musts[0].is))));
    }) == 0)
        exact = 1;
    goto done;
  case CAT:
    if (mp < &musts[2])
        goto done;
    {
        must *lmp;
        must *rmp;
        rmp = --mp;
        lmp = --mp;
        lmp->in = addlists(lmp->in, rmp->in);
        if (lmp->in == ((void *)0))
            goto done;
        if (lmp->right[0] != '\x00' && rmp->left[0] != '\x00') {
            char *tp;
            tp = icpyalloc(lmp->right);
            if (tp == ((void *)0))
                goto done;
            tp = icatalloc(tp, rmp->left);
            if (tp == ((void *)0))
                goto done;
            lmp->in = enlist(lmp->in, tp, strlen(tp));
            free(tp);
            if (lmp->in == ((void *)0))
                goto done;
        }
        if (lmp->is[0] != '\x00') {
            lmp->left = icatalloc(lmp->left, rmp->left);
            if (lmp->left == ((void *)0))
                goto done;
        }
        if (rmp->is[0] == '\x00')
            lmp->right[0] = '\x00';
        lmp->right = icatalloc(lmp->right, rmp->right);
        if (lmp->right == ((void *)0))
            goto done;
        if (lmp->is[0] != '\x00' && rmp->is[0] != '\x00') {
            lmp->is = icatalloc(lmp->is, rmp->is);
            if (lmp->is == ((void *)0))
                goto done;
        } else
            lmp->is[0] = '\x00';
    }
    break;
  default:
    if (t < END) {
        goto done;
    } else if (t == '\x00') {
        goto done;
    } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
    break;
}

....
Skipping nonlast addifexit:Priority 9360
At location src/dfa.c:3421
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, ri, t, d->tokens, d->tindex, mp, i, musts, exact, result, dm, d->musts, d->charclasses, d->cindex, d->calloc, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success)))
    break;
switch (t = d->tokens[ri]) {
  case LPAREN:
  case RPAREN:
    goto done;
  case EMPTY:
  case BEGLINE:
  case ENDLINE:
  case BEGWORD:
  case ENDWORD:
  case LIMWORD:
  case NOTLIMWORD:
  case BACKREF:
    resetmust(mp);
    break;
  case STAR:
  case QMARK:
    if (mp <= musts)
        goto done;
    --mp;
    resetmust(mp);
    break;
  case OR:
  case ORTOP:
    if (mp < &musts[2])
        goto done;
    {
        char **new;
        must *lmp;
        must *rmp;
        int j, ln, rn, n;
        rmp = --mp;
        lmp = --mp;
        if (__extension__ ({
            size_t __s1_len, __s2_len;
            (__builtin_constant_p(lmp->is) && __builtin_constant_p(rmp->is) && (__s1_len = __builtin_strlen(lmp->is) , __s2_len = __builtin_strlen(rmp->is) , (!((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(lmp->is, rmp->is) : (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) && (__s1_len = __builtin_strlen(lmp->is) , __s1_len < 4) ? (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(rmp->is);
                int __result = (((const unsigned char *)(const char *)(lmp->is))[0] - __s2[0]);
                if (__s1_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(lmp->is))[1] - __s2[1]);
                    if (__s1_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(lmp->is))[2] - __s2[2]);
                        if (__s1_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(lmp->is))[3] - __s2[3]);
                    }
                }
                __result;
            }))) : (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) && (__s2_len = __builtin_strlen(rmp->is) , __s2_len < 4) ? (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (-(__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(lmp->is);
                int __result = (((const unsigned char *)(const char *)(rmp->is))[0] - __s2[0]);
                if (__s2_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(rmp->is))[1] - __s2[1]);
                    if (__s2_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(rmp->is))[2] - __s2[2]);
                        if (__s2_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(rmp->is))[3] - __s2[3]);
                    }
                }
                __result;
            })))) : __builtin_strcmp(lmp->is, rmp->is))));
        }) != 0)
            lmp->is[0] = '\x00';
        i = 0;
        while (lmp->left[i] != '\x00' && lmp->left[i] == rmp->left[i])
            ++i;
        lmp->left[i] = '\x00';
        ln = strlen(lmp->right);
        rn = strlen(rmp->right);
        n = ln;
        if (n > rn)
            n = rn;
        for (i = 0; i < n; ++i) 
            if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
                break;
        for (j = 0; j < i; ++j) 
            lmp->right[j] = lmp->right[(ln - i) + j];
        lmp->right[j] = '\x00';
        new = inboth(lmp->in, rmp->in);
        if (new == ((void *)0))
            goto done;
        freelist(lmp->in);
        free((char *)lmp->in);
        lmp->in = new;
    }
    break;
  case PLUS:
    if (mp <= musts)
        goto done;
    --mp;
    mp->is[0] = '\x00';
    break;
  case END:
    if (mp != &musts[1])
        goto done;
    for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
        if (strlen(musts[0].in[i]) > strlen(result))
            result = musts[0].in[i];
    if (__extension__ ({
        size_t __s1_len, __s2_len;
        (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
            const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
            int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
            if (__s1_len > 0 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
                if (__s1_len > 1 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                    if (__s1_len > 2 && __result == 0)
                        __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
                }
            }
            __result;
        }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
            const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
            int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
            if (__s2_len > 0 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
                if (__s2_len > 1 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                    if (__s2_len > 2 && __result == 0)
                        __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
                }
            }
            __result;
        })))) : __builtin_strcmp(result, musts[0].is))));
    }) == 0)
        exact = 1;
    goto done;
  case CAT:
    if (mp < &musts[2])
        goto done;
    {
        must *lmp;
        must *rmp;
        rmp = --mp;
        lmp = --mp;
        lmp->in = addlists(lmp->in, rmp->in);
        if (lmp->in == ((void *)0))
            goto done;
        if (lmp->right[0] != '\x00' && rmp->left[0] != '\x00') {
            char *tp;
            tp = icpyalloc(lmp->right);
            if (tp == ((void *)0))
                goto done;
            tp = icatalloc(tp, rmp->left);
            if (tp == ((void *)0))
                goto done;
            lmp->in = enlist(lmp->in, tp, strlen(tp));
            free(tp);
            if (lmp->in == ((void *)0))
                goto done;
        }
        if (lmp->is[0] != '\x00') {
            lmp->left = icatalloc(lmp->left, rmp->left);
            if (lmp->left == ((void *)0))
                goto done;
        }
        if (rmp->is[0] == '\x00')
            lmp->right[0] = '\x00';
        lmp->right = icatalloc(lmp->right, rmp->right);
        if (lmp->right == ((void *)0))
            goto done;
        if (lmp->is[0] != '\x00' && rmp->is[0] != '\x00') {
            lmp->is = icatalloc(lmp->is, rmp->is);
            if (lmp->is == ((void *)0))
                goto done;
        } else
            lmp->is[0] = '\x00';
    }
    break;
  default:
    if (t < END) {
        goto done;
    } else if (t == '\x00') {
        goto done;
    } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
    break;
}

....
Skipping nonlast addifexit:Priority 9560
At location src/dfa.c:3421
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, ri, t, d->tokens, d->tindex, mp, i, musts, exact, result, dm, d->musts, d->charclasses, d->cindex, d->calloc, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success)))
    goto done;
switch (t = d->tokens[ri]) {
  case LPAREN:
  case RPAREN:
    goto done;
  case EMPTY:
  case BEGLINE:
  case ENDLINE:
  case BEGWORD:
  case ENDWORD:
  case LIMWORD:
  case NOTLIMWORD:
  case BACKREF:
    resetmust(mp);
    break;
  case STAR:
  case QMARK:
    if (mp <= musts)
        goto done;
    --mp;
    resetmust(mp);
    break;
  case OR:
  case ORTOP:
    if (mp < &musts[2])
        goto done;
    {
        char **new;
        must *lmp;
        must *rmp;
        int j, ln, rn, n;
        rmp = --mp;
        lmp = --mp;
        if (__extension__ ({
            size_t __s1_len, __s2_len;
            (__builtin_constant_p(lmp->is) && __builtin_constant_p(rmp->is) && (__s1_len = __builtin_strlen(lmp->is) , __s2_len = __builtin_strlen(rmp->is) , (!((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(lmp->is, rmp->is) : (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) && (__s1_len = __builtin_strlen(lmp->is) , __s1_len < 4) ? (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(rmp->is);
                int __result = (((const unsigned char *)(const char *)(lmp->is))[0] - __s2[0]);
                if (__s1_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(lmp->is))[1] - __s2[1]);
                    if (__s1_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(lmp->is))[2] - __s2[2]);
                        if (__s1_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(lmp->is))[3] - __s2[3]);
                    }
                }
                __result;
            }))) : (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) && (__s2_len = __builtin_strlen(rmp->is) , __s2_len < 4) ? (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (-(__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(lmp->is);
                int __result = (((const unsigned char *)(const char *)(rmp->is))[0] - __s2[0]);
                if (__s2_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(rmp->is))[1] - __s2[1]);
                    if (__s2_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(rmp->is))[2] - __s2[2]);
                        if (__s2_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(rmp->is))[3] - __s2[3]);
                    }
                }
                __result;
            })))) : __builtin_strcmp(lmp->is, rmp->is))));
        }) != 0)
            lmp->is[0] = '\x00';
        i = 0;
        while (lmp->left[i] != '\x00' && lmp->left[i] == rmp->left[i])
            ++i;
        lmp->left[i] = '\x00';
        ln = strlen(lmp->right);
        rn = strlen(rmp->right);
        n = ln;
        if (n > rn)
            n = rn;
        for (i = 0; i < n; ++i) 
            if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
                break;
        for (j = 0; j < i; ++j) 
            lmp->right[j] = lmp->right[(ln - i) + j];
        lmp->right[j] = '\x00';
        new = inboth(lmp->in, rmp->in);
        if (new == ((void *)0))
            goto done;
        freelist(lmp->in);
        free((char *)lmp->in);
        lmp->in = new;
    }
    break;
  case PLUS:
    if (mp <= musts)
        goto done;
    --mp;
    mp->is[0] = '\x00';
    break;
  case END:
    if (mp != &musts[1])
        goto done;
    for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
        if (strlen(musts[0].in[i]) > strlen(result))
            result = musts[0].in[i];
    if (__extension__ ({
        size_t __s1_len, __s2_len;
        (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
            const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
            int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
            if (__s1_len > 0 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
                if (__s1_len > 1 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                    if (__s1_len > 2 && __result == 0)
                        __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
                }
            }
            __result;
        }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
            const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
            int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
            if (__s2_len > 0 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
                if (__s2_len > 1 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                    if (__s2_len > 2 && __result == 0)
                        __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
                }
            }
            __result;
        })))) : __builtin_strcmp(result, musts[0].is))));
    }) == 0)
        exact = 1;
    goto done;
  case CAT:
    if (mp < &musts[2])
        goto done;
    {
        must *lmp;
        must *rmp;
        rmp = --mp;
        lmp = --mp;
        lmp->in = addlists(lmp->in, rmp->in);
        if (lmp->in == ((void *)0))
            goto done;
        if (lmp->right[0] != '\x00' && rmp->left[0] != '\x00') {
            char *tp;
            tp = icpyalloc(lmp->right);
            if (tp == ((void *)0))
                goto done;
            tp = icatalloc(tp, rmp->left);
            if (tp == ((void *)0))
                goto done;
            lmp->in = enlist(lmp->in, tp, strlen(tp));
            free(tp);
            if (lmp->in == ((void *)0))
                goto done;
        }
        if (lmp->is[0] != '\x00') {
            lmp->left = icatalloc(lmp->left, rmp->left);
            if (lmp->left == ((void *)0))
                goto done;
        }
        if (rmp->is[0] == '\x00')
            lmp->right[0] = '\x00';
        lmp->right = icatalloc(lmp->right, rmp->right);
        if (lmp->right == ((void *)0))
            goto done;
        if (lmp->is[0] != '\x00' && rmp->is[0] != '\x00') {
            lmp->is = icatalloc(lmp->is, rmp->is);
            if (lmp->is == ((void *)0))
                goto done;
        } else
            lmp->is[0] = '\x00';
    }
    break;
  default:
    if (t < END) {
        goto done;
    } else if (t == '\x00') {
        goto done;
    } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
    break;
}

....
Skipping nonlast:Priority -639
At location src/dfa.c:3492
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
    if (strlen(musts[0].in[i]) > strlen(result))
        result = musts[0].in[i];

....
Skipping nonlast:Priority -639
At location src/dfa.c:3492
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
    if (strlen(musts[0].in[i]) > strlen(result))
        result = musts[0].in[i];

....
Skipping nonlast:Priority -639
At location src/dfa.c:3492
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
    if (strlen(musts[0].in[i]) > strlen(result))
        result = musts[0].in[i];

....
Skipping nonlast:Priority -639
At location src/dfa.c:3492
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
    if (strlen(musts[0].in[i]) > strlen(result))
        result = musts[0].in[i];

....
Skipping nonlast:Priority -639
At location src/dfa.c:3492
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
    if (strlen(musts[0].in[i]) > strlen(result))
        result = musts[0].in[i];

....
Skipping nonlast:Priority -639
At location src/dfa.c:3492
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
    if (strlen(musts[0].in[i]) > strlen(result))
        result = musts[0].in[i];

....
Skipping nonlast addifexit:Priority 4361
At location src/dfa.c:3492
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(musts, i, musts[0].in, result, mp, musts[0].is, exact, t, d, ri, dm, musts[0].left, musts[0].right)))
    return;
for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
    if (strlen(musts[0].in[i]) > strlen(result))
        result = musts[0].in[i];

....
Skipping nonlast addifexit:Priority 4361
At location src/dfa.c:3492
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(musts, i, musts[0].in, result, mp, musts[0].is, exact, t, d, ri, dm, musts[0].left, musts[0].right)))
    break;
for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
    if (strlen(musts[0].in[i]) > strlen(result))
        result = musts[0].in[i];

....
Skipping nonlast addifexit:Priority 4561
At location src/dfa.c:3492
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(musts, i, musts[0].in, result, mp, musts[0].is, exact, t, d, ri, dm, musts[0].left, musts[0].right)))
    goto done;
for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
    if (strlen(musts[0].in[i]) > strlen(result))
        result = musts[0].in[i];

....
Skipping nonlast:Priority -638
At location src/dfa.c:3495
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
        int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
        if (__s1_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
            if (__s1_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                if (__s1_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
        int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
        if (__s2_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
            if (__s2_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                if (__s2_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(result, musts[0].is))));
}) == 0)
    exact = 1;

....
Skipping nonlast:Priority -638
At location src/dfa.c:3495
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
        int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
        if (__s1_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
            if (__s1_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                if (__s1_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
        int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
        if (__s2_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
            if (__s2_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                if (__s2_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(result, musts[0].is))));
}) == 0)
    exact = 1;

....
Skipping nonlast:Priority -638
At location src/dfa.c:3495
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
if (__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
        int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
        if (__s1_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
            if (__s1_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                if (__s1_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
        int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
        if (__s2_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
            if (__s2_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                if (__s2_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(result, musts[0].is))));
}) == 0)
    exact = 1;

....
Skipping nonlast:Priority -638
At location src/dfa.c:3495
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
        int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
        if (__s1_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
            if (__s1_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                if (__s1_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
        int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
        if (__s2_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
            if (__s2_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                if (__s2_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(result, musts[0].is))));
}) == 0)
    exact = 1;

....
Skipping nonlast:Priority -638
At location src/dfa.c:3495
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
        int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
        if (__s1_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
            if (__s1_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                if (__s1_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
        int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
        if (__s2_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
            if (__s2_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                if (__s2_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(result, musts[0].is))));
}) == 0)
    exact = 1;

....
Skipping nonlast:Priority -638
At location src/dfa.c:3495
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
        int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
        if (__s1_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
            if (__s1_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                if (__s1_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
        int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
        if (__s2_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
            if (__s2_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                if (__s2_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(result, musts[0].is))));
}) == 0)
    exact = 1;

....
Skipping nonlast addifexit:Priority 3112
At location src/dfa.c:3495
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(musts, result, musts[0].is, i, exact, musts[0].in, mp, t, d, ri, dm, musts[0].left, musts[0].right)))
    return;
if (__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
        int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
        if (__s1_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
            if (__s1_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                if (__s1_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
        int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
        if (__s2_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
            if (__s2_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                if (__s2_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(result, musts[0].is))));
}) == 0)
    exact = 1;

....
Skipping nonlast addifexit:Priority 3112
At location src/dfa.c:3495
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(musts, result, musts[0].is, i, exact, musts[0].in, mp, t, d, ri, dm, musts[0].left, musts[0].right)))
    break;
if (__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
        int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
        if (__s1_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
            if (__s1_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                if (__s1_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
        int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
        if (__s2_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
            if (__s2_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                if (__s2_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(result, musts[0].is))));
}) == 0)
    exact = 1;

....
Skipping nonlast addifexit:Priority 3312
At location src/dfa.c:3495
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(musts, result, musts[0].is, i, exact, musts[0].in, mp, t, d, ri, dm, musts[0].left, musts[0].right)))
    goto done;
if (__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
        int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
        if (__s1_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
            if (__s1_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                if (__s1_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
        int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
        if (__s2_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
            if (__s2_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                if (__s2_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(result, musts[0].is))));
}) == 0)
    exact = 1;

....
Skipping nonlast:Priority -168
At location src/dfa.c:3496
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    exact = 1;
}

....
Skipping nonlast:Priority -168
At location src/dfa.c:3496
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    exact = 1;
}

....
Skipping nonlast:Priority -168
At location src/dfa.c:3496
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        return lasttok = parse_bracket_exp_mb();
    }
    exact = 1;
}

....
Skipping nonlast:Priority -168
At location src/dfa.c:3496
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    exact = 1;
}

....
Skipping nonlast:Priority -168
At location src/dfa.c:3496
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    exact = 1;
}

....
Skipping nonlast:Priority -168
At location src/dfa.c:3496
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    exact = 1;
}

....
Skipping nonlast addifexit:Priority 4832
At location src/dfa.c:3496
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(exact, musts, result, musts[0].is, i, musts[0].in, mp, t, d, ri, dm, musts[0].left, musts[0].right)))
        return;
    exact = 1;
}

....
Skipping nonlast addifexit:Priority 4832
At location src/dfa.c:3496
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(exact, musts, result, musts[0].is, i, musts[0].in, mp, t, d, ri, dm, musts[0].left, musts[0].right)))
        break;
    exact = 1;
}

....
Skipping nonlast addifexit:Priority 5032
At location src/dfa.c:3496
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(exact, musts, result, musts[0].is, i, musts[0].in, mp, t, d, ri, dm, musts[0].left, musts[0].right)))
        goto done;
    exact = 1;
}

....
Skipping nonlast:Priority -635
At location src/dfa.c:3497
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
goto done;

....
Skipping nonlast:Priority -635
At location src/dfa.c:3497
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
goto done;

....
Skipping nonlast:Priority -635
At location src/dfa.c:3497
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
goto done;

....
Skipping nonlast:Priority -635
At location src/dfa.c:3497
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
goto done;

....
Skipping nonlast:Priority -635
At location src/dfa.c:3497
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
goto done;

....
Skipping nonlast:Priority -635
At location src/dfa.c:3497
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
goto done;

....
Skipping nonlast addifexit:Priority 4365
At location src/dfa.c:3497
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(exact, musts, mp, result, i, t, d, ri, dm)))
    return;
goto done;

....
Skipping nonlast addifexit:Priority 4365
At location src/dfa.c:3497
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(exact, musts, mp, result, i, t, d, ri, dm)))
    break;
goto done;

....
Skipping nonlast addifexit:Priority 4565
At location src/dfa.c:3497
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(exact, musts, mp, result, i, t, d, ri, dm)))
    goto done;
goto done;

....
Skipping nonlast:Priority -646
At location src/dfa.c:3561
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    if (t == '\x00') {
        goto done;
    } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
}

....
Skipping nonlast:Priority -646
At location src/dfa.c:3561
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    if (t == '\x00') {
        goto done;
    } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
}

....
Skipping nonlast:Priority -646
At location src/dfa.c:3561
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        return lasttok = parse_bracket_exp_mb();
    }
    if (t == '\x00') {
        goto done;
    } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
}

....
Skipping nonlast:Priority -646
At location src/dfa.c:3561
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    if (t == '\x00') {
        goto done;
    } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
}

....
Skipping nonlast:Priority -646
At location src/dfa.c:3561
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    if (t == '\x00') {
        goto done;
    } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
}

....
Skipping nonlast:Priority -646
At location src/dfa.c:3561
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    if (t == '\x00') {
        goto done;
    } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
}

....
Skipping nonlast addifexit:Priority 3104
At location src/dfa.c:3561
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(t, mp, result, dm, exact, d, musts, i, ri)))
        return;
    if (t == '\x00') {
        goto done;
    } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
}

....
Skipping nonlast addifexit:Priority 3104
At location src/dfa.c:3561
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(t, mp, result, dm, exact, d, musts, i, ri)))
        break;
    if (t == '\x00') {
        goto done;
    } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
}

....
Skipping nonlast addifexit:Priority 3304
At location src/dfa.c:3561
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(t, mp, result, dm, exact, d, musts, i, ri)))
        goto done;
    if (t == '\x00') {
        goto done;
    } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
}

....
Skipping nonlast:Priority -645
At location src/dfa.c:3566
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
}

....
Skipping nonlast:Priority -645
At location src/dfa.c:3566
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
}

....
Skipping nonlast:Priority -645
At location src/dfa.c:3566
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        return lasttok = parse_bracket_exp_mb();
    }
    if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
}

....
Skipping nonlast:Priority -645
At location src/dfa.c:3566
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
}

....
Skipping nonlast:Priority -645
At location src/dfa.c:3566
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
}

....
Skipping nonlast:Priority -645
At location src/dfa.c:3566
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
}

....
Skipping nonlast addifexit:Priority 3105
At location src/dfa.c:3566
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(t, mp, result, dm, exact, d, musts, i, ri)))
        return;
    if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
}

....
Skipping nonlast addifexit:Priority 3105
At location src/dfa.c:3566
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(t, mp, result, dm, exact, d, musts, i, ri)))
        break;
    if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
}

....
Skipping nonlast addifexit:Priority 3305
At location src/dfa.c:3566
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(t, mp, result, dm, exact, d, musts, i, ri)))
        goto done;
    if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
}

....
Skipping only addifexit:Priority 9651
At location src/dfa.c:3574
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, t, mp->left, mp->right, mp->is, mp->in, result, dm, exact, d, musts, i, ri)))
    return;
resetmust(mp);

....
Skipping only addifexit:Priority 9651
At location src/dfa.c:3574
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, t, mp->left, mp->right, mp->is, mp->in, result, dm, exact, d, musts, i, ri)))
    break;
resetmust(mp);

....
Skipping only addifexit:Priority 9851
At location src/dfa.c:3574
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, t, mp->left, mp->right, mp->is, mp->in, result, dm, exact, d, musts, i, ri)))
    goto done;
resetmust(mp);

....
Skipping nonlast:Priority -634
At location src/dfa.c:3610
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
mp = musts;

....
Skipping nonlast:Priority -634
At location src/dfa.c:3610
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
mp = musts;

....
Skipping nonlast:Priority -634
At location src/dfa.c:3610
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
mp = musts;

....
Skipping nonlast:Priority -634
At location src/dfa.c:3610
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
mp = musts;

....
Skipping nonlast:Priority -634
At location src/dfa.c:3610
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
mp = musts;

....
Skipping nonlast:Priority -634
At location src/dfa.c:3610
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
mp = musts;

....
Skipping nonlast addifexit:Priority 4366
At location src/dfa.c:3610
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(musts, mp, d, i, d->tindex, dm, d->musts, result, exact, mp->in, mp->is, mp->left, mp->right, t, ri, d->tokens, d->charclasses, d->cindex, d->calloc, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success)))
    return;
mp = musts;

....
Skipping nonlast addifexit:Priority 4566
At location src/dfa.c:3610
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(musts, mp, d, i, d->tindex, dm, d->musts, result, exact, mp->in, mp->is, mp->left, mp->right, t, ri, d->tokens, d->charclasses, d->cindex, d->calloc, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success)))
    goto done;
mp = musts;

....
Skipping nonlast:Priority -633
At location src/dfa.c:3611
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
for (i = 0; i <= d->tindex; ++i) {
    freelist(mp[i].in);
    ifree((char *)mp[i].in);
    ifree(mp[i].left);
    ifree(mp[i].right);
    ifree(mp[i].is);
}

....
Skipping nonlast:Priority -633
At location src/dfa.c:3611
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
for (i = 0; i <= d->tindex; ++i) {
    freelist(mp[i].in);
    ifree((char *)mp[i].in);
    ifree(mp[i].left);
    ifree(mp[i].right);
    ifree(mp[i].is);
}

....
Skipping nonlast:Priority -633
At location src/dfa.c:3611
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
for (i = 0; i <= d->tindex; ++i) {
    freelist(mp[i].in);
    ifree((char *)mp[i].in);
    ifree(mp[i].left);
    ifree(mp[i].right);
    ifree(mp[i].is);
}

....
Skipping nonlast:Priority -633
At location src/dfa.c:3611
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
for (i = 0; i <= d->tindex; ++i) {
    freelist(mp[i].in);
    ifree((char *)mp[i].in);
    ifree(mp[i].left);
    ifree(mp[i].right);
    ifree(mp[i].is);
}

....
Skipping nonlast:Priority -633
At location src/dfa.c:3611
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
for (i = 0; i <= d->tindex; ++i) {
    freelist(mp[i].in);
    ifree((char *)mp[i].in);
    ifree(mp[i].left);
    ifree(mp[i].right);
    ifree(mp[i].is);
}

....
Skipping nonlast:Priority -633
At location src/dfa.c:3611
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
for (i = 0; i <= d->tindex; ++i) {
    freelist(mp[i].in);
    ifree((char *)mp[i].in);
    ifree(mp[i].left);
    ifree(mp[i].right);
    ifree(mp[i].is);
}

....
Skipping nonlast addifexit:Priority 4367
At location src/dfa.c:3611
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->tindex, musts, mp, dm, d->musts, result, exact, mp->in, mp->is, mp->left, mp->right, t, ri, d->tokens, d->charclasses, d->cindex, d->calloc, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success)))
    return;
for (i = 0; i <= d->tindex; ++i) {
    freelist(mp[i].in);
    ifree((char *)mp[i].in);
    ifree(mp[i].left);
    ifree(mp[i].right);
    ifree(mp[i].is);
}

....
Skipping nonlast addifexit:Priority 4567
At location src/dfa.c:3611
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->tindex, musts, mp, dm, d->musts, result, exact, mp->in, mp->is, mp->left, mp->right, t, ri, d->tokens, d->charclasses, d->cindex, d->calloc, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success)))
    goto done;
for (i = 0; i <= d->tindex; ++i) {
    freelist(mp[i].in);
    ifree((char *)mp[i].in);
    ifree(mp[i].left);
    ifree(mp[i].right);
    ifree(mp[i].is);
}

....
Skipping nonlast:Priority 4368
At location src/dfa.c:3613
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
freelist(mp[i].in);

....
Skipping nonlast:Priority 4368
At location src/dfa.c:3613
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
freelist(mp[i].in);

....
Skipping nonlast:Priority 4368
At location src/dfa.c:3613
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
freelist(mp[i].in);

....
Skipping nonlast:Priority 4368
At location src/dfa.c:3613
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
freelist(mp[i].in);

....
Skipping nonlast:Priority 4368
At location src/dfa.c:3613
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
freelist(mp[i].in);

....
Skipping nonlast:Priority 4368
At location src/dfa.c:3613
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
freelist(mp[i].in);

....
Skipping nonlast addifexit:Priority 9368
At location src/dfa.c:3613
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].in, d, mp[i].left, musts, mp[i].right, mp[i].is, dm, result, exact, mp->in, mp->is, mp->left, mp->right, t, ri)))
    return;
freelist(mp[i].in);

....
Skipping nonlast addifexit:Priority 9368
At location src/dfa.c:3613
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].in, d, mp[i].left, musts, mp[i].right, mp[i].is, dm, result, exact, mp->in, mp->is, mp->left, mp->right, t, ri)))
    break;
freelist(mp[i].in);

....
Skipping nonlast addifexit:Priority 9568
At location src/dfa.c:3613
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].in, d, mp[i].left, musts, mp[i].right, mp[i].is, dm, result, exact, mp->in, mp->is, mp->left, mp->right, t, ri)))
    goto done;
freelist(mp[i].in);

....
Skipping nonlast:Priority -628
At location src/dfa.c:3614
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
ifree((char *)mp[i].in);

....
Skipping nonlast:Priority -628
At location src/dfa.c:3614
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
ifree((char *)mp[i].in);

....
Skipping nonlast:Priority -628
At location src/dfa.c:3614
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
ifree((char *)mp[i].in);

....
Skipping nonlast:Priority -628
At location src/dfa.c:3614
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
ifree((char *)mp[i].in);

....
Skipping nonlast:Priority -628
At location src/dfa.c:3614
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
ifree((char *)mp[i].in);

....
Skipping nonlast:Priority -628
At location src/dfa.c:3614
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
ifree((char *)mp[i].in);

....
Skipping nonlast addifexit:Priority 4372
At location src/dfa.c:3614
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].in, mp[i].left, mp[i].right, d, mp[i].is, musts, dm, result, exact, mp->in, mp->is, mp->left, mp->right, t, ri)))
    return;
ifree((char *)mp[i].in);

....
Skipping nonlast addifexit:Priority 4372
At location src/dfa.c:3614
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].in, mp[i].left, mp[i].right, d, mp[i].is, musts, dm, result, exact, mp->in, mp->is, mp->left, mp->right, t, ri)))
    break;
ifree((char *)mp[i].in);

....
Skipping nonlast addifexit:Priority 4572
At location src/dfa.c:3614
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].in, mp[i].left, mp[i].right, d, mp[i].is, musts, dm, result, exact, mp->in, mp->is, mp->left, mp->right, t, ri)))
    goto done;
ifree((char *)mp[i].in);

....
Skipping nonlast:Priority -627
At location src/dfa.c:3615
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
ifree(mp[i].left);

....
Skipping nonlast:Priority -627
At location src/dfa.c:3615
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
ifree(mp[i].left);

....
Skipping nonlast:Priority -627
At location src/dfa.c:3615
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
ifree(mp[i].left);

....
Skipping nonlast:Priority -627
At location src/dfa.c:3615
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
ifree(mp[i].left);

....
Skipping nonlast:Priority -627
At location src/dfa.c:3615
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
ifree(mp[i].left);

....
Skipping nonlast:Priority -627
At location src/dfa.c:3615
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
ifree(mp[i].left);

....
Skipping nonlast addifexit:Priority 4373
At location src/dfa.c:3615
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].left, mp[i].in, mp[i].right, mp[i].is, d, musts, dm, result, exact, mp->in, mp->is, mp->left, mp->right, t, ri)))
    return;
ifree(mp[i].left);

....
Skipping nonlast addifexit:Priority 4373
At location src/dfa.c:3615
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].left, mp[i].in, mp[i].right, mp[i].is, d, musts, dm, result, exact, mp->in, mp->is, mp->left, mp->right, t, ri)))
    break;
ifree(mp[i].left);

....
Skipping nonlast addifexit:Priority 4573
At location src/dfa.c:3615
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].left, mp[i].in, mp[i].right, mp[i].is, d, musts, dm, result, exact, mp->in, mp->is, mp->left, mp->right, t, ri)))
    goto done;
ifree(mp[i].left);

....
Skipping nonlast:Priority -626
At location src/dfa.c:3616
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
ifree(mp[i].right);

....
Skipping nonlast:Priority -626
At location src/dfa.c:3616
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
ifree(mp[i].right);

....
Skipping nonlast:Priority -626
At location src/dfa.c:3616
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
ifree(mp[i].right);

....
Skipping nonlast:Priority -626
At location src/dfa.c:3616
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
ifree(mp[i].right);

....
Skipping nonlast:Priority -626
At location src/dfa.c:3616
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
ifree(mp[i].right);

....
Skipping nonlast:Priority -626
At location src/dfa.c:3616
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
ifree(mp[i].right);

....
Skipping nonlast addifexit:Priority 4374
At location src/dfa.c:3616
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].right, mp[i].left, mp[i].is, mp[i].in, d, musts, dm, result, exact, mp->in, mp->is, mp->left, mp->right, t, ri)))
    return;
ifree(mp[i].right);

....
Skipping nonlast addifexit:Priority 4374
At location src/dfa.c:3616
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].right, mp[i].left, mp[i].is, mp[i].in, d, musts, dm, result, exact, mp->in, mp->is, mp->left, mp->right, t, ri)))
    break;
ifree(mp[i].right);

....
Skipping nonlast addifexit:Priority 4574
At location src/dfa.c:3616
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].right, mp[i].left, mp[i].is, mp[i].in, d, musts, dm, result, exact, mp->in, mp->is, mp->left, mp->right, t, ri)))
    goto done;
ifree(mp[i].right);

....
Total 223341 different repair candidate templates!!!!
Total 239262 different repair candidate!!!
Trying different candidates!
BasicTester pointer: 0x14ede340
CondTester pointer: 0x198e6de0
Counter: 1
Batcher Size:0
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:150
--Src File: src/dfa.c
Fragment 0:
if ((!r) && !(__abst_hole(r, n, s)))
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));


CondTester, a patch instance with id 0:
Spawn 1 instances, now Total 1
Counter: 2
Batcher Size:1
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:161
--Src File: src/dfa.c
Fragment 0:
if ((!r) && !(__abst_hole(r, n)))
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));


CondTester, a patch instance with id 1:
Spawn 1 instances, now Total 2
Counter: 3
Batcher Size:2
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:764
--Src File: src/dfa.c
Fragment 0:
if (((__ctype_get_mb_cur_max()) > 1 && cur_mb_index) && !(__abst_hole(cur_mb_index, c, lexptr, lexleft, lasttok, i, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    goto normal_char;


CondTester, a patch instance with id 2:
Spawn 1 instances, now Total 3
Counter: 4
Batcher Size:3
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:764
--Src File: src/dfa.c
Fragment 0:
if (((__ctype_get_mb_cur_max()) > 1 && cur_mb_index) || (__abst_hole(cur_mb_index, c, lexptr, lexleft, lasttok, i, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    goto normal_char;


CondTester, a patch instance with id 3:
Spawn 1 instances, now Total 4
Counter: 5
Batcher Size:4
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2027
--Src File: src/dfa.c
Fragment 0:
{
    if ((d->tokens[pos.index] >= CSET) && !(__abst_hole(d, pos.index, d->tokens, d->charclasses, s, i, d->states, eolbyte, initialized, pos.constraint, j, ngrps, intersectf, k, matchesf, leftoversf, d->nleaves, d->searchflag, wants_newline, wants_letter, state, state_newline, state_letter, trans, d->follows, next_isnt_1st_byte, d->multibyte_prop, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
        copyset(d->charclasses[d->tokens[pos.index] - CSET], matches);
    else if (d->tokens[pos.index] == ANYCHAR || d->tokens[pos.index] == MBCSET) {
        if (d->states[s].mbps.nelem == 0) {
            ((d->states[s].mbps.elems) = xmalloc((d->states[s].elems.nelem) * sizeof(position)));
        }
        insert(pos, &(d->states[s].mbps));
        continue;
    } else
        continue;
}


CondTester, a patch instance with id 4:
Spawn 1 instances, now Total 5
Counter: 6
Batcher Size:5
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2027
--Src File: src/dfa.c
Fragment 0:
{
    if ((d->tokens[pos.index] >= CSET) || (__abst_hole(d, pos.index, d->tokens, d->charclasses, s, i, d->states, eolbyte, initialized, pos.constraint, j, ngrps, intersectf, k, matchesf, leftoversf, d->nleaves, d->searchflag, wants_newline, wants_letter, state, state_newline, state_letter, trans, d->follows, next_isnt_1st_byte, d->multibyte_prop, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
        copyset(d->charclasses[d->tokens[pos.index] - CSET], matches);
    else if (d->tokens[pos.index] == ANYCHAR || d->tokens[pos.index] == MBCSET) {
        if (d->states[s].mbps.nelem == 0) {
            ((d->states[s].mbps.elems) = xmalloc((d->states[s].elems.nelem) * sizeof(position)));
        }
        insert(pos, &(d->states[s].mbps));
        continue;
    } else
        continue;
}


CondTester, a patch instance with id 5:
Spawn 1 instances, now Total 6
Counter: 7
Batcher Size:6
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2051
--Src File: src/dfa.c
Fragment 0:
if ((pos.constraint != 255) && !(__abst_hole(pos.constraint, s, d, eolbyte, j, pos.index, ngrps, i, intersectf, k, initialized, matchesf, leftoversf, wants_newline, wants_letter, state, state_newline, state_letter, trans, next_isnt_1st_byte))) {
    if (!((pos.constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)))
        clrbit(eolbyte, matches);
    if (!((pos.constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)))
        for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
            matches[j] &= newline[j];
    if (!((pos.constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((1) ? 1 : 0))))
        for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
            matches[j] &= ~letters[j];
    if (!((pos.constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((0) ? 1 : 0))))
        for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
            matches[j] &= letters[j];
    for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))) && !matches[j]; ++j) 
        continue;
    if (j == (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))))
        continue;
}


CondTester, a patch instance with id 6:
Spawn 1 instances, now Total 7
Counter: 8
Batcher Size:7
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2051
--Src File: src/dfa.c
Fragment 0:
if ((pos.constraint != 255) || (__abst_hole(pos.constraint, s, d, eolbyte, j, pos.index, ngrps, i, intersectf, k, initialized, matchesf, leftoversf, wants_newline, wants_letter, state, state_newline, state_letter, trans, next_isnt_1st_byte))) {
    if (!((pos.constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)))
        clrbit(eolbyte, matches);
    if (!((pos.constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)))
        for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
            matches[j] &= newline[j];
    if (!((pos.constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((1) ? 1 : 0))))
        for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
            matches[j] &= ~letters[j];
    if (!((pos.constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((0) ? 1 : 0))))
        for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))); ++j) 
            matches[j] &= letters[j];
    for (j = 0; j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))) && !matches[j]; ++j) 
        continue;
    if (j == (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))))
        continue;
}


CondTester, a patch instance with id 7:
Spawn 1 instances, now Total 8
Counter: 9
Batcher Size:8
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2025
--Src File: src/dfa.c
Fragment 0:
if ((d->tokens[pos.index] >= 0 && d->tokens[pos.index] < (1 << 8)) && !(__abst_hole(d, pos.index, d->tokens, s, i, d->states[s].elems.elems, d->states, d->states[s].elems.nelem, d->charclasses, eolbyte, initialized, pos.constraint, d->states[s].newline, j, d->states[s].letter, ngrps, intersectf, k, matchesf, leftoversf, d->nleaves, d->searchflag, wants_newline, wants_letter, state, state_newline, state_letter, trans, d->follows, next_isnt_1st_byte, d->multibyte_prop, d->states[s].hash, d->states[s].backref, d->states[s].constraint, d->states[s].first_end, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    setbit(d->tokens[pos.index], matches);
else if (d->tokens[pos.index] >= CSET)
    copyset(d->charclasses[d->tokens[pos.index] - CSET], matches);
else if (d->tokens[pos.index] == ANYCHAR || d->tokens[pos.index] == MBCSET) {
    if (d->states[s].mbps.nelem == 0) {
        ((d->states[s].mbps.elems) = xmalloc((d->states[s].elems.nelem) * sizeof(position)));
    }
    insert(pos, &(d->states[s].mbps));
    continue;
} else
    continue;


CondTester, a patch instance with id 8:
Spawn 1 instances, now Total 9
Counter: 10
Batcher Size:9
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2025
--Src File: src/dfa.c
Fragment 0:
if ((d->tokens[pos.index] >= 0 && d->tokens[pos.index] < (1 << 8)) || (__abst_hole(d, pos.index, d->tokens, s, i, d->states[s].elems.elems, d->states, d->states[s].elems.nelem, d->charclasses, eolbyte, initialized, pos.constraint, d->states[s].newline, j, d->states[s].letter, ngrps, intersectf, k, matchesf, leftoversf, d->nleaves, d->searchflag, wants_newline, wants_letter, state, state_newline, state_letter, trans, d->follows, next_isnt_1st_byte, d->multibyte_prop, d->states[s].hash, d->states[s].backref, d->states[s].constraint, d->states[s].first_end, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    setbit(d->tokens[pos.index], matches);
else if (d->tokens[pos.index] >= CSET)
    copyset(d->charclasses[d->tokens[pos.index] - CSET], matches);
else if (d->tokens[pos.index] == ANYCHAR || d->tokens[pos.index] == MBCSET) {
    if (d->states[s].mbps.nelem == 0) {
        ((d->states[s].mbps.elems) = xmalloc((d->states[s].elems.nelem) * sizeof(position)));
    }
    insert(pos, &(d->states[s].mbps));
    continue;
} else
    continue;


CondTester, a patch instance with id 9:
Spawn 1 instances, now Total 10
Counter: 11
Batcher Size:10
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2025
--Src File: src/dfa.c
Fragment 0:
if (((d->tokens[pos.index] >= 0) || (__abst_hole(d, pos.index, d->tokens, s, i, d->states[s].elems.elems, d->states, d->states[s].elems.nelem, d->charclasses, eolbyte, initialized, pos.constraint, d->states[s].newline, j, d->states[s].letter, ngrps, intersectf, k, matchesf, leftoversf, d->nleaves, d->searchflag, wants_newline, wants_letter, state, state_newline, state_letter, trans, d->follows, next_isnt_1st_byte, d->multibyte_prop, d->states[s].hash, d->states[s].backref, d->states[s].constraint, d->states[s].first_end, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts))) && d->tokens[pos.index] < (1 << 8))
    setbit(d->tokens[pos.index], matches);
else if (d->tokens[pos.index] >= CSET)
    copyset(d->charclasses[d->tokens[pos.index] - CSET], matches);
else if (d->tokens[pos.index] == ANYCHAR || d->tokens[pos.index] == MBCSET) {
    if (d->states[s].mbps.nelem == 0) {
        ((d->states[s].mbps.elems) = xmalloc((d->states[s].elems.nelem) * sizeof(position)));
    }
    insert(pos, &(d->states[s].mbps));
    continue;
} else
    continue;


CondTester, a patch instance with id 10:
Spawn 1 instances, now Total 11
Counter: 12
Batcher Size:11
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:764
--Src File: src/dfa.c
Fragment 0:
if ((((__ctype_get_mb_cur_max()) > 1) || (__abst_hole(cur_mb_index, c, lexptr, lexleft, lasttok, i, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold))) && cur_mb_index)
    goto normal_char;


CondTester, a patch instance with id 11:
Spawn 1 instances, now Total 12
Counter: 13
Batcher Size:12
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1481
--Src File: src/dfa.c
Fragment 0:
if ((lo < count && p.index == s->elems[lo].index) && !(__abst_hole(s, count, lo, s->elems[lo].index, p.index, s->elems, s->elems[lo].constraint, p.constraint, hi, s->nelem)))
    s->elems[lo].constraint |= p.constraint;
else {
    int i;
    for (i = count; i > lo; i--) 
        s->elems[i] = s->elems[i - 1];
    s->elems[lo] = p;
    ++s->nelem;
}


CondTester, a patch instance with id 12:
Spawn 1 instances, now Total 13
Counter: 14
Batcher Size:13
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1481
--Src File: src/dfa.c
Fragment 0:
if ((lo < count && p.index == s->elems[lo].index) || (__abst_hole(s, count, lo, s->elems[lo].index, p.index, s->elems, s->elems[lo].constraint, p.constraint, hi, s->nelem)))
    s->elems[lo].constraint |= p.constraint;
else {
    int i;
    for (i = count; i > lo; i--) 
        s->elems[i] = s->elems[i - 1];
    s->elems[lo] = p;
    ++s->nelem;
}


CondTester, a patch instance with id 13:
Spawn 1 instances, now Total 14
Counter: 15
Batcher Size:14
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1481
--Src File: src/dfa.c
Fragment 0:
if (((lo < count) || (__abst_hole(s, count, lo, s->elems[lo].index, p.index, s->elems, s->elems[lo].constraint, p.constraint, hi, s->nelem))) && p.index == s->elems[lo].index)
    s->elems[lo].constraint |= p.constraint;
else {
    int i;
    for (i = count; i > lo; i--) 
        s->elems[i] = s->elems[i - 1];
    s->elems[lo] = p;
    ++s->nelem;
}


CondTester, a patch instance with id 14:
Spawn 1 instances, now Total 15
Counter: 16
Batcher Size:15
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1099
--Src File: src/dfa.c
Fragment 0:
if ((c2 == '\\' && (syntax_bits & ((unsigned long)1))) && !(__abst_hole(syntax_bits, c2, lexptr, lexleft, lasttok, c, c1, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);


CondTester, a patch instance with id 15:
Spawn 1 instances, now Total 16
Counter: 17
Batcher Size:16
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1099
--Src File: src/dfa.c
Fragment 0:
if ((c2 == '\\' && (syntax_bits & ((unsigned long)1))) || (__abst_hole(syntax_bits, c2, lexptr, lexleft, lasttok, c, c1, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);


CondTester, a patch instance with id 16:
Spawn 1 instances, now Total 17
Counter: 18
Batcher Size:17
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1099
--Src File: src/dfa.c
Fragment 0:
if (((c2 == '\\') || (__abst_hole(syntax_bits, c2, lexptr, lexleft, lasttok, c, c1, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i))) && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);


CondTester, a patch instance with id 17:
Spawn 1 instances, now Total 18
Counter: 19
Batcher Size:18
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2011
--Src File: src/dfa.c
Fragment 0:
if ((!initialized) && !(__abst_hole(initialized, i, eolbyte, s, d, j, ngrps, intersectf, k, matchesf, leftoversf, wants_newline, wants_letter, state, state_newline, state_letter, trans, next_isnt_1st_byte))) {
    initialized = 1;
    for (i = 0; i < (1 << 8); ++i) 
        if ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_'))
            setbit(i, letters);
    setbit(eolbyte, newline);
}


CondTester, a patch instance with id 18:
Spawn 1 instances, now Total 19
Counter: 20
Batcher Size:19
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2011
--Src File: src/dfa.c
Fragment 0:
if ((!initialized) || (__abst_hole(initialized, i, eolbyte, s, d, j, ngrps, intersectf, k, matchesf, leftoversf, wants_newline, wants_letter, state, state_newline, state_letter, trans, next_isnt_1st_byte))) {
    initialized = 1;
    for (i = 0; i < (1 << 8); ++i) 
        if ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_'))
            setbit(i, letters);
    setbit(eolbyte, newline);
}


CondTester, a patch instance with id 19:
Spawn 1 instances, now Total 20
Counter: 21
Batcher Size:20
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2015
--Src File: src/dfa.c
Fragment 0:
{
    if (((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_')) && !(__abst_hole(i, initialized, eolbyte, s, d, j, ngrps, intersectf, k, matchesf, leftoversf, wants_newline, wants_letter, state, state_newline, state_letter, trans, next_isnt_1st_byte)))
        setbit(i, letters);
}


CondTester, a patch instance with id 20:
Spawn 1 instances, now Total 21
Counter: 22
Batcher Size:21
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1475
--Src File: src/dfa.c
Fragment 0:
if ((s->elems[mid].index < p.index) && !(__abst_hole(s, mid, s->elems[mid].index, p.index, s->elems, lo, hi, count, s->nelem, p.constraint, s->elems[mid].constraint)))
    lo = mid + 1;
else
    hi = mid;


CondTester, a patch instance with id 21:
Spawn 1 instances, now Total 22
Counter: 23
Batcher Size:22
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1475
--Src File: src/dfa.c
Fragment 0:
if ((s->elems[mid].index < p.index) || (__abst_hole(s, mid, s->elems[mid].index, p.index, s->elems, lo, hi, count, s->nelem, p.constraint, s->elems[mid].constraint)))
    lo = mid + 1;
else
    hi = mid;


CondTester, a patch instance with id 22:
Spawn 1 instances, now Total 23
Counter: 24
Batcher Size:23
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:161
--Src File: src/dfa.c
Fragment 0:
if ((!r) || (__abst_hole(r, n)))
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));


CondTester, a patch instance with id 23:
Spawn 1 instances, now Total 24
Counter: 25
Batcher Size:24
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1438
--Src File: src/dfa.c
Fragment 0:
if ((tok != END) && !(__abst_hole(tok, d, depth, syntax_bits_set, cur_mb_len, cur_mb_index, hard_LC_COLLATE, parens, laststart, lasttok, len, lexleft, s, lexptr, dfa)))
    dfaerror(dcgettext(((void *)0), "Unbalanced )", 5));


CondTester, a patch instance with id 24:
Spawn 1 instances, now Total 25
Counter: 26
Batcher Size:25
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1444
--Src File: src/dfa.c
Fragment 0:
if ((d->nregexps) && !(__abst_hole(d, d->nregexps, tok, depth, d->depth, syntax_bits_set, cur_mb_len, cur_mb_index, hard_LC_COLLATE, parens, laststart, lasttok, len, lexleft, s, lexptr, dfa, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->nleaves, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    addtok(ORTOP);


CondTester, a patch instance with id 25:
Spawn 1 instances, now Total 26
Counter: 27
Batcher Size:26
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1444
--Src File: src/dfa.c
Fragment 0:
if ((d->nregexps) || (__abst_hole(d, d->nregexps, tok, depth, d->depth, syntax_bits_set, cur_mb_len, cur_mb_index, hard_LC_COLLATE, parens, laststart, lasttok, len, lexleft, s, lexptr, dfa, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->nleaves, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    addtok(ORTOP);


CondTester, a patch instance with id 26:
Spawn 1 instances, now Total 27
Counter: 28
Batcher Size:27
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1438
--Src File: src/dfa.c
Fragment 0:
if ((tok != END) || (__abst_hole(tok, d, depth, syntax_bits_set, cur_mb_len, cur_mb_index, hard_LC_COLLATE, parens, laststart, lasttok, len, lexleft, s, lexptr, dfa)))
    dfaerror(dcgettext(((void *)0), "Unbalanced )", 5));


CondTester, a patch instance with id 27:
Spawn 1 instances, now Total 28
Counter: 29
Batcher Size:28
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3495
--Src File: src/dfa.c
Fragment 0:
if ((__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
        int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
        if (__s1_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
            if (__s1_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                if (__s1_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
        int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
        if (__s2_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
            if (__s2_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                if (__s2_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(result, musts[0].is))));
}) == 0) && !(__abst_hole(musts, result, musts[0].is, i, exact, musts[0].in, mp, t, d, ri, dm, musts[0].left, musts[0].right)))
    exact = 1;


CondTester, a patch instance with id 28:
Spawn 1 instances, now Total 29
Counter: 30
Batcher Size:29
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3495
--Src File: src/dfa.c
Fragment 0:
if ((__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
        int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
        if (__s1_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
            if (__s1_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                if (__s1_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
        int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
        if (__s2_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
            if (__s2_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                if (__s2_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(result, musts[0].is))));
}) == 0) || (__abst_hole(musts, result, musts[0].is, i, exact, musts[0].in, mp, t, d, ri, dm, musts[0].left, musts[0].right)))
    exact = 1;


CondTester, a patch instance with id 29:
Spawn 1 instances, now Total 30
Counter: 31
Batcher Size:30
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3566
--Src File: src/dfa.c
Fragment 0:
{
    if ((t >= CSET || t == ANYCHAR || t == MBCSET) && !(__abst_hole(t, mp, result, dm, exact, d, musts, i, ri))) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
}


CondTester, a patch instance with id 30:
Spawn 1 instances, now Total 31
Counter: 32
Batcher Size:31
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3566
--Src File: src/dfa.c
Fragment 0:
{
    if ((t >= CSET || t == ANYCHAR || t == MBCSET) || (__abst_hole(t, mp, result, dm, exact, d, musts, i, ri))) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
}


CondTester, a patch instance with id 31:
Spawn 1 instances, now Total 32
Counter: 33
Batcher Size:32
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3561
--Src File: src/dfa.c
Fragment 0:
{
    if ((t == '\x00') && !(__abst_hole(t, mp, result, dm, exact, d, musts, i, ri))) {
        goto done;
    } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
}


CondTester, a patch instance with id 32:
Spawn 1 instances, now Total 33
Counter: 34
Batcher Size:33
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3561
--Src File: src/dfa.c
Fragment 0:
{
    if ((t == '\x00') || (__abst_hole(t, mp, result, dm, exact, d, musts, i, ri))) {
        goto done;
    } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
}


CondTester, a patch instance with id 33:
Spawn 1 instances, now Total 34
Counter: 35
Batcher Size:34
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3556
--Src File: src/dfa.c
Fragment 0:
{
    if ((t < END) || (__abst_hole(t, mp, result, dm, exact, d, musts, i, ri))) {
        goto done;
    } else if (t == '\x00') {
        goto done;
    } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
}


CondTester, a patch instance with id 34:
Spawn 1 instances, now Total 35
Counter: 36
Batcher Size:35
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3404
--Src File: src/dfa.c
Fragment 0:
if ((mp[i].in == ((void *)0) || mp[i].left == ((void *)0) || mp[i].right == ((void *)0) || mp[i].is == ((void *)0)) && !(__abst_hole(mp, i, mp[i].right, mp[i].is, mp[i].in, mp[i].left, d, musts, ri, exact, result, t, mp->is, mp->left, mp->right, mp->in, dm)))
    goto done;


CondTester, a patch instance with id 35:
Spawn 1 instances, now Total 36
Counter: 37
Batcher Size:36
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3404
--Src File: src/dfa.c
Fragment 0:
if ((mp[i].in == ((void *)0) || mp[i].left == ((void *)0) || mp[i].right == ((void *)0) || mp[i].is == ((void *)0)) || (__abst_hole(mp, i, mp[i].right, mp[i].is, mp[i].in, mp[i].left, d, musts, ri, exact, result, t, mp->is, mp->left, mp->right, mp->in, dm)))
    goto done;


CondTester, a patch instance with id 36:
Spawn 1 instances, now Total 37
Counter: 38
Batcher Size:37
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1070
--Src File: src/dfa.c
Fragment 0:
if ((c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1))) && !(__abst_hole(c, syntax_bits, c1, prednames[c1].name, prednames[c1].pred, c2, invert, lexptr, lexleft, lasttok, laststart, backslash, hard_LC_COLLATE, case_fold, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    for (c1 = 0; prednames[c1].name; ++c1) 
        if (looking_at(prednames[c1].name)) {
            int (*pred)(int) = prednames[c1].pred;
            for (c2 = 0; c2 < (1 << 8); ++c2) 
                if ((*pred)(c2))
                    setbit_case_fold(c2, ccl);
            lexptr += strlen(prednames[c1].name);
            lexleft -= strlen(prednames[c1].name);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            goto skip;
        }


CondTester, a patch instance with id 37:
Spawn 1 instances, now Total 38
Counter: 39
Batcher Size:38
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1084
--Src File: src/dfa.c
Fragment 0:
if ((c == '\\' && (syntax_bits & ((unsigned long)1))) && !(__abst_hole(c, syntax_bits, lexptr, lexleft, lasttok, c1, c2, hard_LC_COLLATE, invert, case_fold, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);


CondTester, a patch instance with id 38:
Spawn 1 instances, now Total 39
Counter: 40
Batcher Size:39
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3393
--Src File: src/dfa.c
Fragment 0:
if ((musts == ((void *)0)) && !(__abst_hole(musts, d, d->tindex, mp, exact, result, i, ri, t, d->tokens, dm, d->musts, d->charclasses, d->cindex, d->calloc, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success)))
    return;


CondTester, a patch instance with id 39:
Spawn 1 instances, now Total 40
Counter: 41
Batcher Size:40
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3393
--Src File: src/dfa.c
Fragment 0:
if ((musts == ((void *)0)) || (__abst_hole(musts, d, d->tindex, mp, exact, result, i, ri, t, d->tokens, dm, d->musts, d->charclasses, d->cindex, d->calloc, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success)))
    return;


CondTester, a patch instance with id 40:
Spawn 1 instances, now Total 41
Counter: 42
Batcher Size:41
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1084
--Src File: src/dfa.c
Fragment 0:
if ((c == '\\' && (syntax_bits & ((unsigned long)1))) || (__abst_hole(c, syntax_bits, lexptr, lexleft, lasttok, c1, c2, hard_LC_COLLATE, invert, case_fold, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);


CondTester, a patch instance with id 41:
Spawn 1 instances, now Total 42
Counter: 43
Batcher Size:42
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1430
--Src File: src/dfa.c
Fragment 0:
if ((!syntax_bits_set) && !(__abst_hole(syntax_bits_set, tok, d, depth, cur_mb_len, cur_mb_index, hard_LC_COLLATE, parens, laststart, lasttok, len, lexleft, s, lexptr, dfa)))
    dfaerror(dcgettext(((void *)0), "No syntax specified", 5));


CondTester, a patch instance with id 42:
Spawn 1 instances, now Total 43
Counter: 44
Batcher Size:43
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1430
--Src File: src/dfa.c
Fragment 0:
if ((!syntax_bits_set) || (__abst_hole(syntax_bits_set, tok, d, depth, cur_mb_len, cur_mb_index, hard_LC_COLLATE, parens, laststart, lasttok, len, lexleft, s, lexptr, dfa)))
    dfaerror(dcgettext(((void *)0), "No syntax specified", 5));


CondTester, a patch instance with id 43:
Spawn 1 instances, now Total 44
Counter: 45
Batcher Size:44
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1084
--Src File: src/dfa.c
Fragment 0:
if (((c == '\\') || (__abst_hole(c, syntax_bits, lexptr, lexleft, lasttok, c1, c2, hard_LC_COLLATE, invert, case_fold, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i))) && (syntax_bits & ((unsigned long)1)))
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);


CondTester, a patch instance with id 44:
Spawn 1 instances, now Total 45
Counter: 46
Batcher Size:45
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1422
--Src File: src/dfa.c
Fragment 0:
if (((__ctype_get_mb_cur_max()) > 1) && !(__abst_hole(cur_mb_index, hard_LC_COLLATE, cur_mb_len, parens, laststart, lasttok, len, syntax_bits_set, lexleft, s, lexptr, d, dfa, tok, depth))) {
    cur_mb_index = 0;
    cur_mb_len = 0;
    memset(&mbs, 0, sizeof(mbstate_t));
}


CondTester, a patch instance with id 45:
Spawn 1 instances, now Total 46
Counter: 47
Batcher Size:46
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1422
--Src File: src/dfa.c
Fragment 0:
if (((__ctype_get_mb_cur_max()) > 1) || (__abst_hole(cur_mb_index, hard_LC_COLLATE, cur_mb_len, parens, laststart, lasttok, len, syntax_bits_set, lexleft, s, lexptr, d, dfa, tok, depth))) {
    cur_mb_index = 0;
    cur_mb_len = 0;
    memset(&mbs, 0, sizeof(mbstate_t));
}


CondTester, a patch instance with id 46:
Spawn 1 instances, now Total 47
Counter: 48
Batcher Size:47
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2987
--Src File: src/dfa.c
Fragment 0:
if ((case_fold && len) && !(__abst_hole(len, case_fold, s, d, searchflag))) {
    char *lcopy;
    int i;
    lcopy = malloc(len);
    if (!lcopy)
        dfaerror(dcgettext(((void *)0), "memory exhausted", 5));
    case_fold = 0;
    for (i = 0; i < len; ++i) 
        if (((*__ctype_b_loc())[(int)(((unsigned char)s[i]))] & (unsigned short)_ISupper))
            lcopy[i] = (__extension__ ({
                int __res;
                if (sizeof ((unsigned char)s[i]) > 1) {
                    if (__builtin_constant_p((unsigned char)s[i])) {
                        int __c = ((unsigned char)s[i]);
                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                    } else
                        __res = tolower((unsigned char)s[i]);
                } else
                    __res = (*__ctype_tolower_loc())[(int)((unsigned char)s[i])];
                __res;
            }));
        else
            lcopy[i] = s[i];
    dfainit(d);
    dfaparse(lcopy, len, d);
    free(lcopy);
    dfamust(d);
    d->cindex = d->tindex = d->depth = d->nleaves = d->nregexps = 0;
    case_fold = 1;
    dfaparse(s, len, d);
    dfaanalyze(d, searchflag);
} else {
    dfainit(d);
    dfaparse(s, len, d);
    dfamust(d);
    dfaanalyze(d, searchflag);
}


CondTester, a patch instance with id 47:
Spawn 1 instances, now Total 48
Counter: 49
Batcher Size:48
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3213
--Src File: src/dfa.c
Fragment 0:
if ((cp != ((void *)0)) && !(__abst_hole(cp)))
    free(cp);


CondTester, a patch instance with id 48:
Spawn 1 instances, now Total 49
Counter: 50
Batcher Size:49
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3222
--Src File: src/dfa.c
Fragment 0:
if ((cpp == ((void *)0)) && !(__abst_hole(cpp, i)))
    return;


CondTester, a patch instance with id 49:
Spawn 1 instances, now Total 50
Counter: 51
Batcher Size:50
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3222
--Src File: src/dfa.c
Fragment 0:
if ((cpp == ((void *)0)) || (__abst_hole(cpp, i)))
    return;


CondTester, a patch instance with id 50:
Spawn 1 instances, now Total 51
Counter: 52
Batcher Size:51
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3213
--Src File: src/dfa.c
Fragment 0:
if ((cp != ((void *)0)) || (__abst_hole(cp)))
    free(cp);


CondTester, a patch instance with id 51:
Spawn 1 instances, now Total 52
Counter: 53
Batcher Size:52
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2987
--Src File: src/dfa.c
Fragment 0:
if ((case_fold && len) || (__abst_hole(len, case_fold, s, d, searchflag))) {
    char *lcopy;
    int i;
    lcopy = malloc(len);
    if (!lcopy)
        dfaerror(dcgettext(((void *)0), "memory exhausted", 5));
    case_fold = 0;
    for (i = 0; i < len; ++i) 
        if (((*__ctype_b_loc())[(int)(((unsigned char)s[i]))] & (unsigned short)_ISupper))
            lcopy[i] = (__extension__ ({
                int __res;
                if (sizeof ((unsigned char)s[i]) > 1) {
                    if (__builtin_constant_p((unsigned char)s[i])) {
                        int __c = ((unsigned char)s[i]);
                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                    } else
                        __res = tolower((unsigned char)s[i]);
                } else
                    __res = (*__ctype_tolower_loc())[(int)((unsigned char)s[i])];
                __res;
            }));
        else
            lcopy[i] = s[i];
    dfainit(d);
    dfaparse(lcopy, len, d);
    free(lcopy);
    dfamust(d);
    d->cindex = d->tindex = d->depth = d->nleaves = d->nregexps = 0;
    case_fold = 1;
    dfaparse(s, len, d);
    dfaanalyze(d, searchflag);
} else {
    dfainit(d);
    dfaparse(s, len, d);
    dfamust(d);
    dfaanalyze(d, searchflag);
}


CondTester, a patch instance with id 52:
Spawn 1 instances, now Total 53
Counter: 54
Batcher Size:53
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2987
--Src File: src/dfa.c
Fragment 0:
if (((case_fold) || (__abst_hole(len, case_fold, s, d, searchflag))) && len) {
    char *lcopy;
    int i;
    lcopy = malloc(len);
    if (!lcopy)
        dfaerror(dcgettext(((void *)0), "memory exhausted", 5));
    case_fold = 0;
    for (i = 0; i < len; ++i) 
        if (((*__ctype_b_loc())[(int)(((unsigned char)s[i]))] & (unsigned short)_ISupper))
            lcopy[i] = (__extension__ ({
                int __res;
                if (sizeof ((unsigned char)s[i]) > 1) {
                    if (__builtin_constant_p((unsigned char)s[i])) {
                        int __c = ((unsigned char)s[i]);
                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                    } else
                        __res = tolower((unsigned char)s[i]);
                } else
                    __res = (*__ctype_tolower_loc())[(int)((unsigned char)s[i])];
                __res;
            }));
        else
            lcopy[i] = s[i];
    dfainit(d);
    dfaparse(lcopy, len, d);
    free(lcopy);
    dfamust(d);
    d->cindex = d->tindex = d->depth = d->nleaves = d->nregexps = 0;
    case_fold = 1;
    dfaparse(s, len, d);
    dfaanalyze(d, searchflag);
} else {
    dfainit(d);
    dfaparse(s, len, d);
    dfamust(d);
    dfaanalyze(d, searchflag);
}


CondTester, a patch instance with id 53:
Spawn 1 instances, now Total 54
Counter: 55
Batcher Size:54
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1070
--Src File: src/dfa.c
Fragment 0:
if ((c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1))) || (__abst_hole(c, syntax_bits, c1, prednames[c1].name, prednames[c1].pred, c2, invert, lexptr, lexleft, lasttok, laststart, backslash, hard_LC_COLLATE, case_fold, eolbyte, parens, minrep, maxrep, cur_mb_index, i)))
    for (c1 = 0; prednames[c1].name; ++c1) 
        if (looking_at(prednames[c1].name)) {
            int (*pred)(int) = prednames[c1].pred;
            for (c2 = 0; c2 < (1 << 8); ++c2) 
                if ((*pred)(c2))
                    setbit_case_fold(c2, ccl);
            lexptr += strlen(prednames[c1].name);
            lexleft -= strlen(prednames[c1].name);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            goto skip;
        }


CondTester, a patch instance with id 54:
Spawn 1 instances, now Total 55
Counter: 56
Batcher Size:55
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2901
--Src File: src/dfa.c
Fragment 0:
if (((__ctype_get_mb_cur_max()) > 1) && !(__abst_hole(mblen_buf, p, end, inputwcs, s, t, trans, d, backref, begin, buf_begin, buf_end, size, eol, sbit_init, eolbyte))) {
    free(mblen_buf);
    free(inputwcs);
}


CondTester, a patch instance with id 55:
Spawn 1 instances, now Total 56
Counter: 57
Batcher Size:56
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2967
--Src File: src/dfa.c
Fragment 0:
if (((__ctype_get_mb_cur_max()) > 1) && !(__abst_hole(d))) {
    d->nmultibyte_prop = 1;
    ((d->multibyte_prop) = xmalloc((d->nmultibyte_prop) * sizeof(int)));
    d->nmbcsets = 0;
    d->mbcsets_alloc = 1;
    ((d->mbcsets) = xmalloc((d->mbcsets_alloc) * sizeof(struct mb_char_classes)));
}


CondTester, a patch instance with id 56:
Spawn 1 instances, now Total 57
Counter: 58
Batcher Size:57
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2967
--Src File: src/dfa.c
Fragment 0:
if (((__ctype_get_mb_cur_max()) > 1) || (__abst_hole(d))) {
    d->nmultibyte_prop = 1;
    ((d->multibyte_prop) = xmalloc((d->nmultibyte_prop) * sizeof(int)));
    d->nmbcsets = 0;
    d->mbcsets_alloc = 1;
    ((d->mbcsets) = xmalloc((d->mbcsets_alloc) * sizeof(struct mb_char_classes)));
}


CondTester, a patch instance with id 57:
Spawn 1 instances, now Total 58
Counter: 59
Batcher Size:58
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2901
--Src File: src/dfa.c
Fragment 0:
if (((__ctype_get_mb_cur_max()) > 1) || (__abst_hole(mblen_buf, p, end, inputwcs, s, t, trans, d, backref, begin, buf_begin, buf_end, size, eol, sbit_init, eolbyte))) {
    free(mblen_buf);
    free(inputwcs);
}


CondTester, a patch instance with id 58:
Spawn 1 instances, now Total 59
Counter: 60
Batcher Size:59
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2898
--Src File: src/dfa.c
Fragment 0:
if ((p == end) && !(__abst_hole(p, end, s, t, trans, mblen_buf, inputwcs, d, backref, buf_begin, buf_end, begin, size, eol, sbit_init, eolbyte))) {
    if ((__ctype_get_mb_cur_max()) > 1) {
        free(mblen_buf);
        free(inputwcs);
    }
    return (size_t)-1;
}


CondTester, a patch instance with id 59:
Spawn 1 instances, now Total 60
Counter: 61
Batcher Size:60
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2898
--Src File: src/dfa.c
Fragment 0:
if ((p == end) || (__abst_hole(p, end, s, t, trans, mblen_buf, inputwcs, d, backref, buf_begin, buf_end, begin, size, eol, sbit_init, eolbyte))) {
    if ((__ctype_get_mb_cur_max()) > 1) {
        free(mblen_buf);
        free(inputwcs);
    }
    return (size_t)-1;
}


CondTester, a patch instance with id 60:
Spawn 1 instances, now Total 61
Counter: 62
Batcher Size:61
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2896
--Src File: src/dfa.c
Fragment 0:
if ((s < 0) && !(__abst_hole(s, p, end, t, trans, d, mblen_buf, inputwcs, buf_begin, buf_end, backref, begin, size, eol, sbit_init, eolbyte))) {
    if (p == end) {
        if ((__ctype_get_mb_cur_max()) > 1) {
            free(mblen_buf);
            free(inputwcs);
        }
        return (size_t)-1;
    }
    s = 0;
} else if ((t = d->fails[s])) {
    if (d->success[s] & sbit[*p]) {
        if (backref)
            *backref = (d->states[s].backref != 0);
        if ((__ctype_get_mb_cur_max()) > 1) {
            free(mblen_buf);
            free(inputwcs);
        }
        return (const char *)p - begin;
    }
    if ((__ctype_get_mb_cur_max()) > 1) {
        if (s == 0) {
            while (inputwcs[p - buf_begin] == 0 && mblen_buf[p - buf_begin] > 0 && p < buf_end)
                ++p;
            if (p >= end) {
                free(mblen_buf);
                free(inputwcs);
                return (size_t)-1;
            }
        }
        ;
        if (d->states[s].mbps.nelem == 0) {
            s = t[*p++];
            continue;
        }
        s = transit_state(d, s, &p);
        trans = d->trans;
    } else
        s = t[*p++];
} else {
    build_state(s, d);
    trans = d->trans;
}


CondTester, a patch instance with id 61:
Spawn 1 instances, now Total 62
Counter: 63
Batcher Size:62
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2896
--Src File: src/dfa.c
Fragment 0:
if ((s < 0) || (__abst_hole(s, p, end, t, trans, d, mblen_buf, inputwcs, buf_begin, buf_end, backref, begin, size, eol, sbit_init, eolbyte))) {
    if (p == end) {
        if ((__ctype_get_mb_cur_max()) > 1) {
            free(mblen_buf);
            free(inputwcs);
        }
        return (size_t)-1;
    }
    s = 0;
} else if ((t = d->fails[s])) {
    if (d->success[s] & sbit[*p]) {
        if (backref)
            *backref = (d->states[s].backref != 0);
        if ((__ctype_get_mb_cur_max()) > 1) {
            free(mblen_buf);
            free(inputwcs);
        }
        return (const char *)p - begin;
    }
    if ((__ctype_get_mb_cur_max()) > 1) {
        if (s == 0) {
            while (inputwcs[p - buf_begin] == 0 && mblen_buf[p - buf_begin] > 0 && p < buf_end)
                ++p;
            if (p >= end) {
                free(mblen_buf);
                free(inputwcs);
                return (size_t)-1;
            }
        }
        ;
        if (d->states[s].mbps.nelem == 0) {
            s = t[*p++];
            continue;
        }
        s = transit_state(d, s, &p);
        trans = d->trans;
    } else
        s = t[*p++];
} else {
    build_state(s, d);
    trans = d->trans;
}


CondTester, a patch instance with id 62:
Spawn 1 instances, now Total 63
Counter: 64
Batcher Size:63
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1070
--Src File: src/dfa.c
Fragment 0:
if (((c == '[') || (__abst_hole(c, syntax_bits, c1, prednames[c1].name, prednames[c1].pred, c2, invert, lexptr, lexleft, lasttok, laststart, backslash, hard_LC_COLLATE, case_fold, eolbyte, parens, minrep, maxrep, cur_mb_index, i))) && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
    for (c1 = 0; prednames[c1].name; ++c1) 
        if (looking_at(prednames[c1].name)) {
            int (*pred)(int) = prednames[c1].pred;
            for (c2 = 0; c2 < (1 << 8); ++c2) 
                if ((*pred)(c2))
                    setbit_case_fold(c2, ccl);
            lexptr += strlen(prednames[c1].name);
            lexleft -= strlen(prednames[c1].name);
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
            goto skip;
        }


CondTester, a patch instance with id 63:
Spawn 1 instances, now Total 64
Counter: 65
Batcher Size:64
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2830
--Src File: src/dfa.c
Fragment 0:
if (((__ctype_get_mb_cur_max()) > 1) && !(__abst_hole(d, begin, trans, buf_begin, size, p, end, buf_end, s, mblen_buf, inputwcs, eol, sbit_init, eolbyte, t, backref))) {
    int remain_bytes, i;
    buf_begin = (const unsigned char *)begin;
    buf_end = end;
    ((mblen_buf) = xmalloc((end - (const unsigned char *)begin + 2) * sizeof(unsigned char)));
    ((inputwcs) = xmalloc((end - (const unsigned char *)begin + 2) * sizeof(wchar_t)));
    memset(&mbs, 0, sizeof(mbstate_t));
    remain_bytes = 0;
    for (i = 0; i < end - (const unsigned char *)begin; i++) {
        if (remain_bytes == 0) {
            remain_bytes = mbrtowc(inputwcs + i, begin + i, end - (const unsigned char *)begin - i, &mbs);
            if (remain_bytes <= 1) {
                remain_bytes = 0;
                inputwcs[i] = (wchar_t)begin[i];
                mblen_buf[i] = 0;
            } else {
                mblen_buf[i] = remain_bytes;
                remain_bytes--;
            }
        } else {
            mblen_buf[i] = remain_bytes;
            inputwcs[i] = 0;
            remain_bytes--;
        }
    }
    mblen_buf[i] = 0;
    inputwcs[i] = 0;
}


CondTester, a patch instance with id 64:
Spawn 1 instances, now Total 65
Counter: 66
Batcher Size:65
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2875
--Src File: src/dfa.c
Fragment 0:
if (((__ctype_get_mb_cur_max()) > 1) && !(__abst_hole(s, trans, t, p, end, mblen_buf, inputwcs, buf_begin, buf_end, d, begin, backref, size, eol, sbit_init, eolbyte)))
    while ((t = trans[s]))
        {
            if (s == 0) {
                while (inputwcs[p - buf_begin] == 0 && mblen_buf[p - buf_begin] > 0 && p < buf_end)
                    ++p;
                if (p >= end) {
                    free(mblen_buf);
                    free(inputwcs);
                    return (size_t)-1;
                }
            }
            ;
            if (d->states[s].mbps.nelem == 0) {
                s = t[*p++];
                continue;
            }
            s = transit_state(d, s, &p);
            trans = d->trans;
        }
else
    while ((t = trans[s]))
        s = t[*p++];


CondTester, a patch instance with id 65:
Spawn 1 instances, now Total 66
Counter: 67
Batcher Size:66
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2875
--Src File: src/dfa.c
Fragment 0:
if (((__ctype_get_mb_cur_max()) > 1) || (__abst_hole(s, trans, t, p, end, mblen_buf, inputwcs, buf_begin, buf_end, d, begin, backref, size, eol, sbit_init, eolbyte)))
    while ((t = trans[s]))
        {
            if (s == 0) {
                while (inputwcs[p - buf_begin] == 0 && mblen_buf[p - buf_begin] > 0 && p < buf_end)
                    ++p;
                if (p >= end) {
                    free(mblen_buf);
                    free(inputwcs);
                    return (size_t)-1;
                }
            }
            ;
            if (d->states[s].mbps.nelem == 0) {
                s = t[*p++];
                continue;
            }
            s = transit_state(d, s, &p);
            trans = d->trans;
        }
else
    while ((t = trans[s]))
        s = t[*p++];


CondTester, a patch instance with id 66:
Spawn 1 instances, now Total 67
Counter: 68
Batcher Size:67
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2830
--Src File: src/dfa.c
Fragment 0:
if (((__ctype_get_mb_cur_max()) > 1) || (__abst_hole(d, begin, trans, buf_begin, size, p, end, buf_end, s, mblen_buf, inputwcs, eol, sbit_init, eolbyte, t, backref))) {
    int remain_bytes, i;
    buf_begin = (const unsigned char *)begin;
    buf_end = end;
    ((mblen_buf) = xmalloc((end - (const unsigned char *)begin + 2) * sizeof(unsigned char)));
    ((inputwcs) = xmalloc((end - (const unsigned char *)begin + 2) * sizeof(wchar_t)));
    memset(&mbs, 0, sizeof(mbstate_t));
    remain_bytes = 0;
    for (i = 0; i < end - (const unsigned char *)begin; i++) {
        if (remain_bytes == 0) {
            remain_bytes = mbrtowc(inputwcs + i, begin + i, end - (const unsigned char *)begin - i, &mbs);
            if (remain_bytes <= 1) {
                remain_bytes = 0;
                inputwcs[i] = (wchar_t)begin[i];
                mblen_buf[i] = 0;
            } else {
                mblen_buf[i] = remain_bytes;
                remain_bytes--;
            }
        } else {
            mblen_buf[i] = remain_bytes;
            inputwcs[i] = 0;
            remain_bytes--;
        }
    }
    mblen_buf[i] = 0;
    inputwcs[i] = 0;
}


CondTester, a patch instance with id 67:
Spawn 1 instances, now Total 68
Counter: 69
Batcher Size:68
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2821
--Src File: src/dfa.c
Fragment 0:
if ((!d->tralloc) && !(__abst_hole(d, d->tralloc, s, eol, begin, p, size, end, trans, sbit_init, d->trans, buf_begin, buf_end, eolbyte, mblen_buf, inputwcs, t, d->states, d->fails, d->success, backref, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->trcount, d->realtrans, d->musts)))
    build_state_zero(d);


CondTester, a patch instance with id 68:
Spawn 1 instances, now Total 69
Counter: 70
Batcher Size:69
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2821
--Src File: src/dfa.c
Fragment 0:
if ((!d->tralloc) || (__abst_hole(d, d->tralloc, s, eol, begin, p, size, end, trans, sbit_init, d->trans, buf_begin, buf_end, eolbyte, mblen_buf, inputwcs, t, d->states, d->fails, d->success, backref, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->trcount, d->realtrans, d->musts)))
    build_state_zero(d);


CondTester, a patch instance with id 69:
Spawn 1 instances, now Total 70
Counter: 71
Batcher Size:70
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:150
--Src File: src/dfa.c
Fragment 0:
if ((!r) || (__abst_hole(r, n, s)))
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));


CondTester, a patch instance with id 70:
Spawn 1 instances, now Total 71
Counter: 72
Batcher Size:71
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:293
--Src File: src/dfa.c
Fragment 0:
if (((dfa->cindex) >= (dfa->calloc)) && !(__abst_hole(dfa, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->charclasses, dfa->cindex, dfa->calloc, i, s, dfa->tokens, dfa->tindex, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts, dfa->tokens, dfa->tindex, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts))) {
    do 
        (dfa->calloc) *= 2;
    while ((dfa->cindex) >= (dfa->calloc));
    ((dfa->charclasses) = xrealloc((ptr_t)(dfa->charclasses), (dfa->calloc) * sizeof(charclass)));
}


CondTester, a patch instance with id 71:
Spawn 1 instances, now Total 72
Counter: 73
Batcher Size:72
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1055
--Src File: src/dfa.c
Fragment 0:
if ((c == '^') && !(__abst_hole(c, lexptr, lexleft, lasttok, invert, laststart, backslash, syntax_bits, c1, c2, eolbyte, hard_LC_COLLATE, case_fold, parens, minrep, maxrep, cur_mb_index, i))) {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    invert = 1;
} else
    invert = 0;


CondTester, a patch instance with id 72:
Spawn 1 instances, now Total 73
Counter: 74
Batcher Size:73
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2328
--Src File: src/dfa.c
Fragment 0:
{
    if ((trans[i] >= d->tralloc) && !(__abst_hole(d, trans, i, d->tralloc, s, d->realtrans, d->trans, d->fails, d->success, d->states, eolbyte, d->trcount, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->musts))) {
        int oldalloc = d->tralloc;
        while (trans[i] >= d->tralloc)
            d->tralloc *= 2;
        ((d->realtrans) = xrealloc((ptr_t)(d->realtrans), (d->tralloc + 1) * sizeof(int *)));
        d->trans = d->realtrans + 1;
        ((d->fails) = xrealloc((ptr_t)(d->fails), (d->tralloc) * sizeof(int *)));
        ((d->success) = xrealloc((ptr_t)(d->success), (d->tralloc) * sizeof(int)));
        while (oldalloc < d->tralloc)
            {
                d->trans[oldalloc] = ((void *)0);
                d->fails[oldalloc++] = ((void *)0);
            }
    }
}


CondTester, a patch instance with id 73:
Spawn 1 instances, now Total 74
Counter: 75
Batcher Size:74
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2811
--Src File: src/dfa.c
Fragment 0:
if ((!sbit_init) && !(__abst_hole(sbit_init, eolbyte, eol, d, s, begin, p, size, end, trans, buf_begin, buf_end, mblen_buf, inputwcs, t, backref))) {
    int i;
    sbit_init = 1;
    for (i = 0; i < (1 << 8); ++i) 
        sbit[i] = ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_')) ? 2 : 1;
    sbit[eol] = 4;
}


CondTester, a patch instance with id 74:
Spawn 1 instances, now Total 75
Counter: 76
Batcher Size:75
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2811
--Src File: src/dfa.c
Fragment 0:
if ((!sbit_init) || (__abst_hole(sbit_init, eolbyte, eol, d, s, begin, p, size, end, trans, buf_begin, buf_end, mblen_buf, inputwcs, t, backref))) {
    int i;
    sbit_init = 1;
    for (i = 0; i < (1 << 8); ++i) 
        sbit[i] = ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_')) ? 2 : 1;
    sbit[eol] = 4;
}


CondTester, a patch instance with id 75:
Spawn 1 instances, now Total 76
Counter: 77
Batcher Size:76
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2348
--Src File: src/dfa.c
Fragment 0:
if ((((*d).states[s].constraint)) && !(__abst_hole(s, d, (*d).states, (*d).states[s].constraint, trans, d->fails, eolbyte, d->trans, d->tralloc, d->success, d->realtrans, i, d->states, d->trcount, (*d).charclasses, (*d).cindex, (*d).calloc, (*d).tokens, (*d).tindex, (*d).talloc, (*d).depth, (*d).nleaves, (*d).nregexps, (*d).nmultibyte_prop, (*d).multibyte_prop, (*d).mbcsets, (*d).nmbcsets, (*d).mbcsets_alloc, (*d).sindex, (*d).salloc, (*d).follows, (*d).searchflag, (*d).tralloc, (*d).trcount, (*d).trans, (*d).realtrans, (*d).fails, (*d).success, (*d).musts, (*d).states[s].hash, (*d).states[s].newline, (*d).states[s].letter, (*d).states[s].backref, (*d).states[s].first_end, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->musts)))
    d->fails[s] = trans;
else
    d->trans[s] = trans;


CondTester, a patch instance with id 76:
Spawn 1 instances, now Total 77
Counter: 78
Batcher Size:77
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2348
--Src File: src/dfa.c
Fragment 0:
if ((((*d).states[s].constraint)) || (__abst_hole(s, d, (*d).states, (*d).states[s].constraint, trans, d->fails, eolbyte, d->trans, d->tralloc, d->success, d->realtrans, i, d->states, d->trcount, (*d).charclasses, (*d).cindex, (*d).calloc, (*d).tokens, (*d).tindex, (*d).talloc, (*d).depth, (*d).nleaves, (*d).nregexps, (*d).nmultibyte_prop, (*d).multibyte_prop, (*d).mbcsets, (*d).nmbcsets, (*d).mbcsets_alloc, (*d).sindex, (*d).salloc, (*d).follows, (*d).searchflag, (*d).tralloc, (*d).trcount, (*d).trans, (*d).realtrans, (*d).fails, (*d).success, (*d).musts, (*d).states[s].hash, (*d).states[s].newline, (*d).states[s].letter, (*d).states[s].backref, (*d).states[s].first_end, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->musts)))
    d->fails[s] = trans;
else
    d->trans[s] = trans;


CondTester, a patch instance with id 77:
Spawn 1 instances, now Total 78
Counter: 79
Batcher Size:78
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1055
--Src File: src/dfa.c
Fragment 0:
if ((c == '^') || (__abst_hole(c, lexptr, lexleft, lasttok, invert, laststart, backslash, syntax_bits, c1, c2, eolbyte, hard_LC_COLLATE, case_fold, parens, minrep, maxrep, cur_mb_index, i))) {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    invert = 1;
} else
    invert = 0;


CondTester, a patch instance with id 78:
Spawn 1 instances, now Total 79
Counter: 80
Batcher Size:79
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2314
--Src File: src/dfa.c
Fragment 0:
if ((((((*d).states[s].constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && (((*d).states[s].constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((1) ? 1 : 0))))) && !(__abst_hole(s, d, d->states[s].newline, d->states[s].letter, (*d).states, (*d).states[s].constraint, d->states, d->success, trans, d->trcount, i, d->fails, d->tralloc, d->trans, d->realtrans, eolbyte, d->states[s].hash, d->states[s].backref, d->states[s].constraint, d->states[s].first_end, (*d).charclasses, (*d).cindex, (*d).calloc, (*d).tokens, (*d).tindex, (*d).talloc, (*d).depth, (*d).nleaves, (*d).nregexps, (*d).nmultibyte_prop, (*d).multibyte_prop, (*d).mbcsets, (*d).nmbcsets, (*d).mbcsets_alloc, (*d).sindex, (*d).salloc, (*d).follows, (*d).searchflag, (*d).tralloc, (*d).trcount, (*d).trans, (*d).realtrans, (*d).fails, (*d).success, (*d).musts, (*d).states[s].hash, (*d).states[s].newline, (*d).states[s].letter, (*d).states[s].backref, (*d).states[s].first_end, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->musts)))
    d->success[s] |= 2;


CondTester, a patch instance with id 79:
Spawn 1 instances, now Total 80
Counter: 81
Batcher Size:80
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2314
--Src File: src/dfa.c
Fragment 0:
if ((((((*d).states[s].constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && (((*d).states[s].constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((1) ? 1 : 0))))) || (__abst_hole(s, d, d->states[s].newline, d->states[s].letter, (*d).states, (*d).states[s].constraint, d->states, d->success, trans, d->trcount, i, d->fails, d->tralloc, d->trans, d->realtrans, eolbyte, d->states[s].hash, d->states[s].backref, d->states[s].constraint, d->states[s].first_end, (*d).charclasses, (*d).cindex, (*d).calloc, (*d).tokens, (*d).tindex, (*d).talloc, (*d).depth, (*d).nleaves, (*d).nregexps, (*d).nmultibyte_prop, (*d).multibyte_prop, (*d).mbcsets, (*d).nmbcsets, (*d).mbcsets_alloc, (*d).sindex, (*d).salloc, (*d).follows, (*d).searchflag, (*d).tralloc, (*d).trcount, (*d).trans, (*d).realtrans, (*d).fails, (*d).success, (*d).musts, (*d).states[s].hash, (*d).states[s].newline, (*d).states[s].letter, (*d).states[s].backref, (*d).states[s].first_end, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->musts)))
    d->success[s] |= 2;


CondTester, a patch instance with id 80:
Spawn 1 instances, now Total 81
Counter: 82
Batcher Size:81
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2317
--Src File: src/dfa.c
Fragment 0:
if ((((((*d).states[s].constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && (((*d).states[s].constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((0) ? 1 : 0))))) && !(__abst_hole(s, d, d->states[s].newline, d->states[s].letter, (*d).states, (*d).states[s].constraint, d->states, d->success, trans, i, d->trcount, d->tralloc, d->fails, d->realtrans, d->trans, eolbyte, d->states[s].hash, d->states[s].backref, d->states[s].constraint, d->states[s].first_end, (*d).charclasses, (*d).cindex, (*d).calloc, (*d).tokens, (*d).tindex, (*d).talloc, (*d).depth, (*d).nleaves, (*d).nregexps, (*d).nmultibyte_prop, (*d).multibyte_prop, (*d).mbcsets, (*d).nmbcsets, (*d).mbcsets_alloc, (*d).sindex, (*d).salloc, (*d).follows, (*d).searchflag, (*d).tralloc, (*d).trcount, (*d).trans, (*d).realtrans, (*d).fails, (*d).success, (*d).musts, (*d).states[s].hash, (*d).states[s].newline, (*d).states[s].letter, (*d).states[s].backref, (*d).states[s].first_end, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->musts)))
    d->success[s] |= 1;


CondTester, a patch instance with id 81:
Spawn 1 instances, now Total 82
Counter: 83
Batcher Size:82
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2317
--Src File: src/dfa.c
Fragment 0:
if ((((((*d).states[s].constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && (((*d).states[s].constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((0) ? 1 : 0))))) || (__abst_hole(s, d, d->states[s].newline, d->states[s].letter, (*d).states, (*d).states[s].constraint, d->states, d->success, trans, i, d->trcount, d->tralloc, d->fails, d->realtrans, d->trans, eolbyte, d->states[s].hash, d->states[s].backref, d->states[s].constraint, d->states[s].first_end, (*d).charclasses, (*d).cindex, (*d).calloc, (*d).tokens, (*d).tindex, (*d).talloc, (*d).depth, (*d).nleaves, (*d).nregexps, (*d).nmultibyte_prop, (*d).multibyte_prop, (*d).mbcsets, (*d).nmbcsets, (*d).mbcsets_alloc, (*d).sindex, (*d).salloc, (*d).follows, (*d).searchflag, (*d).tralloc, (*d).trcount, (*d).trans, (*d).realtrans, (*d).fails, (*d).success, (*d).musts, (*d).states[s].hash, (*d).states[s].newline, (*d).states[s].letter, (*d).states[s].backref, (*d).states[s].first_end, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->musts)))
    d->success[s] |= 1;


CondTester, a patch instance with id 82:
Spawn 1 instances, now Total 83
Counter: 84
Batcher Size:83
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1274
--Src File: src/dfa.c
Fragment 0:
if (((__ctype_get_mb_cur_max()) > 1) && !(__abst_hole(cur_mb_index, tok))) {
    while (cur_mb_index > 1 && tok >= 0 && tok < (1 << 8))
        {
            addtok(tok);
            addtok(CAT);
            tok = lex();
        }
}


CondTester, a patch instance with id 83:
Spawn 1 instances, now Total 84
Counter: 85
Batcher Size:84
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2291
--Src File: src/dfa.c
Fragment 0:
if ((d->trcount >= 1024) && !(__abst_hole(d, d->trcount, i, d->tralloc, d->trans, d->fails, s, d->success, d->states, trans, d->realtrans, eolbyte, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->musts))) {
    for (i = 0; i < d->tralloc; ++i) 
        if (d->trans[i]) {
            free((ptr_t)d->trans[i]);
            d->trans[i] = ((void *)0);
        } else if (d->fails[i]) {
            free((ptr_t)d->fails[i]);
            d->fails[i] = ((void *)0);
        }
    d->trcount = 0;
}


CondTester, a patch instance with id 84:
Spawn 1 instances, now Total 85
Counter: 86
Batcher Size:85
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2311
--Src File: src/dfa.c
Fragment 0:
if ((((((*d).states[s].constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && (((*d).states[s].constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((0) ? 1 : 0))))) && !(__abst_hole(s, d, d->states[s].newline, d->states[s].letter, (*d).states, (*d).states[s].constraint, d->states, d->success, d->trcount, i, d->fails, trans, d->trans, d->tralloc, d->realtrans, eolbyte, d->states[s].hash, d->states[s].backref, d->states[s].constraint, d->states[s].first_end, (*d).charclasses, (*d).cindex, (*d).calloc, (*d).tokens, (*d).tindex, (*d).talloc, (*d).depth, (*d).nleaves, (*d).nregexps, (*d).nmultibyte_prop, (*d).multibyte_prop, (*d).mbcsets, (*d).nmbcsets, (*d).mbcsets_alloc, (*d).sindex, (*d).salloc, (*d).follows, (*d).searchflag, (*d).tralloc, (*d).trcount, (*d).trans, (*d).realtrans, (*d).fails, (*d).success, (*d).musts, (*d).states[s].hash, (*d).states[s].newline, (*d).states[s].letter, (*d).states[s].backref, (*d).states[s].first_end, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->musts)))
    d->success[s] |= 4;


CondTester, a patch instance with id 85:
Spawn 1 instances, now Total 86
Counter: 87
Batcher Size:86
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2311
--Src File: src/dfa.c
Fragment 0:
if ((((((*d).states[s].constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && (((*d).states[s].constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((0) ? 1 : 0))))) || (__abst_hole(s, d, d->states[s].newline, d->states[s].letter, (*d).states, (*d).states[s].constraint, d->states, d->success, d->trcount, i, d->fails, trans, d->trans, d->tralloc, d->realtrans, eolbyte, d->states[s].hash, d->states[s].backref, d->states[s].constraint, d->states[s].first_end, (*d).charclasses, (*d).cindex, (*d).calloc, (*d).tokens, (*d).tindex, (*d).talloc, (*d).depth, (*d).nleaves, (*d).nregexps, (*d).nmultibyte_prop, (*d).multibyte_prop, (*d).mbcsets, (*d).nmbcsets, (*d).mbcsets_alloc, (*d).sindex, (*d).salloc, (*d).follows, (*d).searchflag, (*d).tralloc, (*d).trcount, (*d).trans, (*d).realtrans, (*d).fails, (*d).success, (*d).musts, (*d).states[s].hash, (*d).states[s].newline, (*d).states[s].letter, (*d).states[s].backref, (*d).states[s].first_end, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->musts)))
    d->success[s] |= 4;


CondTester, a patch instance with id 86:
Spawn 1 instances, now Total 87
Counter: 88
Batcher Size:87
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2291
--Src File: src/dfa.c
Fragment 0:
if ((d->trcount >= 1024) || (__abst_hole(d, d->trcount, i, d->tralloc, d->trans, d->fails, s, d->success, d->states, trans, d->realtrans, eolbyte, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->follows, d->searchflag, d->musts))) {
    for (i = 0; i < d->tralloc; ++i) 
        if (d->trans[i]) {
            free((ptr_t)d->trans[i]);
            d->trans[i] = ((void *)0);
        } else if (d->fails[i]) {
            free((ptr_t)d->fails[i]);
            d->fails[i] = ((void *)0);
        }
    d->trcount = 0;
}


CondTester, a patch instance with id 87:
Spawn 1 instances, now Total 88
Counter: 89
Batcher Size:88
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1274
--Src File: src/dfa.c
Fragment 0:
if (((__ctype_get_mb_cur_max()) > 1) || (__abst_hole(cur_mb_index, tok))) {
    while (cur_mb_index > 1 && tok >= 0 && tok < (1 << 8))
        {
            addtok(tok);
            addtok(CAT);
            tok = lex();
        }
}


CondTester, a patch instance with id 88:
Spawn 1 instances, now Total 89
Counter: 90
Batcher Size:89
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1257
--Src File: src/dfa.c
Fragment 0:
if (((tok >= 0 && tok < (1 << 8)) || tok >= CSET || tok == BACKREF || tok == BEGLINE || tok == ENDLINE || tok == BEGWORD || tok == ANYCHAR || tok == MBCSET || tok == ENDWORD || tok == LIMWORD || tok == NOTLIMWORD) && !(__abst_hole(tok, cur_mb_index))) {
    addtok(tok);
    tok = lex();
    if ((__ctype_get_mb_cur_max()) > 1) {
        while (cur_mb_index > 1 && tok >= 0 && tok < (1 << 8))
            {
                addtok(tok);
                addtok(CAT);
                tok = lex();
            }
    }
} else if (tok == CRANGE) {
    charclass ccl;
    zeroset(ccl);
    notset(ccl);
    addtok(CSET + charclass_index(ccl));
    addtok(BACKREF);
    addtok(CAT);
    tok = lex();
} else if (tok == LPAREN) {
    tok = lex();
    regexp(0);
    if (tok != RPAREN)
        dfaerror(dcgettext(((void *)0), "Unbalanced (", 5));
    tok = lex();
} else
    addtok(EMPTY);


CondTester, a patch instance with id 89:
Spawn 1 instances, now Total 90
Counter: 91
Batcher Size:90
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1899
--Src File: src/dfa.c
Fragment 0:
{
    if ((d->tokens[i] < (1 << 8) || d->tokens[i] == BACKREF || d->tokens[i] == ANYCHAR || d->tokens[i] == MBCSET || d->tokens[i] >= CSET) && !(__abst_hole(d, i, d->tokens, d->tindex, d->follows, nfirstpos, firstpos, wants_newline, nalloc, d->salloc, d->sindex, d->states, lastpos, o_nullable, nlastpos, o_nfirst, o_firstpos, o_nlast, nullable, o_lastpos, j, pos, d->nleaves, d->depth, searchflag, d->searchflag, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts))) {
        copy(&d->follows[i], &merged);
        epsclosure(&merged, d);
        if (d->follows[i].nelem < merged.nelem)
            ((d->follows[i].elems) = xrealloc((ptr_t)(d->follows[i].elems), (merged.nelem) * sizeof(position)));
        copy(&merged, &d->follows[i]);
    }
}


CondTester, a patch instance with id 90:
Spawn 1 instances, now Total 91
Counter: 92
Batcher Size:91
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1257
--Src File: src/dfa.c
Fragment 0:
if (((tok >= 0 && tok < (1 << 8)) || tok >= CSET || tok == BACKREF || tok == BEGLINE || tok == ENDLINE || tok == BEGWORD || tok == ANYCHAR || tok == MBCSET || tok == ENDWORD || tok == LIMWORD || tok == NOTLIMWORD) || (__abst_hole(tok, cur_mb_index))) {
    addtok(tok);
    tok = lex();
    if ((__ctype_get_mb_cur_max()) > 1) {
        while (cur_mb_index > 1 && tok >= 0 && tok < (1 << 8))
            {
                addtok(tok);
                addtok(CAT);
                tok = lex();
            }
    }
} else if (tok == CRANGE) {
    charclass ccl;
    zeroset(ccl);
    notset(ccl);
    addtok(CSET + charclass_index(ccl));
    addtok(BACKREF);
    addtok(CAT);
    tok = lex();
} else if (tok == LPAREN) {
    tok = lex();
    regexp(0);
    if (tok != RPAREN)
        dfaerror(dcgettext(((void *)0), "Unbalanced (", 5));
    tok = lex();
} else
    addtok(EMPTY);


CondTester, a patch instance with id 91:
Spawn 1 instances, now Total 92
Counter: 93
Batcher Size:92
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1919
--Src File: src/dfa.c
Fragment 0:
if ((d->follows[i].nelem < merged.nelem) && !(__abst_hole(d, i, d->follows[i].nelem, d->follows, merged.nelem, d->follows[i].elems, nfirstpos, firstpos, wants_newline, d->tokens, merged.elems, d->salloc, d->sindex, d->tindex, d->states, o_nullable, o_nfirst, o_firstpos, o_nlast, o_lastpos, nalloc, lastpos, nlastpos, nullable, j, pos, d->nleaves, d->depth, searchflag, d->searchflag, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    ((d->follows[i].elems) = xrealloc((ptr_t)(d->follows[i].elems), (merged.nelem) * sizeof(position)));


CondTester, a patch instance with id 92:
Spawn 1 instances, now Total 93
Counter: 94
Batcher Size:93
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1919
--Src File: src/dfa.c
Fragment 0:
if ((d->follows[i].nelem < merged.nelem) || (__abst_hole(d, i, d->follows[i].nelem, d->follows, merged.nelem, d->follows[i].elems, nfirstpos, firstpos, wants_newline, d->tokens, merged.elems, d->salloc, d->sindex, d->tindex, d->states, o_nullable, o_nfirst, o_firstpos, o_nlast, o_lastpos, nalloc, lastpos, nlastpos, nullable, j, pos, d->nleaves, d->depth, searchflag, d->searchflag, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    ((d->follows[i].elems) = xrealloc((ptr_t)(d->follows[i].elems), (merged.nelem) * sizeof(position)));


CondTester, a patch instance with id 93:
Spawn 1 instances, now Total 94
Counter: 95
Batcher Size:94
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:293
--Src File: src/dfa.c
Fragment 0:
if (((dfa->cindex) >= (dfa->calloc)) || (__abst_hole(dfa, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->charclasses, dfa->cindex, dfa->calloc, i, s, dfa->tokens, dfa->tindex, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts, dfa->tokens, dfa->tindex, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts))) {
    do 
        (dfa->calloc) *= 2;
    while ((dfa->cindex) >= (dfa->calloc));
    ((dfa->charclasses) = xrealloc((ptr_t)(dfa->charclasses), (dfa->calloc) * sizeof(charclass)));
}


CondTester, a patch instance with id 94:
Spawn 1 instances, now Total 95
Counter: 96
Batcher Size:95
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1214
--Src File: src/dfa.c
Fragment 0:
if ((depth > dfa->depth) && !(__abst_hole(dfa, depth, dfa->depth, dfa->depth, dfa->nleaves, dfa->nleaves, t, dfa->tokens, dfa->tindex, dfa->tokens, dfa->tindex, dfa->talloc, dfa->talloc, dfa->multibyte_prop, dfa->multibyte_prop, cur_mb_len, cur_mb_index, dfa->nmbcsets, dfa->nmbcsets, dfa->nmultibyte_prop, dfa->nmultibyte_prop, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts)))
    dfa->depth = depth;


CondTester, a patch instance with id 95:
Spawn 1 instances, now Total 96
Counter: 97
Batcher Size:96
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2263
--Src File: src/dfa.c
Fragment 0:
{
    if ((c < (1 << 8)) && !(__abst_hole(c, trans, state, state_letter, state_newline, eolbyte, ngrps, i, j, k, d, wants_letter, wants_newline, next_isnt_1st_byte, matchesf, leftoversf, intersectf, s, initialized)))
        trans[c] = state;
}


CondTester, a patch instance with id 96:
Spawn 1 instances, now Total 97
Counter: 98
Batcher Size:97
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2263
--Src File: src/dfa.c
Fragment 0:
{
    if ((c < (1 << 8)) || (__abst_hole(c, trans, state, state_letter, state_newline, eolbyte, ngrps, i, j, k, d, wants_letter, wants_newline, next_isnt_1st_byte, matchesf, leftoversf, intersectf, s, initialized)))
        trans[c] = state;
}


CondTester, a patch instance with id 97:
Spawn 1 instances, now Total 98
Counter: 99
Batcher Size:98
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2261
--Src File: src/dfa.c
Fragment 0:
{
    if (((((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalnum) || (c) == '_')) && !(__abst_hole(c, trans, state_newline, state_letter, eolbyte, state, j, k, i, ngrps, d, wants_letter, wants_newline, next_isnt_1st_byte, matchesf, leftoversf, intersectf, s, initialized)))
        trans[c] = state_letter;
    else if (c < (1 << 8))
        trans[c] = state;
}


CondTester, a patch instance with id 98:
Spawn 1 instances, now Total 99
Counter: 100
Batcher Size:99
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2261
--Src File: src/dfa.c
Fragment 0:
{
    if (((((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalnum) || (c) == '_')) || (__abst_hole(c, trans, state_newline, state_letter, eolbyte, state, j, k, i, ngrps, d, wants_letter, wants_newline, next_isnt_1st_byte, matchesf, leftoversf, intersectf, s, initialized)))
        trans[c] = state_letter;
    else if (c < (1 << 8))
        trans[c] = state;
}


CondTester, a patch instance with id 99:
Spawn 1 instances, now Total 100
Counter: 101
Batcher Size:100
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2259
--Src File: src/dfa.c
Fragment 0:
if ((c == eolbyte) && !(__abst_hole(c, eolbyte, trans, state_newline, j, k, state_letter, i, state, ngrps, d, wants_letter, wants_newline, next_isnt_1st_byte, matchesf, leftoversf, intersectf, s, initialized)))
    trans[c] = state_newline;
else if ((((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalnum) || (c) == '_'))
    trans[c] = state_letter;
else if (c < (1 << 8))
    trans[c] = state;


CondTester, a patch instance with id 100:
Spawn 1 instances, now Total 101
Counter: 102
Batcher Size:101
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2259
--Src File: src/dfa.c
Fragment 0:
if ((c == eolbyte) || (__abst_hole(c, eolbyte, trans, state_newline, j, k, state_letter, i, state, ngrps, d, wants_letter, wants_newline, next_isnt_1st_byte, matchesf, leftoversf, intersectf, s, initialized)))
    trans[c] = state_newline;
else if ((((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalnum) || (c) == '_'))
    trans[c] = state_letter;
else if (c < (1 << 8))
    trans[c] = state;


CondTester, a patch instance with id 101:
Spawn 1 instances, now Total 102
Counter: 103
Batcher Size:102
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2255
--Src File: src/dfa.c
Fragment 0:
{
    if ((labels[i][j] & 1 << k) && !(__abst_hole(i, j, k, eolbyte, trans, state, state_newline, state_letter, d, wants_letter, wants_newline, ngrps, next_isnt_1st_byte, matchesf, leftoversf, intersectf, s, initialized))) {
        int c = j * (8 * sizeof(int)) + k;
        if (c == eolbyte)
            trans[c] = state_newline;
        else if ((((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalnum) || (c) == '_'))
            trans[c] = state_letter;
        else if (c < (1 << 8))
            trans[c] = state;
    }
}


CondTester, a patch instance with id 102:
Spawn 1 instances, now Total 103
Counter: 104
Batcher Size:103
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1214
--Src File: src/dfa.c
Fragment 0:
if ((depth > dfa->depth) || (__abst_hole(dfa, depth, dfa->depth, dfa->depth, dfa->nleaves, dfa->nleaves, t, dfa->tokens, dfa->tindex, dfa->tokens, dfa->tindex, dfa->talloc, dfa->talloc, dfa->multibyte_prop, dfa->multibyte_prop, cur_mb_len, cur_mb_index, dfa->nmbcsets, dfa->nmbcsets, dfa->nmultibyte_prop, dfa->nmultibyte_prop, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts)))
    dfa->depth = depth;


CondTester, a patch instance with id 103:
Spawn 1 instances, now Total 104
Counter: 105
Batcher Size:104
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1589
--Src File: src/dfa.c
Fragment 0:
{
    if ((d->tokens[s->elems[j].index] == BACKREF) && !(__abst_hole(d, s, j, s->elems, s->elems[j].index, d->tokens, i, d->states, constraint, newline, letter, d->sindex, s->elems[j].constraint, s->nelem, hash, d->salloc, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts))) {
        d->states[i].constraint = 255;
        d->states[i].backref = 1;
    }
}


CondTester, a patch instance with id 104:
Spawn 1 instances, now Total 105
Counter: 106
Batcher Size:105
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1589
--Src File: src/dfa.c
Fragment 0:
{
    if ((d->tokens[s->elems[j].index] == BACKREF) || (__abst_hole(d, s, j, s->elems, s->elems[j].index, d->tokens, i, d->states, constraint, newline, letter, d->sindex, s->elems[j].constraint, s->nelem, hash, d->salloc, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts))) {
        d->states[i].constraint = 255;
        d->states[i].backref = 1;
    }
}


CondTester, a patch instance with id 105:
Spawn 1 instances, now Total 106
Counter: 107
Batcher Size:106
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1578
--Src File: src/dfa.c
Fragment 0:
{
    if ((d->tokens[s->elems[j].index] < 0) && !(__abst_hole(d, s, j, s->elems, s->elems[j].index, d->tokens, s->nelem, constraint, s->elems[j].constraint, newline, letter, i, d->states, hash, d->sindex, d->salloc, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts))) {
        constraint = s->elems[j].constraint;
        if ((((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))))
            d->states[i].constraint |= constraint;
        if (!d->states[i].first_end)
            d->states[i].first_end = d->tokens[s->elems[j].index];
    } else if (d->tokens[s->elems[j].index] == BACKREF) {
        d->states[i].constraint = 255;
        d->states[i].backref = 1;
    }
}


CondTester, a patch instance with id 106:
Spawn 1 instances, now Total 107
Counter: 108
Batcher Size:107
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1578
--Src File: src/dfa.c
Fragment 0:
{
    if ((d->tokens[s->elems[j].index] < 0) || (__abst_hole(d, s, j, s->elems, s->elems[j].index, d->tokens, s->nelem, constraint, s->elems[j].constraint, newline, letter, i, d->states, hash, d->sindex, d->salloc, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts))) {
        constraint = s->elems[j].constraint;
        if ((((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))))
            d->states[i].constraint |= constraint;
        if (!d->states[i].first_end)
            d->states[i].first_end = d->tokens[s->elems[j].index];
    } else if (d->tokens[s->elems[j].index] == BACKREF) {
        d->states[i].constraint = 255;
        d->states[i].backref = 1;
    }
}


CondTester, a patch instance with id 107:
Spawn 1 instances, now Total 108
Counter: 109
Batcher Size:108
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1581
--Src File: src/dfa.c
Fragment 0:
if (((((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0))))) && !(__abst_hole(newline, letter, constraint, d, i, d->states[i].constraint, d->states, d->states[i].first_end, s, j, d->tokens, d->states[i].backref, d->sindex, d->states[i].letter, d->states[i].newline, hash, d->states[i].hash, d->salloc, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    d->states[i].constraint |= constraint;


CondTester, a patch instance with id 108:
Spawn 1 instances, now Total 109
Counter: 110
Batcher Size:109
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1586
--Src File: src/dfa.c
Fragment 0:
if ((!d->states[i].first_end) && !(__abst_hole(d, i, d->states[i].first_end, d->states, s, constraint, j, s->elems, s->elems[j].index, d->states[i].constraint, d->tokens, newline, letter, s->elems[j].constraint, d->states[i].backref, s->nelem, d->sindex, d->states[i].letter, d->states[i].newline, hash, d->states[i].hash, d->salloc, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    d->states[i].first_end = d->tokens[s->elems[j].index];


CondTester, a patch instance with id 109:
Spawn 1 instances, now Total 110
Counter: 111
Batcher Size:110
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1586
--Src File: src/dfa.c
Fragment 0:
if ((!d->states[i].first_end) || (__abst_hole(d, i, d->states[i].first_end, d->states, s, constraint, j, s->elems, s->elems[j].index, d->states[i].constraint, d->tokens, newline, letter, s->elems[j].constraint, d->states[i].backref, s->nelem, d->sindex, d->states[i].letter, d->states[i].newline, hash, d->states[i].hash, d->salloc, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    d->states[i].first_end = d->tokens[s->elems[j].index];


CondTester, a patch instance with id 110:
Spawn 1 instances, now Total 111
Counter: 112
Batcher Size:111
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2247
--Src File: src/dfa.c
Fragment 0:
if ((wants_letter) && !(__abst_hole(wants_letter, d, state, state_newline, state_letter, wants_newline, j, k, i, follows.elems, follows.nelem, eolbyte, trans, ngrps, d->states, next_isnt_1st_byte, d->searchflag, d->multibyte_prop, d->follows, d->nleaves, matchesf, leftoversf, intersectf, d->tokens, s, d->charclasses, initialized, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    state_letter = state_index(d, &follows, 0, 1);
else
    state_letter = state;


CondTester, a patch instance with id 111:
Spawn 1 instances, now Total 112
Counter: 113
Batcher Size:112
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2247
--Src File: src/dfa.c
Fragment 0:
if ((wants_letter) || (__abst_hole(wants_letter, d, state, state_newline, state_letter, wants_newline, j, k, i, follows.elems, follows.nelem, eolbyte, trans, ngrps, d->states, next_isnt_1st_byte, d->searchflag, d->multibyte_prop, d->follows, d->nleaves, matchesf, leftoversf, intersectf, d->tokens, s, d->charclasses, initialized, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    state_letter = state_index(d, &follows, 0, 1);
else
    state_letter = state;


CondTester, a patch instance with id 112:
Spawn 1 instances, now Total 113
Counter: 114
Batcher Size:113
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2243
--Src File: src/dfa.c
Fragment 0:
if ((wants_newline) && !(__abst_hole(wants_newline, d, state, state_newline, wants_letter, state_letter, j, follows.elems, follows.nelem, i, k, eolbyte, trans, d->states, ngrps, next_isnt_1st_byte, d->searchflag, d->multibyte_prop, d->follows, d->nleaves, matchesf, leftoversf, intersectf, d->tokens, s, d->charclasses, initialized, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    state_newline = state_index(d, &follows, 1, 0);
else
    state_newline = state;


CondTester, a patch instance with id 113:
Spawn 1 instances, now Total 114
Counter: 115
Batcher Size:114
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2243
--Src File: src/dfa.c
Fragment 0:
if ((wants_newline) || (__abst_hole(wants_newline, d, state, state_newline, wants_letter, state_letter, j, follows.elems, follows.nelem, i, k, eolbyte, trans, d->states, ngrps, next_isnt_1st_byte, d->searchflag, d->multibyte_prop, d->follows, d->nleaves, matchesf, leftoversf, intersectf, d->tokens, s, d->charclasses, initialized, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    state_newline = state_index(d, &follows, 1, 0);
else
    state_newline = state;


CondTester, a patch instance with id 114:
Spawn 1 instances, now Total 115
Counter: 116
Batcher Size:115
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1581
--Src File: src/dfa.c
Fragment 0:
if (((((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0))))) || (__abst_hole(newline, letter, constraint, d, i, d->states[i].constraint, d->states, d->states[i].first_end, s, j, d->tokens, d->states[i].backref, d->sindex, d->states[i].letter, d->states[i].newline, hash, d->states[i].hash, d->salloc, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    d->states[i].constraint |= constraint;


CondTester, a patch instance with id 115:
Spawn 1 instances, now Total 116
Counter: 117
Batcher Size:116
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2236
--Src File: src/dfa.c
Fragment 0:
if ((j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int)))) && !(__abst_hole(j, follows.nelem, i, follows.elems, wants_letter, d, state, wants_newline, state_newline, eolbyte, state_letter, next_isnt_1st_byte, k, trans, ngrps, matchesf, leftoversf, intersectf, s, initialized)))
    for (j = 0; j < follows.nelem; ++j) 
        if ((((follows.elems[j].constraint) & 12) >> 2 != ((follows.elems[j].constraint) & 3)))
            wants_letter = 1;


CondTester, a patch instance with id 116:
Spawn 1 instances, now Total 117
Counter: 118
Batcher Size:117
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2236
--Src File: src/dfa.c
Fragment 0:
if ((j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int)))) || (__abst_hole(j, follows.nelem, i, follows.elems, wants_letter, d, state, wants_newline, state_newline, eolbyte, state_letter, next_isnt_1st_byte, k, trans, ngrps, matchesf, leftoversf, intersectf, s, initialized)))
    for (j = 0; j < follows.nelem; ++j) 
        if ((((follows.elems[j].constraint) & 12) >> 2 != ((follows.elems[j].constraint) & 3)))
            wants_letter = 1;


CondTester, a patch instance with id 117:
Spawn 1 instances, now Total 118
Counter: 119
Batcher Size:118
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2234
--Src File: src/dfa.c
Fragment 0:
{
    if ((labels[i][j] & letters[j]) && !(__abst_hole(i, j, wants_letter, wants_newline, eolbyte, d, state, state_newline, state_letter, next_isnt_1st_byte, k, trans, ngrps, matchesf, leftoversf, intersectf, s, initialized)))
        break;
}


CondTester, a patch instance with id 118:
Spawn 1 instances, now Total 119
Counter: 120
Batcher Size:119
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:172
--Src File: src/dfa.c
Fragment 0:
if ((!r) && !(__abst_hole(r, p, n)))
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));


CondTester, a patch instance with id 119:
Spawn 1 instances, now Total 120
Counter: 121
Batcher Size:120
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:172
--Src File: src/dfa.c
Fragment 0:
if ((!r) || (__abst_hole(r, p, n)))
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));


CondTester, a patch instance with id 120:
Spawn 1 instances, now Total 121
Counter: 122
Batcher Size:121
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1173
--Src File: src/dfa.c
Fragment 0:
if (((__ctype_get_mb_cur_max()) > 1) && !(__abst_hole(dfa, t, cur_mb_len, cur_mb_index, depth))) {
    if ((dfa->tindex) >= (dfa->nmultibyte_prop)) {
        do 
            (dfa->nmultibyte_prop) *= 2;
        while ((dfa->tindex) >= (dfa->nmultibyte_prop));
        ((dfa->multibyte_prop) = xrealloc((ptr_t)(dfa->multibyte_prop), (dfa->nmultibyte_prop) * sizeof(int)));
    }
    ;
    if (t == MBCSET)
        dfa->multibyte_prop[dfa->tindex] = ((dfa->nmbcsets - 1) << 2) + 3;
    else if (t < (1 << 8))
        dfa->multibyte_prop[dfa->tindex] = (cur_mb_len == 1) ? 3 : (((cur_mb_index == 1) ? 1 : 0) + ((cur_mb_index == cur_mb_len) ? 2 : 0));
    else
        dfa->multibyte_prop[dfa->tindex] = 3;
}


CondTester, a patch instance with id 121:
Spawn 1 instances, now Total 122
Counter: 123
Batcher Size:122
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1192
--Src File: src/dfa.c
Fragment 0:
if (((dfa->tindex) >= (dfa->talloc)) && !(__abst_hole(dfa, dfa->tokens, dfa->tindex, dfa->talloc, dfa->tokens, dfa->tindex, dfa->talloc, t, dfa->multibyte_prop, dfa->multibyte_prop, cur_mb_len, cur_mb_index, depth, dfa->nmbcsets, dfa->nmbcsets, dfa->nleaves, dfa->nmultibyte_prop, dfa->nleaves, dfa->nmultibyte_prop, dfa->depth, dfa->depth, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts))) {
    do 
        (dfa->talloc) *= 2;
    while ((dfa->tindex) >= (dfa->talloc));
    ((dfa->tokens) = xrealloc((ptr_t)(dfa->tokens), (dfa->talloc) * sizeof(token)));
}


CondTester, a patch instance with id 122:
Spawn 1 instances, now Total 123
Counter: 124
Batcher Size:123
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1192
--Src File: src/dfa.c
Fragment 0:
if (((dfa->tindex) >= (dfa->talloc)) || (__abst_hole(dfa, dfa->tokens, dfa->tindex, dfa->talloc, dfa->tokens, dfa->tindex, dfa->talloc, t, dfa->multibyte_prop, dfa->multibyte_prop, cur_mb_len, cur_mb_index, depth, dfa->nmbcsets, dfa->nmbcsets, dfa->nleaves, dfa->nmultibyte_prop, dfa->nleaves, dfa->nmultibyte_prop, dfa->depth, dfa->depth, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts))) {
    do 
        (dfa->talloc) *= 2;
    while ((dfa->tindex) >= (dfa->talloc));
    ((dfa->tokens) = xrealloc((ptr_t)(dfa->tokens), (dfa->talloc) * sizeof(token)));
}


CondTester, a patch instance with id 123:
Spawn 1 instances, now Total 124
Counter: 125
Batcher Size:124
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1574
--Src File: src/dfa.c
Fragment 0:
if (((__ctype_get_mb_cur_max()) > 1) && !(__abst_hole(d, i, d->states[i].mbps.nelem, d->states, d->states[i].first_end, s, j, d->states[i].constraint, d->states[i].backref, d->tokens, letter, d->states[i].letter, newline, constraint, d->states[i].newline, hash, d->states[i].hash, d->sindex, d->salloc, d->states[i].mbps.elems, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    d->states[i].mbps.nelem = 0;


CondTester, a patch instance with id 124:
Spawn 1 instances, now Total 125
Counter: 126
Batcher Size:125
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2227
--Src File: src/dfa.c
Fragment 0:
if ((tstbit(eolbyte, labels[i])) && !(__abst_hole(i, eolbyte, wants_newline, j, follows.nelem, follows.elems, d, wants_letter, next_isnt_1st_byte, state, state_newline, state_letter, k, trans, ngrps, matchesf, leftoversf, intersectf, s, initialized)))
    for (j = 0; j < follows.nelem; ++j) 
        if ((((follows.elems[j].constraint) & 192) >> 2 != ((follows.elems[j].constraint) & 48)))
            wants_newline = 1;


CondTester, a patch instance with id 125:
Spawn 1 instances, now Total 126
Counter: 127
Batcher Size:126
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2227
--Src File: src/dfa.c
Fragment 0:
if ((tstbit(eolbyte, labels[i])) || (__abst_hole(i, eolbyte, wants_newline, j, follows.nelem, follows.elems, d, wants_letter, next_isnt_1st_byte, state, state_newline, state_letter, k, trans, ngrps, matchesf, leftoversf, intersectf, s, initialized)))
    for (j = 0; j < follows.nelem; ++j) 
        if ((((follows.elems[j].constraint) & 192) >> 2 != ((follows.elems[j].constraint) & 48)))
            wants_newline = 1;


CondTester, a patch instance with id 126:
Spawn 1 instances, now Total 127
Counter: 128
Batcher Size:127
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1574
--Src File: src/dfa.c
Fragment 0:
if (((__ctype_get_mb_cur_max()) > 1) || (__abst_hole(d, i, d->states[i].mbps.nelem, d->states, d->states[i].first_end, s, j, d->states[i].constraint, d->states[i].backref, d->tokens, letter, d->states[i].letter, newline, constraint, d->states[i].newline, hash, d->states[i].hash, d->sindex, d->salloc, d->states[i].mbps.elems, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    d->states[i].mbps.nelem = 0;


CondTester, a patch instance with id 127:
Spawn 1 instances, now Total 128
Counter: 129
Batcher Size:128
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1173
--Src File: src/dfa.c
Fragment 0:
if (((__ctype_get_mb_cur_max()) > 1) || (__abst_hole(dfa, t, cur_mb_len, cur_mb_index, depth))) {
    if ((dfa->tindex) >= (dfa->nmultibyte_prop)) {
        do 
            (dfa->nmultibyte_prop) *= 2;
        while ((dfa->tindex) >= (dfa->nmultibyte_prop));
        ((dfa->multibyte_prop) = xrealloc((ptr_t)(dfa->multibyte_prop), (dfa->nmultibyte_prop) * sizeof(int)));
    }
    ;
    if (t == MBCSET)
        dfa->multibyte_prop[dfa->tindex] = ((dfa->nmbcsets - 1) << 2) + 3;
    else if (t < (1 << 8))
        dfa->multibyte_prop[dfa->tindex] = (cur_mb_len == 1) ? 3 : (((cur_mb_index == 1) ? 1 : 0) + ((cur_mb_index == cur_mb_len) ? 2 : 0));
    else
        dfa->multibyte_prop[dfa->tindex] = 3;
}


CondTester, a patch instance with id 128:
Spawn 1 instances, now Total 129
Counter: 130
Batcher Size:129
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2218
--Src File: src/dfa.c
Fragment 0:
if ((d->searchflag && ((__ctype_get_mb_cur_max()) == 1 || !next_isnt_1st_byte)) && !(__abst_hole(d, next_isnt_1st_byte, d->searchflag, j, d->states, wants_newline, i, eolbyte, d->multibyte_prop, wants_letter, state, state_newline, state_letter, k, d->follows, trans, ngrps, d->nleaves, matchesf, leftoversf, intersectf, d->tokens, s, d->charclasses, initialized, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    for (j = 0; j < d->states[0].elems.nelem; ++j) 
        insert(d->states[0].elems.elems[j], &follows);


CondTester, a patch instance with id 129:
Spawn 1 instances, now Total 130
Counter: 131
Batcher Size:130
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2218
--Src File: src/dfa.c
Fragment 0:
if ((d->searchflag && ((__ctype_get_mb_cur_max()) == 1 || !next_isnt_1st_byte)) || (__abst_hole(d, next_isnt_1st_byte, d->searchflag, j, d->states, wants_newline, i, eolbyte, d->multibyte_prop, wants_letter, state, state_newline, state_letter, k, d->follows, trans, ngrps, d->nleaves, matchesf, leftoversf, intersectf, d->tokens, s, d->charclasses, initialized, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    for (j = 0; j < d->states[0].elems.nelem; ++j) 
        insert(d->states[0].elems.elems[j], &follows);


CondTester, a patch instance with id 130:
Spawn 1 instances, now Total 131
Counter: 132
Batcher Size:131
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2218
--Src File: src/dfa.c
Fragment 0:
if (((d->searchflag) || (__abst_hole(d, next_isnt_1st_byte, d->searchflag, j, d->states, wants_newline, i, eolbyte, d->multibyte_prop, wants_letter, state, state_newline, state_letter, k, d->follows, trans, ngrps, d->nleaves, matchesf, leftoversf, intersectf, d->tokens, s, d->charclasses, initialized, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts))) && ((__ctype_get_mb_cur_max()) == 1 || !next_isnt_1st_byte))
    for (j = 0; j < d->states[0].elems.nelem; ++j) 
        insert(d->states[0].elems.elems[j], &follows);


CondTester, a patch instance with id 131:
Spawn 1 instances, now Total 132
Counter: 133
Batcher Size:132
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2183
--Src File: src/dfa.c
Fragment 0:
if (((__ctype_get_mb_cur_max()) > 1) && !(__abst_hole(d, i, j, k, ngrps, trans, state_newline, eolbyte, state, state_letter, next_isnt_1st_byte, wants_letter, wants_newline, matchesf, leftoversf, intersectf, s, initialized))) {
    next_isnt_1st_byte = 0;
    for (j = 0; j < follows.nelem; ++j) {
        if (!(d->multibyte_prop[follows.elems[j].index] & 1)) {
            next_isnt_1st_byte = 1;
            break;
        }
    }
}


CondTester, a patch instance with id 132:
Spawn 1 instances, now Total 133
Counter: 134
Batcher Size:133
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2183
--Src File: src/dfa.c
Fragment 0:
if (((__ctype_get_mb_cur_max()) > 1) || (__abst_hole(d, i, j, k, ngrps, trans, state_newline, eolbyte, state, state_letter, next_isnt_1st_byte, wants_letter, wants_newline, matchesf, leftoversf, intersectf, s, initialized))) {
    next_isnt_1st_byte = 0;
    for (j = 0; j < follows.nelem; ++j) {
        if (!(d->multibyte_prop[follows.elems[j].index] & 1)) {
            next_isnt_1st_byte = 1;
            break;
        }
    }
}


CondTester, a patch instance with id 133:
Spawn 1 instances, now Total 134
Counter: 135
Batcher Size:134
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1045
--Src File: src/dfa.c
Fragment 0:
if (((__ctype_get_mb_cur_max()) > 1) && !(__abst_hole(laststart, backslash, lasttok, c, lexptr, lexleft, c2, invert, syntax_bits, c1, eolbyte, parens, hard_LC_COLLATE, case_fold, minrep, maxrep, cur_mb_index, i))) {
    return lasttok = parse_bracket_exp_mb();
}


CondTester, a patch instance with id 134:
Spawn 1 instances, now Total 135
Counter: 136
Batcher Size:135
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1131
--Src File: src/dfa.c
Fragment 0:
if ((invert) && !(__abst_hole(invert, c, c1, syntax_bits, eolbyte, lasttok, laststart, case_fold, lexptr, lexleft, c2, hard_LC_COLLATE, backslash, parens, minrep, maxrep, cur_mb_index, i))) {
    notset(ccl);
    if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit(eolbyte, ccl);
}


CondTester, a patch instance with id 135:
Spawn 1 instances, now Total 136
Counter: 137
Batcher Size:136
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1131
--Src File: src/dfa.c
Fragment 0:
if ((invert) || (__abst_hole(invert, c, c1, syntax_bits, eolbyte, lasttok, laststart, case_fold, lexptr, lexleft, c2, hard_LC_COLLATE, backslash, parens, minrep, maxrep, cur_mb_index, i))) {
    notset(ccl);
    if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit(eolbyte, ccl);
}


CondTester, a patch instance with id 136:
Spawn 1 instances, now Total 137
Counter: 138
Batcher Size:137
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1823
--Src File: src/dfa.c
Fragment 0:
if ((nullable[-1]) && !(__abst_hole(nullable, nlastpos, nfirstpos, lastpos, pos, firstpos, j, d, nalloc, i, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline)))
    nlastpos[-2] += nlastpos[-1];
else {
    pos = lastpos + nlastpos[-2];
    for (j = nlastpos[-1] - 1; j >= 0; --j) 
        pos[j] = lastpos[j];
    lastpos += nlastpos[-2];
    nlastpos[-2] = nlastpos[-1];
}


CondTester, a patch instance with id 137:
Spawn 1 instances, now Total 138
Counter: 139
Batcher Size:138
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1823
--Src File: src/dfa.c
Fragment 0:
if ((nullable[-1]) || (__abst_hole(nullable, nlastpos, nfirstpos, lastpos, pos, firstpos, j, d, nalloc, i, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline)))
    nlastpos[-2] += nlastpos[-1];
else {
    pos = lastpos + nlastpos[-2];
    for (j = nlastpos[-1] - 1; j >= 0; --j) 
        pos[j] = lastpos[j];
    lastpos += nlastpos[-2];
    nlastpos[-2] = nlastpos[-1];
}


CondTester, a patch instance with id 138:
Spawn 1 instances, now Total 139
Counter: 140
Batcher Size:139
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2143
--Src File: src/dfa.c
Fragment 0:
if ((d->searchflag) && !(__abst_hole(d, d->searchflag, wants_newline, wants_letter, i, d->states, d->nleaves, ngrps, state, state_newline, j, state_letter, trans, matchesf, eolbyte, k, d->follows, leftoversf, intersectf, next_isnt_1st_byte, d->tokens, d->multibyte_prop, s, d->charclasses, initialized, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts))) {
    wants_newline = 0;
    wants_letter = 0;
    for (i = 0; i < d->states[0].elems.nelem; ++i) {
        if ((((d->states[0].elems.elems[i].constraint) & 192) >> 2 != ((d->states[0].elems.elems[i].constraint) & 48)))
            wants_newline = 1;
        if ((((d->states[0].elems.elems[i].constraint) & 12) >> 2 != ((d->states[0].elems.elems[i].constraint) & 3)))
            wants_letter = 1;
    }
    copy(&d->states[0].elems, &follows);
    state = state_index(d, &follows, 0, 0);
    if (wants_newline)
        state_newline = state_index(d, &follows, 1, 0);
    else
        state_newline = state;
    if (wants_letter)
        state_letter = state_index(d, &follows, 0, 1);
    else
        state_letter = state;
    for (i = 0; i < (1 << 8); ++i) 
        trans[i] = ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_')) ? state_letter : state;
    trans[eolbyte] = state_newline;
} else
    for (i = 0; i < (1 << 8); ++i) 
        trans[i] = -1;


CondTester, a patch instance with id 139:
Spawn 1 instances, now Total 140
Counter: 141
Batcher Size:140
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2143
--Src File: src/dfa.c
Fragment 0:
if ((d->searchflag) || (__abst_hole(d, d->searchflag, wants_newline, wants_letter, i, d->states, d->nleaves, ngrps, state, state_newline, j, state_letter, trans, matchesf, eolbyte, k, d->follows, leftoversf, intersectf, next_isnt_1st_byte, d->tokens, d->multibyte_prop, s, d->charclasses, initialized, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts))) {
    wants_newline = 0;
    wants_letter = 0;
    for (i = 0; i < d->states[0].elems.nelem; ++i) {
        if ((((d->states[0].elems.elems[i].constraint) & 192) >> 2 != ((d->states[0].elems.elems[i].constraint) & 48)))
            wants_newline = 1;
        if ((((d->states[0].elems.elems[i].constraint) & 12) >> 2 != ((d->states[0].elems.elems[i].constraint) & 3)))
            wants_letter = 1;
    }
    copy(&d->states[0].elems, &follows);
    state = state_index(d, &follows, 0, 0);
    if (wants_newline)
        state_newline = state_index(d, &follows, 1, 0);
    else
        state_newline = state;
    if (wants_letter)
        state_letter = state_index(d, &follows, 0, 1);
    else
        state_letter = state;
    for (i = 0; i < (1 << 8); ++i) 
        trans[i] = ((((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum) || (i) == '_')) ? state_letter : state;
    trans[eolbyte] = state_newline;
} else
    for (i = 0; i < (1 << 8); ++i) 
        trans[i] = -1;


CondTester, a patch instance with id 140:
Spawn 1 instances, now Total 141
Counter: 142
Batcher Size:141
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1045
--Src File: src/dfa.c
Fragment 0:
if (((__ctype_get_mb_cur_max()) > 1) || (__abst_hole(laststart, backslash, lasttok, c, lexptr, lexleft, c2, invert, syntax_bits, c1, eolbyte, parens, hard_LC_COLLATE, case_fold, minrep, maxrep, cur_mb_index, i))) {
    return lasttok = parse_bracket_exp_mb();
}


CondTester, a patch instance with id 141:
Spawn 1 instances, now Total 142
Counter: 143
Batcher Size:142
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1090
--Src File: src/dfa.c
Fragment 0:
if ((c2 == ']') && !(__abst_hole(c2, lexptr, lexleft, lasttok, c1, c, syntax_bits, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i))) {
    --lexptr;
    ++lexleft;
} else {
    if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c2) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    c1 = c;
    if (!hard_LC_COLLATE)
        for (c = c1; c <= c2; c++) 
            setbit_case_fold(c, ccl);
    else {
        if (case_fold) {
            c1 = (__extension__ ({
                int __res;
                if (sizeof (c1) > 1) {
                    if (__builtin_constant_p(c1)) {
                        int __c = (c1);
                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                    } else
                        __res = tolower(c1);
                } else
                    __res = (*__ctype_tolower_loc())[(int)(c1)];
                __res;
            }));
            c2 = (__extension__ ({
                int __res;
                if (sizeof (c2) > 1) {
                    if (__builtin_constant_p(c2)) {
                        int __c = (c2);
                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                    } else
                        __res = tolower(c2);
                } else
                    __res = (*__ctype_tolower_loc())[(int)(c2)];
                __res;
            }));
        }
        for (c = 0; c < (1 << 8); ++c) 
            if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                setbit_case_fold(c, ccl);
    }
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c1) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    continue;
}


CondTester, a patch instance with id 142:
Spawn 1 instances, now Total 143
Counter: 144
Batcher Size:143
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2160
--Src File: src/dfa.c
Fragment 0:
if ((wants_letter) && !(__abst_hole(wants_letter, d, state, state_newline, state_letter, wants_newline, i, trans, eolbyte, d->states, ngrps, follows.nelem, d->searchflag, j, k, d->follows, d->nleaves, follows.elems, matchesf, next_isnt_1st_byte, d->multibyte_prop, leftoversf, intersectf, d->tokens, s, d->charclasses, initialized, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    state_letter = state_index(d, &follows, 0, 1);
else
    state_letter = state;


CondTester, a patch instance with id 143:
Spawn 1 instances, now Total 144
Counter: 145
Batcher Size:144
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2160
--Src File: src/dfa.c
Fragment 0:
if ((wants_letter) || (__abst_hole(wants_letter, d, state, state_newline, state_letter, wants_newline, i, trans, eolbyte, d->states, ngrps, follows.nelem, d->searchflag, j, k, d->follows, d->nleaves, follows.elems, matchesf, next_isnt_1st_byte, d->multibyte_prop, leftoversf, intersectf, d->tokens, s, d->charclasses, initialized, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    state_letter = state_index(d, &follows, 0, 1);
else
    state_letter = state;


CondTester, a patch instance with id 144:
Spawn 1 instances, now Total 145
Counter: 146
Batcher Size:145
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1090
--Src File: src/dfa.c
Fragment 0:
if ((c2 == ']') || (__abst_hole(c2, lexptr, lexleft, lasttok, c1, c, syntax_bits, hard_LC_COLLATE, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i))) {
    --lexptr;
    ++lexleft;
} else {
    if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c2) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
    c1 = c;
    if (!hard_LC_COLLATE)
        for (c = c1; c <= c2; c++) 
            setbit_case_fold(c, ccl);
    else {
        if (case_fold) {
            c1 = (__extension__ ({
                int __res;
                if (sizeof (c1) > 1) {
                    if (__builtin_constant_p(c1)) {
                        int __c = (c1);
                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                    } else
                        __res = tolower(c1);
                } else
                    __res = (*__ctype_tolower_loc())[(int)(c1)];
                __res;
            }));
            c2 = (__extension__ ({
                int __res;
                if (sizeof (c2) > 1) {
                    if (__builtin_constant_p(c2)) {
                        int __c = (c2);
                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                    } else
                        __res = tolower(c2);
                } else
                    __res = (*__ctype_tolower_loc())[(int)(c2)];
                __res;
            }));
        }
        for (c = 0; c < (1 << 8); ++c) 
            if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                setbit_case_fold(c, ccl);
    }
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c1) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    continue;
}


CondTester, a patch instance with id 145:
Spawn 1 instances, now Total 146
Counter: 147
Batcher Size:146
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1087
--Src File: src/dfa.c
Fragment 0:
if ((c1 == '-') && !(__abst_hole(c1, lexptr, lexleft, lasttok, c, c2, syntax_bits, hard_LC_COLLATE, case_fold, invert, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i))) {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c2 == ']') {
        --lexptr;
        ++lexleft;
    } else {
        if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        c1 = c;
        if (!hard_LC_COLLATE)
            for (c = c1; c <= c2; c++) 
                setbit_case_fold(c, ccl);
        else {
            if (case_fold) {
                c1 = (__extension__ ({
                    int __res;
                    if (sizeof (c1) > 1) {
                        if (__builtin_constant_p(c1)) {
                            int __c = (c1);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c1);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c1)];
                    __res;
                }));
                c2 = (__extension__ ({
                    int __res;
                    if (sizeof (c2) > 1) {
                        if (__builtin_constant_p(c2)) {
                            int __c = (c2);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c2);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c2)];
                    __res;
                }));
            }
            for (c = 0; c < (1 << 8); ++c) 
                if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                    setbit_case_fold(c, ccl);
        }
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        continue;
    }
}


CondTester, a patch instance with id 146:
Spawn 1 instances, now Total 147
Counter: 148
Batcher Size:147
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1087
--Src File: src/dfa.c
Fragment 0:
if ((c1 == '-') || (__abst_hole(c1, lexptr, lexleft, lasttok, c, c2, syntax_bits, hard_LC_COLLATE, case_fold, invert, laststart, backslash, eolbyte, parens, minrep, maxrep, cur_mb_index, i))) {
    do {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c2) = (unsigned char)*lexptr++;
        --lexleft;
    } while (0);
    if (c2 == ']') {
        --lexptr;
        ++lexleft;
    } else {
        if (c2 == '\\' && (syntax_bits & ((unsigned long)1)))
            do {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            } while (0);
        c1 = c;
        if (!hard_LC_COLLATE)
            for (c = c1; c <= c2; c++) 
                setbit_case_fold(c, ccl);
        else {
            if (case_fold) {
                c1 = (__extension__ ({
                    int __res;
                    if (sizeof (c1) > 1) {
                        if (__builtin_constant_p(c1)) {
                            int __c = (c1);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c1);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c1)];
                    __res;
                }));
                c2 = (__extension__ ({
                    int __res;
                    if (sizeof (c2) > 1) {
                        if (__builtin_constant_p(c2)) {
                            int __c = (c2);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower(c2);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)(c2)];
                    __res;
                }));
            }
            for (c = 0; c < (1 << 8); ++c) 
                if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
                    setbit_case_fold(c, ccl);
        }
        do {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        } while (0);
        continue;
    }
}


CondTester, a patch instance with id 147:
Spawn 1 instances, now Total 148
Counter: 149
Batcher Size:148
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2156
--Src File: src/dfa.c
Fragment 0:
if ((wants_newline) && !(__abst_hole(wants_newline, d, state, state_newline, d->states, wants_letter, state_letter, i, trans, eolbyte, d->searchflag, ngrps, d->nleaves, follows.nelem, follows.elems, j, k, d->follows, matchesf, next_isnt_1st_byte, d->multibyte_prop, leftoversf, intersectf, d->tokens, s, d->charclasses, initialized, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    state_newline = state_index(d, &follows, 1, 0);
else
    state_newline = state;


CondTester, a patch instance with id 148:
Spawn 1 instances, now Total 149
Counter: 150
Batcher Size:149
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2156
--Src File: src/dfa.c
Fragment 0:
if ((wants_newline) || (__abst_hole(wants_newline, d, state, state_newline, d->states, wants_letter, state_letter, i, trans, eolbyte, d->searchflag, ngrps, d->nleaves, follows.nelem, follows.elems, j, k, d->follows, matchesf, next_isnt_1st_byte, d->multibyte_prop, leftoversf, intersectf, d->tokens, s, d->charclasses, initialized, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    state_newline = state_index(d, &follows, 1, 0);
else
    state_newline = state;


CondTester, a patch instance with id 149:
Spawn 1 instances, now Total 150
Counter: 151
Batcher Size:150
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:323
--Src File: src/dfa.c
Fragment 0:
if ((case_fold) && !(__abst_hole(case_fold, b, c))) {
    if (((*__ctype_b_loc())[(int)((b))] & (unsigned short)_ISupper))
        setbit((__extension__ ({
            int __res;
            if (sizeof (b) > 1) {
                if (__builtin_constant_p(b)) {
                    int __c = (b);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(b);
            } else
                __res = (*__ctype_tolower_loc())[(int)(b)];
            __res;
        })), c);
    else if (((*__ctype_b_loc())[(int)((b))] & (unsigned short)_ISlower))
        setbit((__extension__ ({
            int __res;
            if (sizeof (b) > 1) {
                if (__builtin_constant_p(b)) {
                    int __c = (b);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_toupper_loc())[__c];
                } else
                    __res = toupper(b);
            } else
                __res = (*__ctype_toupper_loc())[(int)(b)];
            __res;
        })), c);
}


CondTester, a patch instance with id 150:
Spawn 1 instances, now Total 151
Counter: 152
Batcher Size:151
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1115
--Src File: src/dfa.c
Fragment 0:
{
    if ((!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2)) && !(__abst_hole(c, c1, c2, case_fold, lexptr, lexleft, lasttok, hard_LC_COLLATE, invert, syntax_bits, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
        setbit_case_fold(c, ccl);
}


CondTester, a patch instance with id 151:
Spawn 1 instances, now Total 152
Counter: 153
Batcher Size:152
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1559
--Src File: src/dfa.c
Fragment 0:
if ((j == s->nelem) && !(__abst_hole(s, j, s->nelem, i, d, s->elems, hash, newline, letter, constraint)))
    return i;


CondTester, a patch instance with id 152:
Spawn 1 instances, now Total 153
Counter: 154
Batcher Size:153
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1564
--Src File: src/dfa.c
Fragment 0:
if (((d->sindex) >= (d->salloc)) && !(__abst_hole(d, d->states, d->sindex, d->salloc, hash, i, d->states[i].hash, s, newline, d->states[i].newline, letter, j, d->states[i].letter, d->states[i].backref, d->states[i].constraint, d->states[i].first_end, d->tokens, constraint, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts))) {
    do 
        (d->salloc) *= 2;
    while ((d->sindex) >= (d->salloc));
    ((d->states) = xrealloc((ptr_t)(d->states), (d->salloc) * sizeof(dfa_state)));
}


CondTester, a patch instance with id 153:
Spawn 1 instances, now Total 154
Counter: 155
Batcher Size:154
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1564
--Src File: src/dfa.c
Fragment 0:
if (((d->sindex) >= (d->salloc)) || (__abst_hole(d, d->states, d->sindex, d->salloc, hash, i, d->states[i].hash, s, newline, d->states[i].newline, letter, j, d->states[i].letter, d->states[i].backref, d->states[i].constraint, d->states[i].first_end, d->tokens, constraint, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts))) {
    do 
        (d->salloc) *= 2;
    while ((d->sindex) >= (d->salloc));
    ((d->states) = xrealloc((ptr_t)(d->states), (d->salloc) * sizeof(dfa_state)));
}


CondTester, a patch instance with id 154:
Spawn 1 instances, now Total 155
Counter: 156
Batcher Size:155
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1815
--Src File: src/dfa.c
Fragment 0:
if ((nullable[-2]) && !(__abst_hole(nullable, nfirstpos, firstpos, d, j, pos, nalloc, nlastpos, lastpos, i, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline)))
    nfirstpos[-2] += nfirstpos[-1];
else
    firstpos += nfirstpos[-1];


CondTester, a patch instance with id 155:
Spawn 1 instances, now Total 156
Counter: 157
Batcher Size:156
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1815
--Src File: src/dfa.c
Fragment 0:
if ((nullable[-2]) || (__abst_hole(nullable, nfirstpos, firstpos, d, j, pos, nalloc, nlastpos, lastpos, i, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline)))
    nfirstpos[-2] += nfirstpos[-1];
else
    firstpos += nfirstpos[-1];


CondTester, a patch instance with id 156:
Spawn 1 instances, now Total 157
Counter: 158
Batcher Size:157
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1559
--Src File: src/dfa.c
Fragment 0:
if ((j == s->nelem) || (__abst_hole(s, j, s->nelem, i, d, s->elems, hash, newline, letter, constraint)))
    return i;


CondTester, a patch instance with id 157:
Spawn 1 instances, now Total 158
Counter: 159
Batcher Size:158
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2151
--Src File: src/dfa.c
Fragment 0:
if (((((d->states[0].elems.elems[i].constraint) & 12) >> 2 != ((d->states[0].elems.elems[i].constraint) & 3))) && !(__abst_hole(d, i, d->states[0].elems.elems[i].constraint, d->states, d->states[0].elems.elems, wants_newline, wants_letter, state, d->states[0].elems.nelem, state_newline, d->searchflag, state_letter, d->nleaves, trans, eolbyte, ngrps, j, k, d->follows, matchesf, leftoversf, next_isnt_1st_byte, d->multibyte_prop, intersectf, d->tokens, s, d->charclasses, initialized, d->states[0].elems.elems[i].index, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts, d->states[0].hash, d->states[0].newline, d->states[0].letter, d->states[0].backref, d->states[0].constraint, d->states[0].first_end)))
    wants_letter = 1;


CondTester, a patch instance with id 158:
Spawn 1 instances, now Total 159
Counter: 160
Batcher Size:159
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2151
--Src File: src/dfa.c
Fragment 0:
if (((((d->states[0].elems.elems[i].constraint) & 12) >> 2 != ((d->states[0].elems.elems[i].constraint) & 3))) || (__abst_hole(d, i, d->states[0].elems.elems[i].constraint, d->states, d->states[0].elems.elems, wants_newline, wants_letter, state, d->states[0].elems.nelem, state_newline, d->searchflag, state_letter, d->nleaves, trans, eolbyte, ngrps, j, k, d->follows, matchesf, leftoversf, next_isnt_1st_byte, d->multibyte_prop, intersectf, d->tokens, s, d->charclasses, initialized, d->states[0].elems.elems[i].index, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts, d->states[0].hash, d->states[0].newline, d->states[0].letter, d->states[0].backref, d->states[0].constraint, d->states[0].first_end)))
    wants_letter = 1;


CondTester, a patch instance with id 159:
Spawn 1 instances, now Total 160
Counter: 161
Batcher Size:160
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2149
--Src File: src/dfa.c
Fragment 0:
if (((((d->states[0].elems.elems[i].constraint) & 192) >> 2 != ((d->states[0].elems.elems[i].constraint) & 48))) && !(__abst_hole(d, i, d->states[0].elems.elems[i].constraint, d->states, d->states[0].elems.elems, wants_newline, d->states[0].elems.nelem, wants_letter, state, d->searchflag, state_newline, d->nleaves, state_letter, trans, ngrps, eolbyte, j, matchesf, k, d->follows, leftoversf, next_isnt_1st_byte, d->multibyte_prop, intersectf, d->tokens, s, d->charclasses, initialized, d->states[0].elems.elems[i].index, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts, d->states[0].hash, d->states[0].newline, d->states[0].letter, d->states[0].backref, d->states[0].constraint, d->states[0].first_end)))
    wants_newline = 1;


CondTester, a patch instance with id 160:
Spawn 1 instances, now Total 161
Counter: 162
Batcher Size:161
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2149
--Src File: src/dfa.c
Fragment 0:
if (((((d->states[0].elems.elems[i].constraint) & 192) >> 2 != ((d->states[0].elems.elems[i].constraint) & 48))) || (__abst_hole(d, i, d->states[0].elems.elems[i].constraint, d->states, d->states[0].elems.elems, wants_newline, d->states[0].elems.nelem, wants_letter, state, d->searchflag, state_newline, d->nleaves, state_letter, trans, ngrps, eolbyte, j, matchesf, k, d->follows, leftoversf, next_isnt_1st_byte, d->multibyte_prop, intersectf, d->tokens, s, d->charclasses, initialized, d->states[0].elems.elems[i].index, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nregexps, d->nmultibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->sindex, d->salloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts, d->states[0].hash, d->states[0].newline, d->states[0].letter, d->states[0].backref, d->states[0].constraint, d->states[0].first_end)))
    wants_newline = 1;


CondTester, a patch instance with id 161:
Spawn 1 instances, now Total 162
Counter: 163
Batcher Size:162
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1104
--Src File: src/dfa.c
Fragment 0:
if ((!hard_LC_COLLATE) && !(__abst_hole(hard_LC_COLLATE, c, c1, c2, lexptr, lexleft, lasttok, syntax_bits, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    for (c = c1; c <= c2; c++) 
        setbit_case_fold(c, ccl);
else {
    if (case_fold) {
        c1 = (__extension__ ({
            int __res;
            if (sizeof (c1) > 1) {
                if (__builtin_constant_p(c1)) {
                    int __c = (c1);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c1);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c1)];
            __res;
        }));
        c2 = (__extension__ ({
            int __res;
            if (sizeof (c2) > 1) {
                if (__builtin_constant_p(c2)) {
                    int __c = (c2);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c2);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c2)];
            __res;
        }));
    }
    for (c = 0; c < (1 << 8); ++c) 
        if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
            setbit_case_fold(c, ccl);
}


CondTester, a patch instance with id 162:
Spawn 1 instances, now Total 163
Counter: 164
Batcher Size:163
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1104
--Src File: src/dfa.c
Fragment 0:
if ((!hard_LC_COLLATE) || (__abst_hole(hard_LC_COLLATE, c, c1, c2, lexptr, lexleft, lasttok, syntax_bits, case_fold, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    for (c = c1; c <= c2; c++) 
        setbit_case_fold(c, ccl);
else {
    if (case_fold) {
        c1 = (__extension__ ({
            int __res;
            if (sizeof (c1) > 1) {
                if (__builtin_constant_p(c1)) {
                    int __c = (c1);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c1);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c1)];
            __res;
        }));
        c2 = (__extension__ ({
            int __res;
            if (sizeof (c2) > 1) {
                if (__builtin_constant_p(c2)) {
                    int __c = (c2);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(c2);
            } else
                __res = (*__ctype_tolower_loc())[(int)(c2)];
            __res;
        }));
    }
    for (c = 0; c < (1 << 8); ++c) 
        if (!(case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)) && in_coll_range(c, c1, c2))
            setbit_case_fold(c, ccl);
}


CondTester, a patch instance with id 163:
Spawn 1 instances, now Total 164
Counter: 165
Batcher Size:164
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1551
--Src File: src/dfa.c
Fragment 0:
if ((hash != d->states[i].hash || s->nelem != d->states[i].elems.nelem || newline != d->states[i].newline || letter != d->states[i].letter) && !(__abst_hole(d, newline, letter, i, d->states[i].newline, d->states[i].letter, d->states, s, hash, d->states[i].elems.nelem, s->nelem, d->states[i].hash, j, s->elems, d->sindex, d->states[i].elems.elems, d->salloc, d->states[i].backref, d->states[i].constraint, d->states[i].first_end, d->tokens, constraint, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    continue;


CondTester, a patch instance with id 164:
Spawn 1 instances, now Total 165
Counter: 166
Batcher Size:165
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1808
--Src File: src/dfa.c
Fragment 0:
if (((merged.nelem - 1) >= (nalloc[pos[j].index])) && !(__abst_hole(d, nalloc, j, pos, d->follows[pos[j].index].elems, pos[j].index, d->follows, merged.nelem, nlastpos, lastpos, firstpos, tmp.elems, nfirstpos, tmp.nelem, nullable, i, d->tokens, d->tindex, d->nleaves, merged.elems, o_lastpos, o_nlast, d->depth, o_firstpos, o_nfirst, o_nullable, searchflag, d->searchflag, wants_newline, d->salloc, d->sindex, d->states, d->follows[pos[j].index].nelem, pos[j].constraint, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts))) {
    do 
        (nalloc[pos[j].index]) *= 2;
    while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
    ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
}


CondTester, a patch instance with id 165:
Spawn 1 instances, now Total 166
Counter: 167
Batcher Size:166
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1808
--Src File: src/dfa.c
Fragment 0:
if (((merged.nelem - 1) >= (nalloc[pos[j].index])) || (__abst_hole(d, nalloc, j, pos, d->follows[pos[j].index].elems, pos[j].index, d->follows, merged.nelem, nlastpos, lastpos, firstpos, tmp.elems, nfirstpos, tmp.nelem, nullable, i, d->tokens, d->tindex, d->nleaves, merged.elems, o_lastpos, o_nlast, d->depth, o_firstpos, o_nfirst, o_nullable, searchflag, d->searchflag, wants_newline, d->salloc, d->sindex, d->states, d->follows[pos[j].index].nelem, pos[j].constraint, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts))) {
    do 
        (nalloc[pos[j].index]) *= 2;
    while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
    ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
}


CondTester, a patch instance with id 166:
Spawn 1 instances, now Total 167
Counter: 168
Batcher Size:167
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1551
--Src File: src/dfa.c
Fragment 0:
if ((hash != d->states[i].hash || s->nelem != d->states[i].elems.nelem || newline != d->states[i].newline || letter != d->states[i].letter) || (__abst_hole(d, newline, letter, i, d->states[i].newline, d->states[i].letter, d->states, s, hash, d->states[i].elems.nelem, s->nelem, d->states[i].hash, j, s->elems, d->sindex, d->states[i].elems.elems, d->salloc, d->states[i].backref, d->states[i].constraint, d->states[i].first_end, d->tokens, constraint, d->charclasses, d->cindex, d->calloc, d->tindex, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    continue;


CondTester, a patch instance with id 167:
Spawn 1 instances, now Total 168
Counter: 169
Batcher Size:168
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:323
--Src File: src/dfa.c
Fragment 0:
if ((case_fold) || (__abst_hole(case_fold, b, c))) {
    if (((*__ctype_b_loc())[(int)((b))] & (unsigned short)_ISupper))
        setbit((__extension__ ({
            int __res;
            if (sizeof (b) > 1) {
                if (__builtin_constant_p(b)) {
                    int __c = (b);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                } else
                    __res = tolower(b);
            } else
                __res = (*__ctype_tolower_loc())[(int)(b)];
            __res;
        })), c);
    else if (((*__ctype_b_loc())[(int)((b))] & (unsigned short)_ISlower))
        setbit((__extension__ ({
            int __res;
            if (sizeof (b) > 1) {
                if (__builtin_constant_p(b)) {
                    int __c = (b);
                    __res = __c < -128 || __c > 255 ? __c : (*__ctype_toupper_loc())[__c];
                } else
                    __res = toupper(b);
            } else
                __res = (*__ctype_toupper_loc())[(int)(b)];
            __res;
        })), c);
}


CondTester, a patch instance with id 168:
Spawn 1 instances, now Total 169
Counter: 170
Batcher Size:169
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2126
--Src File: src/dfa.c
Fragment 0:
if ((j == ngrps) && !(__abst_hole(ngrps, j, d, matchesf, wants_newline, wants_letter, leftoversf, i, k, state, state_newline, state_letter, intersectf, trans, eolbyte, s, next_isnt_1st_byte, initialized))) {
    copyset(matches, labels[ngrps]);
    zeroset(matches);
    ((grps[ngrps].elems) = xmalloc((d->nleaves) * sizeof(position)));
    grps[ngrps].nelem = 1;
    grps[ngrps].elems[0] = pos;
    ++ngrps;
}


CondTester, a patch instance with id 169:
Spawn 1 instances, now Total 170
Counter: 171
Batcher Size:170
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2126
--Src File: src/dfa.c
Fragment 0:
if ((j == ngrps) || (__abst_hole(ngrps, j, d, matchesf, wants_newline, wants_letter, leftoversf, i, k, state, state_newline, state_letter, intersectf, trans, eolbyte, s, next_isnt_1st_byte, initialized))) {
    copyset(matches, labels[ngrps]);
    zeroset(matches);
    ((grps[ngrps].elems) = xmalloc((d->nleaves) * sizeof(position)));
    grps[ngrps].nelem = 1;
    grps[ngrps].elems[0] = pos;
    ++ngrps;
}


CondTester, a patch instance with id 170:
Spawn 1 instances, now Total 171
Counter: 172
Batcher Size:171
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if ((case_fold) && !(__abst_hole(case_fold, c1, c, c2, hard_LC_COLLATE, lexptr, lexleft, lasttok, syntax_bits, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i))) {
    c1 = (__extension__ ({
        int __res;
        if (sizeof (c1) > 1) {
            if (__builtin_constant_p(c1)) {
                int __c = (c1);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c1);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c1)];
        __res;
    }));
    c2 = (__extension__ ({
        int __res;
        if (sizeof (c2) > 1) {
            if (__builtin_constant_p(c2)) {
                int __c = (c2);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c2);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c2)];
        __res;
    }));
}


CondTester, a patch instance with id 171:
Spawn 1 instances, now Total 172
Counter: 173
Batcher Size:172
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if ((case_fold) || (__abst_hole(case_fold, c1, c, c2, hard_LC_COLLATE, lexptr, lexleft, lasttok, syntax_bits, invert, eolbyte, laststart, backslash, parens, minrep, maxrep, cur_mb_index, i))) {
    c1 = (__extension__ ({
        int __res;
        if (sizeof (c1) > 1) {
            if (__builtin_constant_p(c1)) {
                int __c = (c1);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c1);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c1)];
        __res;
    }));
    c2 = (__extension__ ({
        int __res;
        if (sizeof (c2) > 1) {
            if (__builtin_constant_p(c2)) {
                int __c = (c2);
                __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
            } else
                __res = tolower(c2);
        } else
            __res = (*__ctype_tolower_loc())[(int)(c2)];
        __res;
    }));
}


CondTester, a patch instance with id 172:
Spawn 1 instances, now Total 173
Counter: 174
Batcher Size:173
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
parens = (0);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 0:
Spawn 1 instances, now Total 174
Counter: 175
Batcher Size:174
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
tok = lex();
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 1:
Spawn 1 instances, now Total 175
Counter: 176
Batcher Size:175
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
tok = (0);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 2:
Spawn 1 instances, now Total 176
Counter: 177
Batcher Size:176
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
tok = (2);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 3:
Spawn 1 instances, now Total 177
Counter: 178
Batcher Size:177
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
tok = (4);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 4:
Spawn 1 instances, now Total 178
Counter: 179
Batcher Size:178
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
tok = (6);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 5:
Spawn 1 instances, now Total 179
Counter: 180
Batcher Size:179
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
parens = (2);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 6:
Spawn 1 instances, now Total 180
Counter: 181
Batcher Size:180
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
syntax_bits = (2);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 7:
Spawn 1 instances, now Total 181
Counter: 182
Batcher Size:181
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
syntax_bits_set = (2);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 8:
Spawn 1 instances, now Total 182
Counter: 183
Batcher Size:182
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
syntax_bits_set = (6);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 9:
Spawn 1 instances, now Total 183
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building failed! Going to build saperately!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 0:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 1 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 2 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 3 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 4 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 5 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 6:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 7:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 8:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 9:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Counter: 184
Batcher Size:173
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
syntax_bits_set = 1;
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 10:
Spawn 1 instances, now Total 184
Counter: 185
Batcher Size:174
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
syntax_bits_set = (4);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 11:
Spawn 1 instances, now Total 185
Counter: 186
Batcher Size:175
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
syntax_bits = (4);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 12:
Spawn 1 instances, now Total 186
Counter: 187
Batcher Size:176
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
syntax_bits = (6);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 13:
Spawn 1 instances, now Total 187
Counter: 188
Batcher Size:177
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
syntax_bits_set = (0);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 14:
Spawn 1 instances, now Total 188
Counter: 189
Batcher Size:178
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
parens = (4);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 15:
Spawn 1 instances, now Total 189
Counter: 190
Batcher Size:179
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
parens = 0;
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 16:
Spawn 1 instances, now Total 190
Counter: 191
Batcher Size:180
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
regexp(1);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 17:
Spawn 1 instances, now Total 191
Counter: 192
Batcher Size:181
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
syntax_bits = (0);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 18:
Spawn 1 instances, now Total 192
Counter: 193
Batcher Size:182
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
regexp(0);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 19:
Spawn 1 instances, now Total 193
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
BasicTester, Testing instance id 10:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 11:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 12:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 13:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 14:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 15:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 16:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 17:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: Unbalanced [
BasicTester, Testing instance id 18:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 19:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: Unbalanced [
Counter: 194
Batcher Size:173
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
parens = (6);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 20:
Spawn 1 instances, now Total 194
Counter: 195
Batcher Size:174
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
lexleft = (0);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 21:
Spawn 1 instances, now Total 195
Counter: 196
Batcher Size:175
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
maxrep = -1;
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 22:
Spawn 1 instances, now Total 196
Counter: 197
Batcher Size:176
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
minrep = (2);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 23:
Spawn 1 instances, now Total 197
Counter: 198
Batcher Size:177
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
minrep = (6);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 24:
Spawn 1 instances, now Total 198
Counter: 199
Batcher Size:178
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
minrep = 0;
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 25:
Spawn 1 instances, now Total 199
Counter: 200
Batcher Size:179
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
minrep = (4);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 26:
Spawn 1 instances, now Total 200
Counter: 201
Batcher Size:180
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
maxrep = minrep;
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 27:
Spawn 1 instances, now Total 201
Counter: 202
Batcher Size:181
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
memset(&mbs, 0, sizeof(mbstate_t));
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 28:
Spawn 1 instances, now Total 202
Counter: 203
Batcher Size:182
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
minrep = (0);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 29:
Spawn 1 instances, now Total 203
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
BasicTester, Testing instance id 20:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 21:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: Unbalanced [
BasicTester, Testing instance id 22:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 23:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 24:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 25:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 26:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 27:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 28:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 29:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Counter: 204
Batcher Size:173
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
lexleft = (2);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 30:
Spawn 1 instances, now Total 204
Counter: 205
Batcher Size:174
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
maxrep = (0);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 31:
Spawn 1 instances, now Total 205
Counter: 206
Batcher Size:175
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
maxrep = (4);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 32:
Spawn 1 instances, now Total 206
Counter: 207
Batcher Size:176
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
maxrep = (6);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 33:
Spawn 1 instances, now Total 207
Counter: 208
Batcher Size:177
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
maxrep = (2);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 34:
Spawn 1 instances, now Total 208
Counter: 209
Batcher Size:178
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
lexleft = (4);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 35:
Spawn 1 instances, now Total 209
Counter: 210
Batcher Size:179
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
lexleft = (6);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 36:
Spawn 1 instances, now Total 210
Counter: 211
Batcher Size:180
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
dfa->multibyte_prop[dfa->tindex] = (4);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 37:
Spawn 1 instances, now Total 211
Counter: 212
Batcher Size:181
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
lasttok = (STAR);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 38:
Spawn 1 instances, now Total 212
Counter: 213
Batcher Size:182
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
lasttok = END;
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 39:
Spawn 1 instances, now Total 213
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
BasicTester, Testing instance id 30:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 31:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 32:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 33:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 34:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 35:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 36:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 37:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Segmentation fault (core dumped)
BasicTester, Testing instance id 38:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 39:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Counter: 214
Batcher Size:173
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
dfa->multibyte_prop[dfa->tindex] = (6);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 40:
Spawn 1 instances, now Total 214
Counter: 215
Batcher Size:174
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
lasttok = (EMPTY);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 41:
Spawn 1 instances, now Total 215
Counter: 216
Batcher Size:175
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
lasttok = (END);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 42:
Spawn 1 instances, now Total 216
Counter: 217
Batcher Size:176
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
lasttok = (REPMN);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 43:
Spawn 1 instances, now Total 217
Counter: 218
Batcher Size:177
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
lasttok = (RPAREN);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 44:
Spawn 1 instances, now Total 218
Counter: 219
Batcher Size:178
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
lasttok = (ENDLINE);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 45:
Spawn 1 instances, now Total 219
Counter: 220
Batcher Size:179
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
lasttok = (OR);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 46:
Spawn 1 instances, now Total 220
Counter: 221
Batcher Size:180
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
lasttok = (QMARK);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 47:
Spawn 1 instances, now Total 221
Counter: 222
Batcher Size:181
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
lasttok = (PLUS);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 48:
Spawn 1 instances, now Total 222
Counter: 223
Batcher Size:182
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
lasttok = (ORTOP);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 49:
Spawn 1 instances, now Total 223
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
BasicTester, Testing instance id 40:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Segmentation fault (core dumped)
BasicTester, Testing instance id 41:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 42:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 43:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 44:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 45:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 46:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 47:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 48:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 49:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Counter: 224
Batcher Size:173
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
lasttok = (ENDWORD);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 50:
Spawn 1 instances, now Total 224
Counter: 225
Batcher Size:174
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
lasttok = (LIMWORD);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 51:
Spawn 1 instances, now Total 225
Counter: 226
Batcher Size:175
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
lasttok = (MBCSET);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 52:
Spawn 1 instances, now Total 226
Counter: 227
Batcher Size:176
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
lasttok = (NOTLIMWORD);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 53:
Spawn 1 instances, now Total 227
Counter: 228
Batcher Size:177
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
lasttok = (LPAREN);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 54:
Spawn 1 instances, now Total 228
Counter: 229
Batcher Size:178
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
dfa->multibyte_prop[dfa->tindex] = (cur_mb_len == 1) ? 3 : (((cur_mb_index == 1) ? 1 : 0) + ((cur_mb_index == cur_mb_len) ? 2 : 0));
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 55:
Spawn 1 instances, now Total 229
Counter: 230
Batcher Size:179
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
lasttok = (6);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 56:
Spawn 1 instances, now Total 230
Counter: 231
Batcher Size:180
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
lasttok = (BEGWORD);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 57:
Spawn 1 instances, now Total 231
Counter: 232
Batcher Size:181
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
lasttok = (CRANGE);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 58:
Spawn 1 instances, now Total 232
Counter: 233
Batcher Size:182
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
lasttok = (CSET);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 59:
Spawn 1 instances, now Total 233
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
BasicTester, Testing instance id 50:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 51:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 52:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 53:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 54:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 55:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Segmentation fault (core dumped)
BasicTester, Testing instance id 56:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 57:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 58:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 59:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Counter: 234
Batcher Size:173
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
lasttok = (CAT);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 60:
Spawn 1 instances, now Total 234
Counter: 235
Batcher Size:174
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
lasttok = (ANYCHAR);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 61:
Spawn 1 instances, now Total 235
Counter: 236
Batcher Size:175
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
lasttok = (BACKREF);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 62:
Spawn 1 instances, now Total 236
Counter: 237
Batcher Size:176
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
lasttok = (BEGLINE);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 63:
Spawn 1 instances, now Total 237
Counter: 238
Batcher Size:177
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 64:
Spawn 1 instances, now Total 238
Counter: 239
Batcher Size:178
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
laststart = 1;
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 65:
Spawn 1 instances, now Total 239
Counter: 240
Batcher Size:179
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
lasttok = (2);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 66:
Spawn 1 instances, now Total 240
Counter: 241
Batcher Size:180
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
lasttok = (4);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 67:
Spawn 1 instances, now Total 241
Counter: 242
Batcher Size:181
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
lasttok = (0);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 68:
Spawn 1 instances, now Total 242
Counter: 243
Batcher Size:182
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
laststart = (2);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 69:
Spawn 1 instances, now Total 243
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
BasicTester, Testing instance id 60:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 61:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 62:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 63:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 64:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 65:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 66:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 67:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 68:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 69:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Counter: 244
Batcher Size:173
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
laststart = (4);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 70:
Spawn 1 instances, now Total 244
Counter: 245
Batcher Size:174
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
laststart = (6);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 71:
Spawn 1 instances, now Total 245
Counter: 246
Batcher Size:175
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
laststart = 0;
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 72:
Spawn 1 instances, now Total 246
Counter: 247
Batcher Size:176
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 73:
Spawn 1 instances, now Total 247
Counter: 248
Batcher Size:177
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
if (maxrep < 0)
    addtok(PLUS);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 74:
Spawn 1 instances, now Total 248
Counter: 249
Batcher Size:178
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 75:
Spawn 1 instances, now Total 249
Counter: 250
Batcher Size:179
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
if (tok != RPAREN)
    dfaerror(dcgettext(((void *)0), "Unbalanced (", 5));
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 76:
Spawn 1 instances, now Total 250
Counter: 251
Batcher Size:180
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
laststart = (0);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 77:
Spawn 1 instances, now Total 251
Counter: 252
Batcher Size:181
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
if (tok != END)
    dfaerror(dcgettext(((void *)0), "Unbalanced )", 5));
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 78:
Spawn 1 instances, now Total 252
Counter: 253
Batcher Size:182
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
if (minrep == 0)
    addtok(QMARK);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 79:
Spawn 1 instances, now Total 253
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building failed! Going to build saperately!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 70:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 71:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 72:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 73 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 74:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 75:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 76 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 77:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 78 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 79:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Aborted (core dumped)
Counter: 254
Batcher Size:173
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 80:
Spawn 1 instances, now Total 254
Counter: 255
Batcher Size:174
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 81:
Spawn 1 instances, now Total 255
Counter: 256
Batcher Size:175
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
if (--lexleft , *lexptr++ != ']')
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 82:
Spawn 1 instances, now Total 256
Counter: 257
Batcher Size:176
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
if (cur_mb_index)
    cur_mb_index = (cur_mb_index >= cur_mb_len) ? 0 : cur_mb_index + 1;
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 83:
Spawn 1 instances, now Total 257
Counter: 258
Batcher Size:177
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
if (depth > dfa->depth)
    dfa->depth = depth;
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 84:
Spawn 1 instances, now Total 258
Counter: 259
Batcher Size:178
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
if (lexleft == 0)
    dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 85:
Spawn 1 instances, now Total 259
Counter: 260
Batcher Size:179
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
if (cur_mb_len < 1)
    cur_mb_len = 1;
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 86:
Spawn 1 instances, now Total 260
Counter: 261
Batcher Size:180
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
if (0 <= maxrep && maxrep < minrep)
    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 87:
Spawn 1 instances, now Total 261
Counter: 262
Batcher Size:181
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
dfa->multibyte_prop[dfa->tindex] = 3;
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 88:
Spawn 1 instances, now Total 262
Counter: 263
Batcher Size:182
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
eolbyte = (0);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 89:
Spawn 1 instances, now Total 263
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building failed! Going to build saperately!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 80:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 81:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 82:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: Unbalanced [
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 83:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 84 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 85:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 86:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 87:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 88:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Segmentation fault (core dumped)
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 89:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Segmentation fault (core dumped)
Counter: 264
Batcher Size:173
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
hard_LC_COLLATE = (4);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 90:
Spawn 1 instances, now Total 264
Counter: 265
Batcher Size:174
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
if (!lexleft)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 91:
Spawn 1 instances, now Total 265
Counter: 266
Batcher Size:175
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    cur_mb_index = 0;
    cur_mb_len = 0;
    memset(&mbs, 0, sizeof(mbstate_t));
}
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 92:
Spawn 1 instances, now Total 266
Counter: 267
Batcher Size:176
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    free(mblen_buf);
    free(inputwcs);
}
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 93:
Spawn 1 instances, now Total 267
Counter: 268
Batcher Size:177
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
if (!syntax_bits_set)
    dfaerror(dcgettext(((void *)0), "No syntax specified", 5));
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 94:
Spawn 1 instances, now Total 268
Counter: 269
Batcher Size:178
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
hard_LC_COLLATE = (6);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 95:
Spawn 1 instances, now Total 269
Counter: 270
Batcher Size:179
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
hard_LC_COLLATE = hard_locale(3);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 96:
Spawn 1 instances, now Total 270
Counter: 271
Batcher Size:180
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 97:
Spawn 1 instances, now Total 271
Counter: 272
Batcher Size:181
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
eolbyte = (2);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 98:
Spawn 1 instances, now Total 272
Counter: 273
Batcher Size:182
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
free(inputwcs);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 99:
Spawn 1 instances, now Total 273
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
BasicTester, Testing instance id 90:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 91:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 92:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 93:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 94:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 95:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 96:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 97:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 98:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Segmentation fault (core dumped)
BasicTester, Testing instance id 99:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Counter: 274
Batcher Size:173
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
hard_LC_COLLATE = (0);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 100:
Spawn 1 instances, now Total 274
Counter: 275
Batcher Size:174
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
hard_LC_COLLATE = (2);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 101:
Spawn 1 instances, now Total 275
Counter: 276
Batcher Size:175
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
free(mblen_buf);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 102:
Spawn 1 instances, now Total 276
Counter: 277
Batcher Size:176
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
eolbyte = (4);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 103:
Spawn 1 instances, now Total 277
Counter: 278
Batcher Size:177
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
eolbyte = (6);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 104:
Spawn 1 instances, now Total 278
Counter: 279
Batcher Size:178
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
dfa->tokens[dfa->tindex++] = (0);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 105:
Spawn 1 instances, now Total 279
Counter: 280
Batcher Size:179
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 106:
Spawn 1 instances, now Total 280
Counter: 281
Batcher Size:180
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 107:
Spawn 1 instances, now Total 281
Counter: 282
Batcher Size:181
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 108:
Spawn 1 instances, now Total 282
Counter: 283
Batcher Size:182
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
dfaerror(dcgettext(((void *)0), "memory exhausted", 5));
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 109:
Spawn 1 instances, now Total 283
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
BasicTester, Testing instance id 100:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 101:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 102:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 103:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Segmentation fault (core dumped)
BasicTester, Testing instance id 104:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Segmentation fault (core dumped)
BasicTester, Testing instance id 105:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Aborted (core dumped)
BasicTester, Testing instance id 106:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: Memory exhausted
BasicTester, Testing instance id 107:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: Unbalanced [
BasicTester, Testing instance id 108:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: malformed repeat count
BasicTester, Testing instance id 109:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: memory exhausted
Counter: 284
Batcher Size:173
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 110:
Spawn 1 instances, now Total 284
Counter: 285
Batcher Size:174
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
dfaerror(dcgettext(((void *)0), "No syntax specified", 5));
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 111:
Spawn 1 instances, now Total 285
Counter: 286
Batcher Size:175
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
dfaerror(dcgettext(((void *)0), "Unbalanced (", 5));
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 112:
Spawn 1 instances, now Total 286
Counter: 287
Batcher Size:176
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
dfaerror(dcgettext(((void *)0), "Unbalanced )", 5));
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 113:
Spawn 1 instances, now Total 287
Counter: 288
Batcher Size:177
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
dfa->tokens[dfa->tindex++] = (2);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 114:
Spawn 1 instances, now Total 288
Counter: 289
Batcher Size:178
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
dfa->tokens[dfa->tindex++] = (4);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 115:
Spawn 1 instances, now Total 289
Counter: 290
Batcher Size:179
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
dfa->tokens[dfa->tindex++] = (6);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 116:
Spawn 1 instances, now Total 290
Counter: 291
Batcher Size:180
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
case_fold = (2);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 117:
Spawn 1 instances, now Total 291
Counter: 292
Batcher Size:181
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
cur_mb_len = (6);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 118:
Spawn 1 instances, now Total 292
Counter: 293
Batcher Size:182
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
dfa->depth = (0);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 119:
Spawn 1 instances, now Total 293
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
BasicTester, Testing instance id 110:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: Unfinished \ escape
BasicTester, Testing instance id 111:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: No syntax specified
BasicTester, Testing instance id 112:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: Unbalanced (
BasicTester, Testing instance id 113:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: Unbalanced )
BasicTester, Testing instance id 114:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Aborted (core dumped)
BasicTester, Testing instance id 115:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Aborted (core dumped)
BasicTester, Testing instance id 116:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Aborted (core dumped)
BasicTester, Testing instance id 117:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 118:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 119:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Counter: 294
Batcher Size:173
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
dfa->depth = depth;
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 120:
Spawn 1 instances, now Total 294
Counter: 295
Batcher Size:174
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
dfa->multibyte_prop[dfa->tindex] = (0);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 121:
Spawn 1 instances, now Total 295
Counter: 296
Batcher Size:175
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
dfa->multibyte_prop[dfa->tindex] = (2);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 122:
Spawn 1 instances, now Total 296
Counter: 297
Batcher Size:176
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
dfa->multibyte_prop[dfa->tindex] = ((dfa->nmbcsets - 1) << 2) + 3;
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 123:
Spawn 1 instances, now Total 297
Counter: 298
Batcher Size:177
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
dfa->depth = (2);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 124:
Spawn 1 instances, now Total 298
Counter: 299
Batcher Size:178
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
dfa->depth = (4);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 125:
Spawn 1 instances, now Total 299
Counter: 300
Batcher Size:179
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
dfa->depth = (6);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 126:
Spawn 1 instances, now Total 300
Counter: 301
Batcher Size:180
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
cur_mb_len = 0;
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 127:
Spawn 1 instances, now Total 301
Counter: 302
Batcher Size:181
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
depth = (0);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 128:
Spawn 1 instances, now Total 302
Counter: 303
Batcher Size:182
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
depth = (4);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 129:
Spawn 1 instances, now Total 303
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building failed! Going to build saperately!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 120 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 121:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Segmentation fault (core dumped)
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 122:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Segmentation fault (core dumped)
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 123:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Segmentation fault (core dumped)
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 124:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 125:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 126:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 127:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 128 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 129 failed as well!
Counter: 304
Batcher Size:173
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
depth = (6);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 130:
Spawn 1 instances, now Total 304
Counter: 305
Batcher Size:174
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
depth = (2);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 131:
Spawn 1 instances, now Total 305
Counter: 306
Batcher Size:175
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
cur_mb_len = 1;
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 132:
Spawn 1 instances, now Total 306
Counter: 307
Batcher Size:176
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
cur_mb_len = mbrlen(p, len, &mbs);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 133:
Spawn 1 instances, now Total 307
Counter: 308
Batcher Size:177
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
case_fold = (4);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 134:
Spawn 1 instances, now Total 308
Counter: 309
Batcher Size:178
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
cur_mb_index = (4);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 135:
Spawn 1 instances, now Total 309
Counter: 310
Batcher Size:179
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
cur_mb_index = 1;
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 136:
Spawn 1 instances, now Total 310
Counter: 311
Batcher Size:180
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
cur_mb_len = (2);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 137:
Spawn 1 instances, now Total 311
Counter: 312
Batcher Size:181
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
cur_mb_len = (4);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 138:
Spawn 1 instances, now Total 312
Counter: 313
Batcher Size:182
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
cur_mb_len = (0);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 139:
Spawn 1 instances, now Total 313
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building failed! Going to build saperately!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 130 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 131 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 132:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 133 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 134:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 135:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 136:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 137:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 138:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 139:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Counter: 314
Batcher Size:173
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
cur_mb_index = (6);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 140:
Spawn 1 instances, now Total 314
Counter: 315
Batcher Size:174
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
cur_mb_index = (cur_mb_index >= cur_mb_len) ? 0 : cur_mb_index + 1;
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 141:
Spawn 1 instances, now Total 315
Counter: 316
Batcher Size:175
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
cur_mb_index = 0;
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 142:
Spawn 1 instances, now Total 316
Counter: 317
Batcher Size:176
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
case_fold = (6);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 143:
Spawn 1 instances, now Total 317
Counter: 318
Batcher Size:177
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
case_fold = 1;
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 144:
Spawn 1 instances, now Total 318
Counter: 319
Batcher Size:178
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
cur_mb_index = (0);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 145:
Spawn 1 instances, now Total 319
Counter: 320
Batcher Size:179
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
cur_mb_index = (2);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 146:
Spawn 1 instances, now Total 320
Counter: 321
Batcher Size:180
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
closure();
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 147:
Spawn 1 instances, now Total 321
Counter: 322
Batcher Size:181
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
case_fold = 0;
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 148:
Spawn 1 instances, now Total 322
Counter: 323
Batcher Size:182
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
addtok((BACKREF));
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 149:
Spawn 1 instances, now Total 323
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
BasicTester, Testing instance id 140:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 141:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 142:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 143:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 144:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 145:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 146:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 147:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: Unbalanced [
BasicTester, Testing instance id 148:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 149:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Counter: 324
Batcher Size:173
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
addtok(OR);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 150:
Spawn 1 instances, now Total 324
Counter: 325
Batcher Size:174
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
addtok(tok);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 151:
Spawn 1 instances, now Total 325
Counter: 326
Batcher Size:175
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
branch();
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 152:
Spawn 1 instances, now Total 326
Counter: 327
Batcher Size:176
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
case_fold = (0);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 153:
Spawn 1 instances, now Total 327
Counter: 328
Batcher Size:177
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
atom();
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 154:
Spawn 1 instances, now Total 328
Counter: 329
Batcher Size:178
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
addtok(ORTOP);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 155:
Spawn 1 instances, now Total 329
Counter: 330
Batcher Size:179
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
addtok(PLUS);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 156:
Spawn 1 instances, now Total 330
Counter: 331
Batcher Size:180
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
addtok(QMARK);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 157:
Spawn 1 instances, now Total 331
Counter: 332
Batcher Size:181
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
addtok((BEGLINE));
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 158:
Spawn 1 instances, now Total 332
Counter: 333
Batcher Size:182
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
addtok((PLUS));
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 159:
Spawn 1 instances, now Total 333
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building failed! Going to build saperately!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 150:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Aborted (core dumped)
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 151 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 152:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: Unbalanced [
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 153:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 154:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: Unbalanced [
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 155:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Aborted (core dumped)
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 156:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 157:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Aborted (core dumped)
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 158:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 159:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Counter: 334
Batcher Size:173
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
addtok(CAT);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 160:
Spawn 1 instances, now Total 334
Counter: 335
Batcher Size:174
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
addtok(EMPTY);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 161:
Spawn 1 instances, now Total 335
Counter: 336
Batcher Size:175
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
addtok((QMARK));
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 162:
Spawn 1 instances, now Total 336
Counter: 337
Batcher Size:176
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
addtok((STAR));
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 163:
Spawn 1 instances, now Total 337
Counter: 338
Batcher Size:177
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
addtok(BACKREF);
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 164:
Spawn 1 instances, now Total 338
Counter: 339
Batcher Size:178
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
addtok((REPMN));
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 165:
Spawn 1 instances, now Total 339
Counter: 340
Batcher Size:179
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
addtok((RPAREN));
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 166:
Spawn 1 instances, now Total 340
Counter: 341
Batcher Size:180
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
addtok((ENDLINE));
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 167:
Spawn 1 instances, now Total 341
Counter: 342
Batcher Size:181
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
addtok((MBCSET));
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 168:
Spawn 1 instances, now Total 342
Counter: 343
Batcher Size:182
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
addtok((OR));
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 169:
Spawn 1 instances, now Total 343
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
BasicTester, Testing instance id 160:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Segmentation fault (core dumped)
BasicTester, Testing instance id 161:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 162:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Aborted (core dumped)
BasicTester, Testing instance id 163:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Aborted (core dumped)
BasicTester, Testing instance id 164:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 165:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 166:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 167:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 168:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 169:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Aborted (core dumped)
Counter: 344
Batcher Size:173
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
addtok((ORTOP));
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 170:
Spawn 1 instances, now Total 344
Counter: 345
Batcher Size:174
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
addtok((NOTLIMWORD));
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 171:
Spawn 1 instances, now Total 345
Counter: 346
Batcher Size:175
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
addtok((ENDWORD));
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 172:
Spawn 1 instances, now Total 346
Counter: 347
Batcher Size:176
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
addtok((LIMWORD));
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 173:
Spawn 1 instances, now Total 347
Counter: 348
Batcher Size:177
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
addtok((LPAREN));
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 174:
Spawn 1 instances, now Total 348
Counter: 349
Batcher Size:178
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
addtok((BEGWORD));
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 175:
Spawn 1 instances, now Total 349
Counter: 350
Batcher Size:179
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
addtok((CAT));
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 176:
Spawn 1 instances, now Total 350
Counter: 351
Batcher Size:180
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
addtok((END));
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 177:
Spawn 1 instances, now Total 351
Counter: 352
Batcher Size:181
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
addtok((CRANGE));
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 178:
Spawn 1 instances, now Total 352
Counter: 353
Batcher Size:182
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
addtok((EMPTY));
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 179:
Spawn 1 instances, now Total 353
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
BasicTester, Testing instance id 170:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Aborted (core dumped)
BasicTester, Testing instance id 171:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 172:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 173:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 174:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 175:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 176:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Segmentation fault (core dumped)
BasicTester, Testing instance id 177:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 178:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 179:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Counter: 354
Batcher Size:173
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
addtok((CSET));
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 180:
Spawn 1 instances, now Total 354
Counter: 355
Batcher Size:174
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
abort();
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 181:
Spawn 1 instances, now Total 355
Counter: 356
Batcher Size:175
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
addtok((ANYCHAR));
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 182:
Spawn 1 instances, now Total 356
Counter: 357
Batcher Size:176
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
++parens;
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 183:
Spawn 1 instances, now Total 357
Counter: 358
Batcher Size:177
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
--parens;
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 184:
Spawn 1 instances, now Total 358
Counter: 359
Batcher Size:178
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
--lexleft;
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 185:
Spawn 1 instances, now Total 359
Counter: 360
Batcher Size:179
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
--lexptr;
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 186:
Spawn 1 instances, now Total 360
Counter: 361
Batcher Size:180
Preprocess the following candidate with BasicTester:
Priority 7493
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
++lexleft;
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 187:
Spawn 1 instances, now Total 361
Counter: 362
Batcher Size:181
Preprocess the following candidate with BasicTester:
Priority 7486
At location src/dfa.c:473
--Src File: src/dfa.c
Fragment 0:
++dfa->cindex;
return strcoll(&c[0], &c[2]) <= 0 && 0 <= strcoll(&c[2], &c[4]);


BasicTester, a patch instance with id 188:
Spawn 1 instances, now Total 362
Counter: 363
Batcher Size:182
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
tok = (0);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 189:
Spawn 1 instances, now Total 363
Counter: 364
Batcher Size:183
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
tok = (8);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 190:
Spawn 1 instances, now Total 364
Counter: 365
Batcher Size:184
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
tok = lex();
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 191:
Spawn 1 instances, now Total 365
Counter: 366
Batcher Size:185
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
tok = (1);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 192:
Spawn 1 instances, now Total 366
Counter: 367
Batcher Size:186
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
syntax_bits_set = (0);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 193:
Spawn 1 instances, now Total 367
Counter: 368
Batcher Size:187
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
syntax_bits_set = 1;
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 194:
Spawn 1 instances, now Total 368
Counter: 369
Batcher Size:188
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
syntax_bits_set = (1);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 195:
Spawn 1 instances, now Total 369
Counter: 370
Batcher Size:189
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
syntax_bits_set = (8);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 196:
Spawn 1 instances, now Total 370
Counter: 371
Batcher Size:190
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
parens = (1);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 197:
Spawn 1 instances, now Total 371
Counter: 372
Batcher Size:191
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
regexp(1);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 198:
Spawn 1 instances, now Total 372
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building failed! Going to build saperately!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 189 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 190 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 191 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 192 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 193 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 194 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 195 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 196 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 197 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 198:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Counter: 373
Batcher Size:182
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
syntax_bits = (1);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 199:
Spawn 1 instances, now Total 373
Counter: 374
Batcher Size:183
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
syntax_bits = (8);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 200:
Spawn 1 instances, now Total 374
Counter: 375
Batcher Size:184
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
syntax_bits = (0);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 201:
Spawn 1 instances, now Total 375
Counter: 376
Batcher Size:185
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
parens = (8);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 202:
Spawn 1 instances, now Total 376
Counter: 377
Batcher Size:186
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
parens = 0;
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 203:
Spawn 1 instances, now Total 377
Counter: 378
Batcher Size:187
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
regexp(0);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 204:
Spawn 1 instances, now Total 378
Counter: 379
Batcher Size:188
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
minrep = 0;
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 205:
Spawn 1 instances, now Total 379
Counter: 380
Batcher Size:189
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
parens = (0);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 206:
Spawn 1 instances, now Total 380
Counter: 381
Batcher Size:190
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
maxrep = minrep;
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 207:
Spawn 1 instances, now Total 381
Counter: 382
Batcher Size:191
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
minrep = (1);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 208:
Spawn 1 instances, now Total 382
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building failed! Going to build saperately!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 199 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 200 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 201 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 202 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 203 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 204:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 205 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 206 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 207 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 208 failed as well!
Counter: 383
Batcher Size:182
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
minrep = (8);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 209:
Spawn 1 instances, now Total 383
Counter: 384
Batcher Size:183
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
memset(&mbs, 0, sizeof(mbstate_t));
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 210:
Spawn 1 instances, now Total 384
Counter: 385
Batcher Size:184
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
memset((c), 0, sizeof(charclass));
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 211:
Spawn 1 instances, now Total 385
Counter: 386
Batcher Size:185
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
minrep = (0);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 212:
Spawn 1 instances, now Total 386
Counter: 387
Batcher Size:186
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
maxrep = (0);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 213:
Spawn 1 instances, now Total 387
Counter: 388
Batcher Size:187
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
maxrep = (8);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 214:
Spawn 1 instances, now Total 388
Counter: 389
Batcher Size:188
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
maxrep = -1;
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 215:
Spawn 1 instances, now Total 389
Counter: 390
Batcher Size:189
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
maxrep = (1);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 216:
Spawn 1 instances, now Total 390
Counter: 391
Batcher Size:190
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
lexleft = (1);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 217:
Spawn 1 instances, now Total 391
Counter: 392
Batcher Size:191
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
lexleft = (8);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 218:
Spawn 1 instances, now Total 392
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building failed! Going to build saperately!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 209 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 210 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 211:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 212 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 213 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 214 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 215 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 216 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 217 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 218 failed as well!
Counter: 393
Batcher Size:182
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
lasttok = END;
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 219:
Spawn 1 instances, now Total 393
Counter: 394
Batcher Size:183
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
lexleft = (0);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 220:
Spawn 1 instances, now Total 394
Counter: 395
Batcher Size:184
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
lasttok = (QMARK);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 221:
Spawn 1 instances, now Total 395
Counter: 396
Batcher Size:185
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
lasttok = (RPAREN);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 222:
Spawn 1 instances, now Total 396
Counter: 397
Batcher Size:186
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
lasttok = (STAR);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 223:
Spawn 1 instances, now Total 397
Counter: 398
Batcher Size:187
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
lasttok = (REPMN);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 224:
Spawn 1 instances, now Total 398
Counter: 399
Batcher Size:188
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
lasttok = (NOTLIMWORD);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 225:
Spawn 1 instances, now Total 399
Counter: 400
Batcher Size:189
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
lasttok = (PLUS);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 226:
Spawn 1 instances, now Total 400
Counter: 401
Batcher Size:190
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
lasttok = (OR);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 227:
Spawn 1 instances, now Total 401
Counter: 402
Batcher Size:191
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
lasttok = (ORTOP);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 228:
Spawn 1 instances, now Total 402
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building failed! Going to build saperately!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 219 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 220 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 221 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 222 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 223 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 224 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 225 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 226 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 227 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 228 failed as well!
Counter: 403
Batcher Size:182
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
lasttok = (CSET);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 229:
Spawn 1 instances, now Total 403
Counter: 404
Batcher Size:183
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
lasttok = (ENDWORD);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 230:
Spawn 1 instances, now Total 404
Counter: 405
Batcher Size:184
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
lasttok = (LPAREN);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 231:
Spawn 1 instances, now Total 405
Counter: 406
Batcher Size:185
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
lasttok = (MBCSET);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 232:
Spawn 1 instances, now Total 406
Counter: 407
Batcher Size:186
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
lasttok = (LIMWORD);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 233:
Spawn 1 instances, now Total 407
Counter: 408
Batcher Size:187
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
lasttok = (EMPTY);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 234:
Spawn 1 instances, now Total 408
Counter: 409
Batcher Size:188
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
lasttok = (END);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 235:
Spawn 1 instances, now Total 409
Counter: 410
Batcher Size:189
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
lasttok = (ENDLINE);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 236:
Spawn 1 instances, now Total 410
Counter: 411
Batcher Size:190
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
lasttok = (ANYCHAR);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 237:
Spawn 1 instances, now Total 411
Counter: 412
Batcher Size:191
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
lasttok = (CAT);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 238:
Spawn 1 instances, now Total 412
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building failed! Going to build saperately!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 229 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 230 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 231 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 232 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 233 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 234 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 235 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 236 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 237 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 238 failed as well!
Counter: 413
Batcher Size:182
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
lasttok = (CRANGE);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 239:
Spawn 1 instances, now Total 413
Counter: 414
Batcher Size:183
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
lasttok = (BACKREF);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 240:
Spawn 1 instances, now Total 414
Counter: 415
Batcher Size:184
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
lasttok = (BEGLINE);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 241:
Spawn 1 instances, now Total 415
Counter: 416
Batcher Size:185
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
lasttok = (BEGWORD);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 242:
Spawn 1 instances, now Total 416
Counter: 417
Batcher Size:186
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
lasttok = (1);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 243:
Spawn 1 instances, now Total 417
Counter: 418
Batcher Size:187
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
lasttok = (8);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 244:
Spawn 1 instances, now Total 418
Counter: 419
Batcher Size:188
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
free(inputwcs);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 245:
Spawn 1 instances, now Total 419
Counter: 420
Batcher Size:189
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
if (cur_mb_len < 1)
    cur_mb_len = 1;
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 246:
Spawn 1 instances, now Total 420
Counter: 421
Batcher Size:190
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
laststart = 1;
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 247:
Spawn 1 instances, now Total 421
Counter: 422
Batcher Size:191
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
lasttok = (0);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 248:
Spawn 1 instances, now Total 422
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building failed! Going to build saperately!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 239 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 240 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 241 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 242 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 243 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 244 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 245 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 246 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 247 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 248 failed as well!
Counter: 423
Batcher Size:182
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
if (tok != END)
    dfaerror(dcgettext(((void *)0), "Unbalanced )", 5));
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 249:
Spawn 1 instances, now Total 423
Counter: 424
Batcher Size:183
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
laststart = (8);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 250:
Spawn 1 instances, now Total 424
Counter: 425
Batcher Size:184
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
laststart = 0;
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 251:
Spawn 1 instances, now Total 425
Counter: 426
Batcher Size:185
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
if (tok != RPAREN)
    dfaerror(dcgettext(((void *)0), "Unbalanced (", 5));
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 252:
Spawn 1 instances, now Total 426
Counter: 427
Batcher Size:186
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
laststart = (0);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 253:
Spawn 1 instances, now Total 427
Counter: 428
Batcher Size:187
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
laststart = (1);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 254:
Spawn 1 instances, now Total 428
Counter: 429
Batcher Size:188
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
if (depth > dfa->depth)
    dfa->depth = depth;
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 255:
Spawn 1 instances, now Total 429
Counter: 430
Batcher Size:189
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
if (minrep == 0)
    addtok(QMARK);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 256:
Spawn 1 instances, now Total 430
Counter: 431
Batcher Size:190
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 257:
Spawn 1 instances, now Total 431
Counter: 432
Batcher Size:191
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 258:
Spawn 1 instances, now Total 432
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building failed! Going to build saperately!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 249 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 250 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 251 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 252 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 253 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 254 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 255 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 256 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 257 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 258 failed as well!
Counter: 433
Batcher Size:182
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 259:
Spawn 1 instances, now Total 433
Counter: 434
Batcher Size:183
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
if (lexleft == 0)
    dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 260:
Spawn 1 instances, now Total 434
Counter: 435
Batcher Size:184
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
if (maxrep < 0)
    addtok(PLUS);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 261:
Spawn 1 instances, now Total 435
Counter: 436
Batcher Size:185
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
free(mblen_buf);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 262:
Spawn 1 instances, now Total 436
Counter: 437
Batcher Size:186
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
if (!syntax_bits_set)
    dfaerror(dcgettext(((void *)0), "No syntax specified", 5));
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 263:
Spawn 1 instances, now Total 437
Counter: 438
Batcher Size:187
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    return lasttok = parse_bracket_exp_mb();
}
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 264:
Spawn 1 instances, now Total 438
Counter: 439
Batcher Size:188
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
if (0 <= maxrep && maxrep < minrep)
    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 265:
Spawn 1 instances, now Total 439
Counter: 440
Batcher Size:189
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
if (cur_mb_index)
    cur_mb_index = (cur_mb_index >= cur_mb_len) ? 0 : cur_mb_index + 1;
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 266:
Spawn 1 instances, now Total 440
Counter: 441
Batcher Size:190
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
if (--lexleft , *lexptr++ != ']')
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 267:
Spawn 1 instances, now Total 441
Counter: 442
Batcher Size:191
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    cur_mb_index = 0;
    cur_mb_len = 0;
    memset(&mbs, 0, sizeof(mbstate_t));
}
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 268:
Spawn 1 instances, now Total 442
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building failed! Going to build saperately!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 259 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 260 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 261 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 262 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 263 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 264 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 265 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 266 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 267 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 268 failed as well!
Counter: 443
Batcher Size:182
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    free(mblen_buf);
    free(inputwcs);
}
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 269:
Spawn 1 instances, now Total 443
Counter: 444
Batcher Size:183
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 270:
Spawn 1 instances, now Total 444
Counter: 445
Batcher Size:184
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
hard_LC_COLLATE = (0);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 271:
Spawn 1 instances, now Total 445
Counter: 446
Batcher Size:185
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
hard_LC_COLLATE = (8);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 272:
Spawn 1 instances, now Total 446
Counter: 447
Batcher Size:186
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 273:
Spawn 1 instances, now Total 447
Counter: 448
Batcher Size:187
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
if (!lexleft)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 274:
Spawn 1 instances, now Total 448
Counter: 449
Batcher Size:188
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
hard_LC_COLLATE = hard_locale(3);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 275:
Spawn 1 instances, now Total 449
Counter: 450
Batcher Size:189
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
hard_LC_COLLATE = (1);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 276:
Spawn 1 instances, now Total 450
Counter: 451
Batcher Size:190
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
dfa->multibyte_prop[dfa->tindex] = 3;
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 277:
Spawn 1 instances, now Total 451
Counter: 452
Batcher Size:191
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 278:
Spawn 1 instances, now Total 452
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building failed! Going to build saperately!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 269 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 270 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 271 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 272 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 273 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 274 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 275 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 276 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 277 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 278:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: Unbalanced [
Counter: 453
Batcher Size:182
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
eolbyte = (0);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 279:
Spawn 1 instances, now Total 453
Counter: 454
Batcher Size:183
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
eolbyte = (8);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 280:
Spawn 1 instances, now Total 454
Counter: 455
Batcher Size:184
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
free((c));
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 281:
Spawn 1 instances, now Total 455
Counter: 456
Batcher Size:185
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
eolbyte = (1);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 282:
Spawn 1 instances, now Total 456
Counter: 457
Batcher Size:186
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 283:
Spawn 1 instances, now Total 457
Counter: 458
Batcher Size:187
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 284:
Spawn 1 instances, now Total 458
Counter: 459
Batcher Size:188
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
dfaerror(dcgettext(((void *)0), "memory exhausted", 5));
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 285:
Spawn 1 instances, now Total 459
Counter: 460
Batcher Size:189
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
dfa->tokens[dfa->tindex++] = (0);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 286:
Spawn 1 instances, now Total 460
Counter: 461
Batcher Size:190
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 287:
Spawn 1 instances, now Total 461
Counter: 462
Batcher Size:191
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
dfaerror(dcgettext(((void *)0), "Unbalanced (", 5));
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 288:
Spawn 1 instances, now Total 462
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building failed! Going to build saperately!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 279 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 280 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 281:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Aborted (core dumped)
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 282 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 283:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: Unfinished \ escape
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 284:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: malformed repeat count
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 285:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: memory exhausted
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 286 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 287:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: Memory exhausted
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 288:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: Unbalanced (
Counter: 463
Batcher Size:182
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
dfaerror(dcgettext(((void *)0), "Unbalanced )", 5));
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 289:
Spawn 1 instances, now Total 463
Counter: 464
Batcher Size:183
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
dfaerror(dcgettext(((void *)0), "No syntax specified", 5));
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 290:
Spawn 1 instances, now Total 464
Counter: 465
Batcher Size:184
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
dfa->tokens[dfa->tindex++] = (1);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 291:
Spawn 1 instances, now Total 465
Counter: 466
Batcher Size:185
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
dfa->tokens[dfa->tindex++] = (8);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 292:
Spawn 1 instances, now Total 466
Counter: 467
Batcher Size:186
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
cur_mb_len = (8);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 293:
Spawn 1 instances, now Total 467
Counter: 468
Batcher Size:187
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
cur_mb_len = 0;
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 294:
Spawn 1 instances, now Total 468
Counter: 469
Batcher Size:188
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
dfa->depth = (1);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 295:
Spawn 1 instances, now Total 469
Counter: 470
Batcher Size:189
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
dfa->multibyte_prop[dfa->tindex] = (0);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 296:
Spawn 1 instances, now Total 470
Counter: 471
Batcher Size:190
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
dfa->multibyte_prop[dfa->tindex] = (8);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 297:
Spawn 1 instances, now Total 471
Counter: 472
Batcher Size:191
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
dfa->multibyte_prop[dfa->tindex] = (cur_mb_len == 1) ? 3 : (((cur_mb_index == 1) ? 1 : 0) + ((cur_mb_index == cur_mb_len) ? 2 : 0));
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 298:
Spawn 1 instances, now Total 472
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building failed! Going to build saperately!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 289:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: Unbalanced )
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 290:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: No syntax specified
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 291 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 292 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 293 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 294 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 295 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 296 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 297 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 298 failed as well!
Counter: 473
Batcher Size:182
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
dfa->multibyte_prop[dfa->tindex] = (1);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 299:
Spawn 1 instances, now Total 473
Counter: 474
Batcher Size:183
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
dfa->depth = (8);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 300:
Spawn 1 instances, now Total 474
Counter: 475
Batcher Size:184
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
dfa->depth = depth;
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 301:
Spawn 1 instances, now Total 475
Counter: 476
Batcher Size:185
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
dfa->multibyte_prop[dfa->tindex] = ((dfa->nmbcsets - 1) << 2) + 3;
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 302:
Spawn 1 instances, now Total 476
Counter: 477
Batcher Size:186
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
cur_mb_len = 1;
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 303:
Spawn 1 instances, now Total 477
Counter: 478
Batcher Size:187
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
cur_mb_len = mbrlen(p, len, &mbs);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 304:
Spawn 1 instances, now Total 478
Counter: 479
Batcher Size:188
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
depth = (0);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 305:
Spawn 1 instances, now Total 479
Counter: 480
Batcher Size:189
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
depth = (8);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 306:
Spawn 1 instances, now Total 480
Counter: 481
Batcher Size:190
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
dfa->depth = (0);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 307:
Spawn 1 instances, now Total 481
Counter: 482
Batcher Size:191
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
depth = (1);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 308:
Spawn 1 instances, now Total 482
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building failed! Going to build saperately!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 299 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 300 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 301 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 302 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 303 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 304 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 305 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 306 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 307 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 308 failed as well!
Counter: 483
Batcher Size:182
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
atom();
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 309:
Spawn 1 instances, now Total 483
Counter: 484
Batcher Size:183
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
cur_mb_index = (0);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 310:
Spawn 1 instances, now Total 484
Counter: 485
Batcher Size:184
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
cur_mb_index = 0;
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 311:
Spawn 1 instances, now Total 485
Counter: 486
Batcher Size:185
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
cur_mb_len = (0);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 312:
Spawn 1 instances, now Total 486
Counter: 487
Batcher Size:186
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
cur_mb_len = (1);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 313:
Spawn 1 instances, now Total 487
Counter: 488
Batcher Size:187
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
cur_mb_index = 1;
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 314:
Spawn 1 instances, now Total 488
Counter: 489
Batcher Size:188
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
cur_mb_index = (1);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 315:
Spawn 1 instances, now Total 489
Counter: 490
Batcher Size:189
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
cur_mb_index = (8);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 316:
Spawn 1 instances, now Total 490
Counter: 491
Batcher Size:190
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
cur_mb_index = (cur_mb_index >= cur_mb_len) ? 0 : cur_mb_index + 1;
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 317:
Spawn 1 instances, now Total 491
Counter: 492
Batcher Size:191
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
branch();
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 318:
Spawn 1 instances, now Total 492
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building failed! Going to build saperately!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 309:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 310 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 311 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 312 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 313 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 314 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 315 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 316 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 317 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 318:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Counter: 493
Batcher Size:182
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
case_fold = (8);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 319:
Spawn 1 instances, now Total 493
Counter: 494
Batcher Size:183
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
case_fold = 1;
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 320:
Spawn 1 instances, now Total 494
Counter: 495
Batcher Size:184
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
closure();
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 321:
Spawn 1 instances, now Total 495
Counter: 496
Batcher Size:185
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
case_fold = 0;
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 322:
Spawn 1 instances, now Total 496
Counter: 497
Batcher Size:186
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
case_fold = (0);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 323:
Spawn 1 instances, now Total 497
Counter: 498
Batcher Size:187
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
case_fold = (1);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 324:
Spawn 1 instances, now Total 498
Counter: 499
Batcher Size:188
Preprocess the following candidate with BasicTester:
Priority 7257
At location src/dfa.c:239
--Src File: src/dfa.c
Fragment 0:
addtok(BACKREF);
return c[b / (8 * sizeof(int))] & 1 << b % (8 * sizeof(int));


BasicTester, a patch instance with id 325:
Spawn 1 instances, now Total 499
Going to sync the batch tester, clear all existing tasks!
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 0:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 70:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: Memory exhausted
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: Memory exhausted
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: Memory exhausted
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: Memory exhausted
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: Memory exhausted
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: Memory exhausted
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: Memory exhausted
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: Memory exhausted
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 1:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 23:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: Memory exhausted
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: Memory exhausted
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: Memory exhausted
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: Memory exhausted
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: Memory exhausted
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: Memory exhausted
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: Memory exhausted
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: Memory exhausted
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: Memory exhausted
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: Memory exhausted
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 119:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 120:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: Memory exhausted
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: Memory exhausted
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: Memory exhausted
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: Memory exhausted
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: Memory exhausted
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: Memory exhausted
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: Memory exhausted
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building failed! Going to build saperately!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 319 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 320 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 321:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 322 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 323 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x14ede340 id 324 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcBasicTester, Testing instance id 325:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 71:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 94:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 150:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 168:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
BasicTester, Testing instance id 180:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 181:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Aborted (core dumped)
BasicTester, Testing instance id 182:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 183:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 184:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 185:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Segmentation fault (core dumped)
BasicTester, Testing instance id 186:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: Unbalanced [
BasicTester, Testing instance id 187:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
BasicTester, Testing instance id 188:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 2:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 3:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 11:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 134:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 141:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 72:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 78:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Passed Negative Cases wiht CondTestder!
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 3  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 5  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 11  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 12  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 13  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 14  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 15  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 17  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 18  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 22  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 23  > __res
Passed Positive Cases
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 3  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 5  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 11  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 12  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 13  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 14  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 15  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 17  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 18  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 22  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 23  > __res
Passed!
CondTester, Postprocessing instance id 78:
Trying a synthesis expr 1
Skipping a synthesis:1
Trying a synthesis expr hard_LC_COLLATE != 0
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcRunning test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 3  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 5  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 11  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 12  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 13  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 14  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 15  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 17  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 18  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 22  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 23  > __res
Passed Positive Cases
Passed!
Passed with updated best score 19999922.000000
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 37:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 54:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 63:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 38:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 41:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: Unbalanced [
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: Unbalanced [
CondTester, Testing instance id 44:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 146:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 147:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 142:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 145:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 15:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 16:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: Unbalanced [
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: Unbalanced [
CondTester, Testing instance id 17:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 162:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 163:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Passed Negative Cases wiht CondTestder!
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 3  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 5  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 11  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 12  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 13  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 14  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 15  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 17  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 18  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 22  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 23  > __res
Passed Positive Cases
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 3  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 5  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 11  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 12  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 13  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 14  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 15  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 17  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 18  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 22  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 23  > __res
Passed!
CondTester, Postprocessing instance id 163:
Postprocessing failed!
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 171:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 172:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 151:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 135:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 136:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Passed Negative Cases wiht CondTestder!
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 3  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 5  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 11  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 12  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 13  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 14  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 15  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 17  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 18  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 22  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 23  > __res
Passed Positive Cases
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 3  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 5  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 11  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 12  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 13  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 14  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 15  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 17  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 18  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 22  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 23  > __res
Passed!
CondTester, Postprocessing instance id 136:
Postprocessing failed!
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 121:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 128:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 122:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 123:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 95:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 103:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 89:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 91:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 83:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 88:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 45:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 46:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 42:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 43:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: No syntax specified
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: No syntax specified
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 24:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 27:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: Unbalanced )
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: Unbalanced )
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 25:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 26:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Aborted (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 21:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 22:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 12:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 13:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 14:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 164:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 167:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 152:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 157:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 153:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 154:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 124:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 127:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 106:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 107:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Passed Negative Cases wiht CondTestder!
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 3  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 5  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 11  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 12  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 13  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 14  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 15  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 17  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 18  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 22  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 23  > __res
Passed Positive Cases
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 3  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 5  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 11  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 12  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 13  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 14  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 15  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 17  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 18  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 22  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 23  > __res
Passed!
CondTester, Postprocessing instance id 107:
Postprocessing failed!
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 108:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 115:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 109:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 110:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 104:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 105:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Passed Negative Cases wiht CondTestder!
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 3  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 5  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 11  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 12  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 13  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 14  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 15  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 17  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 18  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 22  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 23  > __res
Passed Positive Cases
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 3  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 5  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 11  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 12  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 13  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 14  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 15  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 17  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 18  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 22  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 23  > __res
Passed!
CondTester, Postprocessing instance id 105:
Postprocessing failed!
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building failed! Going to build saperately!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x198e6de0 id 165 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x198e6de0 id 166 failed as well!
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 155:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 156:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Passed Negative Cases wiht CondTestder!
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 3  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 5  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 11  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 12  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 13  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 14  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 15  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 17  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 18  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 22  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 23  > __res
Passed Positive Cases
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 3  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 5  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 11  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 12  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 13  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 14  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 15  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 17  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 18  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 22  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 23  > __res
Passed!
CondTester, Postprocessing instance id 156:
Postprocessing failed!
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 137:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 138:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 90:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 92:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 93:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: Memory exhausted
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: Memory exhausted
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src/src/grep: Memory exhausted
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 18:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 19:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 20:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 8:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 9:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 10:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 4:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 5:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 6:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 7:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 169:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 170:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 139:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 140:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 160:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 161:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 158:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 159:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 148:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 149:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 143:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 144:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 132:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 133:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Segmentation fault (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building failed! Going to build saperately!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x198e6de0 id 129 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x198e6de0 id 130 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x198e6de0 id 131 failed as well!
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 125:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 126:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 118:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 116:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 117:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 113:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 114:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 111:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 112:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 102:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 100:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 101:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 98:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 99:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 96:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 97:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 84:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 87:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 85:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 86:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 79:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 80:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 81:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 82:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 73:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 76:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 77:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 74:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 75:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 68:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 69:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 64:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 67:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building failed! Going to build saperately!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x198e6de0 id 65 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcSingle building for Tester 0x198e6de0 id 66 failed as well!
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 61:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 62:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 59:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 60:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 55:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 58:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 56:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 57:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 47:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 52:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 53:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 48:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 51:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 49:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 50:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 39:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 40:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 35:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 36:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Aborted (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 28:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 29:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 34:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 32:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 33:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 30:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
CondTester, Testing instance id 31:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-0d38a8bb-c1cb19fe/tempworkdir 0  > __res
Total cnt of passed cond schemas: 6
Total cnt of cond schemas: 173
Counter: 500
Batcher Size:0
The found score 19999922.000000 is greater than current score 7257.000000!
Terminate current session!
Generated a patch at candidate schema no 79
Total cnt of passed cond schemas: 6
Total cnt of cond schemas: 173
Candidate count:0!!
Found a fix! Store to: grep-fix-0d38a8bb-c1cb19fesrc_dfa.c
Repair process ends successfully!
Total 223341 different repair candidate schema!!!!
Total number of compiles: 324
Total number of test eval: 909
