Initialize the program!
Verify Test Cases
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcRunning test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 11 12 14 17 22  > __res
All passed!
Done Verification
Generating repair candidates!
Processing src/dfa.c
going to directory /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src
In file included from <built-in>:312:
<command line>:2:20: warning: missing terminating '"' character [-Winvalid-pp-token]
#define LOCALEDIR \"/usr/local/share/locale\"
                   ^
Skipping nonlast:Priority -155
At location src/dfa.c:148
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
ptr_t r = calloc(n, s);

....
Skipping nonlast:Priority -155
At location src/dfa.c:148
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
ptr_t r = calloc(n, s);

....
Skipping nonlast:Priority -155
At location src/dfa.c:148
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
ptr_t r = calloc(n, s);

....
Skipping nonlast:Priority -155
At location src/dfa.c:148
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
ptr_t r = calloc(n, s);

....
Skipping nonlast:Priority -155
At location src/dfa.c:148
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
ptr_t r = calloc(n, s);

....
Skipping nonlast:Priority -155
At location src/dfa.c:148
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
ptr_t r = calloc(n, s);

....
Skipping nonlast:Priority -155
At location src/dfa.c:148
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
ptr_t r = calloc(n, s);

....
Skipping nonlast:Priority -155
At location src/dfa.c:148
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
ptr_t r = calloc(n, s);

....
Skipping nonlast:Priority -155
At location src/dfa.c:148
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
ptr_t r = calloc(n, s);

....
Skipping nonlast addifexit:Priority 4845
At location src/dfa.c:148
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(n, s)))
    return 0;
ptr_t r = calloc(n, s);

....
IsErr:priority 4846
at location src/dfa.c:150
--src file: src/dfa.c
fragment 0:
if (!(__abst_hole(r, n, s)))
    if (!r)
        dfaerror(dcgettext(((void *)0), "memory exhausted", 5));

....
Skipping error ifguard:Priority 4846
At location src/dfa.c:150
--Src File: src/dfa.c
Fragment 0:
if (!(__abst_hole(r, n, s)))
    if (!r)
        dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping nonlast:Priority 7346
At location src/dfa.c:150
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (!r)
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping nonlast:Priority 7346
At location src/dfa.c:150
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (!r)
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping nonlast:Priority 7346
At location src/dfa.c:150
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
if (!r)
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping nonlast:Priority 7346
At location src/dfa.c:150
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
if (!r)
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping nonlast:Priority 7346
At location src/dfa.c:150
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
if (!r)
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping nonlast:Priority 7346
At location src/dfa.c:150
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
if (!r)
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping nonlast:Priority 7346
At location src/dfa.c:150
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (!r)
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping nonlast:Priority 7346
At location src/dfa.c:150
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (!r)
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping nonlast:Priority 7346
At location src/dfa.c:150
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (!r)
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping nonlast addifexit:Priority 11096
At location src/dfa.c:150
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(r, n, s)))
    return 0;
if (!r)
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping returnreturn addifexit:Priority 4847
At location src/dfa.c:152
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(r, n, s)))
    return 0;
return r;

....
Skipping nonlast:Priority -194
At location src/dfa.c:158
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
ptr_t r = malloc(n);

....
Skipping nonlast:Priority -194
At location src/dfa.c:158
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
ptr_t r = malloc(n);

....
Skipping nonlast:Priority -194
At location src/dfa.c:158
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
ptr_t r = malloc(n);

....
Skipping nonlast:Priority -194
At location src/dfa.c:158
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
ptr_t r = malloc(n);

....
Skipping nonlast:Priority -194
At location src/dfa.c:158
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
ptr_t r = malloc(n);

....
Skipping nonlast:Priority -194
At location src/dfa.c:158
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
ptr_t r = malloc(n);

....
Skipping nonlast:Priority -194
At location src/dfa.c:158
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
ptr_t r = malloc(n);

....
Skipping nonlast:Priority -194
At location src/dfa.c:158
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
ptr_t r = malloc(n);

....
Skipping nonlast:Priority -194
At location src/dfa.c:158
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
ptr_t r = malloc(n);

....
Skipping nonlast addifexit:Priority 4806
At location src/dfa.c:158
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(n)))
    return 0;
ptr_t r = malloc(n);

....
IsErr:priority 4808
at location src/dfa.c:161
--src file: src/dfa.c
fragment 0:
if (!(__abst_hole(r, n)))
    if (!r)
        dfaerror(dcgettext(((void *)0), "memory exhausted", 5));

....
Skipping error ifguard:Priority 4808
At location src/dfa.c:161
--Src File: src/dfa.c
Fragment 0:
if (!(__abst_hole(r, n)))
    if (!r)
        dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping nonlast:Priority -192
At location src/dfa.c:161
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (!r)
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping nonlast:Priority -192
At location src/dfa.c:161
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (!r)
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping nonlast:Priority -192
At location src/dfa.c:161
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
if (!r)
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping nonlast:Priority -192
At location src/dfa.c:161
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
if (!r)
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping nonlast:Priority -192
At location src/dfa.c:161
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
if (!r)
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping nonlast:Priority -192
At location src/dfa.c:161
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
if (!r)
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping nonlast:Priority -192
At location src/dfa.c:161
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (!r)
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping nonlast:Priority -192
At location src/dfa.c:161
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (!r)
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping nonlast:Priority -192
At location src/dfa.c:161
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (!r)
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping nonlast addifexit:Priority 3558
At location src/dfa.c:161
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(r, n)))
    return 0;
if (!r)
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping returnreturn addifexit:Priority 4809
At location src/dfa.c:163
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(r, n)))
    return 0;
return r;

....
Skipping nonlast:Priority -205
At location src/dfa.c:169
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
ptr_t r = realloc(p, n);

....
Skipping nonlast:Priority -205
At location src/dfa.c:169
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
ptr_t r = realloc(p, n);

....
Skipping nonlast:Priority -205
At location src/dfa.c:169
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
ptr_t r = realloc(p, n);

....
Skipping nonlast:Priority -205
At location src/dfa.c:169
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
ptr_t r = realloc(p, n);

....
Skipping nonlast:Priority -205
At location src/dfa.c:169
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
ptr_t r = realloc(p, n);

....
Skipping nonlast:Priority -205
At location src/dfa.c:169
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
ptr_t r = realloc(p, n);

....
Skipping nonlast:Priority -205
At location src/dfa.c:169
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
ptr_t r = realloc(p, n);

....
Skipping nonlast:Priority -205
At location src/dfa.c:169
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
ptr_t r = realloc(p, n);

....
Skipping nonlast:Priority -205
At location src/dfa.c:169
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
ptr_t r = realloc(p, n);

....
Skipping nonlast addifexit:Priority 4795
At location src/dfa.c:169
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(p, n)))
    return 0;
ptr_t r = realloc(p, n);

....
IsErr:priority 4797
at location src/dfa.c:172
--src file: src/dfa.c
fragment 0:
if (!(__abst_hole(r, p, n)))
    if (!r)
        dfaerror(dcgettext(((void *)0), "memory exhausted", 5));

....
Skipping error ifguard:Priority 4797
At location src/dfa.c:172
--Src File: src/dfa.c
Fragment 0:
if (!(__abst_hole(r, p, n)))
    if (!r)
        dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping nonlast:Priority -203
At location src/dfa.c:172
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (!r)
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping nonlast:Priority -203
At location src/dfa.c:172
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (!r)
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping nonlast:Priority -203
At location src/dfa.c:172
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
if (!r)
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping nonlast:Priority -203
At location src/dfa.c:172
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
if (!r)
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping nonlast:Priority -203
At location src/dfa.c:172
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
if (!r)
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping nonlast:Priority -203
At location src/dfa.c:172
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
if (!r)
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping nonlast:Priority -203
At location src/dfa.c:172
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (!r)
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping nonlast:Priority -203
At location src/dfa.c:172
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (!r)
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping nonlast:Priority -203
At location src/dfa.c:172
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (!r)
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping nonlast addifexit:Priority 3547
At location src/dfa.c:172
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(r, p, n)))
    return 0;
if (!r)
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));

....
Skipping returnreturn addifexit:Priority 4798
At location src/dfa.c:174
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(r, p, n)))
    return 0;
return r;

....
Skipping nonlast:Priority 7038
At location src/dfa.c:312
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
syntax_bits_set = 1;

....
Skipping nonlast:Priority 7038
At location src/dfa.c:312
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
syntax_bits_set = 1;

....
Skipping nonlast:Priority 7038
At location src/dfa.c:312
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
syntax_bits_set = 1;

....
Skipping nonlast:Priority 7038
At location src/dfa.c:312
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
syntax_bits_set = 1;

....
Skipping nonlast:Priority 7038
At location src/dfa.c:312
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
syntax_bits_set = 1;

....
Skipping nonlast:Priority 7038
At location src/dfa.c:312
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
syntax_bits_set = 1;

....
Skipping nonlast:Priority 7038
At location src/dfa.c:312
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
syntax_bits_set = 1;

....
Skipping nonlast:Priority 7038
At location src/dfa.c:312
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
syntax_bits_set = 1;

....
Skipping nonlast:Priority 7038
At location src/dfa.c:312
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
syntax_bits_set = 1;

....
Skipping nonlast addifexit:Priority 12038
At location src/dfa.c:312
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits_set, bits, syntax_bits, fold, case_fold, eol, eolbyte)))
    return;
syntax_bits_set = 1;

....
Skipping nonlast:Priority -461
At location src/dfa.c:313
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
syntax_bits = bits;

....
Skipping nonlast:Priority -461
At location src/dfa.c:313
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
syntax_bits = bits;

....
Skipping nonlast:Priority -461
At location src/dfa.c:313
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
syntax_bits = bits;

....
Skipping nonlast:Priority -461
At location src/dfa.c:313
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
syntax_bits = bits;

....
Skipping nonlast:Priority -461
At location src/dfa.c:313
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
syntax_bits = bits;

....
Skipping nonlast:Priority -461
At location src/dfa.c:313
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
syntax_bits = bits;

....
Skipping nonlast:Priority -461
At location src/dfa.c:313
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
syntax_bits = bits;

....
Skipping nonlast:Priority -461
At location src/dfa.c:313
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
syntax_bits = bits;

....
Skipping nonlast:Priority -461
At location src/dfa.c:313
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
syntax_bits = bits;

....
Skipping nonlast addifexit:Priority 4539
At location src/dfa.c:313
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(bits, syntax_bits, fold, syntax_bits_set, case_fold, eol, eolbyte)))
    return;
syntax_bits = bits;

....
Skipping nonlast:Priority -460
At location src/dfa.c:314
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
case_fold = fold;

....
Skipping nonlast:Priority -460
At location src/dfa.c:314
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
case_fold = fold;

....
Skipping nonlast:Priority -460
At location src/dfa.c:314
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
case_fold = fold;

....
Skipping nonlast:Priority -460
At location src/dfa.c:314
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
case_fold = fold;

....
Skipping nonlast:Priority -460
At location src/dfa.c:314
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
case_fold = fold;

....
Skipping nonlast:Priority -460
At location src/dfa.c:314
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
case_fold = fold;

....
Skipping nonlast:Priority -460
At location src/dfa.c:314
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
case_fold = fold;

....
Skipping nonlast:Priority -460
At location src/dfa.c:314
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
case_fold = fold;

....
Skipping nonlast:Priority -460
At location src/dfa.c:314
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
case_fold = fold;

....
Skipping nonlast addifexit:Priority 4540
At location src/dfa.c:314
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(fold, case_fold, bits, eol, syntax_bits, eolbyte, syntax_bits_set)))
    return;
case_fold = fold;

....
Skipping nonlast:Priority 7487
At location src/dfa.c:388
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (cur_mb_index)
    cur_mb_index = (cur_mb_index >= cur_mb_len) ? 0 : cur_mb_index + 1;

....
Skipping nonlast:Priority 7487
At location src/dfa.c:388
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (cur_mb_index)
    cur_mb_index = (cur_mb_index >= cur_mb_len) ? 0 : cur_mb_index + 1;

....
Skipping nonlast:Priority 7487
At location src/dfa.c:388
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
if (cur_mb_index)
    cur_mb_index = (cur_mb_index >= cur_mb_len) ? 0 : cur_mb_index + 1;

....
Skipping nonlast:Priority 7487
At location src/dfa.c:388
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
if (cur_mb_index)
    cur_mb_index = (cur_mb_index >= cur_mb_len) ? 0 : cur_mb_index + 1;

....
Skipping nonlast:Priority 7487
At location src/dfa.c:388
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
if (cur_mb_index)
    cur_mb_index = (cur_mb_index >= cur_mb_len) ? 0 : cur_mb_index + 1;

....
Skipping nonlast:Priority 7487
At location src/dfa.c:388
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
if (cur_mb_index)
    cur_mb_index = (cur_mb_index >= cur_mb_len) ? 0 : cur_mb_index + 1;

....
Skipping nonlast:Priority 7487
At location src/dfa.c:388
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (cur_mb_index)
    cur_mb_index = (cur_mb_index >= cur_mb_len) ? 0 : cur_mb_index + 1;

....
Skipping nonlast:Priority 7487
At location src/dfa.c:388
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (cur_mb_index)
    cur_mb_index = (cur_mb_index >= cur_mb_len) ? 0 : cur_mb_index + 1;

....
Skipping nonlast:Priority 7487
At location src/dfa.c:388
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (cur_mb_index)
    cur_mb_index = (cur_mb_index >= cur_mb_len) ? 0 : cur_mb_index + 1;

....
Skipping nonlast addifexit:Priority 11237
At location src/dfa.c:388
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cur_mb_index, cur_mb_len, p, len)))
    return;
if (cur_mb_index)
    cur_mb_index = (cur_mb_index >= cur_mb_len) ? 0 : cur_mb_index + 1;

....
Skipping isstmt addifexit:Priority 3738
At location src/dfa.c:395
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cur_mb_index, p, len, cur_mb_len)))
    return;
if (!cur_mb_index) {
    cur_mb_len = mbrlen(p, len, &mbs);
    if (cur_mb_len > 1)
        cur_mb_index = 1;
    else if (cur_mb_len < 1)
        cur_mb_len = 1;
}

....
Skipping nonlast:Priority 4989
At location src/dfa.c:397
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
cur_mb_len = mbrlen(p, len, &mbs);

....
Skipping nonlast:Priority 4989
At location src/dfa.c:397
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
cur_mb_len = mbrlen(p, len, &mbs);

....
Skipping nonlast:Priority 4989
At location src/dfa.c:397
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
cur_mb_len = mbrlen(p, len, &mbs);

....
Skipping nonlast:Priority 4989
At location src/dfa.c:397
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
cur_mb_len = mbrlen(p, len, &mbs);

....
Skipping nonlast:Priority 4989
At location src/dfa.c:397
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
cur_mb_len = mbrlen(p, len, &mbs);

....
Skipping nonlast:Priority 4989
At location src/dfa.c:397
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
cur_mb_len = mbrlen(p, len, &mbs);

....
Skipping nonlast:Priority 4989
At location src/dfa.c:397
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
cur_mb_len = mbrlen(p, len, &mbs);

....
Skipping nonlast:Priority 4989
At location src/dfa.c:397
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
cur_mb_len = mbrlen(p, len, &mbs);

....
Skipping nonlast:Priority 4989
At location src/dfa.c:397
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
cur_mb_len = mbrlen(p, len, &mbs);

....
Skipping nonlast addifexit:Priority 9989
At location src/dfa.c:397
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(p, len, cur_mb_len, cur_mb_index, mbs.__count)))
    return;
cur_mb_len = mbrlen(p, len, &mbs);

....
Skipping isstmt addifexit:Priority 3740
At location src/dfa.c:398
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cur_mb_len, p, len, cur_mb_index, mbs.__count)))
    return;
if (cur_mb_len > 1)
    cur_mb_index = 1;
else if (cur_mb_len < 1)
    cur_mb_len = 1;

....
Skipping nonlast:Priority -9
At location src/dfa.c:402
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    if (cur_mb_len < 1)
        cur_mb_len = 1;
}

....
Skipping nonlast:Priority -9
At location src/dfa.c:402
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    if (cur_mb_len < 1)
        cur_mb_len = 1;
}

....
Skipping nonlast:Priority -9
At location src/dfa.c:402
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        parse_bracket_exp_mb();
        return lasttok = MBCSET;
    }
    if (cur_mb_len < 1)
        cur_mb_len = 1;
}

....
Skipping nonlast:Priority -9
At location src/dfa.c:402
--Src File: src/dfa.c
Fragment 0:
{
    if (0 != 0)
        dfaerror(0);
    else
        return lasttok = END;
    if (cur_mb_len < 1)
        cur_mb_len = 1;
}

....
Skipping nonlast:Priority -9
At location src/dfa.c:402
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
    else
        return lasttok = END;
    if (cur_mb_len < 1)
        cur_mb_len = 1;
}

....
Skipping nonlast:Priority -9
At location src/dfa.c:402
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
    else
        return lasttok = END;
    if (cur_mb_len < 1)
        cur_mb_len = 1;
}

....
Skipping nonlast:Priority -9
At location src/dfa.c:402
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    if (cur_mb_len < 1)
        cur_mb_len = 1;
}

....
Skipping nonlast:Priority -9
At location src/dfa.c:402
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    if (cur_mb_len < 1)
        cur_mb_len = 1;
}

....
Skipping nonlast:Priority -9
At location src/dfa.c:402
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    if (cur_mb_len < 1)
        cur_mb_len = 1;
}

....
Skipping nonlast addifexit:Priority 3741
At location src/dfa.c:402
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(cur_mb_len, cur_mb_index, p, len)))
        return;
    if (cur_mb_len < 1)
        cur_mb_len = 1;
}

....
Skipping nonlast:Priority -381
At location src/dfa.c:728
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
unsigned int c, c1, c2;

....
Skipping nonlast:Priority -381
At location src/dfa.c:728
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
unsigned int c, c1, c2;

....
Skipping nonlast:Priority -381
At location src/dfa.c:728
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
unsigned int c, c1, c2;

....
Skipping nonlast:Priority -381
At location src/dfa.c:728
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
unsigned int c, c1, c2;

....
Skipping nonlast:Priority -381
At location src/dfa.c:728
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
unsigned int c, c1, c2;

....
Skipping nonlast:Priority -381
At location src/dfa.c:728
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
unsigned int c, c1, c2;

....
Skipping nonlast:Priority -381
At location src/dfa.c:728
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
unsigned int c, c1, c2;

....
Skipping nonlast:Priority -381
At location src/dfa.c:728
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
unsigned int c, c1, c2;

....
Skipping nonlast:Priority -381
At location src/dfa.c:728
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
unsigned int c, c1, c2;

....
Skipping nonlast addifexit:Priority 4619
At location src/dfa.c:728
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, hard_LC_COLLATE, case_fold)))
    return -1;
unsigned int c, c1, c2;

....
Skipping nonlast addifexit:Priority 4619
At location src/dfa.c:728
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, hard_LC_COLLATE, case_fold)))
    return 0;
unsigned int c, c1, c2;

....
Skipping nonlast addifexit:Priority 4619
At location src/dfa.c:728
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, hard_LC_COLLATE, case_fold)))
    return 1;
unsigned int c, c1, c2;

....
Skipping nonlast addifexit:Priority 4619
At location src/dfa.c:728
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, hard_LC_COLLATE, case_fold)))
    return 2;
unsigned int c, c1, c2;

....
Skipping nonlast addifexit:Priority 4619
At location src/dfa.c:728
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, hard_LC_COLLATE, case_fold)))
    return 3;
unsigned int c, c1, c2;

....
Skipping nonlast addifexit:Priority 4619
At location src/dfa.c:728
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, hard_LC_COLLATE, case_fold)))
    return 4;
unsigned int c, c1, c2;

....
Skipping nonlast addifexit:Priority 4619
At location src/dfa.c:728
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, hard_LC_COLLATE, case_fold)))
    return 5;
unsigned int c, c1, c2;

....
Skipping nonlast addifexit:Priority 4619
At location src/dfa.c:728
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, hard_LC_COLLATE, case_fold)))
    return 6;
unsigned int c, c1, c2;

....
Skipping nonlast addifexit:Priority 4619
At location src/dfa.c:728
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, hard_LC_COLLATE, case_fold)))
    return 8;
unsigned int c, c1, c2;

....
Skipping nonlast addifexit:Priority 4619
At location src/dfa.c:728
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, hard_LC_COLLATE, case_fold)))
    return 9;
unsigned int c, c1, c2;

....
Skipping nonlast addifexit:Priority 4619
At location src/dfa.c:728
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, hard_LC_COLLATE, case_fold)))
    return 10;
unsigned int c, c1, c2;

....
Skipping nonlast addifexit:Priority 4619
At location src/dfa.c:728
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, hard_LC_COLLATE, case_fold)))
    return 256;
unsigned int c, c1, c2;

....
Skipping nonlast addifexit:Priority 4619
At location src/dfa.c:728
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, hard_LC_COLLATE, case_fold)))
    return 32767;
unsigned int c, c1, c2;

....
Skipping nonlast addifexit:Priority 4819
At location src/dfa.c:728
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, hard_LC_COLLATE, case_fold)))
    goto skip;
unsigned int c, c1, c2;

....
Skipping nonlast addifexit:Priority 4819
At location src/dfa.c:728
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, hard_LC_COLLATE, case_fold)))
    goto normal_char;
unsigned int c, c1, c2;

....
Skipping nonlast:Priority -380
At location src/dfa.c:729
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int backslash = 0, invert;

....
Skipping nonlast:Priority -380
At location src/dfa.c:729
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int backslash = 0, invert;

....
Skipping nonlast:Priority -380
At location src/dfa.c:729
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
int backslash = 0, invert;

....
Skipping nonlast:Priority -380
At location src/dfa.c:729
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
int backslash = 0, invert;

....
Skipping nonlast:Priority -380
At location src/dfa.c:729
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
int backslash = 0, invert;

....
Skipping nonlast:Priority -380
At location src/dfa.c:729
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
int backslash = 0, invert;

....
Skipping nonlast:Priority -380
At location src/dfa.c:729
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int backslash = 0, invert;

....
Skipping nonlast:Priority -380
At location src/dfa.c:729
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int backslash = 0, invert;

....
Skipping nonlast:Priority -380
At location src/dfa.c:729
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int backslash = 0, invert;

....
Skipping nonlast addifexit:Priority 4620
At location src/dfa.c:729
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, c1, hard_LC_COLLATE, case_fold)))
    return -1;
int backslash = 0, invert;

....
Skipping nonlast addifexit:Priority 4620
At location src/dfa.c:729
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, c1, hard_LC_COLLATE, case_fold)))
    return 0;
int backslash = 0, invert;

....
Skipping nonlast addifexit:Priority 4620
At location src/dfa.c:729
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, c1, hard_LC_COLLATE, case_fold)))
    return 1;
int backslash = 0, invert;

....
Skipping nonlast addifexit:Priority 4620
At location src/dfa.c:729
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, c1, hard_LC_COLLATE, case_fold)))
    return 2;
int backslash = 0, invert;

....
Skipping nonlast addifexit:Priority 4620
At location src/dfa.c:729
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, c1, hard_LC_COLLATE, case_fold)))
    return 3;
int backslash = 0, invert;

....
Skipping nonlast addifexit:Priority 4620
At location src/dfa.c:729
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, c1, hard_LC_COLLATE, case_fold)))
    return 4;
int backslash = 0, invert;

....
Skipping nonlast addifexit:Priority 4620
At location src/dfa.c:729
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, c1, hard_LC_COLLATE, case_fold)))
    return 5;
int backslash = 0, invert;

....
Skipping nonlast addifexit:Priority 4620
At location src/dfa.c:729
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, c1, hard_LC_COLLATE, case_fold)))
    return 6;
int backslash = 0, invert;

....
Skipping nonlast addifexit:Priority 4620
At location src/dfa.c:729
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, c1, hard_LC_COLLATE, case_fold)))
    return 8;
int backslash = 0, invert;

....
Skipping nonlast addifexit:Priority 4620
At location src/dfa.c:729
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, c1, hard_LC_COLLATE, case_fold)))
    return 9;
int backslash = 0, invert;

....
Skipping nonlast addifexit:Priority 4620
At location src/dfa.c:729
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, c1, hard_LC_COLLATE, case_fold)))
    return 10;
int backslash = 0, invert;

....
Skipping nonlast addifexit:Priority 4620
At location src/dfa.c:729
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, c1, hard_LC_COLLATE, case_fold)))
    return 256;
int backslash = 0, invert;

....
Skipping nonlast addifexit:Priority 4620
At location src/dfa.c:729
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, c1, hard_LC_COLLATE, case_fold)))
    return 32767;
int backslash = 0, invert;

....
Skipping nonlast addifexit:Priority 4820
At location src/dfa.c:729
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, c1, hard_LC_COLLATE, case_fold)))
    goto skip;
int backslash = 0, invert;

....
Skipping nonlast addifexit:Priority 4820
At location src/dfa.c:729
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, c1, hard_LC_COLLATE, case_fold)))
    goto normal_char;
int backslash = 0, invert;

....
Skipping nonlast:Priority -379
At location src/dfa.c:730
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
charclass ccl;

....
Skipping nonlast:Priority -379
At location src/dfa.c:730
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
charclass ccl;

....
Skipping nonlast:Priority -379
At location src/dfa.c:730
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
charclass ccl;

....
Skipping nonlast:Priority -379
At location src/dfa.c:730
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
charclass ccl;

....
Skipping nonlast:Priority -379
At location src/dfa.c:730
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGLINE;
charclass ccl;

....
Skipping nonlast:Priority -379
At location src/dfa.c:730
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGWORD;
charclass ccl;

....
Skipping nonlast:Priority -379
At location src/dfa.c:730
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDLINE;
charclass ccl;

....
Skipping nonlast:Priority -379
At location src/dfa.c:730
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDWORD;
charclass ccl;

....
Skipping nonlast:Priority -379
At location src/dfa.c:730
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = LIMWORD;
charclass ccl;

....
Skipping nonlast:Priority -379
At location src/dfa.c:730
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = NOTLIMWORD;
charclass ccl;

....
Skipping nonlast:Priority -379
At location src/dfa.c:730
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    laststart = 0;
    return lasttok = BACKREF;
}
charclass ccl;

....
Skipping nonlast:Priority -379
At location src/dfa.c:730
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
charclass ccl;

....
Skipping nonlast:Priority -379
At location src/dfa.c:730
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
charclass ccl;

....
Skipping nonlast:Priority -379
At location src/dfa.c:730
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
charclass ccl;

....
Skipping nonlast:Priority -379
At location src/dfa.c:730
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
charclass ccl;

....
Skipping nonlast:Priority -379
At location src/dfa.c:730
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
charclass ccl;

....
Skipping nonlast addifexit:Priority 4621
At location src/dfa.c:730
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return -1;
charclass ccl;

....
Skipping nonlast addifexit:Priority 4621
At location src/dfa.c:730
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 0;
charclass ccl;

....
Skipping nonlast addifexit:Priority 4621
At location src/dfa.c:730
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 1;
charclass ccl;

....
Skipping nonlast addifexit:Priority 4621
At location src/dfa.c:730
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 2;
charclass ccl;

....
Skipping nonlast addifexit:Priority 4621
At location src/dfa.c:730
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 3;
charclass ccl;

....
Skipping nonlast addifexit:Priority 4621
At location src/dfa.c:730
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 4;
charclass ccl;

....
Skipping nonlast addifexit:Priority 4621
At location src/dfa.c:730
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 5;
charclass ccl;

....
Skipping nonlast addifexit:Priority 4621
At location src/dfa.c:730
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 6;
charclass ccl;

....
Skipping nonlast addifexit:Priority 4621
At location src/dfa.c:730
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 8;
charclass ccl;

....
Skipping nonlast addifexit:Priority 4621
At location src/dfa.c:730
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 9;
charclass ccl;

....
Skipping nonlast addifexit:Priority 4621
At location src/dfa.c:730
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 10;
charclass ccl;

....
Skipping nonlast addifexit:Priority 4621
At location src/dfa.c:730
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 256;
charclass ccl;

....
Skipping nonlast addifexit:Priority 4621
At location src/dfa.c:730
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 32767;
charclass ccl;

....
Skipping nonlast addifexit:Priority 4821
At location src/dfa.c:730
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    goto skip;
charclass ccl;

....
Skipping nonlast addifexit:Priority 4821
At location src/dfa.c:730
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    goto normal_char;
charclass ccl;

....
Skipping nonlast:Priority -378
At location src/dfa.c:731
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int i;

....
Skipping nonlast:Priority -378
At location src/dfa.c:731
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int i;

....
Skipping nonlast:Priority -378
At location src/dfa.c:731
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
int i;

....
Skipping nonlast:Priority -378
At location src/dfa.c:731
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
int i;

....
Skipping nonlast:Priority -378
At location src/dfa.c:731
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGLINE;
int i;

....
Skipping nonlast:Priority -378
At location src/dfa.c:731
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGWORD;
int i;

....
Skipping nonlast:Priority -378
At location src/dfa.c:731
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDLINE;
int i;

....
Skipping nonlast:Priority -378
At location src/dfa.c:731
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDWORD;
int i;

....
Skipping nonlast:Priority -378
At location src/dfa.c:731
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = LIMWORD;
int i;

....
Skipping nonlast:Priority -378
At location src/dfa.c:731
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = NOTLIMWORD;
int i;

....
Skipping nonlast:Priority -378
At location src/dfa.c:731
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    laststart = 0;
    return lasttok = BACKREF;
}
int i;

....
Skipping nonlast:Priority -378
At location src/dfa.c:731
--Src File: src/dfa.c
Fragment 0:
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}
int i;

....
Skipping nonlast:Priority -378
At location src/dfa.c:731
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
int i;

....
Skipping nonlast:Priority -378
At location src/dfa.c:731
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
int i;

....
Skipping nonlast:Priority -378
At location src/dfa.c:731
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int i;

....
Skipping nonlast:Priority -378
At location src/dfa.c:731
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int i;

....
Skipping nonlast:Priority -378
At location src/dfa.c:731
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int i;

....
Skipping nonlast addifexit:Priority 4622
At location src/dfa.c:731
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return -1;
int i;

....
Skipping nonlast addifexit:Priority 4622
At location src/dfa.c:731
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 0;
int i;

....
Skipping nonlast addifexit:Priority 4622
At location src/dfa.c:731
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 1;
int i;

....
Skipping nonlast addifexit:Priority 4622
At location src/dfa.c:731
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 2;
int i;

....
Skipping nonlast addifexit:Priority 4622
At location src/dfa.c:731
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 3;
int i;

....
Skipping nonlast addifexit:Priority 4622
At location src/dfa.c:731
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 4;
int i;

....
Skipping nonlast addifexit:Priority 4622
At location src/dfa.c:731
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 5;
int i;

....
Skipping nonlast addifexit:Priority 4622
At location src/dfa.c:731
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 6;
int i;

....
Skipping nonlast addifexit:Priority 4622
At location src/dfa.c:731
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 8;
int i;

....
Skipping nonlast addifexit:Priority 4622
At location src/dfa.c:731
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 9;
int i;

....
Skipping nonlast addifexit:Priority 4622
At location src/dfa.c:731
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 10;
int i;

....
Skipping nonlast addifexit:Priority 4622
At location src/dfa.c:731
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 256;
int i;

....
Skipping nonlast addifexit:Priority 4622
At location src/dfa.c:731
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 32767;
int i;

....
Skipping nonlast addifexit:Priority 4822
At location src/dfa.c:731
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    goto skip;
int i;

....
Skipping nonlast addifexit:Priority 4822
At location src/dfa.c:731
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    goto normal_char;
int i;

....
Skipping nonlast:Priority 7123
At location src/dfa.c:739
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
for (i = 0; i < 2; ++i) {
    {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            parse_bracket_exp_mb();
            return lasttok = MBCSET;
        }
        zeroset(ccl);
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (c == '^') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        }
                        ;
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1))) {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (c1 == '-') {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1))) {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c2) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!hard_LC_COLLATE) {
                        for (; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    } else {
                        regex_t re;
                        char expr[6];
                        expr[0] = '[';
                        expr[1] = c;
                        expr[2] = '-';
                        expr[3] = c2;
                        expr[4] = ']';
                        expr[5] = '\x00';
                        if (regcomp(&re, expr, case_fold ? (1 << 1) : 0) == REG_NOERROR) {
                            for (c = 0; c < (1 << 8); ++c) {
                                regmatch_t mat;
                                char buf[2];
                                buf[0] = c;
                                buf[1] = '\x00';
                                if (regexec(&re, buf, 1, &mat, 0) == REG_NOERROR && mat.rm_so == 0 && mat.rm_eo == 1)
                                    setbit_case_fold(c, ccl);
                            }
                            regfree(&re);
                        }
                    }
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast:Priority 7123
At location src/dfa.c:739
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
for (i = 0; i < 2; ++i) {
    {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            parse_bracket_exp_mb();
            return lasttok = MBCSET;
        }
        zeroset(ccl);
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (c == '^') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        }
                        ;
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1))) {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (c1 == '-') {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1))) {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c2) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!hard_LC_COLLATE) {
                        for (; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    } else {
                        regex_t re;
                        char expr[6];
                        expr[0] = '[';
                        expr[1] = c;
                        expr[2] = '-';
                        expr[3] = c2;
                        expr[4] = ']';
                        expr[5] = '\x00';
                        if (regcomp(&re, expr, case_fold ? (1 << 1) : 0) == REG_NOERROR) {
                            for (c = 0; c < (1 << 8); ++c) {
                                regmatch_t mat;
                                char buf[2];
                                buf[0] = c;
                                buf[1] = '\x00';
                                if (regexec(&re, buf, 1, &mat, 0) == REG_NOERROR && mat.rm_so == 0 && mat.rm_eo == 1)
                                    setbit_case_fold(c, ccl);
                            }
                            regfree(&re);
                        }
                    }
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast:Priority 7123
At location src/dfa.c:739
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
for (i = 0; i < 2; ++i) {
    {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            parse_bracket_exp_mb();
            return lasttok = MBCSET;
        }
        zeroset(ccl);
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (c == '^') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        }
                        ;
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1))) {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (c1 == '-') {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1))) {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c2) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!hard_LC_COLLATE) {
                        for (; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    } else {
                        regex_t re;
                        char expr[6];
                        expr[0] = '[';
                        expr[1] = c;
                        expr[2] = '-';
                        expr[3] = c2;
                        expr[4] = ']';
                        expr[5] = '\x00';
                        if (regcomp(&re, expr, case_fold ? (1 << 1) : 0) == REG_NOERROR) {
                            for (c = 0; c < (1 << 8); ++c) {
                                regmatch_t mat;
                                char buf[2];
                                buf[0] = c;
                                buf[1] = '\x00';
                                if (regexec(&re, buf, 1, &mat, 0) == REG_NOERROR && mat.rm_so == 0 && mat.rm_eo == 1)
                                    setbit_case_fold(c, ccl);
                            }
                            regfree(&re);
                        }
                    }
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast:Priority 7123
At location src/dfa.c:739
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
for (i = 0; i < 2; ++i) {
    {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            parse_bracket_exp_mb();
            return lasttok = MBCSET;
        }
        zeroset(ccl);
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (c == '^') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        }
                        ;
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1))) {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (c1 == '-') {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1))) {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c2) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!hard_LC_COLLATE) {
                        for (; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    } else {
                        regex_t re;
                        char expr[6];
                        expr[0] = '[';
                        expr[1] = c;
                        expr[2] = '-';
                        expr[3] = c2;
                        expr[4] = ']';
                        expr[5] = '\x00';
                        if (regcomp(&re, expr, case_fold ? (1 << 1) : 0) == REG_NOERROR) {
                            for (c = 0; c < (1 << 8); ++c) {
                                regmatch_t mat;
                                char buf[2];
                                buf[0] = c;
                                buf[1] = '\x00';
                                if (regexec(&re, buf, 1, &mat, 0) == REG_NOERROR && mat.rm_so == 0 && mat.rm_eo == 1)
                                    setbit_case_fold(c, ccl);
                            }
                            regfree(&re);
                        }
                    }
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast:Priority 7123
At location src/dfa.c:739
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGLINE;
for (i = 0; i < 2; ++i) {
    {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            parse_bracket_exp_mb();
            return lasttok = MBCSET;
        }
        zeroset(ccl);
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (c == '^') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        }
                        ;
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1))) {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (c1 == '-') {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1))) {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c2) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!hard_LC_COLLATE) {
                        for (; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    } else {
                        regex_t re;
                        char expr[6];
                        expr[0] = '[';
                        expr[1] = c;
                        expr[2] = '-';
                        expr[3] = c2;
                        expr[4] = ']';
                        expr[5] = '\x00';
                        if (regcomp(&re, expr, case_fold ? (1 << 1) : 0) == REG_NOERROR) {
                            for (c = 0; c < (1 << 8); ++c) {
                                regmatch_t mat;
                                char buf[2];
                                buf[0] = c;
                                buf[1] = '\x00';
                                if (regexec(&re, buf, 1, &mat, 0) == REG_NOERROR && mat.rm_so == 0 && mat.rm_eo == 1)
                                    setbit_case_fold(c, ccl);
                            }
                            regfree(&re);
                        }
                    }
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast:Priority 7123
At location src/dfa.c:739
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGWORD;
for (i = 0; i < 2; ++i) {
    {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            parse_bracket_exp_mb();
            return lasttok = MBCSET;
        }
        zeroset(ccl);
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (c == '^') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        }
                        ;
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1))) {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (c1 == '-') {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1))) {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c2) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!hard_LC_COLLATE) {
                        for (; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    } else {
                        regex_t re;
                        char expr[6];
                        expr[0] = '[';
                        expr[1] = c;
                        expr[2] = '-';
                        expr[3] = c2;
                        expr[4] = ']';
                        expr[5] = '\x00';
                        if (regcomp(&re, expr, case_fold ? (1 << 1) : 0) == REG_NOERROR) {
                            for (c = 0; c < (1 << 8); ++c) {
                                regmatch_t mat;
                                char buf[2];
                                buf[0] = c;
                                buf[1] = '\x00';
                                if (regexec(&re, buf, 1, &mat, 0) == REG_NOERROR && mat.rm_so == 0 && mat.rm_eo == 1)
                                    setbit_case_fold(c, ccl);
                            }
                            regfree(&re);
                        }
                    }
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast:Priority 7123
At location src/dfa.c:739
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDLINE;
for (i = 0; i < 2; ++i) {
    {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            parse_bracket_exp_mb();
            return lasttok = MBCSET;
        }
        zeroset(ccl);
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (c == '^') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        }
                        ;
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1))) {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (c1 == '-') {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1))) {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c2) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!hard_LC_COLLATE) {
                        for (; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    } else {
                        regex_t re;
                        char expr[6];
                        expr[0] = '[';
                        expr[1] = c;
                        expr[2] = '-';
                        expr[3] = c2;
                        expr[4] = ']';
                        expr[5] = '\x00';
                        if (regcomp(&re, expr, case_fold ? (1 << 1) : 0) == REG_NOERROR) {
                            for (c = 0; c < (1 << 8); ++c) {
                                regmatch_t mat;
                                char buf[2];
                                buf[0] = c;
                                buf[1] = '\x00';
                                if (regexec(&re, buf, 1, &mat, 0) == REG_NOERROR && mat.rm_so == 0 && mat.rm_eo == 1)
                                    setbit_case_fold(c, ccl);
                            }
                            regfree(&re);
                        }
                    }
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast:Priority 7123
At location src/dfa.c:739
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDWORD;
for (i = 0; i < 2; ++i) {
    {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            parse_bracket_exp_mb();
            return lasttok = MBCSET;
        }
        zeroset(ccl);
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (c == '^') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        }
                        ;
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1))) {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (c1 == '-') {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1))) {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c2) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!hard_LC_COLLATE) {
                        for (; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    } else {
                        regex_t re;
                        char expr[6];
                        expr[0] = '[';
                        expr[1] = c;
                        expr[2] = '-';
                        expr[3] = c2;
                        expr[4] = ']';
                        expr[5] = '\x00';
                        if (regcomp(&re, expr, case_fold ? (1 << 1) : 0) == REG_NOERROR) {
                            for (c = 0; c < (1 << 8); ++c) {
                                regmatch_t mat;
                                char buf[2];
                                buf[0] = c;
                                buf[1] = '\x00';
                                if (regexec(&re, buf, 1, &mat, 0) == REG_NOERROR && mat.rm_so == 0 && mat.rm_eo == 1)
                                    setbit_case_fold(c, ccl);
                            }
                            regfree(&re);
                        }
                    }
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast:Priority 7123
At location src/dfa.c:739
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = LIMWORD;
for (i = 0; i < 2; ++i) {
    {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            parse_bracket_exp_mb();
            return lasttok = MBCSET;
        }
        zeroset(ccl);
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (c == '^') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        }
                        ;
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1))) {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (c1 == '-') {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1))) {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c2) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!hard_LC_COLLATE) {
                        for (; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    } else {
                        regex_t re;
                        char expr[6];
                        expr[0] = '[';
                        expr[1] = c;
                        expr[2] = '-';
                        expr[3] = c2;
                        expr[4] = ']';
                        expr[5] = '\x00';
                        if (regcomp(&re, expr, case_fold ? (1 << 1) : 0) == REG_NOERROR) {
                            for (c = 0; c < (1 << 8); ++c) {
                                regmatch_t mat;
                                char buf[2];
                                buf[0] = c;
                                buf[1] = '\x00';
                                if (regexec(&re, buf, 1, &mat, 0) == REG_NOERROR && mat.rm_so == 0 && mat.rm_eo == 1)
                                    setbit_case_fold(c, ccl);
                            }
                            regfree(&re);
                        }
                    }
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast:Priority 7123
At location src/dfa.c:739
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = NOTLIMWORD;
for (i = 0; i < 2; ++i) {
    {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            parse_bracket_exp_mb();
            return lasttok = MBCSET;
        }
        zeroset(ccl);
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (c == '^') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        }
                        ;
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1))) {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (c1 == '-') {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1))) {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c2) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!hard_LC_COLLATE) {
                        for (; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    } else {
                        regex_t re;
                        char expr[6];
                        expr[0] = '[';
                        expr[1] = c;
                        expr[2] = '-';
                        expr[3] = c2;
                        expr[4] = ']';
                        expr[5] = '\x00';
                        if (regcomp(&re, expr, case_fold ? (1 << 1) : 0) == REG_NOERROR) {
                            for (c = 0; c < (1 << 8); ++c) {
                                regmatch_t mat;
                                char buf[2];
                                buf[0] = c;
                                buf[1] = '\x00';
                                if (regexec(&re, buf, 1, &mat, 0) == REG_NOERROR && mat.rm_so == 0 && mat.rm_eo == 1)
                                    setbit_case_fold(c, ccl);
                            }
                            regfree(&re);
                        }
                    }
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast:Priority 7123
At location src/dfa.c:739
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    laststart = 0;
    return lasttok = BACKREF;
}
for (i = 0; i < 2; ++i) {
    {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            parse_bracket_exp_mb();
            return lasttok = MBCSET;
        }
        zeroset(ccl);
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (c == '^') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        }
                        ;
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1))) {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (c1 == '-') {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1))) {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c2) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!hard_LC_COLLATE) {
                        for (; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    } else {
                        regex_t re;
                        char expr[6];
                        expr[0] = '[';
                        expr[1] = c;
                        expr[2] = '-';
                        expr[3] = c2;
                        expr[4] = ']';
                        expr[5] = '\x00';
                        if (regcomp(&re, expr, case_fold ? (1 << 1) : 0) == REG_NOERROR) {
                            for (c = 0; c < (1 << 8); ++c) {
                                regmatch_t mat;
                                char buf[2];
                                buf[0] = c;
                                buf[1] = '\x00';
                                if (regexec(&re, buf, 1, &mat, 0) == REG_NOERROR && mat.rm_so == 0 && mat.rm_eo == 1)
                                    setbit_case_fold(c, ccl);
                            }
                            regfree(&re);
                        }
                    }
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast:Priority 7123
At location src/dfa.c:739
--Src File: src/dfa.c
Fragment 0:
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}
for (i = 0; i < 2; ++i) {
    {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            parse_bracket_exp_mb();
            return lasttok = MBCSET;
        }
        zeroset(ccl);
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (c == '^') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        }
                        ;
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1))) {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (c1 == '-') {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1))) {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c2) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!hard_LC_COLLATE) {
                        for (; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    } else {
                        regex_t re;
                        char expr[6];
                        expr[0] = '[';
                        expr[1] = c;
                        expr[2] = '-';
                        expr[3] = c2;
                        expr[4] = ']';
                        expr[5] = '\x00';
                        if (regcomp(&re, expr, case_fold ? (1 << 1) : 0) == REG_NOERROR) {
                            for (c = 0; c < (1 << 8); ++c) {
                                regmatch_t mat;
                                char buf[2];
                                buf[0] = c;
                                buf[1] = '\x00';
                                if (regexec(&re, buf, 1, &mat, 0) == REG_NOERROR && mat.rm_so == 0 && mat.rm_eo == 1)
                                    setbit_case_fold(c, ccl);
                            }
                            regfree(&re);
                        }
                    }
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast:Priority 7123
At location src/dfa.c:739
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
for (i = 0; i < 2; ++i) {
    {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            parse_bracket_exp_mb();
            return lasttok = MBCSET;
        }
        zeroset(ccl);
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (c == '^') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        }
                        ;
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1))) {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (c1 == '-') {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1))) {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c2) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!hard_LC_COLLATE) {
                        for (; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    } else {
                        regex_t re;
                        char expr[6];
                        expr[0] = '[';
                        expr[1] = c;
                        expr[2] = '-';
                        expr[3] = c2;
                        expr[4] = ']';
                        expr[5] = '\x00';
                        if (regcomp(&re, expr, case_fold ? (1 << 1) : 0) == REG_NOERROR) {
                            for (c = 0; c < (1 << 8); ++c) {
                                regmatch_t mat;
                                char buf[2];
                                buf[0] = c;
                                buf[1] = '\x00';
                                if (regexec(&re, buf, 1, &mat, 0) == REG_NOERROR && mat.rm_so == 0 && mat.rm_eo == 1)
                                    setbit_case_fold(c, ccl);
                            }
                            regfree(&re);
                        }
                    }
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast:Priority 7123
At location src/dfa.c:739
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
for (i = 0; i < 2; ++i) {
    {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            parse_bracket_exp_mb();
            return lasttok = MBCSET;
        }
        zeroset(ccl);
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (c == '^') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        }
                        ;
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1))) {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (c1 == '-') {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1))) {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c2) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!hard_LC_COLLATE) {
                        for (; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    } else {
                        regex_t re;
                        char expr[6];
                        expr[0] = '[';
                        expr[1] = c;
                        expr[2] = '-';
                        expr[3] = c2;
                        expr[4] = ']';
                        expr[5] = '\x00';
                        if (regcomp(&re, expr, case_fold ? (1 << 1) : 0) == REG_NOERROR) {
                            for (c = 0; c < (1 << 8); ++c) {
                                regmatch_t mat;
                                char buf[2];
                                buf[0] = c;
                                buf[1] = '\x00';
                                if (regexec(&re, buf, 1, &mat, 0) == REG_NOERROR && mat.rm_so == 0 && mat.rm_eo == 1)
                                    setbit_case_fold(c, ccl);
                            }
                            regfree(&re);
                        }
                    }
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast:Priority 7123
At location src/dfa.c:739
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
for (i = 0; i < 2; ++i) {
    {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            parse_bracket_exp_mb();
            return lasttok = MBCSET;
        }
        zeroset(ccl);
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (c == '^') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        }
                        ;
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1))) {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (c1 == '-') {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1))) {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c2) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!hard_LC_COLLATE) {
                        for (; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    } else {
                        regex_t re;
                        char expr[6];
                        expr[0] = '[';
                        expr[1] = c;
                        expr[2] = '-';
                        expr[3] = c2;
                        expr[4] = ']';
                        expr[5] = '\x00';
                        if (regcomp(&re, expr, case_fold ? (1 << 1) : 0) == REG_NOERROR) {
                            for (c = 0; c < (1 << 8); ++c) {
                                regmatch_t mat;
                                char buf[2];
                                buf[0] = c;
                                buf[1] = '\x00';
                                if (regexec(&re, buf, 1, &mat, 0) == REG_NOERROR && mat.rm_so == 0 && mat.rm_eo == 1)
                                    setbit_case_fold(c, ccl);
                            }
                            regfree(&re);
                        }
                    }
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast:Priority 7123
At location src/dfa.c:739
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
for (i = 0; i < 2; ++i) {
    {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            parse_bracket_exp_mb();
            return lasttok = MBCSET;
        }
        zeroset(ccl);
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (c == '^') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        }
                        ;
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1))) {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (c1 == '-') {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1))) {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c2) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!hard_LC_COLLATE) {
                        for (; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    } else {
                        regex_t re;
                        char expr[6];
                        expr[0] = '[';
                        expr[1] = c;
                        expr[2] = '-';
                        expr[3] = c2;
                        expr[4] = ']';
                        expr[5] = '\x00';
                        if (regcomp(&re, expr, case_fold ? (1 << 1) : 0) == REG_NOERROR) {
                            for (c = 0; c < (1 << 8); ++c) {
                                regmatch_t mat;
                                char buf[2];
                                buf[0] = c;
                                buf[1] = '\x00';
                                if (regexec(&re, buf, 1, &mat, 0) == REG_NOERROR && mat.rm_so == 0 && mat.rm_eo == 1)
                                    setbit_case_fold(c, ccl);
                            }
                            regfree(&re);
                        }
                    }
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast:Priority 7123
At location src/dfa.c:739
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
for (i = 0; i < 2; ++i) {
    {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            parse_bracket_exp_mb();
            return lasttok = MBCSET;
        }
        zeroset(ccl);
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (c == '^') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        }
                        ;
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1))) {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (c1 == '-') {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1))) {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c2) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!hard_LC_COLLATE) {
                        for (; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    } else {
                        regex_t re;
                        char expr[6];
                        expr[0] = '[';
                        expr[1] = c;
                        expr[2] = '-';
                        expr[3] = c2;
                        expr[4] = ']';
                        expr[5] = '\x00';
                        if (regcomp(&re, expr, case_fold ? (1 << 1) : 0) == REG_NOERROR) {
                            for (c = 0; c < (1 << 8); ++c) {
                                regmatch_t mat;
                                char buf[2];
                                buf[0] = c;
                                buf[1] = '\x00';
                                if (regexec(&re, buf, 1, &mat, 0) == REG_NOERROR && mat.rm_so == 0 && mat.rm_eo == 1)
                                    setbit_case_fold(c, ccl);
                            }
                            regfree(&re);
                        }
                    }
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast addifexit:Priority 12123
At location src/dfa.c:739
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return -1;
for (i = 0; i < 2; ++i) {
    {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            parse_bracket_exp_mb();
            return lasttok = MBCSET;
        }
        zeroset(ccl);
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (c == '^') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        }
                        ;
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1))) {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (c1 == '-') {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1))) {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c2) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!hard_LC_COLLATE) {
                        for (; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    } else {
                        regex_t re;
                        char expr[6];
                        expr[0] = '[';
                        expr[1] = c;
                        expr[2] = '-';
                        expr[3] = c2;
                        expr[4] = ']';
                        expr[5] = '\x00';
                        if (regcomp(&re, expr, case_fold ? (1 << 1) : 0) == REG_NOERROR) {
                            for (c = 0; c < (1 << 8); ++c) {
                                regmatch_t mat;
                                char buf[2];
                                buf[0] = c;
                                buf[1] = '\x00';
                                if (regexec(&re, buf, 1, &mat, 0) == REG_NOERROR && mat.rm_so == 0 && mat.rm_eo == 1)
                                    setbit_case_fold(c, ccl);
                            }
                            regfree(&re);
                        }
                    }
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast addifexit:Priority 12123
At location src/dfa.c:739
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 0;
for (i = 0; i < 2; ++i) {
    {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            parse_bracket_exp_mb();
            return lasttok = MBCSET;
        }
        zeroset(ccl);
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (c == '^') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        }
                        ;
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1))) {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (c1 == '-') {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1))) {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c2) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!hard_LC_COLLATE) {
                        for (; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    } else {
                        regex_t re;
                        char expr[6];
                        expr[0] = '[';
                        expr[1] = c;
                        expr[2] = '-';
                        expr[3] = c2;
                        expr[4] = ']';
                        expr[5] = '\x00';
                        if (regcomp(&re, expr, case_fold ? (1 << 1) : 0) == REG_NOERROR) {
                            for (c = 0; c < (1 << 8); ++c) {
                                regmatch_t mat;
                                char buf[2];
                                buf[0] = c;
                                buf[1] = '\x00';
                                if (regexec(&re, buf, 1, &mat, 0) == REG_NOERROR && mat.rm_so == 0 && mat.rm_eo == 1)
                                    setbit_case_fold(c, ccl);
                            }
                            regfree(&re);
                        }
                    }
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast addifexit:Priority 12123
At location src/dfa.c:739
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 1;
for (i = 0; i < 2; ++i) {
    {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            parse_bracket_exp_mb();
            return lasttok = MBCSET;
        }
        zeroset(ccl);
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (c == '^') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        }
                        ;
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1))) {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (c1 == '-') {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1))) {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c2) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!hard_LC_COLLATE) {
                        for (; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    } else {
                        regex_t re;
                        char expr[6];
                        expr[0] = '[';
                        expr[1] = c;
                        expr[2] = '-';
                        expr[3] = c2;
                        expr[4] = ']';
                        expr[5] = '\x00';
                        if (regcomp(&re, expr, case_fold ? (1 << 1) : 0) == REG_NOERROR) {
                            for (c = 0; c < (1 << 8); ++c) {
                                regmatch_t mat;
                                char buf[2];
                                buf[0] = c;
                                buf[1] = '\x00';
                                if (regexec(&re, buf, 1, &mat, 0) == REG_NOERROR && mat.rm_so == 0 && mat.rm_eo == 1)
                                    setbit_case_fold(c, ccl);
                            }
                            regfree(&re);
                        }
                    }
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast addifexit:Priority 12123
At location src/dfa.c:739
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 2;
for (i = 0; i < 2; ++i) {
    {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            parse_bracket_exp_mb();
            return lasttok = MBCSET;
        }
        zeroset(ccl);
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (c == '^') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        }
                        ;
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1))) {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (c1 == '-') {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1))) {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c2) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!hard_LC_COLLATE) {
                        for (; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    } else {
                        regex_t re;
                        char expr[6];
                        expr[0] = '[';
                        expr[1] = c;
                        expr[2] = '-';
                        expr[3] = c2;
                        expr[4] = ']';
                        expr[5] = '\x00';
                        if (regcomp(&re, expr, case_fold ? (1 << 1) : 0) == REG_NOERROR) {
                            for (c = 0; c < (1 << 8); ++c) {
                                regmatch_t mat;
                                char buf[2];
                                buf[0] = c;
                                buf[1] = '\x00';
                                if (regexec(&re, buf, 1, &mat, 0) == REG_NOERROR && mat.rm_so == 0 && mat.rm_eo == 1)
                                    setbit_case_fold(c, ccl);
                            }
                            regfree(&re);
                        }
                    }
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast addifexit:Priority 12123
At location src/dfa.c:739
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 3;
for (i = 0; i < 2; ++i) {
    {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            parse_bracket_exp_mb();
            return lasttok = MBCSET;
        }
        zeroset(ccl);
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (c == '^') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        }
                        ;
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1))) {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (c1 == '-') {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1))) {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c2) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!hard_LC_COLLATE) {
                        for (; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    } else {
                        regex_t re;
                        char expr[6];
                        expr[0] = '[';
                        expr[1] = c;
                        expr[2] = '-';
                        expr[3] = c2;
                        expr[4] = ']';
                        expr[5] = '\x00';
                        if (regcomp(&re, expr, case_fold ? (1 << 1) : 0) == REG_NOERROR) {
                            for (c = 0; c < (1 << 8); ++c) {
                                regmatch_t mat;
                                char buf[2];
                                buf[0] = c;
                                buf[1] = '\x00';
                                if (regexec(&re, buf, 1, &mat, 0) == REG_NOERROR && mat.rm_so == 0 && mat.rm_eo == 1)
                                    setbit_case_fold(c, ccl);
                            }
                            regfree(&re);
                        }
                    }
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast addifexit:Priority 12123
At location src/dfa.c:739
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 4;
for (i = 0; i < 2; ++i) {
    {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            parse_bracket_exp_mb();
            return lasttok = MBCSET;
        }
        zeroset(ccl);
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (c == '^') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        }
                        ;
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1))) {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (c1 == '-') {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1))) {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c2) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!hard_LC_COLLATE) {
                        for (; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    } else {
                        regex_t re;
                        char expr[6];
                        expr[0] = '[';
                        expr[1] = c;
                        expr[2] = '-';
                        expr[3] = c2;
                        expr[4] = ']';
                        expr[5] = '\x00';
                        if (regcomp(&re, expr, case_fold ? (1 << 1) : 0) == REG_NOERROR) {
                            for (c = 0; c < (1 << 8); ++c) {
                                regmatch_t mat;
                                char buf[2];
                                buf[0] = c;
                                buf[1] = '\x00';
                                if (regexec(&re, buf, 1, &mat, 0) == REG_NOERROR && mat.rm_so == 0 && mat.rm_eo == 1)
                                    setbit_case_fold(c, ccl);
                            }
                            regfree(&re);
                        }
                    }
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast addifexit:Priority 12123
At location src/dfa.c:739
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 5;
for (i = 0; i < 2; ++i) {
    {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            parse_bracket_exp_mb();
            return lasttok = MBCSET;
        }
        zeroset(ccl);
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (c == '^') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        }
                        ;
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1))) {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (c1 == '-') {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1))) {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c2) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!hard_LC_COLLATE) {
                        for (; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    } else {
                        regex_t re;
                        char expr[6];
                        expr[0] = '[';
                        expr[1] = c;
                        expr[2] = '-';
                        expr[3] = c2;
                        expr[4] = ']';
                        expr[5] = '\x00';
                        if (regcomp(&re, expr, case_fold ? (1 << 1) : 0) == REG_NOERROR) {
                            for (c = 0; c < (1 << 8); ++c) {
                                regmatch_t mat;
                                char buf[2];
                                buf[0] = c;
                                buf[1] = '\x00';
                                if (regexec(&re, buf, 1, &mat, 0) == REG_NOERROR && mat.rm_so == 0 && mat.rm_eo == 1)
                                    setbit_case_fold(c, ccl);
                            }
                            regfree(&re);
                        }
                    }
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast addifexit:Priority 12123
At location src/dfa.c:739
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 6;
for (i = 0; i < 2; ++i) {
    {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            parse_bracket_exp_mb();
            return lasttok = MBCSET;
        }
        zeroset(ccl);
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (c == '^') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        }
                        ;
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1))) {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (c1 == '-') {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1))) {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c2) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!hard_LC_COLLATE) {
                        for (; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    } else {
                        regex_t re;
                        char expr[6];
                        expr[0] = '[';
                        expr[1] = c;
                        expr[2] = '-';
                        expr[3] = c2;
                        expr[4] = ']';
                        expr[5] = '\x00';
                        if (regcomp(&re, expr, case_fold ? (1 << 1) : 0) == REG_NOERROR) {
                            for (c = 0; c < (1 << 8); ++c) {
                                regmatch_t mat;
                                char buf[2];
                                buf[0] = c;
                                buf[1] = '\x00';
                                if (regexec(&re, buf, 1, &mat, 0) == REG_NOERROR && mat.rm_so == 0 && mat.rm_eo == 1)
                                    setbit_case_fold(c, ccl);
                            }
                            regfree(&re);
                        }
                    }
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast addifexit:Priority 12123
At location src/dfa.c:739
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 8;
for (i = 0; i < 2; ++i) {
    {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            parse_bracket_exp_mb();
            return lasttok = MBCSET;
        }
        zeroset(ccl);
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (c == '^') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        }
                        ;
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1))) {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (c1 == '-') {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1))) {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c2) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!hard_LC_COLLATE) {
                        for (; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    } else {
                        regex_t re;
                        char expr[6];
                        expr[0] = '[';
                        expr[1] = c;
                        expr[2] = '-';
                        expr[3] = c2;
                        expr[4] = ']';
                        expr[5] = '\x00';
                        if (regcomp(&re, expr, case_fold ? (1 << 1) : 0) == REG_NOERROR) {
                            for (c = 0; c < (1 << 8); ++c) {
                                regmatch_t mat;
                                char buf[2];
                                buf[0] = c;
                                buf[1] = '\x00';
                                if (regexec(&re, buf, 1, &mat, 0) == REG_NOERROR && mat.rm_so == 0 && mat.rm_eo == 1)
                                    setbit_case_fold(c, ccl);
                            }
                            regfree(&re);
                        }
                    }
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast addifexit:Priority 12123
At location src/dfa.c:739
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 9;
for (i = 0; i < 2; ++i) {
    {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            parse_bracket_exp_mb();
            return lasttok = MBCSET;
        }
        zeroset(ccl);
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (c == '^') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        }
                        ;
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1))) {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (c1 == '-') {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1))) {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c2) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!hard_LC_COLLATE) {
                        for (; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    } else {
                        regex_t re;
                        char expr[6];
                        expr[0] = '[';
                        expr[1] = c;
                        expr[2] = '-';
                        expr[3] = c2;
                        expr[4] = ']';
                        expr[5] = '\x00';
                        if (regcomp(&re, expr, case_fold ? (1 << 1) : 0) == REG_NOERROR) {
                            for (c = 0; c < (1 << 8); ++c) {
                                regmatch_t mat;
                                char buf[2];
                                buf[0] = c;
                                buf[1] = '\x00';
                                if (regexec(&re, buf, 1, &mat, 0) == REG_NOERROR && mat.rm_so == 0 && mat.rm_eo == 1)
                                    setbit_case_fold(c, ccl);
                            }
                            regfree(&re);
                        }
                    }
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast addifexit:Priority 12123
At location src/dfa.c:739
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 10;
for (i = 0; i < 2; ++i) {
    {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            parse_bracket_exp_mb();
            return lasttok = MBCSET;
        }
        zeroset(ccl);
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (c == '^') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        }
                        ;
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1))) {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (c1 == '-') {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1))) {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c2) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!hard_LC_COLLATE) {
                        for (; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    } else {
                        regex_t re;
                        char expr[6];
                        expr[0] = '[';
                        expr[1] = c;
                        expr[2] = '-';
                        expr[3] = c2;
                        expr[4] = ']';
                        expr[5] = '\x00';
                        if (regcomp(&re, expr, case_fold ? (1 << 1) : 0) == REG_NOERROR) {
                            for (c = 0; c < (1 << 8); ++c) {
                                regmatch_t mat;
                                char buf[2];
                                buf[0] = c;
                                buf[1] = '\x00';
                                if (regexec(&re, buf, 1, &mat, 0) == REG_NOERROR && mat.rm_so == 0 && mat.rm_eo == 1)
                                    setbit_case_fold(c, ccl);
                            }
                            regfree(&re);
                        }
                    }
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast addifexit:Priority 12123
At location src/dfa.c:739
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 256;
for (i = 0; i < 2; ++i) {
    {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            parse_bracket_exp_mb();
            return lasttok = MBCSET;
        }
        zeroset(ccl);
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (c == '^') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        }
                        ;
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1))) {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (c1 == '-') {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1))) {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c2) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!hard_LC_COLLATE) {
                        for (; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    } else {
                        regex_t re;
                        char expr[6];
                        expr[0] = '[';
                        expr[1] = c;
                        expr[2] = '-';
                        expr[3] = c2;
                        expr[4] = ']';
                        expr[5] = '\x00';
                        if (regcomp(&re, expr, case_fold ? (1 << 1) : 0) == REG_NOERROR) {
                            for (c = 0; c < (1 << 8); ++c) {
                                regmatch_t mat;
                                char buf[2];
                                buf[0] = c;
                                buf[1] = '\x00';
                                if (regexec(&re, buf, 1, &mat, 0) == REG_NOERROR && mat.rm_so == 0 && mat.rm_eo == 1)
                                    setbit_case_fold(c, ccl);
                            }
                            regfree(&re);
                        }
                    }
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast addifexit:Priority 12123
At location src/dfa.c:739
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 32767;
for (i = 0; i < 2; ++i) {
    {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            parse_bracket_exp_mb();
            return lasttok = MBCSET;
        }
        zeroset(ccl);
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (c == '^') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        }
                        ;
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1))) {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (c1 == '-') {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1))) {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c2) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!hard_LC_COLLATE) {
                        for (; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    } else {
                        regex_t re;
                        char expr[6];
                        expr[0] = '[';
                        expr[1] = c;
                        expr[2] = '-';
                        expr[3] = c2;
                        expr[4] = ']';
                        expr[5] = '\x00';
                        if (regcomp(&re, expr, case_fold ? (1 << 1) : 0) == REG_NOERROR) {
                            for (c = 0; c < (1 << 8); ++c) {
                                regmatch_t mat;
                                char buf[2];
                                buf[0] = c;
                                buf[1] = '\x00';
                                if (regexec(&re, buf, 1, &mat, 0) == REG_NOERROR && mat.rm_so == 0 && mat.rm_eo == 1)
                                    setbit_case_fold(c, ccl);
                            }
                            regfree(&re);
                        }
                    }
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast addifexit:Priority 9823
At location src/dfa.c:739
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    goto skip;
for (i = 0; i < 2; ++i) {
    {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            parse_bracket_exp_mb();
            return lasttok = MBCSET;
        }
        zeroset(ccl);
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (c == '^') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        }
                        ;
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1))) {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (c1 == '-') {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1))) {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c2) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!hard_LC_COLLATE) {
                        for (; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    } else {
                        regex_t re;
                        char expr[6];
                        expr[0] = '[';
                        expr[1] = c;
                        expr[2] = '-';
                        expr[3] = c2;
                        expr[4] = ']';
                        expr[5] = '\x00';
                        if (regcomp(&re, expr, case_fold ? (1 << 1) : 0) == REG_NOERROR) {
                            for (c = 0; c < (1 << 8); ++c) {
                                regmatch_t mat;
                                char buf[2];
                                buf[0] = c;
                                buf[1] = '\x00';
                                if (regexec(&re, buf, 1, &mat, 0) == REG_NOERROR && mat.rm_so == 0 && mat.rm_eo == 1)
                                    setbit_case_fold(c, ccl);
                            }
                            regfree(&re);
                        }
                    }
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast addifexit:Priority 9823
At location src/dfa.c:739
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, c, lexptr, lexleft, lasttok, cur_mb_index, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    goto normal_char;
for (i = 0; i < 2; ++i) {
    {
        if (!lexleft) {
            if (0 != 0)
                dfaerror(0);
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
        goto normal_char;
    switch (c) {
      case '\\':
        if (backslash)
            goto normal_char;
        if (lexleft == 0)
            dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
        backslash = 1;
        break;
      case '^':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
            return lasttok = BEGLINE;
        goto normal_char;
      case '$':
        if (backslash)
            goto normal_char;
        if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
            return lasttok = ENDLINE;
        goto normal_char;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            laststart = 0;
            return lasttok = BACKREF;
        }
        goto normal_char;
      case '`':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGLINE;
        goto normal_char;
      case '\'':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDLINE;
        goto normal_char;
      case '<':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = BEGWORD;
        goto normal_char;
      case '>':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = ENDWORD;
        goto normal_char;
      case 'b':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = LIMWORD;
        goto normal_char;
      case 'B':
        if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            return lasttok = NOTLIMWORD;
        goto normal_char;
      case '?':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = QMARK;
      case '*':
        if (backslash)
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = STAR;
      case '+':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        return lasttok = PLUS;
      case '{':
        if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
            goto normal_char;
        if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
            int lo = -1, hi = -1;
            const char *p = lexptr;
            const char *lim = p + lexleft;
            for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
                lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
            if (p != lim && *p == ',')
                while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                    hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
            else
                hi = lo;
            if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
                goto normal_char;
        }
        minrep = 0;
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (((unsigned int)(c) - '0' <= 9)) {
            minrep = c - '0';
            for (;;) {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                minrep = 10 * minrep + c - '0';
            }
        } else
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        if (c == ',') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (!((unsigned int)(c) - '0' <= 9))
                maxrep = -1;
            else {
                maxrep = c - '0';
                for (;;) {
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!((unsigned int)(c) - '0' <= 9))
                        break;
                    maxrep = 10 * maxrep + c - '0';
                }
                if (0 <= maxrep && maxrep < minrep)
                    dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            }
        } else
            maxrep = minrep;
        if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
            if (c != '\\')
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
        }
        if (c != '}')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        laststart = 0;
        return lasttok = REPMN;
      case '|':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '\n':
        if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        laststart = 1;
        return lasttok = OR;
      case '(':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        ++parens;
        laststart = 1;
        return lasttok = LPAREN;
      case ')':
        if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
            goto normal_char;
        if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto normal_char;
        --parens;
        laststart = 0;
        return lasttok = RPAREN;
      case '.':
        if (backslash)
            goto normal_char;
        if ((__ctype_get_mb_cur_max()) > 1) {
            laststart = 0;
            return lasttok = ANYCHAR;
        }
        zeroset(ccl);
        notset(ccl);
        if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
            clrbit(eolbyte, ccl);
        if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit('\x00', ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case 'w':
      case 'W':
        if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        zeroset(ccl);
        for (c2 = 0; c2 < (1 << 8); ++c2) 
            if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
                setbit(c2, ccl);
        if (c == 'W')
            notset(ccl);
        laststart = 0;
        return lasttok = CSET + charclass_index(ccl);
      case '[':
        if (backslash)
            goto normal_char;
        laststart = 0;
        if ((__ctype_get_mb_cur_max()) > 1) {
            parse_bracket_exp_mb();
            return lasttok = MBCSET;
        }
        zeroset(ccl);
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (c == '^') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            invert = 1;
        } else
            invert = 0;
        do {
            if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
                for (c1 = 0; prednames[c1].name; ++c1) 
                    if (looking_at(prednames[c1].name)) {
                        int (*pred)(int) = prednames[c1].pred;
                        for (c2 = 0; c2 < (1 << 8); ++c2) 
                            if ((*pred)(c2))
                                setbit_case_fold(c2, ccl);
                        lexptr += strlen(prednames[c1].name);
                        lexleft -= strlen(prednames[c1].name);
                        {
                            if (!lexleft) {
                                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                                else
                                    return lasttok = END;
                            }
                            if ((__ctype_get_mb_cur_max()) > 1)
                                update_mb_len_index(lexptr, lexleft);
                            (c1) = (unsigned char)*lexptr++;
                            --lexleft;
                        }
                        ;
                        goto skip;
                    }
            if (c == '\\' && (syntax_bits & ((unsigned long)1))) {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c1) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (c1 == '-') {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (c2 == ']') {
                    --lexptr;
                    ++lexleft;
                } else {
                    if (c2 == '\\' && (syntax_bits & ((unsigned long)1))) {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c2) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    if (!hard_LC_COLLATE) {
                        for (; c <= c2; c++) 
                            setbit_case_fold(c, ccl);
                    } else {
                        regex_t re;
                        char expr[6];
                        expr[0] = '[';
                        expr[1] = c;
                        expr[2] = '-';
                        expr[3] = c2;
                        expr[4] = ']';
                        expr[5] = '\x00';
                        if (regcomp(&re, expr, case_fold ? (1 << 1) : 0) == REG_NOERROR) {
                            for (c = 0; c < (1 << 8); ++c) {
                                regmatch_t mat;
                                char buf[2];
                                buf[0] = c;
                                buf[1] = '\x00';
                                if (regexec(&re, buf, 1, &mat, 0) == REG_NOERROR && mat.rm_so == 0 && mat.rm_eo == 1)
                                    setbit_case_fold(c, ccl);
                            }
                            regfree(&re);
                        }
                    }
                    continue;
                }
            }
            setbit_case_fold(c, ccl);
          skip:
            ;
        } while ((c = c1) != ']');
        if (invert) {
            notset(ccl);
            if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                clrbit(eolbyte, ccl);
        }
        return lasttok = CSET + charclass_index(ccl);
      default:
      normal_char:
        laststart = 0;
        if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
            zeroset(ccl);
            setbit_case_fold(c, ccl);
            return lasttok = CSET + charclass_index(ccl);
        }
        return lasttok = c;
    }
}

....
Skipping nonlast:Priority -387
At location src/dfa.c:743
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast:Priority -387
At location src/dfa.c:743
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast:Priority -387
At location src/dfa.c:743
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast:Priority -387
At location src/dfa.c:743
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast:Priority -387
At location src/dfa.c:743
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGLINE;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast:Priority -387
At location src/dfa.c:743
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGWORD;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast:Priority -387
At location src/dfa.c:743
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDLINE;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast:Priority -387
At location src/dfa.c:743
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDWORD;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast:Priority -387
At location src/dfa.c:743
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = LIMWORD;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast:Priority -387
At location src/dfa.c:743
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = NOTLIMWORD;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast:Priority -387
At location src/dfa.c:743
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    laststart = 0;
    return lasttok = BACKREF;
}
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast:Priority -387
At location src/dfa.c:743
--Src File: src/dfa.c
Fragment 0:
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast:Priority -387
At location src/dfa.c:743
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast:Priority -387
At location src/dfa.c:743
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast:Priority -387
At location src/dfa.c:743
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast:Priority -387
At location src/dfa.c:743
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast:Priority -387
At location src/dfa.c:743
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3363
At location src/dfa.c:743
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cur_mb_index, c, lexptr, lexleft, lasttok, i, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return -1;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3363
At location src/dfa.c:743
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cur_mb_index, c, lexptr, lexleft, lasttok, i, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 0;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3363
At location src/dfa.c:743
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cur_mb_index, c, lexptr, lexleft, lasttok, i, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 1;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3363
At location src/dfa.c:743
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cur_mb_index, c, lexptr, lexleft, lasttok, i, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 2;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3363
At location src/dfa.c:743
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cur_mb_index, c, lexptr, lexleft, lasttok, i, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 3;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3363
At location src/dfa.c:743
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cur_mb_index, c, lexptr, lexleft, lasttok, i, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 4;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3363
At location src/dfa.c:743
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cur_mb_index, c, lexptr, lexleft, lasttok, i, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 5;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3363
At location src/dfa.c:743
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cur_mb_index, c, lexptr, lexleft, lasttok, i, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 6;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3363
At location src/dfa.c:743
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cur_mb_index, c, lexptr, lexleft, lasttok, i, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 8;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3363
At location src/dfa.c:743
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cur_mb_index, c, lexptr, lexleft, lasttok, i, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 9;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3363
At location src/dfa.c:743
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cur_mb_index, c, lexptr, lexleft, lasttok, i, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 10;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3363
At location src/dfa.c:743
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cur_mb_index, c, lexptr, lexleft, lasttok, i, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 256;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3363
At location src/dfa.c:743
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cur_mb_index, c, lexptr, lexleft, lasttok, i, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 32767;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3363
At location src/dfa.c:743
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cur_mb_index, c, lexptr, lexleft, lasttok, i, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    break;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3563
At location src/dfa.c:743
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cur_mb_index, c, lexptr, lexleft, lasttok, i, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    goto skip;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3563
At location src/dfa.c:743
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cur_mb_index, c, lexptr, lexleft, lasttok, i, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    goto normal_char;
if ((__ctype_get_mb_cur_max()) > 1 && cur_mb_index)
    goto normal_char;

....
Skipping returnreturn addifexit:Priority 4614
At location src/dfa.c:750
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, backslash, lexleft, cur_mb_index, lexptr, lasttok, i, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return -1;
switch (c) {
  case '\\':
    if (backslash)
        goto normal_char;
    if (lexleft == 0)
        dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
    backslash = 1;
    break;
  case '^':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    goto normal_char;
  case '$':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    goto normal_char;
  case '1':
  case '2':
  case '3':
  case '4':
  case '5':
  case '6':
  case '7':
  case '8':
  case '9':
    if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        laststart = 0;
        return lasttok = BACKREF;
    }
    goto normal_char;
  case '`':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGLINE;
    goto normal_char;
  case '\'':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDLINE;
    goto normal_char;
  case '<':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGWORD;
    goto normal_char;
  case '>':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDWORD;
    goto normal_char;
  case 'b':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = LIMWORD;
    goto normal_char;
  case 'B':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = NOTLIMWORD;
    goto normal_char;
  case '?':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = QMARK;
  case '*':
    if (backslash)
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = STAR;
  case '+':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = PLUS;
  case '{':
    if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
        int lo = -1, hi = -1;
        const char *p = lexptr;
        const char *lim = p + lexleft;
        for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
            lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
        if (p != lim && *p == ',')
            while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
        else
            hi = lo;
        if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
            goto normal_char;
    }
    minrep = 0;
    {
        if (!lexleft) {
            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if (((unsigned int)(c) - '0' <= 9)) {
        minrep = c - '0';
        for (;;) {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (!((unsigned int)(c) - '0' <= 9))
                break;
            minrep = 10 * minrep + c - '0';
        }
    } else
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    if (c == ',') {
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (!((unsigned int)(c) - '0' <= 9))
            maxrep = -1;
        else {
            maxrep = c - '0';
            for (;;) {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                maxrep = 10 * maxrep + c - '0';
            }
            if (0 <= maxrep && maxrep < minrep)
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        }
    } else
        maxrep = minrep;
    if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        if (c != '\\')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
    }
    if (c != '}')
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    laststart = 0;
    return lasttok = REPMN;
  case '|':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '\n':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '(':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    ++parens;
    laststart = 1;
    return lasttok = LPAREN;
  case ')':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    --parens;
    laststart = 0;
    return lasttok = RPAREN;
  case '.':
    if (backslash)
        goto normal_char;
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    zeroset(ccl);
    notset(ccl);
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        clrbit(eolbyte, ccl);
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit('\x00', ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case 'w':
  case 'W':
    if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    zeroset(ccl);
    for (c2 = 0; c2 < (1 << 8); ++c2) 
        if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
            setbit(c2, ccl);
    if (c == 'W')
        notset(ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case '[':
    if (backslash)
        goto normal_char;
    laststart = 0;
    if ((__ctype_get_mb_cur_max()) > 1) {
        parse_bracket_exp_mb();
        return lasttok = MBCSET;
    }
    zeroset(ccl);
    {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if (c == '^') {
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        invert = 1;
    } else
        invert = 0;
    do {
        if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
            for (c1 = 0; prednames[c1].name; ++c1) 
                if (looking_at(prednames[c1].name)) {
                    int (*pred)(int) = prednames[c1].pred;
                    for (c2 = 0; c2 < (1 << 8); ++c2) 
                        if ((*pred)(c2))
                            setbit_case_fold(c2, ccl);
                    lexptr += strlen(prednames[c1].name);
                    lexleft -= strlen(prednames[c1].name);
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    goto skip;
                }
        if (c == '\\' && (syntax_bits & ((unsigned long)1))) {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (c1 == '-') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (c2 == ']') {
                --lexptr;
                ++lexleft;
            } else {
                if (c2 == '\\' && (syntax_bits & ((unsigned long)1))) {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!hard_LC_COLLATE) {
                    for (; c <= c2; c++) 
                        setbit_case_fold(c, ccl);
                } else {
                    regex_t re;
                    char expr[6];
                    expr[0] = '[';
                    expr[1] = c;
                    expr[2] = '-';
                    expr[3] = c2;
                    expr[4] = ']';
                    expr[5] = '\x00';
                    if (regcomp(&re, expr, case_fold ? (1 << 1) : 0) == REG_NOERROR) {
                        for (c = 0; c < (1 << 8); ++c) {
                            regmatch_t mat;
                            char buf[2];
                            buf[0] = c;
                            buf[1] = '\x00';
                            if (regexec(&re, buf, 1, &mat, 0) == REG_NOERROR && mat.rm_so == 0 && mat.rm_eo == 1)
                                setbit_case_fold(c, ccl);
                        }
                        regfree(&re);
                    }
                }
                continue;
            }
        }
        setbit_case_fold(c, ccl);
      skip:
        ;
    } while ((c = c1) != ']');
    if (invert) {
        notset(ccl);
        if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit(eolbyte, ccl);
    }
    return lasttok = CSET + charclass_index(ccl);
  default:
  normal_char:
    laststart = 0;
    if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
        zeroset(ccl);
        setbit_case_fold(c, ccl);
        return lasttok = CSET + charclass_index(ccl);
    }
    return lasttok = c;
}

....
Skipping returnreturn addifexit:Priority 4614
At location src/dfa.c:750
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, backslash, lexleft, cur_mb_index, lexptr, lasttok, i, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 0;
switch (c) {
  case '\\':
    if (backslash)
        goto normal_char;
    if (lexleft == 0)
        dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
    backslash = 1;
    break;
  case '^':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    goto normal_char;
  case '$':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    goto normal_char;
  case '1':
  case '2':
  case '3':
  case '4':
  case '5':
  case '6':
  case '7':
  case '8':
  case '9':
    if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        laststart = 0;
        return lasttok = BACKREF;
    }
    goto normal_char;
  case '`':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGLINE;
    goto normal_char;
  case '\'':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDLINE;
    goto normal_char;
  case '<':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGWORD;
    goto normal_char;
  case '>':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDWORD;
    goto normal_char;
  case 'b':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = LIMWORD;
    goto normal_char;
  case 'B':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = NOTLIMWORD;
    goto normal_char;
  case '?':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = QMARK;
  case '*':
    if (backslash)
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = STAR;
  case '+':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = PLUS;
  case '{':
    if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
        int lo = -1, hi = -1;
        const char *p = lexptr;
        const char *lim = p + lexleft;
        for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
            lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
        if (p != lim && *p == ',')
            while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
        else
            hi = lo;
        if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
            goto normal_char;
    }
    minrep = 0;
    {
        if (!lexleft) {
            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if (((unsigned int)(c) - '0' <= 9)) {
        minrep = c - '0';
        for (;;) {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (!((unsigned int)(c) - '0' <= 9))
                break;
            minrep = 10 * minrep + c - '0';
        }
    } else
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    if (c == ',') {
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (!((unsigned int)(c) - '0' <= 9))
            maxrep = -1;
        else {
            maxrep = c - '0';
            for (;;) {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                maxrep = 10 * maxrep + c - '0';
            }
            if (0 <= maxrep && maxrep < minrep)
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        }
    } else
        maxrep = minrep;
    if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        if (c != '\\')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
    }
    if (c != '}')
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    laststart = 0;
    return lasttok = REPMN;
  case '|':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '\n':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '(':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    ++parens;
    laststart = 1;
    return lasttok = LPAREN;
  case ')':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    --parens;
    laststart = 0;
    return lasttok = RPAREN;
  case '.':
    if (backslash)
        goto normal_char;
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    zeroset(ccl);
    notset(ccl);
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        clrbit(eolbyte, ccl);
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit('\x00', ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case 'w':
  case 'W':
    if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    zeroset(ccl);
    for (c2 = 0; c2 < (1 << 8); ++c2) 
        if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
            setbit(c2, ccl);
    if (c == 'W')
        notset(ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case '[':
    if (backslash)
        goto normal_char;
    laststart = 0;
    if ((__ctype_get_mb_cur_max()) > 1) {
        parse_bracket_exp_mb();
        return lasttok = MBCSET;
    }
    zeroset(ccl);
    {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if (c == '^') {
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        invert = 1;
    } else
        invert = 0;
    do {
        if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
            for (c1 = 0; prednames[c1].name; ++c1) 
                if (looking_at(prednames[c1].name)) {
                    int (*pred)(int) = prednames[c1].pred;
                    for (c2 = 0; c2 < (1 << 8); ++c2) 
                        if ((*pred)(c2))
                            setbit_case_fold(c2, ccl);
                    lexptr += strlen(prednames[c1].name);
                    lexleft -= strlen(prednames[c1].name);
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    goto skip;
                }
        if (c == '\\' && (syntax_bits & ((unsigned long)1))) {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (c1 == '-') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (c2 == ']') {
                --lexptr;
                ++lexleft;
            } else {
                if (c2 == '\\' && (syntax_bits & ((unsigned long)1))) {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!hard_LC_COLLATE) {
                    for (; c <= c2; c++) 
                        setbit_case_fold(c, ccl);
                } else {
                    regex_t re;
                    char expr[6];
                    expr[0] = '[';
                    expr[1] = c;
                    expr[2] = '-';
                    expr[3] = c2;
                    expr[4] = ']';
                    expr[5] = '\x00';
                    if (regcomp(&re, expr, case_fold ? (1 << 1) : 0) == REG_NOERROR) {
                        for (c = 0; c < (1 << 8); ++c) {
                            regmatch_t mat;
                            char buf[2];
                            buf[0] = c;
                            buf[1] = '\x00';
                            if (regexec(&re, buf, 1, &mat, 0) == REG_NOERROR && mat.rm_so == 0 && mat.rm_eo == 1)
                                setbit_case_fold(c, ccl);
                        }
                        regfree(&re);
                    }
                }
                continue;
            }
        }
        setbit_case_fold(c, ccl);
      skip:
        ;
    } while ((c = c1) != ']');
    if (invert) {
        notset(ccl);
        if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit(eolbyte, ccl);
    }
    return lasttok = CSET + charclass_index(ccl);
  default:
  normal_char:
    laststart = 0;
    if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
        zeroset(ccl);
        setbit_case_fold(c, ccl);
        return lasttok = CSET + charclass_index(ccl);
    }
    return lasttok = c;
}

....
Skipping returnreturn addifexit:Priority 4614
At location src/dfa.c:750
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, backslash, lexleft, cur_mb_index, lexptr, lasttok, i, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 1;
switch (c) {
  case '\\':
    if (backslash)
        goto normal_char;
    if (lexleft == 0)
        dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
    backslash = 1;
    break;
  case '^':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    goto normal_char;
  case '$':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    goto normal_char;
  case '1':
  case '2':
  case '3':
  case '4':
  case '5':
  case '6':
  case '7':
  case '8':
  case '9':
    if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        laststart = 0;
        return lasttok = BACKREF;
    }
    goto normal_char;
  case '`':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGLINE;
    goto normal_char;
  case '\'':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDLINE;
    goto normal_char;
  case '<':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGWORD;
    goto normal_char;
  case '>':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDWORD;
    goto normal_char;
  case 'b':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = LIMWORD;
    goto normal_char;
  case 'B':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = NOTLIMWORD;
    goto normal_char;
  case '?':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = QMARK;
  case '*':
    if (backslash)
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = STAR;
  case '+':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = PLUS;
  case '{':
    if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
        int lo = -1, hi = -1;
        const char *p = lexptr;
        const char *lim = p + lexleft;
        for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
            lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
        if (p != lim && *p == ',')
            while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
        else
            hi = lo;
        if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
            goto normal_char;
    }
    minrep = 0;
    {
        if (!lexleft) {
            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if (((unsigned int)(c) - '0' <= 9)) {
        minrep = c - '0';
        for (;;) {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (!((unsigned int)(c) - '0' <= 9))
                break;
            minrep = 10 * minrep + c - '0';
        }
    } else
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    if (c == ',') {
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (!((unsigned int)(c) - '0' <= 9))
            maxrep = -1;
        else {
            maxrep = c - '0';
            for (;;) {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                maxrep = 10 * maxrep + c - '0';
            }
            if (0 <= maxrep && maxrep < minrep)
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        }
    } else
        maxrep = minrep;
    if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        if (c != '\\')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
    }
    if (c != '}')
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    laststart = 0;
    return lasttok = REPMN;
  case '|':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '\n':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '(':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    ++parens;
    laststart = 1;
    return lasttok = LPAREN;
  case ')':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    --parens;
    laststart = 0;
    return lasttok = RPAREN;
  case '.':
    if (backslash)
        goto normal_char;
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    zeroset(ccl);
    notset(ccl);
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        clrbit(eolbyte, ccl);
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit('\x00', ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case 'w':
  case 'W':
    if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    zeroset(ccl);
    for (c2 = 0; c2 < (1 << 8); ++c2) 
        if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
            setbit(c2, ccl);
    if (c == 'W')
        notset(ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case '[':
    if (backslash)
        goto normal_char;
    laststart = 0;
    if ((__ctype_get_mb_cur_max()) > 1) {
        parse_bracket_exp_mb();
        return lasttok = MBCSET;
    }
    zeroset(ccl);
    {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if (c == '^') {
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        invert = 1;
    } else
        invert = 0;
    do {
        if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
            for (c1 = 0; prednames[c1].name; ++c1) 
                if (looking_at(prednames[c1].name)) {
                    int (*pred)(int) = prednames[c1].pred;
                    for (c2 = 0; c2 < (1 << 8); ++c2) 
                        if ((*pred)(c2))
                            setbit_case_fold(c2, ccl);
                    lexptr += strlen(prednames[c1].name);
                    lexleft -= strlen(prednames[c1].name);
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    goto skip;
                }
        if (c == '\\' && (syntax_bits & ((unsigned long)1))) {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (c1 == '-') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (c2 == ']') {
                --lexptr;
                ++lexleft;
            } else {
                if (c2 == '\\' && (syntax_bits & ((unsigned long)1))) {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!hard_LC_COLLATE) {
                    for (; c <= c2; c++) 
                        setbit_case_fold(c, ccl);
                } else {
                    regex_t re;
                    char expr[6];
                    expr[0] = '[';
                    expr[1] = c;
                    expr[2] = '-';
                    expr[3] = c2;
                    expr[4] = ']';
                    expr[5] = '\x00';
                    if (regcomp(&re, expr, case_fold ? (1 << 1) : 0) == REG_NOERROR) {
                        for (c = 0; c < (1 << 8); ++c) {
                            regmatch_t mat;
                            char buf[2];
                            buf[0] = c;
                            buf[1] = '\x00';
                            if (regexec(&re, buf, 1, &mat, 0) == REG_NOERROR && mat.rm_so == 0 && mat.rm_eo == 1)
                                setbit_case_fold(c, ccl);
                        }
                        regfree(&re);
                    }
                }
                continue;
            }
        }
        setbit_case_fold(c, ccl);
      skip:
        ;
    } while ((c = c1) != ']');
    if (invert) {
        notset(ccl);
        if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit(eolbyte, ccl);
    }
    return lasttok = CSET + charclass_index(ccl);
  default:
  normal_char:
    laststart = 0;
    if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
        zeroset(ccl);
        setbit_case_fold(c, ccl);
        return lasttok = CSET + charclass_index(ccl);
    }
    return lasttok = c;
}

....
Skipping returnreturn addifexit:Priority 4614
At location src/dfa.c:750
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, backslash, lexleft, cur_mb_index, lexptr, lasttok, i, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 2;
switch (c) {
  case '\\':
    if (backslash)
        goto normal_char;
    if (lexleft == 0)
        dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
    backslash = 1;
    break;
  case '^':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    goto normal_char;
  case '$':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    goto normal_char;
  case '1':
  case '2':
  case '3':
  case '4':
  case '5':
  case '6':
  case '7':
  case '8':
  case '9':
    if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        laststart = 0;
        return lasttok = BACKREF;
    }
    goto normal_char;
  case '`':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGLINE;
    goto normal_char;
  case '\'':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDLINE;
    goto normal_char;
  case '<':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGWORD;
    goto normal_char;
  case '>':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDWORD;
    goto normal_char;
  case 'b':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = LIMWORD;
    goto normal_char;
  case 'B':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = NOTLIMWORD;
    goto normal_char;
  case '?':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = QMARK;
  case '*':
    if (backslash)
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = STAR;
  case '+':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = PLUS;
  case '{':
    if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
        int lo = -1, hi = -1;
        const char *p = lexptr;
        const char *lim = p + lexleft;
        for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
            lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
        if (p != lim && *p == ',')
            while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
        else
            hi = lo;
        if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
            goto normal_char;
    }
    minrep = 0;
    {
        if (!lexleft) {
            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if (((unsigned int)(c) - '0' <= 9)) {
        minrep = c - '0';
        for (;;) {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (!((unsigned int)(c) - '0' <= 9))
                break;
            minrep = 10 * minrep + c - '0';
        }
    } else
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    if (c == ',') {
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (!((unsigned int)(c) - '0' <= 9))
            maxrep = -1;
        else {
            maxrep = c - '0';
            for (;;) {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                maxrep = 10 * maxrep + c - '0';
            }
            if (0 <= maxrep && maxrep < minrep)
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        }
    } else
        maxrep = minrep;
    if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        if (c != '\\')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
    }
    if (c != '}')
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    laststart = 0;
    return lasttok = REPMN;
  case '|':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '\n':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '(':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    ++parens;
    laststart = 1;
    return lasttok = LPAREN;
  case ')':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    --parens;
    laststart = 0;
    return lasttok = RPAREN;
  case '.':
    if (backslash)
        goto normal_char;
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    zeroset(ccl);
    notset(ccl);
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        clrbit(eolbyte, ccl);
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit('\x00', ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case 'w':
  case 'W':
    if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    zeroset(ccl);
    for (c2 = 0; c2 < (1 << 8); ++c2) 
        if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
            setbit(c2, ccl);
    if (c == 'W')
        notset(ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case '[':
    if (backslash)
        goto normal_char;
    laststart = 0;
    if ((__ctype_get_mb_cur_max()) > 1) {
        parse_bracket_exp_mb();
        return lasttok = MBCSET;
    }
    zeroset(ccl);
    {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if (c == '^') {
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        invert = 1;
    } else
        invert = 0;
    do {
        if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
            for (c1 = 0; prednames[c1].name; ++c1) 
                if (looking_at(prednames[c1].name)) {
                    int (*pred)(int) = prednames[c1].pred;
                    for (c2 = 0; c2 < (1 << 8); ++c2) 
                        if ((*pred)(c2))
                            setbit_case_fold(c2, ccl);
                    lexptr += strlen(prednames[c1].name);
                    lexleft -= strlen(prednames[c1].name);
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    goto skip;
                }
        if (c == '\\' && (syntax_bits & ((unsigned long)1))) {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (c1 == '-') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (c2 == ']') {
                --lexptr;
                ++lexleft;
            } else {
                if (c2 == '\\' && (syntax_bits & ((unsigned long)1))) {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!hard_LC_COLLATE) {
                    for (; c <= c2; c++) 
                        setbit_case_fold(c, ccl);
                } else {
                    regex_t re;
                    char expr[6];
                    expr[0] = '[';
                    expr[1] = c;
                    expr[2] = '-';
                    expr[3] = c2;
                    expr[4] = ']';
                    expr[5] = '\x00';
                    if (regcomp(&re, expr, case_fold ? (1 << 1) : 0) == REG_NOERROR) {
                        for (c = 0; c < (1 << 8); ++c) {
                            regmatch_t mat;
                            char buf[2];
                            buf[0] = c;
                            buf[1] = '\x00';
                            if (regexec(&re, buf, 1, &mat, 0) == REG_NOERROR && mat.rm_so == 0 && mat.rm_eo == 1)
                                setbit_case_fold(c, ccl);
                        }
                        regfree(&re);
                    }
                }
                continue;
            }
        }
        setbit_case_fold(c, ccl);
      skip:
        ;
    } while ((c = c1) != ']');
    if (invert) {
        notset(ccl);
        if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit(eolbyte, ccl);
    }
    return lasttok = CSET + charclass_index(ccl);
  default:
  normal_char:
    laststart = 0;
    if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
        zeroset(ccl);
        setbit_case_fold(c, ccl);
        return lasttok = CSET + charclass_index(ccl);
    }
    return lasttok = c;
}

....
Skipping returnreturn addifexit:Priority 4614
At location src/dfa.c:750
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, backslash, lexleft, cur_mb_index, lexptr, lasttok, i, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 3;
switch (c) {
  case '\\':
    if (backslash)
        goto normal_char;
    if (lexleft == 0)
        dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
    backslash = 1;
    break;
  case '^':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    goto normal_char;
  case '$':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    goto normal_char;
  case '1':
  case '2':
  case '3':
  case '4':
  case '5':
  case '6':
  case '7':
  case '8':
  case '9':
    if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        laststart = 0;
        return lasttok = BACKREF;
    }
    goto normal_char;
  case '`':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGLINE;
    goto normal_char;
  case '\'':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDLINE;
    goto normal_char;
  case '<':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGWORD;
    goto normal_char;
  case '>':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDWORD;
    goto normal_char;
  case 'b':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = LIMWORD;
    goto normal_char;
  case 'B':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = NOTLIMWORD;
    goto normal_char;
  case '?':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = QMARK;
  case '*':
    if (backslash)
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = STAR;
  case '+':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = PLUS;
  case '{':
    if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
        int lo = -1, hi = -1;
        const char *p = lexptr;
        const char *lim = p + lexleft;
        for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
            lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
        if (p != lim && *p == ',')
            while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
        else
            hi = lo;
        if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
            goto normal_char;
    }
    minrep = 0;
    {
        if (!lexleft) {
            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if (((unsigned int)(c) - '0' <= 9)) {
        minrep = c - '0';
        for (;;) {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (!((unsigned int)(c) - '0' <= 9))
                break;
            minrep = 10 * minrep + c - '0';
        }
    } else
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    if (c == ',') {
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (!((unsigned int)(c) - '0' <= 9))
            maxrep = -1;
        else {
            maxrep = c - '0';
            for (;;) {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                maxrep = 10 * maxrep + c - '0';
            }
            if (0 <= maxrep && maxrep < minrep)
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        }
    } else
        maxrep = minrep;
    if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        if (c != '\\')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
    }
    if (c != '}')
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    laststart = 0;
    return lasttok = REPMN;
  case '|':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '\n':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '(':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    ++parens;
    laststart = 1;
    return lasttok = LPAREN;
  case ')':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    --parens;
    laststart = 0;
    return lasttok = RPAREN;
  case '.':
    if (backslash)
        goto normal_char;
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    zeroset(ccl);
    notset(ccl);
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        clrbit(eolbyte, ccl);
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit('\x00', ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case 'w':
  case 'W':
    if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    zeroset(ccl);
    for (c2 = 0; c2 < (1 << 8); ++c2) 
        if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
            setbit(c2, ccl);
    if (c == 'W')
        notset(ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case '[':
    if (backslash)
        goto normal_char;
    laststart = 0;
    if ((__ctype_get_mb_cur_max()) > 1) {
        parse_bracket_exp_mb();
        return lasttok = MBCSET;
    }
    zeroset(ccl);
    {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if (c == '^') {
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        invert = 1;
    } else
        invert = 0;
    do {
        if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
            for (c1 = 0; prednames[c1].name; ++c1) 
                if (looking_at(prednames[c1].name)) {
                    int (*pred)(int) = prednames[c1].pred;
                    for (c2 = 0; c2 < (1 << 8); ++c2) 
                        if ((*pred)(c2))
                            setbit_case_fold(c2, ccl);
                    lexptr += strlen(prednames[c1].name);
                    lexleft -= strlen(prednames[c1].name);
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    goto skip;
                }
        if (c == '\\' && (syntax_bits & ((unsigned long)1))) {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (c1 == '-') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (c2 == ']') {
                --lexptr;
                ++lexleft;
            } else {
                if (c2 == '\\' && (syntax_bits & ((unsigned long)1))) {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!hard_LC_COLLATE) {
                    for (; c <= c2; c++) 
                        setbit_case_fold(c, ccl);
                } else {
                    regex_t re;
                    char expr[6];
                    expr[0] = '[';
                    expr[1] = c;
                    expr[2] = '-';
                    expr[3] = c2;
                    expr[4] = ']';
                    expr[5] = '\x00';
                    if (regcomp(&re, expr, case_fold ? (1 << 1) : 0) == REG_NOERROR) {
                        for (c = 0; c < (1 << 8); ++c) {
                            regmatch_t mat;
                            char buf[2];
                            buf[0] = c;
                            buf[1] = '\x00';
                            if (regexec(&re, buf, 1, &mat, 0) == REG_NOERROR && mat.rm_so == 0 && mat.rm_eo == 1)
                                setbit_case_fold(c, ccl);
                        }
                        regfree(&re);
                    }
                }
                continue;
            }
        }
        setbit_case_fold(c, ccl);
      skip:
        ;
    } while ((c = c1) != ']');
    if (invert) {
        notset(ccl);
        if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit(eolbyte, ccl);
    }
    return lasttok = CSET + charclass_index(ccl);
  default:
  normal_char:
    laststart = 0;
    if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
        zeroset(ccl);
        setbit_case_fold(c, ccl);
        return lasttok = CSET + charclass_index(ccl);
    }
    return lasttok = c;
}

....
Skipping returnreturn addifexit:Priority 4614
At location src/dfa.c:750
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, backslash, lexleft, cur_mb_index, lexptr, lasttok, i, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 4;
switch (c) {
  case '\\':
    if (backslash)
        goto normal_char;
    if (lexleft == 0)
        dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
    backslash = 1;
    break;
  case '^':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    goto normal_char;
  case '$':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    goto normal_char;
  case '1':
  case '2':
  case '3':
  case '4':
  case '5':
  case '6':
  case '7':
  case '8':
  case '9':
    if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        laststart = 0;
        return lasttok = BACKREF;
    }
    goto normal_char;
  case '`':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGLINE;
    goto normal_char;
  case '\'':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDLINE;
    goto normal_char;
  case '<':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGWORD;
    goto normal_char;
  case '>':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDWORD;
    goto normal_char;
  case 'b':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = LIMWORD;
    goto normal_char;
  case 'B':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = NOTLIMWORD;
    goto normal_char;
  case '?':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = QMARK;
  case '*':
    if (backslash)
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = STAR;
  case '+':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = PLUS;
  case '{':
    if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
        int lo = -1, hi = -1;
        const char *p = lexptr;
        const char *lim = p + lexleft;
        for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
            lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
        if (p != lim && *p == ',')
            while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
        else
            hi = lo;
        if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
            goto normal_char;
    }
    minrep = 0;
    {
        if (!lexleft) {
            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if (((unsigned int)(c) - '0' <= 9)) {
        minrep = c - '0';
        for (;;) {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (!((unsigned int)(c) - '0' <= 9))
                break;
            minrep = 10 * minrep + c - '0';
        }
    } else
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    if (c == ',') {
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (!((unsigned int)(c) - '0' <= 9))
            maxrep = -1;
        else {
            maxrep = c - '0';
            for (;;) {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                maxrep = 10 * maxrep + c - '0';
            }
            if (0 <= maxrep && maxrep < minrep)
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        }
    } else
        maxrep = minrep;
    if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        if (c != '\\')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
    }
    if (c != '}')
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    laststart = 0;
    return lasttok = REPMN;
  case '|':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '\n':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '(':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    ++parens;
    laststart = 1;
    return lasttok = LPAREN;
  case ')':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    --parens;
    laststart = 0;
    return lasttok = RPAREN;
  case '.':
    if (backslash)
        goto normal_char;
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    zeroset(ccl);
    notset(ccl);
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        clrbit(eolbyte, ccl);
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit('\x00', ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case 'w':
  case 'W':
    if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    zeroset(ccl);
    for (c2 = 0; c2 < (1 << 8); ++c2) 
        if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
            setbit(c2, ccl);
    if (c == 'W')
        notset(ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case '[':
    if (backslash)
        goto normal_char;
    laststart = 0;
    if ((__ctype_get_mb_cur_max()) > 1) {
        parse_bracket_exp_mb();
        return lasttok = MBCSET;
    }
    zeroset(ccl);
    {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if (c == '^') {
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        invert = 1;
    } else
        invert = 0;
    do {
        if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
            for (c1 = 0; prednames[c1].name; ++c1) 
                if (looking_at(prednames[c1].name)) {
                    int (*pred)(int) = prednames[c1].pred;
                    for (c2 = 0; c2 < (1 << 8); ++c2) 
                        if ((*pred)(c2))
                            setbit_case_fold(c2, ccl);
                    lexptr += strlen(prednames[c1].name);
                    lexleft -= strlen(prednames[c1].name);
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    goto skip;
                }
        if (c == '\\' && (syntax_bits & ((unsigned long)1))) {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (c1 == '-') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (c2 == ']') {
                --lexptr;
                ++lexleft;
            } else {
                if (c2 == '\\' && (syntax_bits & ((unsigned long)1))) {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!hard_LC_COLLATE) {
                    for (; c <= c2; c++) 
                        setbit_case_fold(c, ccl);
                } else {
                    regex_t re;
                    char expr[6];
                    expr[0] = '[';
                    expr[1] = c;
                    expr[2] = '-';
                    expr[3] = c2;
                    expr[4] = ']';
                    expr[5] = '\x00';
                    if (regcomp(&re, expr, case_fold ? (1 << 1) : 0) == REG_NOERROR) {
                        for (c = 0; c < (1 << 8); ++c) {
                            regmatch_t mat;
                            char buf[2];
                            buf[0] = c;
                            buf[1] = '\x00';
                            if (regexec(&re, buf, 1, &mat, 0) == REG_NOERROR && mat.rm_so == 0 && mat.rm_eo == 1)
                                setbit_case_fold(c, ccl);
                        }
                        regfree(&re);
                    }
                }
                continue;
            }
        }
        setbit_case_fold(c, ccl);
      skip:
        ;
    } while ((c = c1) != ']');
    if (invert) {
        notset(ccl);
        if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit(eolbyte, ccl);
    }
    return lasttok = CSET + charclass_index(ccl);
  default:
  normal_char:
    laststart = 0;
    if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
        zeroset(ccl);
        setbit_case_fold(c, ccl);
        return lasttok = CSET + charclass_index(ccl);
    }
    return lasttok = c;
}

....
Skipping returnreturn addifexit:Priority 4614
At location src/dfa.c:750
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, backslash, lexleft, cur_mb_index, lexptr, lasttok, i, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 5;
switch (c) {
  case '\\':
    if (backslash)
        goto normal_char;
    if (lexleft == 0)
        dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
    backslash = 1;
    break;
  case '^':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    goto normal_char;
  case '$':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    goto normal_char;
  case '1':
  case '2':
  case '3':
  case '4':
  case '5':
  case '6':
  case '7':
  case '8':
  case '9':
    if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        laststart = 0;
        return lasttok = BACKREF;
    }
    goto normal_char;
  case '`':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGLINE;
    goto normal_char;
  case '\'':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDLINE;
    goto normal_char;
  case '<':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGWORD;
    goto normal_char;
  case '>':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDWORD;
    goto normal_char;
  case 'b':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = LIMWORD;
    goto normal_char;
  case 'B':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = NOTLIMWORD;
    goto normal_char;
  case '?':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = QMARK;
  case '*':
    if (backslash)
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = STAR;
  case '+':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = PLUS;
  case '{':
    if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
        int lo = -1, hi = -1;
        const char *p = lexptr;
        const char *lim = p + lexleft;
        for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
            lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
        if (p != lim && *p == ',')
            while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
        else
            hi = lo;
        if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
            goto normal_char;
    }
    minrep = 0;
    {
        if (!lexleft) {
            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if (((unsigned int)(c) - '0' <= 9)) {
        minrep = c - '0';
        for (;;) {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (!((unsigned int)(c) - '0' <= 9))
                break;
            minrep = 10 * minrep + c - '0';
        }
    } else
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    if (c == ',') {
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (!((unsigned int)(c) - '0' <= 9))
            maxrep = -1;
        else {
            maxrep = c - '0';
            for (;;) {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                maxrep = 10 * maxrep + c - '0';
            }
            if (0 <= maxrep && maxrep < minrep)
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        }
    } else
        maxrep = minrep;
    if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        if (c != '\\')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
    }
    if (c != '}')
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    laststart = 0;
    return lasttok = REPMN;
  case '|':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '\n':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '(':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    ++parens;
    laststart = 1;
    return lasttok = LPAREN;
  case ')':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    --parens;
    laststart = 0;
    return lasttok = RPAREN;
  case '.':
    if (backslash)
        goto normal_char;
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    zeroset(ccl);
    notset(ccl);
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        clrbit(eolbyte, ccl);
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit('\x00', ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case 'w':
  case 'W':
    if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    zeroset(ccl);
    for (c2 = 0; c2 < (1 << 8); ++c2) 
        if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
            setbit(c2, ccl);
    if (c == 'W')
        notset(ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case '[':
    if (backslash)
        goto normal_char;
    laststart = 0;
    if ((__ctype_get_mb_cur_max()) > 1) {
        parse_bracket_exp_mb();
        return lasttok = MBCSET;
    }
    zeroset(ccl);
    {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if (c == '^') {
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        invert = 1;
    } else
        invert = 0;
    do {
        if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
            for (c1 = 0; prednames[c1].name; ++c1) 
                if (looking_at(prednames[c1].name)) {
                    int (*pred)(int) = prednames[c1].pred;
                    for (c2 = 0; c2 < (1 << 8); ++c2) 
                        if ((*pred)(c2))
                            setbit_case_fold(c2, ccl);
                    lexptr += strlen(prednames[c1].name);
                    lexleft -= strlen(prednames[c1].name);
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    goto skip;
                }
        if (c == '\\' && (syntax_bits & ((unsigned long)1))) {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (c1 == '-') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (c2 == ']') {
                --lexptr;
                ++lexleft;
            } else {
                if (c2 == '\\' && (syntax_bits & ((unsigned long)1))) {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!hard_LC_COLLATE) {
                    for (; c <= c2; c++) 
                        setbit_case_fold(c, ccl);
                } else {
                    regex_t re;
                    char expr[6];
                    expr[0] = '[';
                    expr[1] = c;
                    expr[2] = '-';
                    expr[3] = c2;
                    expr[4] = ']';
                    expr[5] = '\x00';
                    if (regcomp(&re, expr, case_fold ? (1 << 1) : 0) == REG_NOERROR) {
                        for (c = 0; c < (1 << 8); ++c) {
                            regmatch_t mat;
                            char buf[2];
                            buf[0] = c;
                            buf[1] = '\x00';
                            if (regexec(&re, buf, 1, &mat, 0) == REG_NOERROR && mat.rm_so == 0 && mat.rm_eo == 1)
                                setbit_case_fold(c, ccl);
                        }
                        regfree(&re);
                    }
                }
                continue;
            }
        }
        setbit_case_fold(c, ccl);
      skip:
        ;
    } while ((c = c1) != ']');
    if (invert) {
        notset(ccl);
        if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit(eolbyte, ccl);
    }
    return lasttok = CSET + charclass_index(ccl);
  default:
  normal_char:
    laststart = 0;
    if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
        zeroset(ccl);
        setbit_case_fold(c, ccl);
        return lasttok = CSET + charclass_index(ccl);
    }
    return lasttok = c;
}

....
Skipping returnreturn addifexit:Priority 4614
At location src/dfa.c:750
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, backslash, lexleft, cur_mb_index, lexptr, lasttok, i, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 6;
switch (c) {
  case '\\':
    if (backslash)
        goto normal_char;
    if (lexleft == 0)
        dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
    backslash = 1;
    break;
  case '^':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    goto normal_char;
  case '$':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    goto normal_char;
  case '1':
  case '2':
  case '3':
  case '4':
  case '5':
  case '6':
  case '7':
  case '8':
  case '9':
    if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        laststart = 0;
        return lasttok = BACKREF;
    }
    goto normal_char;
  case '`':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGLINE;
    goto normal_char;
  case '\'':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDLINE;
    goto normal_char;
  case '<':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGWORD;
    goto normal_char;
  case '>':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDWORD;
    goto normal_char;
  case 'b':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = LIMWORD;
    goto normal_char;
  case 'B':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = NOTLIMWORD;
    goto normal_char;
  case '?':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = QMARK;
  case '*':
    if (backslash)
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = STAR;
  case '+':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = PLUS;
  case '{':
    if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
        int lo = -1, hi = -1;
        const char *p = lexptr;
        const char *lim = p + lexleft;
        for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
            lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
        if (p != lim && *p == ',')
            while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
        else
            hi = lo;
        if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
            goto normal_char;
    }
    minrep = 0;
    {
        if (!lexleft) {
            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if (((unsigned int)(c) - '0' <= 9)) {
        minrep = c - '0';
        for (;;) {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (!((unsigned int)(c) - '0' <= 9))
                break;
            minrep = 10 * minrep + c - '0';
        }
    } else
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    if (c == ',') {
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (!((unsigned int)(c) - '0' <= 9))
            maxrep = -1;
        else {
            maxrep = c - '0';
            for (;;) {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                maxrep = 10 * maxrep + c - '0';
            }
            if (0 <= maxrep && maxrep < minrep)
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        }
    } else
        maxrep = minrep;
    if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        if (c != '\\')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
    }
    if (c != '}')
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    laststart = 0;
    return lasttok = REPMN;
  case '|':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '\n':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '(':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    ++parens;
    laststart = 1;
    return lasttok = LPAREN;
  case ')':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    --parens;
    laststart = 0;
    return lasttok = RPAREN;
  case '.':
    if (backslash)
        goto normal_char;
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    zeroset(ccl);
    notset(ccl);
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        clrbit(eolbyte, ccl);
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit('\x00', ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case 'w':
  case 'W':
    if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    zeroset(ccl);
    for (c2 = 0; c2 < (1 << 8); ++c2) 
        if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
            setbit(c2, ccl);
    if (c == 'W')
        notset(ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case '[':
    if (backslash)
        goto normal_char;
    laststart = 0;
    if ((__ctype_get_mb_cur_max()) > 1) {
        parse_bracket_exp_mb();
        return lasttok = MBCSET;
    }
    zeroset(ccl);
    {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if (c == '^') {
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        invert = 1;
    } else
        invert = 0;
    do {
        if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
            for (c1 = 0; prednames[c1].name; ++c1) 
                if (looking_at(prednames[c1].name)) {
                    int (*pred)(int) = prednames[c1].pred;
                    for (c2 = 0; c2 < (1 << 8); ++c2) 
                        if ((*pred)(c2))
                            setbit_case_fold(c2, ccl);
                    lexptr += strlen(prednames[c1].name);
                    lexleft -= strlen(prednames[c1].name);
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    goto skip;
                }
        if (c == '\\' && (syntax_bits & ((unsigned long)1))) {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (c1 == '-') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (c2 == ']') {
                --lexptr;
                ++lexleft;
            } else {
                if (c2 == '\\' && (syntax_bits & ((unsigned long)1))) {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!hard_LC_COLLATE) {
                    for (; c <= c2; c++) 
                        setbit_case_fold(c, ccl);
                } else {
                    regex_t re;
                    char expr[6];
                    expr[0] = '[';
                    expr[1] = c;
                    expr[2] = '-';
                    expr[3] = c2;
                    expr[4] = ']';
                    expr[5] = '\x00';
                    if (regcomp(&re, expr, case_fold ? (1 << 1) : 0) == REG_NOERROR) {
                        for (c = 0; c < (1 << 8); ++c) {
                            regmatch_t mat;
                            char buf[2];
                            buf[0] = c;
                            buf[1] = '\x00';
                            if (regexec(&re, buf, 1, &mat, 0) == REG_NOERROR && mat.rm_so == 0 && mat.rm_eo == 1)
                                setbit_case_fold(c, ccl);
                        }
                        regfree(&re);
                    }
                }
                continue;
            }
        }
        setbit_case_fold(c, ccl);
      skip:
        ;
    } while ((c = c1) != ']');
    if (invert) {
        notset(ccl);
        if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit(eolbyte, ccl);
    }
    return lasttok = CSET + charclass_index(ccl);
  default:
  normal_char:
    laststart = 0;
    if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
        zeroset(ccl);
        setbit_case_fold(c, ccl);
        return lasttok = CSET + charclass_index(ccl);
    }
    return lasttok = c;
}

....
Skipping returnreturn addifexit:Priority 4614
At location src/dfa.c:750
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, backslash, lexleft, cur_mb_index, lexptr, lasttok, i, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 8;
switch (c) {
  case '\\':
    if (backslash)
        goto normal_char;
    if (lexleft == 0)
        dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
    backslash = 1;
    break;
  case '^':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    goto normal_char;
  case '$':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    goto normal_char;
  case '1':
  case '2':
  case '3':
  case '4':
  case '5':
  case '6':
  case '7':
  case '8':
  case '9':
    if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        laststart = 0;
        return lasttok = BACKREF;
    }
    goto normal_char;
  case '`':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGLINE;
    goto normal_char;
  case '\'':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDLINE;
    goto normal_char;
  case '<':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGWORD;
    goto normal_char;
  case '>':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDWORD;
    goto normal_char;
  case 'b':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = LIMWORD;
    goto normal_char;
  case 'B':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = NOTLIMWORD;
    goto normal_char;
  case '?':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = QMARK;
  case '*':
    if (backslash)
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = STAR;
  case '+':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = PLUS;
  case '{':
    if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
        int lo = -1, hi = -1;
        const char *p = lexptr;
        const char *lim = p + lexleft;
        for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
            lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
        if (p != lim && *p == ',')
            while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
        else
            hi = lo;
        if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
            goto normal_char;
    }
    minrep = 0;
    {
        if (!lexleft) {
            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if (((unsigned int)(c) - '0' <= 9)) {
        minrep = c - '0';
        for (;;) {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (!((unsigned int)(c) - '0' <= 9))
                break;
            minrep = 10 * minrep + c - '0';
        }
    } else
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    if (c == ',') {
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (!((unsigned int)(c) - '0' <= 9))
            maxrep = -1;
        else {
            maxrep = c - '0';
            for (;;) {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                maxrep = 10 * maxrep + c - '0';
            }
            if (0 <= maxrep && maxrep < minrep)
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        }
    } else
        maxrep = minrep;
    if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        if (c != '\\')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
    }
    if (c != '}')
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    laststart = 0;
    return lasttok = REPMN;
  case '|':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '\n':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '(':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    ++parens;
    laststart = 1;
    return lasttok = LPAREN;
  case ')':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    --parens;
    laststart = 0;
    return lasttok = RPAREN;
  case '.':
    if (backslash)
        goto normal_char;
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    zeroset(ccl);
    notset(ccl);
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        clrbit(eolbyte, ccl);
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit('\x00', ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case 'w':
  case 'W':
    if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    zeroset(ccl);
    for (c2 = 0; c2 < (1 << 8); ++c2) 
        if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
            setbit(c2, ccl);
    if (c == 'W')
        notset(ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case '[':
    if (backslash)
        goto normal_char;
    laststart = 0;
    if ((__ctype_get_mb_cur_max()) > 1) {
        parse_bracket_exp_mb();
        return lasttok = MBCSET;
    }
    zeroset(ccl);
    {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if (c == '^') {
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        invert = 1;
    } else
        invert = 0;
    do {
        if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
            for (c1 = 0; prednames[c1].name; ++c1) 
                if (looking_at(prednames[c1].name)) {
                    int (*pred)(int) = prednames[c1].pred;
                    for (c2 = 0; c2 < (1 << 8); ++c2) 
                        if ((*pred)(c2))
                            setbit_case_fold(c2, ccl);
                    lexptr += strlen(prednames[c1].name);
                    lexleft -= strlen(prednames[c1].name);
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    goto skip;
                }
        if (c == '\\' && (syntax_bits & ((unsigned long)1))) {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (c1 == '-') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (c2 == ']') {
                --lexptr;
                ++lexleft;
            } else {
                if (c2 == '\\' && (syntax_bits & ((unsigned long)1))) {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!hard_LC_COLLATE) {
                    for (; c <= c2; c++) 
                        setbit_case_fold(c, ccl);
                } else {
                    regex_t re;
                    char expr[6];
                    expr[0] = '[';
                    expr[1] = c;
                    expr[2] = '-';
                    expr[3] = c2;
                    expr[4] = ']';
                    expr[5] = '\x00';
                    if (regcomp(&re, expr, case_fold ? (1 << 1) : 0) == REG_NOERROR) {
                        for (c = 0; c < (1 << 8); ++c) {
                            regmatch_t mat;
                            char buf[2];
                            buf[0] = c;
                            buf[1] = '\x00';
                            if (regexec(&re, buf, 1, &mat, 0) == REG_NOERROR && mat.rm_so == 0 && mat.rm_eo == 1)
                                setbit_case_fold(c, ccl);
                        }
                        regfree(&re);
                    }
                }
                continue;
            }
        }
        setbit_case_fold(c, ccl);
      skip:
        ;
    } while ((c = c1) != ']');
    if (invert) {
        notset(ccl);
        if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit(eolbyte, ccl);
    }
    return lasttok = CSET + charclass_index(ccl);
  default:
  normal_char:
    laststart = 0;
    if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
        zeroset(ccl);
        setbit_case_fold(c, ccl);
        return lasttok = CSET + charclass_index(ccl);
    }
    return lasttok = c;
}

....
Skipping returnreturn addifexit:Priority 4614
At location src/dfa.c:750
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, backslash, lexleft, cur_mb_index, lexptr, lasttok, i, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 9;
switch (c) {
  case '\\':
    if (backslash)
        goto normal_char;
    if (lexleft == 0)
        dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
    backslash = 1;
    break;
  case '^':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    goto normal_char;
  case '$':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    goto normal_char;
  case '1':
  case '2':
  case '3':
  case '4':
  case '5':
  case '6':
  case '7':
  case '8':
  case '9':
    if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        laststart = 0;
        return lasttok = BACKREF;
    }
    goto normal_char;
  case '`':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGLINE;
    goto normal_char;
  case '\'':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDLINE;
    goto normal_char;
  case '<':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGWORD;
    goto normal_char;
  case '>':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDWORD;
    goto normal_char;
  case 'b':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = LIMWORD;
    goto normal_char;
  case 'B':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = NOTLIMWORD;
    goto normal_char;
  case '?':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = QMARK;
  case '*':
    if (backslash)
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = STAR;
  case '+':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = PLUS;
  case '{':
    if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
        int lo = -1, hi = -1;
        const char *p = lexptr;
        const char *lim = p + lexleft;
        for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
            lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
        if (p != lim && *p == ',')
            while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
        else
            hi = lo;
        if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
            goto normal_char;
    }
    minrep = 0;
    {
        if (!lexleft) {
            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if (((unsigned int)(c) - '0' <= 9)) {
        minrep = c - '0';
        for (;;) {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (!((unsigned int)(c) - '0' <= 9))
                break;
            minrep = 10 * minrep + c - '0';
        }
    } else
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    if (c == ',') {
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (!((unsigned int)(c) - '0' <= 9))
            maxrep = -1;
        else {
            maxrep = c - '0';
            for (;;) {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                maxrep = 10 * maxrep + c - '0';
            }
            if (0 <= maxrep && maxrep < minrep)
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        }
    } else
        maxrep = minrep;
    if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        if (c != '\\')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
    }
    if (c != '}')
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    laststart = 0;
    return lasttok = REPMN;
  case '|':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '\n':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '(':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    ++parens;
    laststart = 1;
    return lasttok = LPAREN;
  case ')':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    --parens;
    laststart = 0;
    return lasttok = RPAREN;
  case '.':
    if (backslash)
        goto normal_char;
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    zeroset(ccl);
    notset(ccl);
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        clrbit(eolbyte, ccl);
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit('\x00', ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case 'w':
  case 'W':
    if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    zeroset(ccl);
    for (c2 = 0; c2 < (1 << 8); ++c2) 
        if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
            setbit(c2, ccl);
    if (c == 'W')
        notset(ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case '[':
    if (backslash)
        goto normal_char;
    laststart = 0;
    if ((__ctype_get_mb_cur_max()) > 1) {
        parse_bracket_exp_mb();
        return lasttok = MBCSET;
    }
    zeroset(ccl);
    {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if (c == '^') {
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        invert = 1;
    } else
        invert = 0;
    do {
        if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
            for (c1 = 0; prednames[c1].name; ++c1) 
                if (looking_at(prednames[c1].name)) {
                    int (*pred)(int) = prednames[c1].pred;
                    for (c2 = 0; c2 < (1 << 8); ++c2) 
                        if ((*pred)(c2))
                            setbit_case_fold(c2, ccl);
                    lexptr += strlen(prednames[c1].name);
                    lexleft -= strlen(prednames[c1].name);
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    goto skip;
                }
        if (c == '\\' && (syntax_bits & ((unsigned long)1))) {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (c1 == '-') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (c2 == ']') {
                --lexptr;
                ++lexleft;
            } else {
                if (c2 == '\\' && (syntax_bits & ((unsigned long)1))) {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!hard_LC_COLLATE) {
                    for (; c <= c2; c++) 
                        setbit_case_fold(c, ccl);
                } else {
                    regex_t re;
                    char expr[6];
                    expr[0] = '[';
                    expr[1] = c;
                    expr[2] = '-';
                    expr[3] = c2;
                    expr[4] = ']';
                    expr[5] = '\x00';
                    if (regcomp(&re, expr, case_fold ? (1 << 1) : 0) == REG_NOERROR) {
                        for (c = 0; c < (1 << 8); ++c) {
                            regmatch_t mat;
                            char buf[2];
                            buf[0] = c;
                            buf[1] = '\x00';
                            if (regexec(&re, buf, 1, &mat, 0) == REG_NOERROR && mat.rm_so == 0 && mat.rm_eo == 1)
                                setbit_case_fold(c, ccl);
                        }
                        regfree(&re);
                    }
                }
                continue;
            }
        }
        setbit_case_fold(c, ccl);
      skip:
        ;
    } while ((c = c1) != ']');
    if (invert) {
        notset(ccl);
        if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit(eolbyte, ccl);
    }
    return lasttok = CSET + charclass_index(ccl);
  default:
  normal_char:
    laststart = 0;
    if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
        zeroset(ccl);
        setbit_case_fold(c, ccl);
        return lasttok = CSET + charclass_index(ccl);
    }
    return lasttok = c;
}

....
Skipping returnreturn addifexit:Priority 4614
At location src/dfa.c:750
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, backslash, lexleft, cur_mb_index, lexptr, lasttok, i, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 10;
switch (c) {
  case '\\':
    if (backslash)
        goto normal_char;
    if (lexleft == 0)
        dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
    backslash = 1;
    break;
  case '^':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    goto normal_char;
  case '$':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    goto normal_char;
  case '1':
  case '2':
  case '3':
  case '4':
  case '5':
  case '6':
  case '7':
  case '8':
  case '9':
    if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        laststart = 0;
        return lasttok = BACKREF;
    }
    goto normal_char;
  case '`':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGLINE;
    goto normal_char;
  case '\'':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDLINE;
    goto normal_char;
  case '<':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGWORD;
    goto normal_char;
  case '>':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDWORD;
    goto normal_char;
  case 'b':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = LIMWORD;
    goto normal_char;
  case 'B':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = NOTLIMWORD;
    goto normal_char;
  case '?':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = QMARK;
  case '*':
    if (backslash)
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = STAR;
  case '+':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = PLUS;
  case '{':
    if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
        int lo = -1, hi = -1;
        const char *p = lexptr;
        const char *lim = p + lexleft;
        for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
            lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
        if (p != lim && *p == ',')
            while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
        else
            hi = lo;
        if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
            goto normal_char;
    }
    minrep = 0;
    {
        if (!lexleft) {
            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if (((unsigned int)(c) - '0' <= 9)) {
        minrep = c - '0';
        for (;;) {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (!((unsigned int)(c) - '0' <= 9))
                break;
            minrep = 10 * minrep + c - '0';
        }
    } else
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    if (c == ',') {
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (!((unsigned int)(c) - '0' <= 9))
            maxrep = -1;
        else {
            maxrep = c - '0';
            for (;;) {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                maxrep = 10 * maxrep + c - '0';
            }
            if (0 <= maxrep && maxrep < minrep)
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        }
    } else
        maxrep = minrep;
    if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        if (c != '\\')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
    }
    if (c != '}')
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    laststart = 0;
    return lasttok = REPMN;
  case '|':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '\n':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '(':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    ++parens;
    laststart = 1;
    return lasttok = LPAREN;
  case ')':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    --parens;
    laststart = 0;
    return lasttok = RPAREN;
  case '.':
    if (backslash)
        goto normal_char;
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    zeroset(ccl);
    notset(ccl);
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        clrbit(eolbyte, ccl);
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit('\x00', ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case 'w':
  case 'W':
    if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    zeroset(ccl);
    for (c2 = 0; c2 < (1 << 8); ++c2) 
        if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
            setbit(c2, ccl);
    if (c == 'W')
        notset(ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case '[':
    if (backslash)
        goto normal_char;
    laststart = 0;
    if ((__ctype_get_mb_cur_max()) > 1) {
        parse_bracket_exp_mb();
        return lasttok = MBCSET;
    }
    zeroset(ccl);
    {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if (c == '^') {
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        invert = 1;
    } else
        invert = 0;
    do {
        if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
            for (c1 = 0; prednames[c1].name; ++c1) 
                if (looking_at(prednames[c1].name)) {
                    int (*pred)(int) = prednames[c1].pred;
                    for (c2 = 0; c2 < (1 << 8); ++c2) 
                        if ((*pred)(c2))
                            setbit_case_fold(c2, ccl);
                    lexptr += strlen(prednames[c1].name);
                    lexleft -= strlen(prednames[c1].name);
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    goto skip;
                }
        if (c == '\\' && (syntax_bits & ((unsigned long)1))) {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (c1 == '-') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (c2 == ']') {
                --lexptr;
                ++lexleft;
            } else {
                if (c2 == '\\' && (syntax_bits & ((unsigned long)1))) {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!hard_LC_COLLATE) {
                    for (; c <= c2; c++) 
                        setbit_case_fold(c, ccl);
                } else {
                    regex_t re;
                    char expr[6];
                    expr[0] = '[';
                    expr[1] = c;
                    expr[2] = '-';
                    expr[3] = c2;
                    expr[4] = ']';
                    expr[5] = '\x00';
                    if (regcomp(&re, expr, case_fold ? (1 << 1) : 0) == REG_NOERROR) {
                        for (c = 0; c < (1 << 8); ++c) {
                            regmatch_t mat;
                            char buf[2];
                            buf[0] = c;
                            buf[1] = '\x00';
                            if (regexec(&re, buf, 1, &mat, 0) == REG_NOERROR && mat.rm_so == 0 && mat.rm_eo == 1)
                                setbit_case_fold(c, ccl);
                        }
                        regfree(&re);
                    }
                }
                continue;
            }
        }
        setbit_case_fold(c, ccl);
      skip:
        ;
    } while ((c = c1) != ']');
    if (invert) {
        notset(ccl);
        if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit(eolbyte, ccl);
    }
    return lasttok = CSET + charclass_index(ccl);
  default:
  normal_char:
    laststart = 0;
    if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
        zeroset(ccl);
        setbit_case_fold(c, ccl);
        return lasttok = CSET + charclass_index(ccl);
    }
    return lasttok = c;
}

....
Skipping returnreturn addifexit:Priority 4614
At location src/dfa.c:750
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, backslash, lexleft, cur_mb_index, lexptr, lasttok, i, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 256;
switch (c) {
  case '\\':
    if (backslash)
        goto normal_char;
    if (lexleft == 0)
        dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
    backslash = 1;
    break;
  case '^':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    goto normal_char;
  case '$':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    goto normal_char;
  case '1':
  case '2':
  case '3':
  case '4':
  case '5':
  case '6':
  case '7':
  case '8':
  case '9':
    if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        laststart = 0;
        return lasttok = BACKREF;
    }
    goto normal_char;
  case '`':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGLINE;
    goto normal_char;
  case '\'':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDLINE;
    goto normal_char;
  case '<':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGWORD;
    goto normal_char;
  case '>':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDWORD;
    goto normal_char;
  case 'b':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = LIMWORD;
    goto normal_char;
  case 'B':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = NOTLIMWORD;
    goto normal_char;
  case '?':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = QMARK;
  case '*':
    if (backslash)
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = STAR;
  case '+':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = PLUS;
  case '{':
    if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
        int lo = -1, hi = -1;
        const char *p = lexptr;
        const char *lim = p + lexleft;
        for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
            lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
        if (p != lim && *p == ',')
            while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
        else
            hi = lo;
        if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
            goto normal_char;
    }
    minrep = 0;
    {
        if (!lexleft) {
            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if (((unsigned int)(c) - '0' <= 9)) {
        minrep = c - '0';
        for (;;) {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (!((unsigned int)(c) - '0' <= 9))
                break;
            minrep = 10 * minrep + c - '0';
        }
    } else
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    if (c == ',') {
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (!((unsigned int)(c) - '0' <= 9))
            maxrep = -1;
        else {
            maxrep = c - '0';
            for (;;) {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                maxrep = 10 * maxrep + c - '0';
            }
            if (0 <= maxrep && maxrep < minrep)
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        }
    } else
        maxrep = minrep;
    if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        if (c != '\\')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
    }
    if (c != '}')
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    laststart = 0;
    return lasttok = REPMN;
  case '|':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '\n':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '(':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    ++parens;
    laststart = 1;
    return lasttok = LPAREN;
  case ')':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    --parens;
    laststart = 0;
    return lasttok = RPAREN;
  case '.':
    if (backslash)
        goto normal_char;
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    zeroset(ccl);
    notset(ccl);
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        clrbit(eolbyte, ccl);
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit('\x00', ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case 'w':
  case 'W':
    if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    zeroset(ccl);
    for (c2 = 0; c2 < (1 << 8); ++c2) 
        if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
            setbit(c2, ccl);
    if (c == 'W')
        notset(ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case '[':
    if (backslash)
        goto normal_char;
    laststart = 0;
    if ((__ctype_get_mb_cur_max()) > 1) {
        parse_bracket_exp_mb();
        return lasttok = MBCSET;
    }
    zeroset(ccl);
    {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if (c == '^') {
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        invert = 1;
    } else
        invert = 0;
    do {
        if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
            for (c1 = 0; prednames[c1].name; ++c1) 
                if (looking_at(prednames[c1].name)) {
                    int (*pred)(int) = prednames[c1].pred;
                    for (c2 = 0; c2 < (1 << 8); ++c2) 
                        if ((*pred)(c2))
                            setbit_case_fold(c2, ccl);
                    lexptr += strlen(prednames[c1].name);
                    lexleft -= strlen(prednames[c1].name);
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    goto skip;
                }
        if (c == '\\' && (syntax_bits & ((unsigned long)1))) {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (c1 == '-') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (c2 == ']') {
                --lexptr;
                ++lexleft;
            } else {
                if (c2 == '\\' && (syntax_bits & ((unsigned long)1))) {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!hard_LC_COLLATE) {
                    for (; c <= c2; c++) 
                        setbit_case_fold(c, ccl);
                } else {
                    regex_t re;
                    char expr[6];
                    expr[0] = '[';
                    expr[1] = c;
                    expr[2] = '-';
                    expr[3] = c2;
                    expr[4] = ']';
                    expr[5] = '\x00';
                    if (regcomp(&re, expr, case_fold ? (1 << 1) : 0) == REG_NOERROR) {
                        for (c = 0; c < (1 << 8); ++c) {
                            regmatch_t mat;
                            char buf[2];
                            buf[0] = c;
                            buf[1] = '\x00';
                            if (regexec(&re, buf, 1, &mat, 0) == REG_NOERROR && mat.rm_so == 0 && mat.rm_eo == 1)
                                setbit_case_fold(c, ccl);
                        }
                        regfree(&re);
                    }
                }
                continue;
            }
        }
        setbit_case_fold(c, ccl);
      skip:
        ;
    } while ((c = c1) != ']');
    if (invert) {
        notset(ccl);
        if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit(eolbyte, ccl);
    }
    return lasttok = CSET + charclass_index(ccl);
  default:
  normal_char:
    laststart = 0;
    if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
        zeroset(ccl);
        setbit_case_fold(c, ccl);
        return lasttok = CSET + charclass_index(ccl);
    }
    return lasttok = c;
}

....
Skipping returnreturn addifexit:Priority 4614
At location src/dfa.c:750
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, backslash, lexleft, cur_mb_index, lexptr, lasttok, i, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 32767;
switch (c) {
  case '\\':
    if (backslash)
        goto normal_char;
    if (lexleft == 0)
        dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
    backslash = 1;
    break;
  case '^':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    goto normal_char;
  case '$':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    goto normal_char;
  case '1':
  case '2':
  case '3':
  case '4':
  case '5':
  case '6':
  case '7':
  case '8':
  case '9':
    if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        laststart = 0;
        return lasttok = BACKREF;
    }
    goto normal_char;
  case '`':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGLINE;
    goto normal_char;
  case '\'':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDLINE;
    goto normal_char;
  case '<':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGWORD;
    goto normal_char;
  case '>':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDWORD;
    goto normal_char;
  case 'b':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = LIMWORD;
    goto normal_char;
  case 'B':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = NOTLIMWORD;
    goto normal_char;
  case '?':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = QMARK;
  case '*':
    if (backslash)
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = STAR;
  case '+':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = PLUS;
  case '{':
    if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
        int lo = -1, hi = -1;
        const char *p = lexptr;
        const char *lim = p + lexleft;
        for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
            lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
        if (p != lim && *p == ',')
            while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
        else
            hi = lo;
        if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
            goto normal_char;
    }
    minrep = 0;
    {
        if (!lexleft) {
            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if (((unsigned int)(c) - '0' <= 9)) {
        minrep = c - '0';
        for (;;) {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (!((unsigned int)(c) - '0' <= 9))
                break;
            minrep = 10 * minrep + c - '0';
        }
    } else
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    if (c == ',') {
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (!((unsigned int)(c) - '0' <= 9))
            maxrep = -1;
        else {
            maxrep = c - '0';
            for (;;) {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                maxrep = 10 * maxrep + c - '0';
            }
            if (0 <= maxrep && maxrep < minrep)
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        }
    } else
        maxrep = minrep;
    if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        if (c != '\\')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
    }
    if (c != '}')
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    laststart = 0;
    return lasttok = REPMN;
  case '|':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '\n':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '(':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    ++parens;
    laststart = 1;
    return lasttok = LPAREN;
  case ')':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    --parens;
    laststart = 0;
    return lasttok = RPAREN;
  case '.':
    if (backslash)
        goto normal_char;
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    zeroset(ccl);
    notset(ccl);
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        clrbit(eolbyte, ccl);
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit('\x00', ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case 'w':
  case 'W':
    if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    zeroset(ccl);
    for (c2 = 0; c2 < (1 << 8); ++c2) 
        if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
            setbit(c2, ccl);
    if (c == 'W')
        notset(ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case '[':
    if (backslash)
        goto normal_char;
    laststart = 0;
    if ((__ctype_get_mb_cur_max()) > 1) {
        parse_bracket_exp_mb();
        return lasttok = MBCSET;
    }
    zeroset(ccl);
    {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if (c == '^') {
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        invert = 1;
    } else
        invert = 0;
    do {
        if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
            for (c1 = 0; prednames[c1].name; ++c1) 
                if (looking_at(prednames[c1].name)) {
                    int (*pred)(int) = prednames[c1].pred;
                    for (c2 = 0; c2 < (1 << 8); ++c2) 
                        if ((*pred)(c2))
                            setbit_case_fold(c2, ccl);
                    lexptr += strlen(prednames[c1].name);
                    lexleft -= strlen(prednames[c1].name);
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    goto skip;
                }
        if (c == '\\' && (syntax_bits & ((unsigned long)1))) {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (c1 == '-') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (c2 == ']') {
                --lexptr;
                ++lexleft;
            } else {
                if (c2 == '\\' && (syntax_bits & ((unsigned long)1))) {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!hard_LC_COLLATE) {
                    for (; c <= c2; c++) 
                        setbit_case_fold(c, ccl);
                } else {
                    regex_t re;
                    char expr[6];
                    expr[0] = '[';
                    expr[1] = c;
                    expr[2] = '-';
                    expr[3] = c2;
                    expr[4] = ']';
                    expr[5] = '\x00';
                    if (regcomp(&re, expr, case_fold ? (1 << 1) : 0) == REG_NOERROR) {
                        for (c = 0; c < (1 << 8); ++c) {
                            regmatch_t mat;
                            char buf[2];
                            buf[0] = c;
                            buf[1] = '\x00';
                            if (regexec(&re, buf, 1, &mat, 0) == REG_NOERROR && mat.rm_so == 0 && mat.rm_eo == 1)
                                setbit_case_fold(c, ccl);
                        }
                        regfree(&re);
                    }
                }
                continue;
            }
        }
        setbit_case_fold(c, ccl);
      skip:
        ;
    } while ((c = c1) != ']');
    if (invert) {
        notset(ccl);
        if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit(eolbyte, ccl);
    }
    return lasttok = CSET + charclass_index(ccl);
  default:
  normal_char:
    laststart = 0;
    if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
        zeroset(ccl);
        setbit_case_fold(c, ccl);
        return lasttok = CSET + charclass_index(ccl);
    }
    return lasttok = c;
}

....
Skipping returnreturn addifexit:Priority 4614
At location src/dfa.c:750
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, backslash, lexleft, cur_mb_index, lexptr, lasttok, i, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    break;
switch (c) {
  case '\\':
    if (backslash)
        goto normal_char;
    if (lexleft == 0)
        dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
    backslash = 1;
    break;
  case '^':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    goto normal_char;
  case '$':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    goto normal_char;
  case '1':
  case '2':
  case '3':
  case '4':
  case '5':
  case '6':
  case '7':
  case '8':
  case '9':
    if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        laststart = 0;
        return lasttok = BACKREF;
    }
    goto normal_char;
  case '`':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGLINE;
    goto normal_char;
  case '\'':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDLINE;
    goto normal_char;
  case '<':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGWORD;
    goto normal_char;
  case '>':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDWORD;
    goto normal_char;
  case 'b':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = LIMWORD;
    goto normal_char;
  case 'B':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = NOTLIMWORD;
    goto normal_char;
  case '?':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = QMARK;
  case '*':
    if (backslash)
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = STAR;
  case '+':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = PLUS;
  case '{':
    if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
        int lo = -1, hi = -1;
        const char *p = lexptr;
        const char *lim = p + lexleft;
        for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
            lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
        if (p != lim && *p == ',')
            while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
        else
            hi = lo;
        if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
            goto normal_char;
    }
    minrep = 0;
    {
        if (!lexleft) {
            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if (((unsigned int)(c) - '0' <= 9)) {
        minrep = c - '0';
        for (;;) {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (!((unsigned int)(c) - '0' <= 9))
                break;
            minrep = 10 * minrep + c - '0';
        }
    } else
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    if (c == ',') {
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (!((unsigned int)(c) - '0' <= 9))
            maxrep = -1;
        else {
            maxrep = c - '0';
            for (;;) {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                maxrep = 10 * maxrep + c - '0';
            }
            if (0 <= maxrep && maxrep < minrep)
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        }
    } else
        maxrep = minrep;
    if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        if (c != '\\')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
    }
    if (c != '}')
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    laststart = 0;
    return lasttok = REPMN;
  case '|':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '\n':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '(':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    ++parens;
    laststart = 1;
    return lasttok = LPAREN;
  case ')':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    --parens;
    laststart = 0;
    return lasttok = RPAREN;
  case '.':
    if (backslash)
        goto normal_char;
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    zeroset(ccl);
    notset(ccl);
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        clrbit(eolbyte, ccl);
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit('\x00', ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case 'w':
  case 'W':
    if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    zeroset(ccl);
    for (c2 = 0; c2 < (1 << 8); ++c2) 
        if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
            setbit(c2, ccl);
    if (c == 'W')
        notset(ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case '[':
    if (backslash)
        goto normal_char;
    laststart = 0;
    if ((__ctype_get_mb_cur_max()) > 1) {
        parse_bracket_exp_mb();
        return lasttok = MBCSET;
    }
    zeroset(ccl);
    {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if (c == '^') {
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        invert = 1;
    } else
        invert = 0;
    do {
        if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
            for (c1 = 0; prednames[c1].name; ++c1) 
                if (looking_at(prednames[c1].name)) {
                    int (*pred)(int) = prednames[c1].pred;
                    for (c2 = 0; c2 < (1 << 8); ++c2) 
                        if ((*pred)(c2))
                            setbit_case_fold(c2, ccl);
                    lexptr += strlen(prednames[c1].name);
                    lexleft -= strlen(prednames[c1].name);
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    goto skip;
                }
        if (c == '\\' && (syntax_bits & ((unsigned long)1))) {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (c1 == '-') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (c2 == ']') {
                --lexptr;
                ++lexleft;
            } else {
                if (c2 == '\\' && (syntax_bits & ((unsigned long)1))) {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!hard_LC_COLLATE) {
                    for (; c <= c2; c++) 
                        setbit_case_fold(c, ccl);
                } else {
                    regex_t re;
                    char expr[6];
                    expr[0] = '[';
                    expr[1] = c;
                    expr[2] = '-';
                    expr[3] = c2;
                    expr[4] = ']';
                    expr[5] = '\x00';
                    if (regcomp(&re, expr, case_fold ? (1 << 1) : 0) == REG_NOERROR) {
                        for (c = 0; c < (1 << 8); ++c) {
                            regmatch_t mat;
                            char buf[2];
                            buf[0] = c;
                            buf[1] = '\x00';
                            if (regexec(&re, buf, 1, &mat, 0) == REG_NOERROR && mat.rm_so == 0 && mat.rm_eo == 1)
                                setbit_case_fold(c, ccl);
                        }
                        regfree(&re);
                    }
                }
                continue;
            }
        }
        setbit_case_fold(c, ccl);
      skip:
        ;
    } while ((c = c1) != ']');
    if (invert) {
        notset(ccl);
        if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit(eolbyte, ccl);
    }
    return lasttok = CSET + charclass_index(ccl);
  default:
  normal_char:
    laststart = 0;
    if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
        zeroset(ccl);
        setbit_case_fold(c, ccl);
        return lasttok = CSET + charclass_index(ccl);
    }
    return lasttok = c;
}

....
Skipping returnreturn addifexit:Priority 4814
At location src/dfa.c:750
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, backslash, lexleft, cur_mb_index, lexptr, lasttok, i, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    goto skip;
switch (c) {
  case '\\':
    if (backslash)
        goto normal_char;
    if (lexleft == 0)
        dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
    backslash = 1;
    break;
  case '^':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    goto normal_char;
  case '$':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    goto normal_char;
  case '1':
  case '2':
  case '3':
  case '4':
  case '5':
  case '6':
  case '7':
  case '8':
  case '9':
    if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        laststart = 0;
        return lasttok = BACKREF;
    }
    goto normal_char;
  case '`':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGLINE;
    goto normal_char;
  case '\'':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDLINE;
    goto normal_char;
  case '<':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGWORD;
    goto normal_char;
  case '>':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDWORD;
    goto normal_char;
  case 'b':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = LIMWORD;
    goto normal_char;
  case 'B':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = NOTLIMWORD;
    goto normal_char;
  case '?':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = QMARK;
  case '*':
    if (backslash)
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = STAR;
  case '+':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = PLUS;
  case '{':
    if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
        int lo = -1, hi = -1;
        const char *p = lexptr;
        const char *lim = p + lexleft;
        for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
            lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
        if (p != lim && *p == ',')
            while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
        else
            hi = lo;
        if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
            goto normal_char;
    }
    minrep = 0;
    {
        if (!lexleft) {
            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if (((unsigned int)(c) - '0' <= 9)) {
        minrep = c - '0';
        for (;;) {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (!((unsigned int)(c) - '0' <= 9))
                break;
            minrep = 10 * minrep + c - '0';
        }
    } else
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    if (c == ',') {
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (!((unsigned int)(c) - '0' <= 9))
            maxrep = -1;
        else {
            maxrep = c - '0';
            for (;;) {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                maxrep = 10 * maxrep + c - '0';
            }
            if (0 <= maxrep && maxrep < minrep)
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        }
    } else
        maxrep = minrep;
    if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        if (c != '\\')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
    }
    if (c != '}')
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    laststart = 0;
    return lasttok = REPMN;
  case '|':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '\n':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '(':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    ++parens;
    laststart = 1;
    return lasttok = LPAREN;
  case ')':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    --parens;
    laststart = 0;
    return lasttok = RPAREN;
  case '.':
    if (backslash)
        goto normal_char;
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    zeroset(ccl);
    notset(ccl);
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        clrbit(eolbyte, ccl);
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit('\x00', ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case 'w':
  case 'W':
    if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    zeroset(ccl);
    for (c2 = 0; c2 < (1 << 8); ++c2) 
        if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
            setbit(c2, ccl);
    if (c == 'W')
        notset(ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case '[':
    if (backslash)
        goto normal_char;
    laststart = 0;
    if ((__ctype_get_mb_cur_max()) > 1) {
        parse_bracket_exp_mb();
        return lasttok = MBCSET;
    }
    zeroset(ccl);
    {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if (c == '^') {
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        invert = 1;
    } else
        invert = 0;
    do {
        if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
            for (c1 = 0; prednames[c1].name; ++c1) 
                if (looking_at(prednames[c1].name)) {
                    int (*pred)(int) = prednames[c1].pred;
                    for (c2 = 0; c2 < (1 << 8); ++c2) 
                        if ((*pred)(c2))
                            setbit_case_fold(c2, ccl);
                    lexptr += strlen(prednames[c1].name);
                    lexleft -= strlen(prednames[c1].name);
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    goto skip;
                }
        if (c == '\\' && (syntax_bits & ((unsigned long)1))) {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (c1 == '-') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (c2 == ']') {
                --lexptr;
                ++lexleft;
            } else {
                if (c2 == '\\' && (syntax_bits & ((unsigned long)1))) {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!hard_LC_COLLATE) {
                    for (; c <= c2; c++) 
                        setbit_case_fold(c, ccl);
                } else {
                    regex_t re;
                    char expr[6];
                    expr[0] = '[';
                    expr[1] = c;
                    expr[2] = '-';
                    expr[3] = c2;
                    expr[4] = ']';
                    expr[5] = '\x00';
                    if (regcomp(&re, expr, case_fold ? (1 << 1) : 0) == REG_NOERROR) {
                        for (c = 0; c < (1 << 8); ++c) {
                            regmatch_t mat;
                            char buf[2];
                            buf[0] = c;
                            buf[1] = '\x00';
                            if (regexec(&re, buf, 1, &mat, 0) == REG_NOERROR && mat.rm_so == 0 && mat.rm_eo == 1)
                                setbit_case_fold(c, ccl);
                        }
                        regfree(&re);
                    }
                }
                continue;
            }
        }
        setbit_case_fold(c, ccl);
      skip:
        ;
    } while ((c = c1) != ']');
    if (invert) {
        notset(ccl);
        if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit(eolbyte, ccl);
    }
    return lasttok = CSET + charclass_index(ccl);
  default:
  normal_char:
    laststart = 0;
    if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
        zeroset(ccl);
        setbit_case_fold(c, ccl);
        return lasttok = CSET + charclass_index(ccl);
    }
    return lasttok = c;
}

....
Skipping returnreturn addifexit:Priority 4814
At location src/dfa.c:750
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, backslash, lexleft, cur_mb_index, lexptr, lasttok, i, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    goto normal_char;
switch (c) {
  case '\\':
    if (backslash)
        goto normal_char;
    if (lexleft == 0)
        dfaerror(dcgettext(((void *)0), "Unfinished \\ escape", 5));
    backslash = 1;
    break;
  case '^':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    goto normal_char;
  case '$':
    if (backslash)
        goto normal_char;
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    goto normal_char;
  case '1':
  case '2':
  case '3':
  case '4':
  case '5':
  case '6':
  case '7':
  case '8':
  case '9':
    if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        laststart = 0;
        return lasttok = BACKREF;
    }
    goto normal_char;
  case '`':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGLINE;
    goto normal_char;
  case '\'':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDLINE;
    goto normal_char;
  case '<':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGWORD;
    goto normal_char;
  case '>':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDWORD;
    goto normal_char;
  case 'b':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = LIMWORD;
    goto normal_char;
  case 'B':
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = NOTLIMWORD;
    goto normal_char;
  case '?':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = QMARK;
  case '*':
    if (backslash)
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = STAR;
  case '+':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((unsigned long)1) << 1)) != 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    return lasttok = PLUS;
  case '{':
    if (!(syntax_bits & (((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    if (backslash != ((syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
        goto normal_char;
    if (syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
        int lo = -1, hi = -1;
        const char *p = lexptr;
        const char *lim = p + lexleft;
        for (; p != lim && ((unsigned int)(*p) - '0' <= 9); p++) 
            lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
        if (p != lim && *p == ',')
            while (++p != lim && ((unsigned int)(*p) - '0' <= 9))
                hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
        else
            hi = lo;
        if (p == lim || *p != '}' || lo < 0 || (32767) < hi || (0 <= hi && hi < lo))
            goto normal_char;
    }
    minrep = 0;
    {
        if (!lexleft) {
            if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if (((unsigned int)(c) - '0' <= 9)) {
        minrep = c - '0';
        for (;;) {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (!((unsigned int)(c) - '0' <= 9))
                break;
            minrep = 10 * minrep + c - '0';
        }
    } else
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    if (c == ',') {
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (!((unsigned int)(c) - '0' <= 9))
            maxrep = -1;
        else {
            maxrep = c - '0';
            for (;;) {
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!((unsigned int)(c) - '0' <= 9))
                    break;
                maxrep = 10 * maxrep + c - '0';
            }
            if (0 <= maxrep && maxrep < minrep)
                dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        }
    } else
        maxrep = minrep;
    if (!(syntax_bits & ((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        if (c != '\\')
            dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
    }
    if (c != '}')
        dfaerror(dcgettext(((void *)0), "malformed repeat count", 5));
    laststart = 0;
    return lasttok = REPMN;
  case '|':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '\n':
    if (syntax_bits & ((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    laststart = 1;
    return lasttok = OR;
  case '(':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    ++parens;
    laststart = 1;
    return lasttok = LPAREN;
  case ')':
    if (backslash != ((syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
        goto normal_char;
    if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        goto normal_char;
    --parens;
    laststart = 0;
    return lasttok = RPAREN;
  case '.':
    if (backslash)
        goto normal_char;
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    zeroset(ccl);
    notset(ccl);
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        clrbit(eolbyte, ccl);
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        clrbit('\x00', ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case 'w':
  case 'W':
    if (!backslash || (syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        goto normal_char;
    zeroset(ccl);
    for (c2 = 0; c2 < (1 << 8); ++c2) 
        if ((((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum) || (c2) == '_'))
            setbit(c2, ccl);
    if (c == 'W')
        notset(ccl);
    laststart = 0;
    return lasttok = CSET + charclass_index(ccl);
  case '[':
    if (backslash)
        goto normal_char;
    laststart = 0;
    if ((__ctype_get_mb_cur_max()) > 1) {
        parse_bracket_exp_mb();
        return lasttok = MBCSET;
    }
    zeroset(ccl);
    {
        if (!lexleft) {
            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
            else
                return lasttok = END;
        }
        if ((__ctype_get_mb_cur_max()) > 1)
            update_mb_len_index(lexptr, lexleft);
        (c) = (unsigned char)*lexptr++;
        --lexleft;
    }
    ;
    if (c == '^') {
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        invert = 1;
    } else
        invert = 0;
    do {
        if (c == '[' && (syntax_bits & ((((unsigned long)1) << 1) << 1)))
            for (c1 = 0; prednames[c1].name; ++c1) 
                if (looking_at(prednames[c1].name)) {
                    int (*pred)(int) = prednames[c1].pred;
                    for (c2 = 0; c2 < (1 << 8); ++c2) 
                        if ((*pred)(c2))
                            setbit_case_fold(c2, ccl);
                    lexptr += strlen(prednames[c1].name);
                    lexleft -= strlen(prednames[c1].name);
                    {
                        if (!lexleft) {
                            if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                                dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                            else
                                return lasttok = END;
                        }
                        if ((__ctype_get_mb_cur_max()) > 1)
                            update_mb_len_index(lexptr, lexleft);
                        (c1) = (unsigned char)*lexptr++;
                        --lexleft;
                    }
                    ;
                    goto skip;
                }
        if (c == '\\' && (syntax_bits & ((unsigned long)1))) {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        {
            if (!lexleft) {
                if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                else
                    return lasttok = END;
            }
            if ((__ctype_get_mb_cur_max()) > 1)
                update_mb_len_index(lexptr, lexleft);
            (c1) = (unsigned char)*lexptr++;
            --lexleft;
        }
        ;
        if (c1 == '-') {
            {
                if (!lexleft) {
                    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                    else
                        return lasttok = END;
                }
                if ((__ctype_get_mb_cur_max()) > 1)
                    update_mb_len_index(lexptr, lexleft);
                (c2) = (unsigned char)*lexptr++;
                --lexleft;
            }
            ;
            if (c2 == ']') {
                --lexptr;
                ++lexleft;
            } else {
                if (c2 == '\\' && (syntax_bits & ((unsigned long)1))) {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c2) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                {
                    if (!lexleft) {
                        if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
                            dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
                        else
                            return lasttok = END;
                    }
                    if ((__ctype_get_mb_cur_max()) > 1)
                        update_mb_len_index(lexptr, lexleft);
                    (c1) = (unsigned char)*lexptr++;
                    --lexleft;
                }
                ;
                if (!hard_LC_COLLATE) {
                    for (; c <= c2; c++) 
                        setbit_case_fold(c, ccl);
                } else {
                    regex_t re;
                    char expr[6];
                    expr[0] = '[';
                    expr[1] = c;
                    expr[2] = '-';
                    expr[3] = c2;
                    expr[4] = ']';
                    expr[5] = '\x00';
                    if (regcomp(&re, expr, case_fold ? (1 << 1) : 0) == REG_NOERROR) {
                        for (c = 0; c < (1 << 8); ++c) {
                            regmatch_t mat;
                            char buf[2];
                            buf[0] = c;
                            buf[1] = '\x00';
                            if (regexec(&re, buf, 1, &mat, 0) == REG_NOERROR && mat.rm_so == 0 && mat.rm_eo == 1)
                                setbit_case_fold(c, ccl);
                        }
                        regfree(&re);
                    }
                }
                continue;
            }
        }
        setbit_case_fold(c, ccl);
      skip:
        ;
    } while ((c = c1) != ']');
    if (invert) {
        notset(ccl);
        if (syntax_bits & ((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            clrbit(eolbyte, ccl);
    }
    return lasttok = CSET + charclass_index(ccl);
  default:
  normal_char:
    laststart = 0;
    if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
        zeroset(ccl);
        setbit_case_fold(c, ccl);
        return lasttok = CSET + charclass_index(ccl);
    }
    return lasttok = c;
}

....
Skipping nonlast:Priority -124
At location src/dfa.c:763
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;

....
Skipping nonlast:Priority -124
At location src/dfa.c:763
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;

....
Skipping nonlast:Priority -124
At location src/dfa.c:763
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;

....
Skipping nonlast:Priority -124
At location src/dfa.c:763
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;

....
Skipping nonlast:Priority -124
At location src/dfa.c:763
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGLINE;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;

....
Skipping nonlast:Priority -124
At location src/dfa.c:763
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGWORD;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;

....
Skipping nonlast:Priority -124
At location src/dfa.c:763
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDLINE;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;

....
Skipping nonlast:Priority -124
At location src/dfa.c:763
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDWORD;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;

....
Skipping nonlast:Priority -124
At location src/dfa.c:763
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = LIMWORD;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;

....
Skipping nonlast:Priority -124
At location src/dfa.c:763
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = NOTLIMWORD;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;

....
Skipping nonlast:Priority -124
At location src/dfa.c:763
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    laststart = 0;
    return lasttok = BACKREF;
}
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;

....
Skipping nonlast:Priority -124
At location src/dfa.c:763
--Src File: src/dfa.c
Fragment 0:
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;

....
Skipping nonlast:Priority -124
At location src/dfa.c:763
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;

....
Skipping nonlast:Priority -124
At location src/dfa.c:763
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;

....
Skipping nonlast:Priority -124
At location src/dfa.c:763
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;

....
Skipping nonlast:Priority -124
At location src/dfa.c:763
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;

....
Skipping nonlast:Priority -124
At location src/dfa.c:763
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;

....
Skipping nonlast addifexit:Priority 3626
At location src/dfa.c:763
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, lasttok, backslash, lexleft, c, lexptr, cur_mb_index, i, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return -1;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;

....
Skipping nonlast addifexit:Priority 3626
At location src/dfa.c:763
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, lasttok, backslash, lexleft, c, lexptr, cur_mb_index, i, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 0;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;

....
Skipping nonlast addifexit:Priority 3626
At location src/dfa.c:763
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, lasttok, backslash, lexleft, c, lexptr, cur_mb_index, i, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 1;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;

....
Skipping nonlast addifexit:Priority 3626
At location src/dfa.c:763
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, lasttok, backslash, lexleft, c, lexptr, cur_mb_index, i, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 2;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;

....
Skipping nonlast addifexit:Priority 3626
At location src/dfa.c:763
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, lasttok, backslash, lexleft, c, lexptr, cur_mb_index, i, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 3;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;

....
Skipping nonlast addifexit:Priority 3626
At location src/dfa.c:763
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, lasttok, backslash, lexleft, c, lexptr, cur_mb_index, i, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 4;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;

....
Skipping nonlast addifexit:Priority 3626
At location src/dfa.c:763
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, lasttok, backslash, lexleft, c, lexptr, cur_mb_index, i, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 5;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;

....
Skipping nonlast addifexit:Priority 3626
At location src/dfa.c:763
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, lasttok, backslash, lexleft, c, lexptr, cur_mb_index, i, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 6;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;

....
Skipping nonlast addifexit:Priority 3626
At location src/dfa.c:763
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, lasttok, backslash, lexleft, c, lexptr, cur_mb_index, i, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 8;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;

....
Skipping nonlast addifexit:Priority 3626
At location src/dfa.c:763
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, lasttok, backslash, lexleft, c, lexptr, cur_mb_index, i, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 9;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;

....
Skipping nonlast addifexit:Priority 3626
At location src/dfa.c:763
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, lasttok, backslash, lexleft, c, lexptr, cur_mb_index, i, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 10;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;

....
Skipping nonlast addifexit:Priority 3626
At location src/dfa.c:763
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, lasttok, backslash, lexleft, c, lexptr, cur_mb_index, i, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 256;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;

....
Skipping nonlast addifexit:Priority 3626
At location src/dfa.c:763
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, lasttok, backslash, lexleft, c, lexptr, cur_mb_index, i, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 32767;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;

....
Skipping nonlast addifexit:Priority 3626
At location src/dfa.c:763
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, lasttok, backslash, lexleft, c, lexptr, cur_mb_index, i, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    break;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;

....
Skipping nonlast addifexit:Priority 3826
At location src/dfa.c:763
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, lasttok, backslash, lexleft, c, lexptr, cur_mb_index, i, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    goto skip;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;

....
Skipping nonlast addifexit:Priority 3826
At location src/dfa.c:763
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, lasttok, backslash, lexleft, c, lexptr, cur_mb_index, i, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    goto normal_char;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;

....
Skipping nonlast:Priority -123
At location src/dfa.c:767
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    return lasttok = BEGLINE;
}

....
Skipping nonlast:Priority -123
At location src/dfa.c:767
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    return lasttok = BEGLINE;
}

....
Skipping nonlast:Priority -123
At location src/dfa.c:767
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        parse_bracket_exp_mb();
        return lasttok = MBCSET;
    }
    return lasttok = BEGLINE;
}

....
Skipping nonlast:Priority -123
At location src/dfa.c:767
--Src File: src/dfa.c
Fragment 0:
{
    if (0 != 0)
        dfaerror(0);
    else
        return lasttok = END;
    return lasttok = BEGLINE;
}

....
Skipping nonlast:Priority -123
At location src/dfa.c:767
--Src File: src/dfa.c
Fragment 0:
{
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGLINE;
    return lasttok = BEGLINE;
}

....
Skipping nonlast:Priority -123
At location src/dfa.c:767
--Src File: src/dfa.c
Fragment 0:
{
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGWORD;
    return lasttok = BEGLINE;
}

....
Skipping nonlast:Priority -123
At location src/dfa.c:767
--Src File: src/dfa.c
Fragment 0:
{
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDLINE;
    return lasttok = BEGLINE;
}

....
Skipping nonlast:Priority -123
At location src/dfa.c:767
--Src File: src/dfa.c
Fragment 0:
{
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDWORD;
    return lasttok = BEGLINE;
}

....
Skipping nonlast:Priority -123
At location src/dfa.c:767
--Src File: src/dfa.c
Fragment 0:
{
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = LIMWORD;
    return lasttok = BEGLINE;
}

....
Skipping nonlast:Priority -123
At location src/dfa.c:767
--Src File: src/dfa.c
Fragment 0:
{
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = NOTLIMWORD;
    return lasttok = BEGLINE;
}

....
Skipping nonlast:Priority -123
At location src/dfa.c:767
--Src File: src/dfa.c
Fragment 0:
{
    if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        laststart = 0;
        return lasttok = BACKREF;
    }
    return lasttok = BEGLINE;
}

....
Skipping nonlast:Priority -123
At location src/dfa.c:767
--Src File: src/dfa.c
Fragment 0:
{
    if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
        zeroset(ccl);
        setbit_case_fold(c, ccl);
        return lasttok = CSET + charclass_index(ccl);
    }
    return lasttok = BEGLINE;
}

....
Skipping nonlast:Priority -123
At location src/dfa.c:767
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
    else
        return lasttok = END;
    return lasttok = BEGLINE;
}

....
Skipping nonlast:Priority -123
At location src/dfa.c:767
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
    else
        return lasttok = END;
    return lasttok = BEGLINE;
}

....
Skipping nonlast:Priority -123
At location src/dfa.c:767
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    return lasttok = BEGLINE;
}

....
Skipping nonlast:Priority -123
At location src/dfa.c:767
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    return lasttok = BEGLINE;
}

....
Skipping nonlast:Priority -123
At location src/dfa.c:767
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    return lasttok = BEGLINE;
}

....
Skipping nonlast addifexit:Priority 4877
At location src/dfa.c:767
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(lasttok, backslash, syntax_bits, lexleft, lexptr, c, cur_mb_index, i, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
        return -1;
    return lasttok = BEGLINE;
}

....
Skipping nonlast addifexit:Priority 4877
At location src/dfa.c:767
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(lasttok, backslash, syntax_bits, lexleft, lexptr, c, cur_mb_index, i, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
        return 0;
    return lasttok = BEGLINE;
}

....
Skipping nonlast addifexit:Priority 4877
At location src/dfa.c:767
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(lasttok, backslash, syntax_bits, lexleft, lexptr, c, cur_mb_index, i, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
        return 1;
    return lasttok = BEGLINE;
}

....
Skipping nonlast addifexit:Priority 4877
At location src/dfa.c:767
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(lasttok, backslash, syntax_bits, lexleft, lexptr, c, cur_mb_index, i, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
        return 2;
    return lasttok = BEGLINE;
}

....
Skipping nonlast addifexit:Priority 4877
At location src/dfa.c:767
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(lasttok, backslash, syntax_bits, lexleft, lexptr, c, cur_mb_index, i, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
        return 3;
    return lasttok = BEGLINE;
}

....
Skipping nonlast addifexit:Priority 4877
At location src/dfa.c:767
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(lasttok, backslash, syntax_bits, lexleft, lexptr, c, cur_mb_index, i, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
        return 4;
    return lasttok = BEGLINE;
}

....
Skipping nonlast addifexit:Priority 4877
At location src/dfa.c:767
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(lasttok, backslash, syntax_bits, lexleft, lexptr, c, cur_mb_index, i, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
        return 5;
    return lasttok = BEGLINE;
}

....
Skipping nonlast addifexit:Priority 4877
At location src/dfa.c:767
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(lasttok, backslash, syntax_bits, lexleft, lexptr, c, cur_mb_index, i, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
        return 6;
    return lasttok = BEGLINE;
}

....
Skipping nonlast addifexit:Priority 4877
At location src/dfa.c:767
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(lasttok, backslash, syntax_bits, lexleft, lexptr, c, cur_mb_index, i, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
        return 8;
    return lasttok = BEGLINE;
}

....
Skipping nonlast addifexit:Priority 4877
At location src/dfa.c:767
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(lasttok, backslash, syntax_bits, lexleft, lexptr, c, cur_mb_index, i, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
        return 9;
    return lasttok = BEGLINE;
}

....
Skipping nonlast addifexit:Priority 4877
At location src/dfa.c:767
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(lasttok, backslash, syntax_bits, lexleft, lexptr, c, cur_mb_index, i, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
        return 10;
    return lasttok = BEGLINE;
}

....
Skipping nonlast addifexit:Priority 4877
At location src/dfa.c:767
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(lasttok, backslash, syntax_bits, lexleft, lexptr, c, cur_mb_index, i, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
        return 256;
    return lasttok = BEGLINE;
}

....
Skipping nonlast addifexit:Priority 4877
At location src/dfa.c:767
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(lasttok, backslash, syntax_bits, lexleft, lexptr, c, cur_mb_index, i, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
        return 32767;
    return lasttok = BEGLINE;
}

....
Skipping nonlast addifexit:Priority 4877
At location src/dfa.c:767
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(lasttok, backslash, syntax_bits, lexleft, lexptr, c, cur_mb_index, i, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
        break;
    return lasttok = BEGLINE;
}

....
Skipping nonlast addifexit:Priority 5077
At location src/dfa.c:767
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(lasttok, backslash, syntax_bits, lexleft, lexptr, c, cur_mb_index, i, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
        goto skip;
    return lasttok = BEGLINE;
}

....
Skipping nonlast addifexit:Priority 5077
At location src/dfa.c:767
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(lasttok, backslash, syntax_bits, lexleft, lexptr, c, cur_mb_index, i, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
        goto normal_char;
    return lasttok = BEGLINE;
}

....
Skipping nonlast:Priority -117
At location src/dfa.c:773
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;

....
Skipping nonlast:Priority -117
At location src/dfa.c:773
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;

....
Skipping nonlast:Priority -117
At location src/dfa.c:773
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;

....
Skipping nonlast:Priority -117
At location src/dfa.c:773
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;

....
Skipping nonlast:Priority -117
At location src/dfa.c:773
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGLINE;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;

....
Skipping nonlast:Priority -117
At location src/dfa.c:773
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGWORD;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;

....
Skipping nonlast:Priority -117
At location src/dfa.c:773
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDLINE;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;

....
Skipping nonlast:Priority -117
At location src/dfa.c:773
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDWORD;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;

....
Skipping nonlast:Priority -117
At location src/dfa.c:773
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = LIMWORD;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;

....
Skipping nonlast:Priority -117
At location src/dfa.c:773
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = NOTLIMWORD;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;

....
Skipping nonlast:Priority -117
At location src/dfa.c:773
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    laststart = 0;
    return lasttok = BACKREF;
}
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;

....
Skipping nonlast:Priority -117
At location src/dfa.c:773
--Src File: src/dfa.c
Fragment 0:
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;

....
Skipping nonlast:Priority -117
At location src/dfa.c:773
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;

....
Skipping nonlast:Priority -117
At location src/dfa.c:773
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;

....
Skipping nonlast:Priority -117
At location src/dfa.c:773
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;

....
Skipping nonlast:Priority -117
At location src/dfa.c:773
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;

....
Skipping nonlast:Priority -117
At location src/dfa.c:773
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;

....
Skipping nonlast addifexit:Priority 3633
At location src/dfa.c:773
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, lexleft, backslash, lexptr, lasttok, c, laststart, cur_mb_index, i, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return -1;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;

....
Skipping nonlast addifexit:Priority 3633
At location src/dfa.c:773
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, lexleft, backslash, lexptr, lasttok, c, laststart, cur_mb_index, i, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 0;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;

....
Skipping nonlast addifexit:Priority 3633
At location src/dfa.c:773
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, lexleft, backslash, lexptr, lasttok, c, laststart, cur_mb_index, i, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 1;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;

....
Skipping nonlast addifexit:Priority 3633
At location src/dfa.c:773
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, lexleft, backslash, lexptr, lasttok, c, laststart, cur_mb_index, i, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 2;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;

....
Skipping nonlast addifexit:Priority 3633
At location src/dfa.c:773
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, lexleft, backslash, lexptr, lasttok, c, laststart, cur_mb_index, i, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 3;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;

....
Skipping nonlast addifexit:Priority 3633
At location src/dfa.c:773
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, lexleft, backslash, lexptr, lasttok, c, laststart, cur_mb_index, i, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 4;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;

....
Skipping nonlast addifexit:Priority 3633
At location src/dfa.c:773
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, lexleft, backslash, lexptr, lasttok, c, laststart, cur_mb_index, i, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 5;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;

....
Skipping nonlast addifexit:Priority 3633
At location src/dfa.c:773
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, lexleft, backslash, lexptr, lasttok, c, laststart, cur_mb_index, i, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 6;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;

....
Skipping nonlast addifexit:Priority 3633
At location src/dfa.c:773
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, lexleft, backslash, lexptr, lasttok, c, laststart, cur_mb_index, i, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 8;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;

....
Skipping nonlast addifexit:Priority 3633
At location src/dfa.c:773
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, lexleft, backslash, lexptr, lasttok, c, laststart, cur_mb_index, i, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 9;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;

....
Skipping nonlast addifexit:Priority 3633
At location src/dfa.c:773
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, lexleft, backslash, lexptr, lasttok, c, laststart, cur_mb_index, i, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 10;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;

....
Skipping nonlast addifexit:Priority 3633
At location src/dfa.c:773
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, lexleft, backslash, lexptr, lasttok, c, laststart, cur_mb_index, i, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 256;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;

....
Skipping nonlast addifexit:Priority 3633
At location src/dfa.c:773
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, lexleft, backslash, lexptr, lasttok, c, laststart, cur_mb_index, i, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 32767;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;

....
Skipping nonlast addifexit:Priority 3633
At location src/dfa.c:773
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, lexleft, backslash, lexptr, lasttok, c, laststart, cur_mb_index, i, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    break;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;

....
Skipping nonlast addifexit:Priority 3833
At location src/dfa.c:773
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, lexleft, backslash, lexptr, lasttok, c, laststart, cur_mb_index, i, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    goto skip;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;

....
Skipping nonlast addifexit:Priority 3833
At location src/dfa.c:773
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, lexleft, backslash, lexptr, lasttok, c, laststart, cur_mb_index, i, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    goto normal_char;
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;

....
Skipping nonlast:Priority -116
At location src/dfa.c:783
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    return lasttok = ENDLINE;
}

....
Skipping nonlast:Priority -116
At location src/dfa.c:783
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    return lasttok = ENDLINE;
}

....
Skipping nonlast:Priority -116
At location src/dfa.c:783
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        parse_bracket_exp_mb();
        return lasttok = MBCSET;
    }
    return lasttok = ENDLINE;
}

....
Skipping nonlast:Priority -116
At location src/dfa.c:783
--Src File: src/dfa.c
Fragment 0:
{
    if (0 != 0)
        dfaerror(0);
    else
        return lasttok = END;
    return lasttok = ENDLINE;
}

....
Skipping nonlast:Priority -116
At location src/dfa.c:783
--Src File: src/dfa.c
Fragment 0:
{
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGLINE;
    return lasttok = ENDLINE;
}

....
Skipping nonlast:Priority -116
At location src/dfa.c:783
--Src File: src/dfa.c
Fragment 0:
{
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = BEGWORD;
    return lasttok = ENDLINE;
}

....
Skipping nonlast:Priority -116
At location src/dfa.c:783
--Src File: src/dfa.c
Fragment 0:
{
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDLINE;
    return lasttok = ENDLINE;
}

....
Skipping nonlast:Priority -116
At location src/dfa.c:783
--Src File: src/dfa.c
Fragment 0:
{
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = ENDWORD;
    return lasttok = ENDLINE;
}

....
Skipping nonlast:Priority -116
At location src/dfa.c:783
--Src File: src/dfa.c
Fragment 0:
{
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = LIMWORD;
    return lasttok = ENDLINE;
}

....
Skipping nonlast:Priority -116
At location src/dfa.c:783
--Src File: src/dfa.c
Fragment 0:
{
    if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return lasttok = NOTLIMWORD;
    return lasttok = ENDLINE;
}

....
Skipping nonlast:Priority -116
At location src/dfa.c:783
--Src File: src/dfa.c
Fragment 0:
{
    if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
        laststart = 0;
        return lasttok = BACKREF;
    }
    return lasttok = ENDLINE;
}

....
Skipping nonlast:Priority -116
At location src/dfa.c:783
--Src File: src/dfa.c
Fragment 0:
{
    if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
        zeroset(ccl);
        setbit_case_fold(c, ccl);
        return lasttok = CSET + charclass_index(ccl);
    }
    return lasttok = ENDLINE;
}

....
Skipping nonlast:Priority -116
At location src/dfa.c:783
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
    else
        return lasttok = END;
    return lasttok = ENDLINE;
}

....
Skipping nonlast:Priority -116
At location src/dfa.c:783
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
    else
        return lasttok = END;
    return lasttok = ENDLINE;
}

....
Skipping nonlast:Priority -116
At location src/dfa.c:783
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    return lasttok = ENDLINE;
}

....
Skipping nonlast:Priority -116
At location src/dfa.c:783
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    return lasttok = ENDLINE;
}

....
Skipping nonlast:Priority -116
At location src/dfa.c:783
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    return lasttok = ENDLINE;
}

....
Skipping nonlast addifexit:Priority 4884
At location src/dfa.c:783
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(lasttok, lexptr, lexleft, syntax_bits, backslash, laststart, c, cur_mb_index, i, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
        return -1;
    return lasttok = ENDLINE;
}

....
Skipping nonlast addifexit:Priority 4884
At location src/dfa.c:783
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(lasttok, lexptr, lexleft, syntax_bits, backslash, laststart, c, cur_mb_index, i, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
        return 0;
    return lasttok = ENDLINE;
}

....
Skipping nonlast addifexit:Priority 4884
At location src/dfa.c:783
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(lasttok, lexptr, lexleft, syntax_bits, backslash, laststart, c, cur_mb_index, i, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
        return 1;
    return lasttok = ENDLINE;
}

....
Skipping nonlast addifexit:Priority 4884
At location src/dfa.c:783
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(lasttok, lexptr, lexleft, syntax_bits, backslash, laststart, c, cur_mb_index, i, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
        return 2;
    return lasttok = ENDLINE;
}

....
Skipping nonlast addifexit:Priority 4884
At location src/dfa.c:783
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(lasttok, lexptr, lexleft, syntax_bits, backslash, laststart, c, cur_mb_index, i, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
        return 3;
    return lasttok = ENDLINE;
}

....
Skipping nonlast addifexit:Priority 4884
At location src/dfa.c:783
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(lasttok, lexptr, lexleft, syntax_bits, backslash, laststart, c, cur_mb_index, i, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
        return 4;
    return lasttok = ENDLINE;
}

....
Skipping nonlast addifexit:Priority 4884
At location src/dfa.c:783
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(lasttok, lexptr, lexleft, syntax_bits, backslash, laststart, c, cur_mb_index, i, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
        return 5;
    return lasttok = ENDLINE;
}

....
Skipping nonlast addifexit:Priority 4884
At location src/dfa.c:783
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(lasttok, lexptr, lexleft, syntax_bits, backslash, laststart, c, cur_mb_index, i, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
        return 6;
    return lasttok = ENDLINE;
}

....
Skipping nonlast addifexit:Priority 4884
At location src/dfa.c:783
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(lasttok, lexptr, lexleft, syntax_bits, backslash, laststart, c, cur_mb_index, i, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
        return 8;
    return lasttok = ENDLINE;
}

....
Skipping nonlast addifexit:Priority 4884
At location src/dfa.c:783
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(lasttok, lexptr, lexleft, syntax_bits, backslash, laststart, c, cur_mb_index, i, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
        return 9;
    return lasttok = ENDLINE;
}

....
Skipping nonlast addifexit:Priority 4884
At location src/dfa.c:783
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(lasttok, lexptr, lexleft, syntax_bits, backslash, laststart, c, cur_mb_index, i, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
        return 10;
    return lasttok = ENDLINE;
}

....
Skipping nonlast addifexit:Priority 4884
At location src/dfa.c:783
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(lasttok, lexptr, lexleft, syntax_bits, backslash, laststart, c, cur_mb_index, i, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
        return 256;
    return lasttok = ENDLINE;
}

....
Skipping nonlast addifexit:Priority 4884
At location src/dfa.c:783
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(lasttok, lexptr, lexleft, syntax_bits, backslash, laststart, c, cur_mb_index, i, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
        return 32767;
    return lasttok = ENDLINE;
}

....
Skipping nonlast addifexit:Priority 4884
At location src/dfa.c:783
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(lasttok, lexptr, lexleft, syntax_bits, backslash, laststart, c, cur_mb_index, i, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
        break;
    return lasttok = ENDLINE;
}

....
Skipping nonlast addifexit:Priority 5084
At location src/dfa.c:783
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(lasttok, lexptr, lexleft, syntax_bits, backslash, laststart, c, cur_mb_index, i, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
        goto skip;
    return lasttok = ENDLINE;
}

....
Skipping nonlast addifexit:Priority 5084
At location src/dfa.c:783
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(lasttok, lexptr, lexleft, syntax_bits, backslash, laststart, c, cur_mb_index, i, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
        goto normal_char;
    return lasttok = ENDLINE;
}

....
Skipping nonlast:Priority -122
At location src/dfa.c:825
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
goto normal_char;

....
Skipping nonlast:Priority -122
At location src/dfa.c:825
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
goto normal_char;

....
Skipping nonlast:Priority -122
At location src/dfa.c:825
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
goto normal_char;

....
Skipping nonlast:Priority -122
At location src/dfa.c:825
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
goto normal_char;

....
Skipping nonlast:Priority -122
At location src/dfa.c:825
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGLINE;
goto normal_char;

....
Skipping nonlast:Priority -122
At location src/dfa.c:825
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGWORD;
goto normal_char;

....
Skipping nonlast:Priority -122
At location src/dfa.c:825
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDLINE;
goto normal_char;

....
Skipping nonlast:Priority -122
At location src/dfa.c:825
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDWORD;
goto normal_char;

....
Skipping nonlast:Priority -122
At location src/dfa.c:825
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = LIMWORD;
goto normal_char;

....
Skipping nonlast:Priority -122
At location src/dfa.c:825
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = NOTLIMWORD;
goto normal_char;

....
Skipping nonlast:Priority -122
At location src/dfa.c:825
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    laststart = 0;
    return lasttok = BACKREF;
}
goto normal_char;

....
Skipping nonlast:Priority -122
At location src/dfa.c:825
--Src File: src/dfa.c
Fragment 0:
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}
goto normal_char;

....
Skipping nonlast:Priority -122
At location src/dfa.c:825
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
goto normal_char;

....
Skipping nonlast:Priority -122
At location src/dfa.c:825
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
goto normal_char;

....
Skipping nonlast:Priority -122
At location src/dfa.c:825
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
goto normal_char;

....
Skipping nonlast:Priority -122
At location src/dfa.c:825
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
goto normal_char;

....
Skipping nonlast:Priority -122
At location src/dfa.c:825
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
goto normal_char;

....
Skipping nonlast addifexit:Priority 4878
At location src/dfa.c:825
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, backslash, syntax_bits, laststart, lexptr, lexleft, minrep, c, maxrep, cur_mb_index, i, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return -1;
goto normal_char;

....
Skipping nonlast addifexit:Priority 4878
At location src/dfa.c:825
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, backslash, syntax_bits, laststart, lexptr, lexleft, minrep, c, maxrep, cur_mb_index, i, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 0;
goto normal_char;

....
Skipping nonlast addifexit:Priority 4878
At location src/dfa.c:825
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, backslash, syntax_bits, laststart, lexptr, lexleft, minrep, c, maxrep, cur_mb_index, i, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 1;
goto normal_char;

....
Skipping nonlast addifexit:Priority 4878
At location src/dfa.c:825
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, backslash, syntax_bits, laststart, lexptr, lexleft, minrep, c, maxrep, cur_mb_index, i, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 2;
goto normal_char;

....
Skipping nonlast addifexit:Priority 4878
At location src/dfa.c:825
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, backslash, syntax_bits, laststart, lexptr, lexleft, minrep, c, maxrep, cur_mb_index, i, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 3;
goto normal_char;

....
Skipping nonlast addifexit:Priority 4878
At location src/dfa.c:825
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, backslash, syntax_bits, laststart, lexptr, lexleft, minrep, c, maxrep, cur_mb_index, i, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 4;
goto normal_char;

....
Skipping nonlast addifexit:Priority 4878
At location src/dfa.c:825
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, backslash, syntax_bits, laststart, lexptr, lexleft, minrep, c, maxrep, cur_mb_index, i, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 5;
goto normal_char;

....
Skipping nonlast addifexit:Priority 4878
At location src/dfa.c:825
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, backslash, syntax_bits, laststart, lexptr, lexleft, minrep, c, maxrep, cur_mb_index, i, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 6;
goto normal_char;

....
Skipping nonlast addifexit:Priority 4878
At location src/dfa.c:825
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, backslash, syntax_bits, laststart, lexptr, lexleft, minrep, c, maxrep, cur_mb_index, i, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 8;
goto normal_char;

....
Skipping nonlast addifexit:Priority 4878
At location src/dfa.c:825
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, backslash, syntax_bits, laststart, lexptr, lexleft, minrep, c, maxrep, cur_mb_index, i, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 9;
goto normal_char;

....
Skipping nonlast addifexit:Priority 4878
At location src/dfa.c:825
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, backslash, syntax_bits, laststart, lexptr, lexleft, minrep, c, maxrep, cur_mb_index, i, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 10;
goto normal_char;

....
Skipping nonlast addifexit:Priority 4878
At location src/dfa.c:825
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, backslash, syntax_bits, laststart, lexptr, lexleft, minrep, c, maxrep, cur_mb_index, i, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 256;
goto normal_char;

....
Skipping nonlast addifexit:Priority 4878
At location src/dfa.c:825
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, backslash, syntax_bits, laststart, lexptr, lexleft, minrep, c, maxrep, cur_mb_index, i, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 32767;
goto normal_char;

....
Skipping nonlast addifexit:Priority 4878
At location src/dfa.c:825
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, backslash, syntax_bits, laststart, lexptr, lexleft, minrep, c, maxrep, cur_mb_index, i, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    break;
goto normal_char;

....
Skipping nonlast addifexit:Priority 5078
At location src/dfa.c:825
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, backslash, syntax_bits, laststart, lexptr, lexleft, minrep, c, maxrep, cur_mb_index, i, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    goto skip;
goto normal_char;

....
Skipping nonlast addifexit:Priority 5078
At location src/dfa.c:825
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, backslash, syntax_bits, laststart, lexptr, lexleft, minrep, c, maxrep, cur_mb_index, i, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    goto normal_char;
goto normal_char;

....
Skipping nonlast:Priority -405
At location src/dfa.c:844
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
    goto normal_char;

....
Skipping nonlast:Priority -405
At location src/dfa.c:844
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
    goto normal_char;

....
Skipping nonlast:Priority -405
At location src/dfa.c:844
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
    goto normal_char;

....
Skipping nonlast:Priority -405
At location src/dfa.c:844
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
    goto normal_char;

....
Skipping nonlast:Priority -405
At location src/dfa.c:844
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGLINE;
if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
    goto normal_char;

....
Skipping nonlast:Priority -405
At location src/dfa.c:844
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGWORD;
if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
    goto normal_char;

....
Skipping nonlast:Priority -405
At location src/dfa.c:844
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDLINE;
if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
    goto normal_char;

....
Skipping nonlast:Priority -405
At location src/dfa.c:844
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDWORD;
if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
    goto normal_char;

....
Skipping nonlast:Priority -405
At location src/dfa.c:844
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = LIMWORD;
if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
    goto normal_char;

....
Skipping nonlast:Priority -405
At location src/dfa.c:844
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = NOTLIMWORD;
if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
    goto normal_char;

....
Skipping nonlast:Priority -405
At location src/dfa.c:844
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    laststart = 0;
    return lasttok = BACKREF;
}
if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
    goto normal_char;

....
Skipping nonlast:Priority -405
At location src/dfa.c:844
--Src File: src/dfa.c
Fragment 0:
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}
if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
    goto normal_char;

....
Skipping nonlast:Priority -405
At location src/dfa.c:844
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
    goto normal_char;

....
Skipping nonlast:Priority -405
At location src/dfa.c:844
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
    goto normal_char;

....
Skipping nonlast:Priority -405
At location src/dfa.c:844
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
    goto normal_char;

....
Skipping nonlast:Priority -405
At location src/dfa.c:844
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
    goto normal_char;

....
Skipping nonlast:Priority -405
At location src/dfa.c:844
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3345
At location src/dfa.c:844
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, laststart, backslash, lasttok, lexptr, lexleft, minrep, c, maxrep, cur_mb_index, i, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return -1;
if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3345
At location src/dfa.c:844
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, laststart, backslash, lasttok, lexptr, lexleft, minrep, c, maxrep, cur_mb_index, i, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 0;
if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3345
At location src/dfa.c:844
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, laststart, backslash, lasttok, lexptr, lexleft, minrep, c, maxrep, cur_mb_index, i, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 1;
if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3345
At location src/dfa.c:844
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, laststart, backslash, lasttok, lexptr, lexleft, minrep, c, maxrep, cur_mb_index, i, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 2;
if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3345
At location src/dfa.c:844
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, laststart, backslash, lasttok, lexptr, lexleft, minrep, c, maxrep, cur_mb_index, i, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 3;
if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3345
At location src/dfa.c:844
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, laststart, backslash, lasttok, lexptr, lexleft, minrep, c, maxrep, cur_mb_index, i, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 4;
if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3345
At location src/dfa.c:844
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, laststart, backslash, lasttok, lexptr, lexleft, minrep, c, maxrep, cur_mb_index, i, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 5;
if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3345
At location src/dfa.c:844
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, laststart, backslash, lasttok, lexptr, lexleft, minrep, c, maxrep, cur_mb_index, i, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 6;
if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3345
At location src/dfa.c:844
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, laststart, backslash, lasttok, lexptr, lexleft, minrep, c, maxrep, cur_mb_index, i, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 8;
if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3345
At location src/dfa.c:844
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, laststart, backslash, lasttok, lexptr, lexleft, minrep, c, maxrep, cur_mb_index, i, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 9;
if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3345
At location src/dfa.c:844
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, laststart, backslash, lasttok, lexptr, lexleft, minrep, c, maxrep, cur_mb_index, i, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 10;
if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3345
At location src/dfa.c:844
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, laststart, backslash, lasttok, lexptr, lexleft, minrep, c, maxrep, cur_mb_index, i, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 256;
if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3345
At location src/dfa.c:844
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, laststart, backslash, lasttok, lexptr, lexleft, minrep, c, maxrep, cur_mb_index, i, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 32767;
if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3345
At location src/dfa.c:844
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, laststart, backslash, lasttok, lexptr, lexleft, minrep, c, maxrep, cur_mb_index, i, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    break;
if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3545
At location src/dfa.c:844
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, laststart, backslash, lasttok, lexptr, lexleft, minrep, c, maxrep, cur_mb_index, i, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    goto skip;
if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3545
At location src/dfa.c:844
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, laststart, backslash, lasttok, lexptr, lexleft, minrep, c, maxrep, cur_mb_index, i, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    goto normal_char;
if (!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart)
    goto normal_char;

....
Skipping nonlast:Priority -404
At location src/dfa.c:846
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
return lasttok = STAR;

....
Skipping nonlast:Priority -404
At location src/dfa.c:846
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
return lasttok = STAR;

....
Skipping nonlast:Priority -404
At location src/dfa.c:846
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
return lasttok = STAR;

....
Skipping nonlast:Priority -404
At location src/dfa.c:846
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
return lasttok = STAR;

....
Skipping nonlast:Priority -404
At location src/dfa.c:846
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGLINE;
return lasttok = STAR;

....
Skipping nonlast:Priority -404
At location src/dfa.c:846
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGWORD;
return lasttok = STAR;

....
Skipping nonlast:Priority -404
At location src/dfa.c:846
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDLINE;
return lasttok = STAR;

....
Skipping nonlast:Priority -404
At location src/dfa.c:846
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDWORD;
return lasttok = STAR;

....
Skipping nonlast:Priority -404
At location src/dfa.c:846
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = LIMWORD;
return lasttok = STAR;

....
Skipping nonlast:Priority -404
At location src/dfa.c:846
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = NOTLIMWORD;
return lasttok = STAR;

....
Skipping nonlast:Priority -404
At location src/dfa.c:846
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    laststart = 0;
    return lasttok = BACKREF;
}
return lasttok = STAR;

....
Skipping nonlast:Priority -404
At location src/dfa.c:846
--Src File: src/dfa.c
Fragment 0:
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}
return lasttok = STAR;

....
Skipping nonlast:Priority -404
At location src/dfa.c:846
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
return lasttok = STAR;

....
Skipping nonlast:Priority -404
At location src/dfa.c:846
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
return lasttok = STAR;

....
Skipping nonlast:Priority -404
At location src/dfa.c:846
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
return lasttok = STAR;

....
Skipping nonlast:Priority -404
At location src/dfa.c:846
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
return lasttok = STAR;

....
Skipping nonlast:Priority -404
At location src/dfa.c:846
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
return lasttok = STAR;

....
Skipping nonlast addifexit:Priority 4596
At location src/dfa.c:846
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, syntax_bits, laststart, backslash, lexptr, lexleft, minrep, c, maxrep, cur_mb_index, i, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return -1;
return lasttok = STAR;

....
Skipping nonlast addifexit:Priority 4596
At location src/dfa.c:846
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, syntax_bits, laststart, backslash, lexptr, lexleft, minrep, c, maxrep, cur_mb_index, i, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 0;
return lasttok = STAR;

....
Skipping nonlast addifexit:Priority 4596
At location src/dfa.c:846
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, syntax_bits, laststart, backslash, lexptr, lexleft, minrep, c, maxrep, cur_mb_index, i, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 1;
return lasttok = STAR;

....
Skipping nonlast addifexit:Priority 4596
At location src/dfa.c:846
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, syntax_bits, laststart, backslash, lexptr, lexleft, minrep, c, maxrep, cur_mb_index, i, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 2;
return lasttok = STAR;

....
Skipping nonlast addifexit:Priority 4596
At location src/dfa.c:846
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, syntax_bits, laststart, backslash, lexptr, lexleft, minrep, c, maxrep, cur_mb_index, i, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 3;
return lasttok = STAR;

....
Skipping nonlast addifexit:Priority 4596
At location src/dfa.c:846
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, syntax_bits, laststart, backslash, lexptr, lexleft, minrep, c, maxrep, cur_mb_index, i, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 4;
return lasttok = STAR;

....
Skipping nonlast addifexit:Priority 4596
At location src/dfa.c:846
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, syntax_bits, laststart, backslash, lexptr, lexleft, minrep, c, maxrep, cur_mb_index, i, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 5;
return lasttok = STAR;

....
Skipping nonlast addifexit:Priority 4596
At location src/dfa.c:846
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, syntax_bits, laststart, backslash, lexptr, lexleft, minrep, c, maxrep, cur_mb_index, i, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 6;
return lasttok = STAR;

....
Skipping nonlast addifexit:Priority 4596
At location src/dfa.c:846
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, syntax_bits, laststart, backslash, lexptr, lexleft, minrep, c, maxrep, cur_mb_index, i, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 8;
return lasttok = STAR;

....
Skipping nonlast addifexit:Priority 4596
At location src/dfa.c:846
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, syntax_bits, laststart, backslash, lexptr, lexleft, minrep, c, maxrep, cur_mb_index, i, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 9;
return lasttok = STAR;

....
Skipping nonlast addifexit:Priority 4596
At location src/dfa.c:846
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, syntax_bits, laststart, backslash, lexptr, lexleft, minrep, c, maxrep, cur_mb_index, i, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 10;
return lasttok = STAR;

....
Skipping nonlast addifexit:Priority 4596
At location src/dfa.c:846
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, syntax_bits, laststart, backslash, lexptr, lexleft, minrep, c, maxrep, cur_mb_index, i, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 256;
return lasttok = STAR;

....
Skipping nonlast addifexit:Priority 4596
At location src/dfa.c:846
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, syntax_bits, laststart, backslash, lexptr, lexleft, minrep, c, maxrep, cur_mb_index, i, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return 32767;
return lasttok = STAR;

....
Skipping nonlast addifexit:Priority 4596
At location src/dfa.c:846
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, syntax_bits, laststart, backslash, lexptr, lexleft, minrep, c, maxrep, cur_mb_index, i, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    break;
return lasttok = STAR;

....
Skipping nonlast addifexit:Priority 4796
At location src/dfa.c:846
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, syntax_bits, laststart, backslash, lexptr, lexleft, minrep, c, maxrep, cur_mb_index, i, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    goto skip;
return lasttok = STAR;

....
Skipping nonlast addifexit:Priority 4796
At location src/dfa.c:846
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, syntax_bits, laststart, backslash, lexptr, lexleft, minrep, c, maxrep, cur_mb_index, i, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    goto normal_char;
return lasttok = STAR;

....
Skipping nonlast:Priority -121
At location src/dfa.c:938
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
    goto normal_char;

....
Skipping nonlast:Priority -121
At location src/dfa.c:938
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
    goto normal_char;

....
Skipping nonlast:Priority -121
At location src/dfa.c:938
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
    goto normal_char;

....
Skipping nonlast:Priority -121
At location src/dfa.c:938
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
    goto normal_char;

....
Skipping nonlast:Priority -121
At location src/dfa.c:938
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGLINE;
if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
    goto normal_char;

....
Skipping nonlast:Priority -121
At location src/dfa.c:938
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGWORD;
if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
    goto normal_char;

....
Skipping nonlast:Priority -121
At location src/dfa.c:938
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDLINE;
if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
    goto normal_char;

....
Skipping nonlast:Priority -121
At location src/dfa.c:938
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDWORD;
if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
    goto normal_char;

....
Skipping nonlast:Priority -121
At location src/dfa.c:938
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = LIMWORD;
if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
    goto normal_char;

....
Skipping nonlast:Priority -121
At location src/dfa.c:938
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = NOTLIMWORD;
if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
    goto normal_char;

....
Skipping nonlast:Priority -121
At location src/dfa.c:938
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    laststart = 0;
    return lasttok = BACKREF;
}
if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
    goto normal_char;

....
Skipping nonlast:Priority -121
At location src/dfa.c:938
--Src File: src/dfa.c
Fragment 0:
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}
if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
    goto normal_char;

....
Skipping nonlast:Priority -121
At location src/dfa.c:938
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
    goto normal_char;

....
Skipping nonlast:Priority -121
At location src/dfa.c:938
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
    goto normal_char;

....
Skipping nonlast:Priority -121
At location src/dfa.c:938
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
    goto normal_char;

....
Skipping nonlast:Priority -121
At location src/dfa.c:938
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
    goto normal_char;

....
Skipping nonlast:Priority -121
At location src/dfa.c:938
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3629
At location src/dfa.c:938
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(backslash, syntax_bits, laststart, lasttok, c, lexptr, lexleft, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return -1;
if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3629
At location src/dfa.c:938
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(backslash, syntax_bits, laststart, lasttok, c, lexptr, lexleft, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 0;
if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3629
At location src/dfa.c:938
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(backslash, syntax_bits, laststart, lasttok, c, lexptr, lexleft, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 1;
if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3629
At location src/dfa.c:938
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(backslash, syntax_bits, laststart, lasttok, c, lexptr, lexleft, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 2;
if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3629
At location src/dfa.c:938
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(backslash, syntax_bits, laststart, lasttok, c, lexptr, lexleft, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 3;
if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3629
At location src/dfa.c:938
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(backslash, syntax_bits, laststart, lasttok, c, lexptr, lexleft, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 4;
if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3629
At location src/dfa.c:938
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(backslash, syntax_bits, laststart, lasttok, c, lexptr, lexleft, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 5;
if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3629
At location src/dfa.c:938
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(backslash, syntax_bits, laststart, lasttok, c, lexptr, lexleft, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 6;
if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3629
At location src/dfa.c:938
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(backslash, syntax_bits, laststart, lasttok, c, lexptr, lexleft, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 8;
if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3629
At location src/dfa.c:938
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(backslash, syntax_bits, laststart, lasttok, c, lexptr, lexleft, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 9;
if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3629
At location src/dfa.c:938
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(backslash, syntax_bits, laststart, lasttok, c, lexptr, lexleft, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 10;
if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3629
At location src/dfa.c:938
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(backslash, syntax_bits, laststart, lasttok, c, lexptr, lexleft, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 256;
if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3629
At location src/dfa.c:938
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(backslash, syntax_bits, laststart, lasttok, c, lexptr, lexleft, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 32767;
if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3629
At location src/dfa.c:938
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(backslash, syntax_bits, laststart, lasttok, c, lexptr, lexleft, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    break;
if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3829
At location src/dfa.c:938
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(backslash, syntax_bits, laststart, lasttok, c, lexptr, lexleft, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    goto skip;
if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3829
At location src/dfa.c:938
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(backslash, syntax_bits, laststart, lasttok, c, lexptr, lexleft, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    goto normal_char;
if (backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0))
    goto normal_char;

....
Skipping nonlast:Priority -120
At location src/dfa.c:940
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
laststart = 1;

....
Skipping nonlast:Priority -120
At location src/dfa.c:940
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
laststart = 1;

....
Skipping nonlast:Priority -120
At location src/dfa.c:940
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
laststart = 1;

....
Skipping nonlast:Priority -120
At location src/dfa.c:940
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
laststart = 1;

....
Skipping nonlast:Priority -120
At location src/dfa.c:940
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGLINE;
laststart = 1;

....
Skipping nonlast:Priority -120
At location src/dfa.c:940
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGWORD;
laststart = 1;

....
Skipping nonlast:Priority -120
At location src/dfa.c:940
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDLINE;
laststart = 1;

....
Skipping nonlast:Priority -120
At location src/dfa.c:940
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDWORD;
laststart = 1;

....
Skipping nonlast:Priority -120
At location src/dfa.c:940
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = LIMWORD;
laststart = 1;

....
Skipping nonlast:Priority -120
At location src/dfa.c:940
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = NOTLIMWORD;
laststart = 1;

....
Skipping nonlast:Priority -120
At location src/dfa.c:940
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    laststart = 0;
    return lasttok = BACKREF;
}
laststart = 1;

....
Skipping nonlast:Priority -120
At location src/dfa.c:940
--Src File: src/dfa.c
Fragment 0:
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}
laststart = 1;

....
Skipping nonlast:Priority -120
At location src/dfa.c:940
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
laststart = 1;

....
Skipping nonlast:Priority -120
At location src/dfa.c:940
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
laststart = 1;

....
Skipping nonlast:Priority -120
At location src/dfa.c:940
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
laststart = 1;

....
Skipping nonlast:Priority -120
At location src/dfa.c:940
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
laststart = 1;

....
Skipping nonlast:Priority -120
At location src/dfa.c:940
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
laststart = 1;

....
Skipping nonlast addifexit:Priority 4880
At location src/dfa.c:940
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, lasttok, backslash, syntax_bits, c, lexptr, lexleft, parens, minrep, maxrep, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return -1;
laststart = 1;

....
Skipping nonlast addifexit:Priority 4880
At location src/dfa.c:940
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, lasttok, backslash, syntax_bits, c, lexptr, lexleft, parens, minrep, maxrep, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 0;
laststart = 1;

....
Skipping nonlast addifexit:Priority 4880
At location src/dfa.c:940
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, lasttok, backslash, syntax_bits, c, lexptr, lexleft, parens, minrep, maxrep, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 1;
laststart = 1;

....
Skipping nonlast addifexit:Priority 4880
At location src/dfa.c:940
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, lasttok, backslash, syntax_bits, c, lexptr, lexleft, parens, minrep, maxrep, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 2;
laststart = 1;

....
Skipping nonlast addifexit:Priority 4880
At location src/dfa.c:940
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, lasttok, backslash, syntax_bits, c, lexptr, lexleft, parens, minrep, maxrep, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 3;
laststart = 1;

....
Skipping nonlast addifexit:Priority 4880
At location src/dfa.c:940
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, lasttok, backslash, syntax_bits, c, lexptr, lexleft, parens, minrep, maxrep, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 4;
laststart = 1;

....
Skipping nonlast addifexit:Priority 4880
At location src/dfa.c:940
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, lasttok, backslash, syntax_bits, c, lexptr, lexleft, parens, minrep, maxrep, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 5;
laststart = 1;

....
Skipping nonlast addifexit:Priority 4880
At location src/dfa.c:940
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, lasttok, backslash, syntax_bits, c, lexptr, lexleft, parens, minrep, maxrep, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 6;
laststart = 1;

....
Skipping nonlast addifexit:Priority 4880
At location src/dfa.c:940
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, lasttok, backslash, syntax_bits, c, lexptr, lexleft, parens, minrep, maxrep, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 8;
laststart = 1;

....
Skipping nonlast addifexit:Priority 4880
At location src/dfa.c:940
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, lasttok, backslash, syntax_bits, c, lexptr, lexleft, parens, minrep, maxrep, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 9;
laststart = 1;

....
Skipping nonlast addifexit:Priority 4880
At location src/dfa.c:940
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, lasttok, backslash, syntax_bits, c, lexptr, lexleft, parens, minrep, maxrep, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 10;
laststart = 1;

....
Skipping nonlast addifexit:Priority 4880
At location src/dfa.c:940
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, lasttok, backslash, syntax_bits, c, lexptr, lexleft, parens, minrep, maxrep, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 256;
laststart = 1;

....
Skipping nonlast addifexit:Priority 4880
At location src/dfa.c:940
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, lasttok, backslash, syntax_bits, c, lexptr, lexleft, parens, minrep, maxrep, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 32767;
laststart = 1;

....
Skipping nonlast addifexit:Priority 4880
At location src/dfa.c:940
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, lasttok, backslash, syntax_bits, c, lexptr, lexleft, parens, minrep, maxrep, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    break;
laststart = 1;

....
Skipping nonlast addifexit:Priority 5080
At location src/dfa.c:940
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, lasttok, backslash, syntax_bits, c, lexptr, lexleft, parens, minrep, maxrep, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    goto skip;
laststart = 1;

....
Skipping nonlast addifexit:Priority 5080
At location src/dfa.c:940
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, lasttok, backslash, syntax_bits, c, lexptr, lexleft, parens, minrep, maxrep, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    goto normal_char;
laststart = 1;

....
Skipping nonlast:Priority -119
At location src/dfa.c:941
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
return lasttok = OR;

....
Skipping nonlast:Priority -119
At location src/dfa.c:941
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
return lasttok = OR;

....
Skipping nonlast:Priority -119
At location src/dfa.c:941
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
return lasttok = OR;

....
Skipping nonlast:Priority -119
At location src/dfa.c:941
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
return lasttok = OR;

....
Skipping nonlast:Priority -119
At location src/dfa.c:941
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGLINE;
return lasttok = OR;

....
Skipping nonlast:Priority -119
At location src/dfa.c:941
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGWORD;
return lasttok = OR;

....
Skipping nonlast:Priority -119
At location src/dfa.c:941
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDLINE;
return lasttok = OR;

....
Skipping nonlast:Priority -119
At location src/dfa.c:941
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDWORD;
return lasttok = OR;

....
Skipping nonlast:Priority -119
At location src/dfa.c:941
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = LIMWORD;
return lasttok = OR;

....
Skipping nonlast:Priority -119
At location src/dfa.c:941
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = NOTLIMWORD;
return lasttok = OR;

....
Skipping nonlast:Priority -119
At location src/dfa.c:941
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    laststart = 0;
    return lasttok = BACKREF;
}
return lasttok = OR;

....
Skipping nonlast:Priority -119
At location src/dfa.c:941
--Src File: src/dfa.c
Fragment 0:
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}
return lasttok = OR;

....
Skipping nonlast:Priority -119
At location src/dfa.c:941
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
return lasttok = OR;

....
Skipping nonlast:Priority -119
At location src/dfa.c:941
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
return lasttok = OR;

....
Skipping nonlast:Priority -119
At location src/dfa.c:941
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
return lasttok = OR;

....
Skipping nonlast:Priority -119
At location src/dfa.c:941
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
return lasttok = OR;

....
Skipping nonlast:Priority -119
At location src/dfa.c:941
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
return lasttok = OR;

....
Skipping nonlast addifexit:Priority 4881
At location src/dfa.c:941
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, laststart, backslash, syntax_bits, c, lexptr, lexleft, parens, minrep, maxrep, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return -1;
return lasttok = OR;

....
Skipping nonlast addifexit:Priority 4881
At location src/dfa.c:941
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, laststart, backslash, syntax_bits, c, lexptr, lexleft, parens, minrep, maxrep, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 0;
return lasttok = OR;

....
Skipping nonlast addifexit:Priority 4881
At location src/dfa.c:941
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, laststart, backslash, syntax_bits, c, lexptr, lexleft, parens, minrep, maxrep, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 1;
return lasttok = OR;

....
Skipping nonlast addifexit:Priority 4881
At location src/dfa.c:941
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, laststart, backslash, syntax_bits, c, lexptr, lexleft, parens, minrep, maxrep, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 2;
return lasttok = OR;

....
Skipping nonlast addifexit:Priority 4881
At location src/dfa.c:941
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, laststart, backslash, syntax_bits, c, lexptr, lexleft, parens, minrep, maxrep, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 3;
return lasttok = OR;

....
Skipping nonlast addifexit:Priority 4881
At location src/dfa.c:941
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, laststart, backslash, syntax_bits, c, lexptr, lexleft, parens, minrep, maxrep, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 4;
return lasttok = OR;

....
Skipping nonlast addifexit:Priority 4881
At location src/dfa.c:941
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, laststart, backslash, syntax_bits, c, lexptr, lexleft, parens, minrep, maxrep, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 5;
return lasttok = OR;

....
Skipping nonlast addifexit:Priority 4881
At location src/dfa.c:941
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, laststart, backslash, syntax_bits, c, lexptr, lexleft, parens, minrep, maxrep, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 6;
return lasttok = OR;

....
Skipping nonlast addifexit:Priority 4881
At location src/dfa.c:941
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, laststart, backslash, syntax_bits, c, lexptr, lexleft, parens, minrep, maxrep, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 8;
return lasttok = OR;

....
Skipping nonlast addifexit:Priority 4881
At location src/dfa.c:941
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, laststart, backslash, syntax_bits, c, lexptr, lexleft, parens, minrep, maxrep, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 9;
return lasttok = OR;

....
Skipping nonlast addifexit:Priority 4881
At location src/dfa.c:941
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, laststart, backslash, syntax_bits, c, lexptr, lexleft, parens, minrep, maxrep, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 10;
return lasttok = OR;

....
Skipping nonlast addifexit:Priority 4881
At location src/dfa.c:941
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, laststart, backslash, syntax_bits, c, lexptr, lexleft, parens, minrep, maxrep, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 256;
return lasttok = OR;

....
Skipping nonlast addifexit:Priority 4881
At location src/dfa.c:941
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, laststart, backslash, syntax_bits, c, lexptr, lexleft, parens, minrep, maxrep, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 32767;
return lasttok = OR;

....
Skipping nonlast addifexit:Priority 4881
At location src/dfa.c:941
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, laststart, backslash, syntax_bits, c, lexptr, lexleft, parens, minrep, maxrep, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    break;
return lasttok = OR;

....
Skipping nonlast addifexit:Priority 5081
At location src/dfa.c:941
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, laststart, backslash, syntax_bits, c, lexptr, lexleft, parens, minrep, maxrep, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    goto skip;
return lasttok = OR;

....
Skipping nonlast addifexit:Priority 5081
At location src/dfa.c:941
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, laststart, backslash, syntax_bits, c, lexptr, lexleft, parens, minrep, maxrep, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    goto normal_char;
return lasttok = OR;

....
Skipping nonlast:Priority -137
At location src/dfa.c:954
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
++parens;

....
Skipping nonlast:Priority -137
At location src/dfa.c:954
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
++parens;

....
Skipping nonlast:Priority -137
At location src/dfa.c:954
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
++parens;

....
Skipping nonlast:Priority -137
At location src/dfa.c:954
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
++parens;

....
Skipping nonlast:Priority -137
At location src/dfa.c:954
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGLINE;
++parens;

....
Skipping nonlast:Priority -137
At location src/dfa.c:954
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGWORD;
++parens;

....
Skipping nonlast:Priority -137
At location src/dfa.c:954
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDLINE;
++parens;

....
Skipping nonlast:Priority -137
At location src/dfa.c:954
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDWORD;
++parens;

....
Skipping nonlast:Priority -137
At location src/dfa.c:954
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = LIMWORD;
++parens;

....
Skipping nonlast:Priority -137
At location src/dfa.c:954
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = NOTLIMWORD;
++parens;

....
Skipping nonlast:Priority -137
At location src/dfa.c:954
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    laststart = 0;
    return lasttok = BACKREF;
}
++parens;

....
Skipping nonlast:Priority -137
At location src/dfa.c:954
--Src File: src/dfa.c
Fragment 0:
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}
++parens;

....
Skipping nonlast:Priority -137
At location src/dfa.c:954
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
++parens;

....
Skipping nonlast:Priority -137
At location src/dfa.c:954
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
++parens;

....
Skipping nonlast:Priority -137
At location src/dfa.c:954
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
++parens;

....
Skipping nonlast:Priority -137
At location src/dfa.c:954
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
++parens;

....
Skipping nonlast:Priority -137
At location src/dfa.c:954
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
++parens;

....
Skipping nonlast addifexit:Priority 4863
At location src/dfa.c:954
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(parens, laststart, backslash, syntax_bits, lasttok, c, lexptr, lexleft, eolbyte, minrep, maxrep, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return -1;
++parens;

....
Skipping nonlast addifexit:Priority 4863
At location src/dfa.c:954
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(parens, laststart, backslash, syntax_bits, lasttok, c, lexptr, lexleft, eolbyte, minrep, maxrep, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 0;
++parens;

....
Skipping nonlast addifexit:Priority 4863
At location src/dfa.c:954
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(parens, laststart, backslash, syntax_bits, lasttok, c, lexptr, lexleft, eolbyte, minrep, maxrep, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 1;
++parens;

....
Skipping nonlast addifexit:Priority 4863
At location src/dfa.c:954
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(parens, laststart, backslash, syntax_bits, lasttok, c, lexptr, lexleft, eolbyte, minrep, maxrep, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 2;
++parens;

....
Skipping nonlast addifexit:Priority 4863
At location src/dfa.c:954
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(parens, laststart, backslash, syntax_bits, lasttok, c, lexptr, lexleft, eolbyte, minrep, maxrep, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 3;
++parens;

....
Skipping nonlast addifexit:Priority 4863
At location src/dfa.c:954
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(parens, laststart, backslash, syntax_bits, lasttok, c, lexptr, lexleft, eolbyte, minrep, maxrep, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 4;
++parens;

....
Skipping nonlast addifexit:Priority 4863
At location src/dfa.c:954
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(parens, laststart, backslash, syntax_bits, lasttok, c, lexptr, lexleft, eolbyte, minrep, maxrep, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 5;
++parens;

....
Skipping nonlast addifexit:Priority 4863
At location src/dfa.c:954
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(parens, laststart, backslash, syntax_bits, lasttok, c, lexptr, lexleft, eolbyte, minrep, maxrep, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 6;
++parens;

....
Skipping nonlast addifexit:Priority 4863
At location src/dfa.c:954
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(parens, laststart, backslash, syntax_bits, lasttok, c, lexptr, lexleft, eolbyte, minrep, maxrep, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 8;
++parens;

....
Skipping nonlast addifexit:Priority 4863
At location src/dfa.c:954
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(parens, laststart, backslash, syntax_bits, lasttok, c, lexptr, lexleft, eolbyte, minrep, maxrep, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 9;
++parens;

....
Skipping nonlast addifexit:Priority 4863
At location src/dfa.c:954
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(parens, laststart, backslash, syntax_bits, lasttok, c, lexptr, lexleft, eolbyte, minrep, maxrep, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 10;
++parens;

....
Skipping nonlast addifexit:Priority 4863
At location src/dfa.c:954
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(parens, laststart, backslash, syntax_bits, lasttok, c, lexptr, lexleft, eolbyte, minrep, maxrep, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 256;
++parens;

....
Skipping nonlast addifexit:Priority 4863
At location src/dfa.c:954
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(parens, laststart, backslash, syntax_bits, lasttok, c, lexptr, lexleft, eolbyte, minrep, maxrep, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 32767;
++parens;

....
Skipping nonlast addifexit:Priority 4863
At location src/dfa.c:954
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(parens, laststart, backslash, syntax_bits, lasttok, c, lexptr, lexleft, eolbyte, minrep, maxrep, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    break;
++parens;

....
Skipping nonlast addifexit:Priority 5063
At location src/dfa.c:954
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(parens, laststart, backslash, syntax_bits, lasttok, c, lexptr, lexleft, eolbyte, minrep, maxrep, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    goto skip;
++parens;

....
Skipping nonlast addifexit:Priority 5063
At location src/dfa.c:954
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(parens, laststart, backslash, syntax_bits, lasttok, c, lexptr, lexleft, eolbyte, minrep, maxrep, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    goto normal_char;
++parens;

....
Skipping nonlast:Priority -136
At location src/dfa.c:955
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
laststart = 1;

....
Skipping nonlast:Priority -136
At location src/dfa.c:955
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
laststart = 1;

....
Skipping nonlast:Priority -136
At location src/dfa.c:955
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
laststart = 1;

....
Skipping nonlast:Priority -136
At location src/dfa.c:955
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
laststart = 1;

....
Skipping nonlast:Priority -136
At location src/dfa.c:955
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGLINE;
laststart = 1;

....
Skipping nonlast:Priority -136
At location src/dfa.c:955
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGWORD;
laststart = 1;

....
Skipping nonlast:Priority -136
At location src/dfa.c:955
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDLINE;
laststart = 1;

....
Skipping nonlast:Priority -136
At location src/dfa.c:955
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDWORD;
laststart = 1;

....
Skipping nonlast:Priority -136
At location src/dfa.c:955
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = LIMWORD;
laststart = 1;

....
Skipping nonlast:Priority -136
At location src/dfa.c:955
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = NOTLIMWORD;
laststart = 1;

....
Skipping nonlast:Priority -136
At location src/dfa.c:955
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    laststart = 0;
    return lasttok = BACKREF;
}
laststart = 1;

....
Skipping nonlast:Priority -136
At location src/dfa.c:955
--Src File: src/dfa.c
Fragment 0:
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}
laststart = 1;

....
Skipping nonlast:Priority -136
At location src/dfa.c:955
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
laststart = 1;

....
Skipping nonlast:Priority -136
At location src/dfa.c:955
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
laststart = 1;

....
Skipping nonlast:Priority -136
At location src/dfa.c:955
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
laststart = 1;

....
Skipping nonlast:Priority -136
At location src/dfa.c:955
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
laststart = 1;

....
Skipping nonlast:Priority -136
At location src/dfa.c:955
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
laststart = 1;

....
Skipping nonlast addifexit:Priority 4864
At location src/dfa.c:955
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, lasttok, parens, backslash, syntax_bits, c, eolbyte, lexptr, lexleft, minrep, maxrep, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return -1;
laststart = 1;

....
Skipping nonlast addifexit:Priority 4864
At location src/dfa.c:955
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, lasttok, parens, backslash, syntax_bits, c, eolbyte, lexptr, lexleft, minrep, maxrep, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 0;
laststart = 1;

....
Skipping nonlast addifexit:Priority 4864
At location src/dfa.c:955
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, lasttok, parens, backslash, syntax_bits, c, eolbyte, lexptr, lexleft, minrep, maxrep, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 1;
laststart = 1;

....
Skipping nonlast addifexit:Priority 4864
At location src/dfa.c:955
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, lasttok, parens, backslash, syntax_bits, c, eolbyte, lexptr, lexleft, minrep, maxrep, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 2;
laststart = 1;

....
Skipping nonlast addifexit:Priority 4864
At location src/dfa.c:955
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, lasttok, parens, backslash, syntax_bits, c, eolbyte, lexptr, lexleft, minrep, maxrep, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 3;
laststart = 1;

....
Skipping nonlast addifexit:Priority 4864
At location src/dfa.c:955
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, lasttok, parens, backslash, syntax_bits, c, eolbyte, lexptr, lexleft, minrep, maxrep, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 4;
laststart = 1;

....
Skipping nonlast addifexit:Priority 4864
At location src/dfa.c:955
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, lasttok, parens, backslash, syntax_bits, c, eolbyte, lexptr, lexleft, minrep, maxrep, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 5;
laststart = 1;

....
Skipping nonlast addifexit:Priority 4864
At location src/dfa.c:955
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, lasttok, parens, backslash, syntax_bits, c, eolbyte, lexptr, lexleft, minrep, maxrep, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 6;
laststart = 1;

....
Skipping nonlast addifexit:Priority 4864
At location src/dfa.c:955
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, lasttok, parens, backslash, syntax_bits, c, eolbyte, lexptr, lexleft, minrep, maxrep, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 8;
laststart = 1;

....
Skipping nonlast addifexit:Priority 4864
At location src/dfa.c:955
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, lasttok, parens, backslash, syntax_bits, c, eolbyte, lexptr, lexleft, minrep, maxrep, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 9;
laststart = 1;

....
Skipping nonlast addifexit:Priority 4864
At location src/dfa.c:955
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, lasttok, parens, backslash, syntax_bits, c, eolbyte, lexptr, lexleft, minrep, maxrep, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 10;
laststart = 1;

....
Skipping nonlast addifexit:Priority 4864
At location src/dfa.c:955
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, lasttok, parens, backslash, syntax_bits, c, eolbyte, lexptr, lexleft, minrep, maxrep, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 256;
laststart = 1;

....
Skipping nonlast addifexit:Priority 4864
At location src/dfa.c:955
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, lasttok, parens, backslash, syntax_bits, c, eolbyte, lexptr, lexleft, minrep, maxrep, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 32767;
laststart = 1;

....
Skipping nonlast addifexit:Priority 4864
At location src/dfa.c:955
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, lasttok, parens, backslash, syntax_bits, c, eolbyte, lexptr, lexleft, minrep, maxrep, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    break;
laststart = 1;

....
Skipping nonlast addifexit:Priority 5064
At location src/dfa.c:955
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, lasttok, parens, backslash, syntax_bits, c, eolbyte, lexptr, lexleft, minrep, maxrep, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    goto skip;
laststart = 1;

....
Skipping nonlast addifexit:Priority 5064
At location src/dfa.c:955
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, lasttok, parens, backslash, syntax_bits, c, eolbyte, lexptr, lexleft, minrep, maxrep, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    goto normal_char;
laststart = 1;

....
Skipping nonlast:Priority -135
At location src/dfa.c:956
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
return lasttok = LPAREN;

....
Skipping nonlast:Priority -135
At location src/dfa.c:956
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
return lasttok = LPAREN;

....
Skipping nonlast:Priority -135
At location src/dfa.c:956
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
return lasttok = LPAREN;

....
Skipping nonlast:Priority -135
At location src/dfa.c:956
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
return lasttok = LPAREN;

....
Skipping nonlast:Priority -135
At location src/dfa.c:956
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGLINE;
return lasttok = LPAREN;

....
Skipping nonlast:Priority -135
At location src/dfa.c:956
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGWORD;
return lasttok = LPAREN;

....
Skipping nonlast:Priority -135
At location src/dfa.c:956
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDLINE;
return lasttok = LPAREN;

....
Skipping nonlast:Priority -135
At location src/dfa.c:956
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDWORD;
return lasttok = LPAREN;

....
Skipping nonlast:Priority -135
At location src/dfa.c:956
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = LIMWORD;
return lasttok = LPAREN;

....
Skipping nonlast:Priority -135
At location src/dfa.c:956
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = NOTLIMWORD;
return lasttok = LPAREN;

....
Skipping nonlast:Priority -135
At location src/dfa.c:956
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    laststart = 0;
    return lasttok = BACKREF;
}
return lasttok = LPAREN;

....
Skipping nonlast:Priority -135
At location src/dfa.c:956
--Src File: src/dfa.c
Fragment 0:
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}
return lasttok = LPAREN;

....
Skipping nonlast:Priority -135
At location src/dfa.c:956
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
return lasttok = LPAREN;

....
Skipping nonlast:Priority -135
At location src/dfa.c:956
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
return lasttok = LPAREN;

....
Skipping nonlast:Priority -135
At location src/dfa.c:956
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
return lasttok = LPAREN;

....
Skipping nonlast:Priority -135
At location src/dfa.c:956
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
return lasttok = LPAREN;

....
Skipping nonlast:Priority -135
At location src/dfa.c:956
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
return lasttok = LPAREN;

....
Skipping nonlast addifexit:Priority 4865
At location src/dfa.c:956
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, laststart, parens, backslash, syntax_bits, c, eolbyte, lexptr, lexleft, minrep, maxrep, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return -1;
return lasttok = LPAREN;

....
Skipping nonlast addifexit:Priority 4865
At location src/dfa.c:956
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, laststart, parens, backslash, syntax_bits, c, eolbyte, lexptr, lexleft, minrep, maxrep, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 0;
return lasttok = LPAREN;

....
Skipping nonlast addifexit:Priority 4865
At location src/dfa.c:956
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, laststart, parens, backslash, syntax_bits, c, eolbyte, lexptr, lexleft, minrep, maxrep, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 1;
return lasttok = LPAREN;

....
Skipping nonlast addifexit:Priority 4865
At location src/dfa.c:956
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, laststart, parens, backslash, syntax_bits, c, eolbyte, lexptr, lexleft, minrep, maxrep, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 2;
return lasttok = LPAREN;

....
Skipping nonlast addifexit:Priority 4865
At location src/dfa.c:956
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, laststart, parens, backslash, syntax_bits, c, eolbyte, lexptr, lexleft, minrep, maxrep, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 3;
return lasttok = LPAREN;

....
Skipping nonlast addifexit:Priority 4865
At location src/dfa.c:956
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, laststart, parens, backslash, syntax_bits, c, eolbyte, lexptr, lexleft, minrep, maxrep, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 4;
return lasttok = LPAREN;

....
Skipping nonlast addifexit:Priority 4865
At location src/dfa.c:956
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, laststart, parens, backslash, syntax_bits, c, eolbyte, lexptr, lexleft, minrep, maxrep, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 5;
return lasttok = LPAREN;

....
Skipping nonlast addifexit:Priority 4865
At location src/dfa.c:956
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, laststart, parens, backslash, syntax_bits, c, eolbyte, lexptr, lexleft, minrep, maxrep, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 6;
return lasttok = LPAREN;

....
Skipping nonlast addifexit:Priority 4865
At location src/dfa.c:956
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, laststart, parens, backslash, syntax_bits, c, eolbyte, lexptr, lexleft, minrep, maxrep, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 8;
return lasttok = LPAREN;

....
Skipping nonlast addifexit:Priority 4865
At location src/dfa.c:956
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, laststart, parens, backslash, syntax_bits, c, eolbyte, lexptr, lexleft, minrep, maxrep, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 9;
return lasttok = LPAREN;

....
Skipping nonlast addifexit:Priority 4865
At location src/dfa.c:956
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, laststart, parens, backslash, syntax_bits, c, eolbyte, lexptr, lexleft, minrep, maxrep, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 10;
return lasttok = LPAREN;

....
Skipping nonlast addifexit:Priority 4865
At location src/dfa.c:956
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, laststart, parens, backslash, syntax_bits, c, eolbyte, lexptr, lexleft, minrep, maxrep, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 256;
return lasttok = LPAREN;

....
Skipping nonlast addifexit:Priority 4865
At location src/dfa.c:956
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, laststart, parens, backslash, syntax_bits, c, eolbyte, lexptr, lexleft, minrep, maxrep, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 32767;
return lasttok = LPAREN;

....
Skipping nonlast addifexit:Priority 4865
At location src/dfa.c:956
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, laststart, parens, backslash, syntax_bits, c, eolbyte, lexptr, lexleft, minrep, maxrep, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    break;
return lasttok = LPAREN;

....
Skipping nonlast addifexit:Priority 5065
At location src/dfa.c:956
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, laststart, parens, backslash, syntax_bits, c, eolbyte, lexptr, lexleft, minrep, maxrep, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    goto skip;
return lasttok = LPAREN;

....
Skipping nonlast addifexit:Priority 5065
At location src/dfa.c:956
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, laststart, parens, backslash, syntax_bits, c, eolbyte, lexptr, lexleft, minrep, maxrep, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    goto normal_char;
return lasttok = LPAREN;

....
Skipping nonlast:Priority -130
At location src/dfa.c:961
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    goto normal_char;

....
Skipping nonlast:Priority -130
At location src/dfa.c:961
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    goto normal_char;

....
Skipping nonlast:Priority -130
At location src/dfa.c:961
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    goto normal_char;

....
Skipping nonlast:Priority -130
At location src/dfa.c:961
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    goto normal_char;

....
Skipping nonlast:Priority -130
At location src/dfa.c:961
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGLINE;
if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    goto normal_char;

....
Skipping nonlast:Priority -130
At location src/dfa.c:961
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGWORD;
if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    goto normal_char;

....
Skipping nonlast:Priority -130
At location src/dfa.c:961
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDLINE;
if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    goto normal_char;

....
Skipping nonlast:Priority -130
At location src/dfa.c:961
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDWORD;
if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    goto normal_char;

....
Skipping nonlast:Priority -130
At location src/dfa.c:961
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = LIMWORD;
if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    goto normal_char;

....
Skipping nonlast:Priority -130
At location src/dfa.c:961
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = NOTLIMWORD;
if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    goto normal_char;

....
Skipping nonlast:Priority -130
At location src/dfa.c:961
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    laststart = 0;
    return lasttok = BACKREF;
}
if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    goto normal_char;

....
Skipping nonlast:Priority -130
At location src/dfa.c:961
--Src File: src/dfa.c
Fragment 0:
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}
if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    goto normal_char;

....
Skipping nonlast:Priority -130
At location src/dfa.c:961
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    goto normal_char;

....
Skipping nonlast:Priority -130
At location src/dfa.c:961
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    goto normal_char;

....
Skipping nonlast:Priority -130
At location src/dfa.c:961
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    goto normal_char;

....
Skipping nonlast:Priority -130
At location src/dfa.c:961
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    goto normal_char;

....
Skipping nonlast:Priority -130
At location src/dfa.c:961
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3620
At location src/dfa.c:961
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, parens, backslash, laststart, lasttok, eolbyte, c, c2, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return -1;
if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3620
At location src/dfa.c:961
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, parens, backslash, laststart, lasttok, eolbyte, c, c2, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 0;
if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3620
At location src/dfa.c:961
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, parens, backslash, laststart, lasttok, eolbyte, c, c2, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 1;
if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3620
At location src/dfa.c:961
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, parens, backslash, laststart, lasttok, eolbyte, c, c2, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 2;
if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3620
At location src/dfa.c:961
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, parens, backslash, laststart, lasttok, eolbyte, c, c2, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 3;
if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3620
At location src/dfa.c:961
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, parens, backslash, laststart, lasttok, eolbyte, c, c2, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 4;
if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3620
At location src/dfa.c:961
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, parens, backslash, laststart, lasttok, eolbyte, c, c2, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 5;
if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3620
At location src/dfa.c:961
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, parens, backslash, laststart, lasttok, eolbyte, c, c2, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 6;
if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3620
At location src/dfa.c:961
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, parens, backslash, laststart, lasttok, eolbyte, c, c2, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 8;
if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3620
At location src/dfa.c:961
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, parens, backslash, laststart, lasttok, eolbyte, c, c2, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 9;
if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3620
At location src/dfa.c:961
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, parens, backslash, laststart, lasttok, eolbyte, c, c2, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 10;
if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3620
At location src/dfa.c:961
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, parens, backslash, laststart, lasttok, eolbyte, c, c2, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 256;
if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3620
At location src/dfa.c:961
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, parens, backslash, laststart, lasttok, eolbyte, c, c2, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 32767;
if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3620
At location src/dfa.c:961
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, parens, backslash, laststart, lasttok, eolbyte, c, c2, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    break;
if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3820
At location src/dfa.c:961
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, parens, backslash, laststart, lasttok, eolbyte, c, c2, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    goto skip;
if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    goto normal_char;

....
Skipping nonlast addifexit:Priority 3820
At location src/dfa.c:961
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits, parens, backslash, laststart, lasttok, eolbyte, c, c2, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    goto normal_char;
if (parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    goto normal_char;

....
Skipping nonlast:Priority -129
At location src/dfa.c:963
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
--parens;

....
Skipping nonlast:Priority -129
At location src/dfa.c:963
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
--parens;

....
Skipping nonlast:Priority -129
At location src/dfa.c:963
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
--parens;

....
Skipping nonlast:Priority -129
At location src/dfa.c:963
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
--parens;

....
Skipping nonlast:Priority -129
At location src/dfa.c:963
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGLINE;
--parens;

....
Skipping nonlast:Priority -129
At location src/dfa.c:963
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGWORD;
--parens;

....
Skipping nonlast:Priority -129
At location src/dfa.c:963
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDLINE;
--parens;

....
Skipping nonlast:Priority -129
At location src/dfa.c:963
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDWORD;
--parens;

....
Skipping nonlast:Priority -129
At location src/dfa.c:963
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = LIMWORD;
--parens;

....
Skipping nonlast:Priority -129
At location src/dfa.c:963
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = NOTLIMWORD;
--parens;

....
Skipping nonlast:Priority -129
At location src/dfa.c:963
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    laststart = 0;
    return lasttok = BACKREF;
}
--parens;

....
Skipping nonlast:Priority -129
At location src/dfa.c:963
--Src File: src/dfa.c
Fragment 0:
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}
--parens;

....
Skipping nonlast:Priority -129
At location src/dfa.c:963
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
--parens;

....
Skipping nonlast:Priority -129
At location src/dfa.c:963
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
--parens;

....
Skipping nonlast:Priority -129
At location src/dfa.c:963
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
--parens;

....
Skipping nonlast:Priority -129
At location src/dfa.c:963
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
--parens;

....
Skipping nonlast:Priority -129
At location src/dfa.c:963
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
--parens;

....
Skipping nonlast addifexit:Priority 4871
At location src/dfa.c:963
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(parens, laststart, syntax_bits, lasttok, backslash, eolbyte, c2, c, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return -1;
--parens;

....
Skipping nonlast addifexit:Priority 4871
At location src/dfa.c:963
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(parens, laststart, syntax_bits, lasttok, backslash, eolbyte, c2, c, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 0;
--parens;

....
Skipping nonlast addifexit:Priority 4871
At location src/dfa.c:963
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(parens, laststart, syntax_bits, lasttok, backslash, eolbyte, c2, c, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 1;
--parens;

....
Skipping nonlast addifexit:Priority 4871
At location src/dfa.c:963
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(parens, laststart, syntax_bits, lasttok, backslash, eolbyte, c2, c, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 2;
--parens;

....
Skipping nonlast addifexit:Priority 4871
At location src/dfa.c:963
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(parens, laststart, syntax_bits, lasttok, backslash, eolbyte, c2, c, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 3;
--parens;

....
Skipping nonlast addifexit:Priority 4871
At location src/dfa.c:963
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(parens, laststart, syntax_bits, lasttok, backslash, eolbyte, c2, c, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 4;
--parens;

....
Skipping nonlast addifexit:Priority 4871
At location src/dfa.c:963
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(parens, laststart, syntax_bits, lasttok, backslash, eolbyte, c2, c, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 5;
--parens;

....
Skipping nonlast addifexit:Priority 4871
At location src/dfa.c:963
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(parens, laststart, syntax_bits, lasttok, backslash, eolbyte, c2, c, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 6;
--parens;

....
Skipping nonlast addifexit:Priority 4871
At location src/dfa.c:963
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(parens, laststart, syntax_bits, lasttok, backslash, eolbyte, c2, c, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 8;
--parens;

....
Skipping nonlast addifexit:Priority 4871
At location src/dfa.c:963
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(parens, laststart, syntax_bits, lasttok, backslash, eolbyte, c2, c, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 9;
--parens;

....
Skipping nonlast addifexit:Priority 4871
At location src/dfa.c:963
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(parens, laststart, syntax_bits, lasttok, backslash, eolbyte, c2, c, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 10;
--parens;

....
Skipping nonlast addifexit:Priority 4871
At location src/dfa.c:963
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(parens, laststart, syntax_bits, lasttok, backslash, eolbyte, c2, c, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 256;
--parens;

....
Skipping nonlast addifexit:Priority 4871
At location src/dfa.c:963
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(parens, laststart, syntax_bits, lasttok, backslash, eolbyte, c2, c, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 32767;
--parens;

....
Skipping nonlast addifexit:Priority 4871
At location src/dfa.c:963
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(parens, laststart, syntax_bits, lasttok, backslash, eolbyte, c2, c, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    break;
--parens;

....
Skipping nonlast addifexit:Priority 5071
At location src/dfa.c:963
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(parens, laststart, syntax_bits, lasttok, backslash, eolbyte, c2, c, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    goto skip;
--parens;

....
Skipping nonlast addifexit:Priority 5071
At location src/dfa.c:963
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(parens, laststart, syntax_bits, lasttok, backslash, eolbyte, c2, c, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    goto normal_char;
--parens;

....
Skipping nonlast:Priority -128
At location src/dfa.c:964
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
laststart = 0;

....
Skipping nonlast:Priority -128
At location src/dfa.c:964
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
laststart = 0;

....
Skipping nonlast:Priority -128
At location src/dfa.c:964
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
laststart = 0;

....
Skipping nonlast:Priority -128
At location src/dfa.c:964
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
laststart = 0;

....
Skipping nonlast:Priority -128
At location src/dfa.c:964
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGLINE;
laststart = 0;

....
Skipping nonlast:Priority -128
At location src/dfa.c:964
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGWORD;
laststart = 0;

....
Skipping nonlast:Priority -128
At location src/dfa.c:964
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDLINE;
laststart = 0;

....
Skipping nonlast:Priority -128
At location src/dfa.c:964
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDWORD;
laststart = 0;

....
Skipping nonlast:Priority -128
At location src/dfa.c:964
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = LIMWORD;
laststart = 0;

....
Skipping nonlast:Priority -128
At location src/dfa.c:964
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = NOTLIMWORD;
laststart = 0;

....
Skipping nonlast:Priority -128
At location src/dfa.c:964
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    laststart = 0;
    return lasttok = BACKREF;
}
laststart = 0;

....
Skipping nonlast:Priority -128
At location src/dfa.c:964
--Src File: src/dfa.c
Fragment 0:
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}
laststart = 0;

....
Skipping nonlast:Priority -128
At location src/dfa.c:964
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
laststart = 0;

....
Skipping nonlast:Priority -128
At location src/dfa.c:964
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
laststart = 0;

....
Skipping nonlast:Priority -128
At location src/dfa.c:964
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
laststart = 0;

....
Skipping nonlast:Priority -128
At location src/dfa.c:964
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
laststart = 0;

....
Skipping nonlast:Priority -128
At location src/dfa.c:964
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
laststart = 0;

....
Skipping nonlast addifexit:Priority 4872
At location src/dfa.c:964
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, lasttok, parens, syntax_bits, backslash, eolbyte, c2, c, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return -1;
laststart = 0;

....
Skipping nonlast addifexit:Priority 4872
At location src/dfa.c:964
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, lasttok, parens, syntax_bits, backslash, eolbyte, c2, c, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 0;
laststart = 0;

....
Skipping nonlast addifexit:Priority 4872
At location src/dfa.c:964
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, lasttok, parens, syntax_bits, backslash, eolbyte, c2, c, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 1;
laststart = 0;

....
Skipping nonlast addifexit:Priority 4872
At location src/dfa.c:964
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, lasttok, parens, syntax_bits, backslash, eolbyte, c2, c, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 2;
laststart = 0;

....
Skipping nonlast addifexit:Priority 4872
At location src/dfa.c:964
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, lasttok, parens, syntax_bits, backslash, eolbyte, c2, c, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 3;
laststart = 0;

....
Skipping nonlast addifexit:Priority 4872
At location src/dfa.c:964
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, lasttok, parens, syntax_bits, backslash, eolbyte, c2, c, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 4;
laststart = 0;

....
Skipping nonlast addifexit:Priority 4872
At location src/dfa.c:964
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, lasttok, parens, syntax_bits, backslash, eolbyte, c2, c, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 5;
laststart = 0;

....
Skipping nonlast addifexit:Priority 4872
At location src/dfa.c:964
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, lasttok, parens, syntax_bits, backslash, eolbyte, c2, c, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 6;
laststart = 0;

....
Skipping nonlast addifexit:Priority 4872
At location src/dfa.c:964
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, lasttok, parens, syntax_bits, backslash, eolbyte, c2, c, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 8;
laststart = 0;

....
Skipping nonlast addifexit:Priority 4872
At location src/dfa.c:964
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, lasttok, parens, syntax_bits, backslash, eolbyte, c2, c, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 9;
laststart = 0;

....
Skipping nonlast addifexit:Priority 4872
At location src/dfa.c:964
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, lasttok, parens, syntax_bits, backslash, eolbyte, c2, c, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 10;
laststart = 0;

....
Skipping nonlast addifexit:Priority 4872
At location src/dfa.c:964
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, lasttok, parens, syntax_bits, backslash, eolbyte, c2, c, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 256;
laststart = 0;

....
Skipping nonlast addifexit:Priority 4872
At location src/dfa.c:964
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, lasttok, parens, syntax_bits, backslash, eolbyte, c2, c, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 32767;
laststart = 0;

....
Skipping nonlast addifexit:Priority 4872
At location src/dfa.c:964
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, lasttok, parens, syntax_bits, backslash, eolbyte, c2, c, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    break;
laststart = 0;

....
Skipping nonlast addifexit:Priority 5072
At location src/dfa.c:964
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, lasttok, parens, syntax_bits, backslash, eolbyte, c2, c, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    goto skip;
laststart = 0;

....
Skipping nonlast addifexit:Priority 5072
At location src/dfa.c:964
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, lasttok, parens, syntax_bits, backslash, eolbyte, c2, c, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    goto normal_char;
laststart = 0;

....
Skipping nonlast:Priority -127
At location src/dfa.c:965
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
return lasttok = RPAREN;

....
Skipping nonlast:Priority -127
At location src/dfa.c:965
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
return lasttok = RPAREN;

....
Skipping nonlast:Priority -127
At location src/dfa.c:965
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
return lasttok = RPAREN;

....
Skipping nonlast:Priority -127
At location src/dfa.c:965
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
return lasttok = RPAREN;

....
Skipping nonlast:Priority -127
At location src/dfa.c:965
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGLINE;
return lasttok = RPAREN;

....
Skipping nonlast:Priority -127
At location src/dfa.c:965
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGWORD;
return lasttok = RPAREN;

....
Skipping nonlast:Priority -127
At location src/dfa.c:965
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDLINE;
return lasttok = RPAREN;

....
Skipping nonlast:Priority -127
At location src/dfa.c:965
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDWORD;
return lasttok = RPAREN;

....
Skipping nonlast:Priority -127
At location src/dfa.c:965
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = LIMWORD;
return lasttok = RPAREN;

....
Skipping nonlast:Priority -127
At location src/dfa.c:965
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = NOTLIMWORD;
return lasttok = RPAREN;

....
Skipping nonlast:Priority -127
At location src/dfa.c:965
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    laststart = 0;
    return lasttok = BACKREF;
}
return lasttok = RPAREN;

....
Skipping nonlast:Priority -127
At location src/dfa.c:965
--Src File: src/dfa.c
Fragment 0:
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}
return lasttok = RPAREN;

....
Skipping nonlast:Priority -127
At location src/dfa.c:965
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
return lasttok = RPAREN;

....
Skipping nonlast:Priority -127
At location src/dfa.c:965
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
return lasttok = RPAREN;

....
Skipping nonlast:Priority -127
At location src/dfa.c:965
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
return lasttok = RPAREN;

....
Skipping nonlast:Priority -127
At location src/dfa.c:965
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
return lasttok = RPAREN;

....
Skipping nonlast:Priority -127
At location src/dfa.c:965
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
return lasttok = RPAREN;

....
Skipping nonlast addifexit:Priority 4873
At location src/dfa.c:965
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, laststart, parens, backslash, syntax_bits, eolbyte, c2, c, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return -1;
return lasttok = RPAREN;

....
Skipping nonlast addifexit:Priority 4873
At location src/dfa.c:965
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, laststart, parens, backslash, syntax_bits, eolbyte, c2, c, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 0;
return lasttok = RPAREN;

....
Skipping nonlast addifexit:Priority 4873
At location src/dfa.c:965
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, laststart, parens, backslash, syntax_bits, eolbyte, c2, c, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 1;
return lasttok = RPAREN;

....
Skipping nonlast addifexit:Priority 4873
At location src/dfa.c:965
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, laststart, parens, backslash, syntax_bits, eolbyte, c2, c, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 2;
return lasttok = RPAREN;

....
Skipping nonlast addifexit:Priority 4873
At location src/dfa.c:965
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, laststart, parens, backslash, syntax_bits, eolbyte, c2, c, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 3;
return lasttok = RPAREN;

....
Skipping nonlast addifexit:Priority 4873
At location src/dfa.c:965
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, laststart, parens, backslash, syntax_bits, eolbyte, c2, c, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 4;
return lasttok = RPAREN;

....
Skipping nonlast addifexit:Priority 4873
At location src/dfa.c:965
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, laststart, parens, backslash, syntax_bits, eolbyte, c2, c, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 5;
return lasttok = RPAREN;

....
Skipping nonlast addifexit:Priority 4873
At location src/dfa.c:965
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, laststart, parens, backslash, syntax_bits, eolbyte, c2, c, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 6;
return lasttok = RPAREN;

....
Skipping nonlast addifexit:Priority 4873
At location src/dfa.c:965
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, laststart, parens, backslash, syntax_bits, eolbyte, c2, c, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 8;
return lasttok = RPAREN;

....
Skipping nonlast addifexit:Priority 4873
At location src/dfa.c:965
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, laststart, parens, backslash, syntax_bits, eolbyte, c2, c, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 9;
return lasttok = RPAREN;

....
Skipping nonlast addifexit:Priority 4873
At location src/dfa.c:965
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, laststart, parens, backslash, syntax_bits, eolbyte, c2, c, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 10;
return lasttok = RPAREN;

....
Skipping nonlast addifexit:Priority 4873
At location src/dfa.c:965
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, laststart, parens, backslash, syntax_bits, eolbyte, c2, c, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 256;
return lasttok = RPAREN;

....
Skipping nonlast addifexit:Priority 4873
At location src/dfa.c:965
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, laststart, parens, backslash, syntax_bits, eolbyte, c2, c, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    return 32767;
return lasttok = RPAREN;

....
Skipping nonlast addifexit:Priority 4873
At location src/dfa.c:965
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, laststart, parens, backslash, syntax_bits, eolbyte, c2, c, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    break;
return lasttok = RPAREN;

....
Skipping nonlast addifexit:Priority 5073
At location src/dfa.c:965
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, laststart, parens, backslash, syntax_bits, eolbyte, c2, c, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    goto skip;
return lasttok = RPAREN;

....
Skipping nonlast addifexit:Priority 5073
At location src/dfa.c:965
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, laststart, parens, backslash, syntax_bits, eolbyte, c2, c, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    goto normal_char;
return lasttok = RPAREN;

....
Skipping nonlast:Priority -400
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}

....
Skipping nonlast:Priority -400
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}

....
Skipping nonlast:Priority -400
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}

....
Skipping nonlast:Priority -400
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}

....
Skipping nonlast:Priority -400
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGLINE;
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}

....
Skipping nonlast:Priority -400
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = BEGWORD;
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}

....
Skipping nonlast:Priority -400
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDLINE;
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}

....
Skipping nonlast:Priority -400
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = ENDWORD;
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}

....
Skipping nonlast:Priority -400
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = LIMWORD;
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}

....
Skipping nonlast:Priority -400
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & (((((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return lasttok = NOTLIMWORD;
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}

....
Skipping nonlast:Priority -400
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if (backslash && !(syntax_bits & ((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    laststart = 0;
    return lasttok = BACKREF;
}
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}

....
Skipping nonlast:Priority -400
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}

....
Skipping nonlast:Priority -400
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}

....
Skipping nonlast:Priority -400
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}

....
Skipping nonlast:Priority -400
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}

....
Skipping nonlast:Priority -400
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}

....
Skipping nonlast:Priority -400
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}

....
Skipping nonlast addifexit:Priority 3350
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, case_fold, laststart, lasttok, eolbyte, syntax_bits, invert, c1, c2, hard_LC_COLLATE, lexptr, lexleft, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return -1;
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}

....
Skipping nonlast addifexit:Priority 3350
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, case_fold, laststart, lasttok, eolbyte, syntax_bits, invert, c1, c2, hard_LC_COLLATE, lexptr, lexleft, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 0;
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}

....
Skipping nonlast addifexit:Priority 3350
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, case_fold, laststart, lasttok, eolbyte, syntax_bits, invert, c1, c2, hard_LC_COLLATE, lexptr, lexleft, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 1;
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}

....
Skipping nonlast addifexit:Priority 3350
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, case_fold, laststart, lasttok, eolbyte, syntax_bits, invert, c1, c2, hard_LC_COLLATE, lexptr, lexleft, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 2;
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}

....
Skipping nonlast addifexit:Priority 3350
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, case_fold, laststart, lasttok, eolbyte, syntax_bits, invert, c1, c2, hard_LC_COLLATE, lexptr, lexleft, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 3;
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}

....
Skipping nonlast addifexit:Priority 3350
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, case_fold, laststart, lasttok, eolbyte, syntax_bits, invert, c1, c2, hard_LC_COLLATE, lexptr, lexleft, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 4;
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}

....
Skipping nonlast addifexit:Priority 3350
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, case_fold, laststart, lasttok, eolbyte, syntax_bits, invert, c1, c2, hard_LC_COLLATE, lexptr, lexleft, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 5;
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}

....
Skipping nonlast addifexit:Priority 3350
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, case_fold, laststart, lasttok, eolbyte, syntax_bits, invert, c1, c2, hard_LC_COLLATE, lexptr, lexleft, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 6;
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}

....
Skipping nonlast addifexit:Priority 3350
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, case_fold, laststart, lasttok, eolbyte, syntax_bits, invert, c1, c2, hard_LC_COLLATE, lexptr, lexleft, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 8;
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}

....
Skipping nonlast addifexit:Priority 3350
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, case_fold, laststart, lasttok, eolbyte, syntax_bits, invert, c1, c2, hard_LC_COLLATE, lexptr, lexleft, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 9;
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}

....
Skipping nonlast addifexit:Priority 3350
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, case_fold, laststart, lasttok, eolbyte, syntax_bits, invert, c1, c2, hard_LC_COLLATE, lexptr, lexleft, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 10;
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}

....
Skipping nonlast addifexit:Priority 3350
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, case_fold, laststart, lasttok, eolbyte, syntax_bits, invert, c1, c2, hard_LC_COLLATE, lexptr, lexleft, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 256;
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}

....
Skipping nonlast addifexit:Priority 3350
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, case_fold, laststart, lasttok, eolbyte, syntax_bits, invert, c1, c2, hard_LC_COLLATE, lexptr, lexleft, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 32767;
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}

....
Skipping nonlast addifexit:Priority 3350
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, case_fold, laststart, lasttok, eolbyte, syntax_bits, invert, c1, c2, hard_LC_COLLATE, lexptr, lexleft, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    break;
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}

....
Skipping nonlast addifexit:Priority 3550
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, case_fold, laststart, lasttok, eolbyte, syntax_bits, invert, c1, c2, hard_LC_COLLATE, lexptr, lexleft, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    goto skip;
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}

....
Skipping nonlast addifexit:Priority 3550
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, case_fold, laststart, lasttok, eolbyte, syntax_bits, invert, c1, c2, hard_LC_COLLATE, lexptr, lexleft, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    goto normal_char;
if (case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}

....
Skipping returnreturn addifexit:Priority 4601
At location src/dfa.c:1115
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lasttok, case_fold, laststart, eolbyte, syntax_bits, invert, c1, c2, hard_LC_COLLATE, lexptr, lexleft, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return -1;
return lasttok = c;

....
Skipping returnreturn addifexit:Priority 4601
At location src/dfa.c:1115
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lasttok, case_fold, laststart, eolbyte, syntax_bits, invert, c1, c2, hard_LC_COLLATE, lexptr, lexleft, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 0;
return lasttok = c;

....
Skipping returnreturn addifexit:Priority 4601
At location src/dfa.c:1115
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lasttok, case_fold, laststart, eolbyte, syntax_bits, invert, c1, c2, hard_LC_COLLATE, lexptr, lexleft, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 1;
return lasttok = c;

....
Skipping returnreturn addifexit:Priority 4601
At location src/dfa.c:1115
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lasttok, case_fold, laststart, eolbyte, syntax_bits, invert, c1, c2, hard_LC_COLLATE, lexptr, lexleft, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 2;
return lasttok = c;

....
Skipping returnreturn addifexit:Priority 4601
At location src/dfa.c:1115
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lasttok, case_fold, laststart, eolbyte, syntax_bits, invert, c1, c2, hard_LC_COLLATE, lexptr, lexleft, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 3;
return lasttok = c;

....
Skipping returnreturn addifexit:Priority 4601
At location src/dfa.c:1115
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lasttok, case_fold, laststart, eolbyte, syntax_bits, invert, c1, c2, hard_LC_COLLATE, lexptr, lexleft, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 4;
return lasttok = c;

....
Skipping returnreturn addifexit:Priority 4601
At location src/dfa.c:1115
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lasttok, case_fold, laststart, eolbyte, syntax_bits, invert, c1, c2, hard_LC_COLLATE, lexptr, lexleft, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 5;
return lasttok = c;

....
Skipping returnreturn addifexit:Priority 4601
At location src/dfa.c:1115
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lasttok, case_fold, laststart, eolbyte, syntax_bits, invert, c1, c2, hard_LC_COLLATE, lexptr, lexleft, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 6;
return lasttok = c;

....
Skipping returnreturn addifexit:Priority 4601
At location src/dfa.c:1115
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lasttok, case_fold, laststart, eolbyte, syntax_bits, invert, c1, c2, hard_LC_COLLATE, lexptr, lexleft, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 8;
return lasttok = c;

....
Skipping returnreturn addifexit:Priority 4601
At location src/dfa.c:1115
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lasttok, case_fold, laststart, eolbyte, syntax_bits, invert, c1, c2, hard_LC_COLLATE, lexptr, lexleft, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 9;
return lasttok = c;

....
Skipping returnreturn addifexit:Priority 4601
At location src/dfa.c:1115
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lasttok, case_fold, laststart, eolbyte, syntax_bits, invert, c1, c2, hard_LC_COLLATE, lexptr, lexleft, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 10;
return lasttok = c;

....
Skipping returnreturn addifexit:Priority 4601
At location src/dfa.c:1115
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lasttok, case_fold, laststart, eolbyte, syntax_bits, invert, c1, c2, hard_LC_COLLATE, lexptr, lexleft, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 256;
return lasttok = c;

....
Skipping returnreturn addifexit:Priority 4601
At location src/dfa.c:1115
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lasttok, case_fold, laststart, eolbyte, syntax_bits, invert, c1, c2, hard_LC_COLLATE, lexptr, lexleft, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    return 32767;
return lasttok = c;

....
Skipping returnreturn addifexit:Priority 4601
At location src/dfa.c:1115
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lasttok, case_fold, laststart, eolbyte, syntax_bits, invert, c1, c2, hard_LC_COLLATE, lexptr, lexleft, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    break;
return lasttok = c;

....
Skipping returnreturn addifexit:Priority 4801
At location src/dfa.c:1115
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lasttok, case_fold, laststart, eolbyte, syntax_bits, invert, c1, c2, hard_LC_COLLATE, lexptr, lexleft, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    goto skip;
return lasttok = c;

....
Skipping returnreturn addifexit:Priority 4801
At location src/dfa.c:1115
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(c, lasttok, case_fold, laststart, eolbyte, syntax_bits, invert, c1, c2, hard_LC_COLLATE, lexptr, lexleft, backslash, parens, minrep, maxrep, cur_mb_index, i)))
    goto normal_char;
return lasttok = c;

....
Skipping nonlast:Priority 7136
At location src/dfa.c:1140
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if ((__ctype_get_mb_cur_max()) > 1) {
    if ((dfa->tindex) >= (dfa->nmultibyte_prop)) {
        do 
            (dfa->nmultibyte_prop) *= 2;
        while ((dfa->tindex) >= (dfa->nmultibyte_prop));
        ((dfa->multibyte_prop) = xrealloc((ptr_t)(dfa->multibyte_prop), (dfa->nmultibyte_prop) * sizeof(int)));
    }
    ;
    if (t == MBCSET)
        dfa->multibyte_prop[dfa->tindex] = ((dfa->nmbcsets - 1) << 2) + 3;
    else if (t < (1 << 8))
        dfa->multibyte_prop[dfa->tindex] = (cur_mb_len == 1) ? 3 : (((cur_mb_index == 1) ? 1 : 0) + ((cur_mb_index == cur_mb_len) ? 2 : 0));
    else
        dfa->multibyte_prop[dfa->tindex] = 3;
}

....
Skipping nonlast:Priority 7136
At location src/dfa.c:1140
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if ((__ctype_get_mb_cur_max()) > 1) {
    if ((dfa->tindex) >= (dfa->nmultibyte_prop)) {
        do 
            (dfa->nmultibyte_prop) *= 2;
        while ((dfa->tindex) >= (dfa->nmultibyte_prop));
        ((dfa->multibyte_prop) = xrealloc((ptr_t)(dfa->multibyte_prop), (dfa->nmultibyte_prop) * sizeof(int)));
    }
    ;
    if (t == MBCSET)
        dfa->multibyte_prop[dfa->tindex] = ((dfa->nmbcsets - 1) << 2) + 3;
    else if (t < (1 << 8))
        dfa->multibyte_prop[dfa->tindex] = (cur_mb_len == 1) ? 3 : (((cur_mb_index == 1) ? 1 : 0) + ((cur_mb_index == cur_mb_len) ? 2 : 0));
    else
        dfa->multibyte_prop[dfa->tindex] = 3;
}

....
Skipping nonlast:Priority 7136
At location src/dfa.c:1140
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
if ((__ctype_get_mb_cur_max()) > 1) {
    if ((dfa->tindex) >= (dfa->nmultibyte_prop)) {
        do 
            (dfa->nmultibyte_prop) *= 2;
        while ((dfa->tindex) >= (dfa->nmultibyte_prop));
        ((dfa->multibyte_prop) = xrealloc((ptr_t)(dfa->multibyte_prop), (dfa->nmultibyte_prop) * sizeof(int)));
    }
    ;
    if (t == MBCSET)
        dfa->multibyte_prop[dfa->tindex] = ((dfa->nmbcsets - 1) << 2) + 3;
    else if (t < (1 << 8))
        dfa->multibyte_prop[dfa->tindex] = (cur_mb_len == 1) ? 3 : (((cur_mb_index == 1) ? 1 : 0) + ((cur_mb_index == cur_mb_len) ? 2 : 0));
    else
        dfa->multibyte_prop[dfa->tindex] = 3;
}

....
Skipping nonlast:Priority 7136
At location src/dfa.c:1140
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
if ((__ctype_get_mb_cur_max()) > 1) {
    if ((dfa->tindex) >= (dfa->nmultibyte_prop)) {
        do 
            (dfa->nmultibyte_prop) *= 2;
        while ((dfa->tindex) >= (dfa->nmultibyte_prop));
        ((dfa->multibyte_prop) = xrealloc((ptr_t)(dfa->multibyte_prop), (dfa->nmultibyte_prop) * sizeof(int)));
    }
    ;
    if (t == MBCSET)
        dfa->multibyte_prop[dfa->tindex] = ((dfa->nmbcsets - 1) << 2) + 3;
    else if (t < (1 << 8))
        dfa->multibyte_prop[dfa->tindex] = (cur_mb_len == 1) ? 3 : (((cur_mb_index == 1) ? 1 : 0) + ((cur_mb_index == cur_mb_len) ? 2 : 0));
    else
        dfa->multibyte_prop[dfa->tindex] = 3;
}

....
Skipping nonlast:Priority 7136
At location src/dfa.c:1140
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
if ((__ctype_get_mb_cur_max()) > 1) {
    if ((dfa->tindex) >= (dfa->nmultibyte_prop)) {
        do 
            (dfa->nmultibyte_prop) *= 2;
        while ((dfa->tindex) >= (dfa->nmultibyte_prop));
        ((dfa->multibyte_prop) = xrealloc((ptr_t)(dfa->multibyte_prop), (dfa->nmultibyte_prop) * sizeof(int)));
    }
    ;
    if (t == MBCSET)
        dfa->multibyte_prop[dfa->tindex] = ((dfa->nmbcsets - 1) << 2) + 3;
    else if (t < (1 << 8))
        dfa->multibyte_prop[dfa->tindex] = (cur_mb_len == 1) ? 3 : (((cur_mb_index == 1) ? 1 : 0) + ((cur_mb_index == cur_mb_len) ? 2 : 0));
    else
        dfa->multibyte_prop[dfa->tindex] = 3;
}

....
Skipping nonlast:Priority 7136
At location src/dfa.c:1140
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
if ((__ctype_get_mb_cur_max()) > 1) {
    if ((dfa->tindex) >= (dfa->nmultibyte_prop)) {
        do 
            (dfa->nmultibyte_prop) *= 2;
        while ((dfa->tindex) >= (dfa->nmultibyte_prop));
        ((dfa->multibyte_prop) = xrealloc((ptr_t)(dfa->multibyte_prop), (dfa->nmultibyte_prop) * sizeof(int)));
    }
    ;
    if (t == MBCSET)
        dfa->multibyte_prop[dfa->tindex] = ((dfa->nmbcsets - 1) << 2) + 3;
    else if (t < (1 << 8))
        dfa->multibyte_prop[dfa->tindex] = (cur_mb_len == 1) ? 3 : (((cur_mb_index == 1) ? 1 : 0) + ((cur_mb_index == cur_mb_len) ? 2 : 0));
    else
        dfa->multibyte_prop[dfa->tindex] = 3;
}

....
Skipping nonlast:Priority 7136
At location src/dfa.c:1140
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if ((__ctype_get_mb_cur_max()) > 1) {
    if ((dfa->tindex) >= (dfa->nmultibyte_prop)) {
        do 
            (dfa->nmultibyte_prop) *= 2;
        while ((dfa->tindex) >= (dfa->nmultibyte_prop));
        ((dfa->multibyte_prop) = xrealloc((ptr_t)(dfa->multibyte_prop), (dfa->nmultibyte_prop) * sizeof(int)));
    }
    ;
    if (t == MBCSET)
        dfa->multibyte_prop[dfa->tindex] = ((dfa->nmbcsets - 1) << 2) + 3;
    else if (t < (1 << 8))
        dfa->multibyte_prop[dfa->tindex] = (cur_mb_len == 1) ? 3 : (((cur_mb_index == 1) ? 1 : 0) + ((cur_mb_index == cur_mb_len) ? 2 : 0));
    else
        dfa->multibyte_prop[dfa->tindex] = 3;
}

....
Skipping nonlast:Priority 7136
At location src/dfa.c:1140
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if ((__ctype_get_mb_cur_max()) > 1) {
    if ((dfa->tindex) >= (dfa->nmultibyte_prop)) {
        do 
            (dfa->nmultibyte_prop) *= 2;
        while ((dfa->tindex) >= (dfa->nmultibyte_prop));
        ((dfa->multibyte_prop) = xrealloc((ptr_t)(dfa->multibyte_prop), (dfa->nmultibyte_prop) * sizeof(int)));
    }
    ;
    if (t == MBCSET)
        dfa->multibyte_prop[dfa->tindex] = ((dfa->nmbcsets - 1) << 2) + 3;
    else if (t < (1 << 8))
        dfa->multibyte_prop[dfa->tindex] = (cur_mb_len == 1) ? 3 : (((cur_mb_index == 1) ? 1 : 0) + ((cur_mb_index == cur_mb_len) ? 2 : 0));
    else
        dfa->multibyte_prop[dfa->tindex] = 3;
}

....
Skipping nonlast:Priority 7136
At location src/dfa.c:1140
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if ((__ctype_get_mb_cur_max()) > 1) {
    if ((dfa->tindex) >= (dfa->nmultibyte_prop)) {
        do 
            (dfa->nmultibyte_prop) *= 2;
        while ((dfa->tindex) >= (dfa->nmultibyte_prop));
        ((dfa->multibyte_prop) = xrealloc((ptr_t)(dfa->multibyte_prop), (dfa->nmultibyte_prop) * sizeof(int)));
    }
    ;
    if (t == MBCSET)
        dfa->multibyte_prop[dfa->tindex] = ((dfa->nmbcsets - 1) << 2) + 3;
    else if (t < (1 << 8))
        dfa->multibyte_prop[dfa->tindex] = (cur_mb_len == 1) ? 3 : (((cur_mb_index == 1) ? 1 : 0) + ((cur_mb_index == cur_mb_len) ? 2 : 0));
    else
        dfa->multibyte_prop[dfa->tindex] = 3;
}

....
Skipping nonlast addifexit:Priority 10886
At location src/dfa.c:1140
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(dfa, t, cur_mb_len, cur_mb_index, depth)))
    return;
if ((__ctype_get_mb_cur_max()) > 1) {
    if ((dfa->tindex) >= (dfa->nmultibyte_prop)) {
        do 
            (dfa->nmultibyte_prop) *= 2;
        while ((dfa->tindex) >= (dfa->nmultibyte_prop));
        ((dfa->multibyte_prop) = xrealloc((ptr_t)(dfa->multibyte_prop), (dfa->nmultibyte_prop) * sizeof(int)));
    }
    ;
    if (t == MBCSET)
        dfa->multibyte_prop[dfa->tindex] = ((dfa->nmbcsets - 1) << 2) + 3;
    else if (t < (1 << 8))
        dfa->multibyte_prop[dfa->tindex] = (cur_mb_len == 1) ? 3 : (((cur_mb_index == 1) ? 1 : 0) + ((cur_mb_index == cur_mb_len) ? 2 : 0));
    else
        dfa->multibyte_prop[dfa->tindex] = 3;
}

....
Skipping nonlast:Priority 4994
At location src/dfa.c:1142
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if ((dfa->tindex) >= (dfa->nmultibyte_prop)) {
    do 
        (dfa->nmultibyte_prop) *= 2;
    while ((dfa->tindex) >= (dfa->nmultibyte_prop));
    ((dfa->multibyte_prop) = xrealloc((ptr_t)(dfa->multibyte_prop), (dfa->nmultibyte_prop) * sizeof(int)));
}

....
Skipping nonlast:Priority 4994
At location src/dfa.c:1142
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if ((dfa->tindex) >= (dfa->nmultibyte_prop)) {
    do 
        (dfa->nmultibyte_prop) *= 2;
    while ((dfa->tindex) >= (dfa->nmultibyte_prop));
    ((dfa->multibyte_prop) = xrealloc((ptr_t)(dfa->multibyte_prop), (dfa->nmultibyte_prop) * sizeof(int)));
}

....
Skipping nonlast:Priority 4994
At location src/dfa.c:1142
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
if ((dfa->tindex) >= (dfa->nmultibyte_prop)) {
    do 
        (dfa->nmultibyte_prop) *= 2;
    while ((dfa->tindex) >= (dfa->nmultibyte_prop));
    ((dfa->multibyte_prop) = xrealloc((ptr_t)(dfa->multibyte_prop), (dfa->nmultibyte_prop) * sizeof(int)));
}

....
Skipping nonlast:Priority 4994
At location src/dfa.c:1142
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
if ((dfa->tindex) >= (dfa->nmultibyte_prop)) {
    do 
        (dfa->nmultibyte_prop) *= 2;
    while ((dfa->tindex) >= (dfa->nmultibyte_prop));
    ((dfa->multibyte_prop) = xrealloc((ptr_t)(dfa->multibyte_prop), (dfa->nmultibyte_prop) * sizeof(int)));
}

....
Skipping nonlast:Priority 4994
At location src/dfa.c:1142
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
if ((dfa->tindex) >= (dfa->nmultibyte_prop)) {
    do 
        (dfa->nmultibyte_prop) *= 2;
    while ((dfa->tindex) >= (dfa->nmultibyte_prop));
    ((dfa->multibyte_prop) = xrealloc((ptr_t)(dfa->multibyte_prop), (dfa->nmultibyte_prop) * sizeof(int)));
}

....
Skipping nonlast:Priority 4994
At location src/dfa.c:1142
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
if ((dfa->tindex) >= (dfa->nmultibyte_prop)) {
    do 
        (dfa->nmultibyte_prop) *= 2;
    while ((dfa->tindex) >= (dfa->nmultibyte_prop));
    ((dfa->multibyte_prop) = xrealloc((ptr_t)(dfa->multibyte_prop), (dfa->nmultibyte_prop) * sizeof(int)));
}

....
Skipping nonlast:Priority 4994
At location src/dfa.c:1142
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if ((dfa->tindex) >= (dfa->nmultibyte_prop)) {
    do 
        (dfa->nmultibyte_prop) *= 2;
    while ((dfa->tindex) >= (dfa->nmultibyte_prop));
    ((dfa->multibyte_prop) = xrealloc((ptr_t)(dfa->multibyte_prop), (dfa->nmultibyte_prop) * sizeof(int)));
}

....
Skipping nonlast:Priority 4994
At location src/dfa.c:1142
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if ((dfa->tindex) >= (dfa->nmultibyte_prop)) {
    do 
        (dfa->nmultibyte_prop) *= 2;
    while ((dfa->tindex) >= (dfa->nmultibyte_prop));
    ((dfa->multibyte_prop) = xrealloc((ptr_t)(dfa->multibyte_prop), (dfa->nmultibyte_prop) * sizeof(int)));
}

....
Skipping nonlast:Priority 4994
At location src/dfa.c:1142
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if ((dfa->tindex) >= (dfa->nmultibyte_prop)) {
    do 
        (dfa->nmultibyte_prop) *= 2;
    while ((dfa->tindex) >= (dfa->nmultibyte_prop));
    ((dfa->multibyte_prop) = xrealloc((ptr_t)(dfa->multibyte_prop), (dfa->nmultibyte_prop) * sizeof(int)));
}

....
Skipping nonlast addifexit:Priority 8744
At location src/dfa.c:1142
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(dfa, dfa->tindex, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->tindex, dfa->nmultibyte_prop, dfa->multibyte_prop, t, dfa->nmbcsets, dfa->nmbcsets, cur_mb_len, cur_mb_index, dfa->tokens, dfa->talloc, dfa->tokens, dfa->talloc, depth, dfa->nleaves, dfa->nleaves, dfa->depth, dfa->depth, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts)))
    return;
if ((dfa->tindex) >= (dfa->nmultibyte_prop)) {
    do 
        (dfa->nmultibyte_prop) *= 2;
    while ((dfa->tindex) >= (dfa->nmultibyte_prop));
    ((dfa->multibyte_prop) = xrealloc((ptr_t)(dfa->multibyte_prop), (dfa->nmultibyte_prop) * sizeof(int)));
}

....
Skipping isstmt addifexit:Priority 3748
At location src/dfa.c:1145
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(t, dfa, dfa->tindex, dfa->multibyte_prop, dfa->nmbcsets, dfa->tindex, dfa->multibyte_prop, dfa->nmbcsets, dfa->nmultibyte_prop, dfa->nmultibyte_prop, cur_mb_len, cur_mb_index, dfa->tokens, dfa->talloc, dfa->tokens, dfa->talloc, depth, dfa->nleaves, dfa->nleaves, dfa->depth, dfa->depth, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts)))
    return;
if (t == MBCSET)
    dfa->multibyte_prop[dfa->tindex] = ((dfa->nmbcsets - 1) << 2) + 3;
else if (t < (1 << 8))
    dfa->multibyte_prop[dfa->tindex] = (cur_mb_len == 1) ? 3 : (((cur_mb_index == 1) ? 1 : 0) + ((cur_mb_index == cur_mb_len) ? 2 : 0));
else
    dfa->multibyte_prop[dfa->tindex] = 3;

....
Skipping nonlast:Priority -1
At location src/dfa.c:1147
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    if (t < (1 << 8))
        dfa->multibyte_prop[dfa->tindex] = (cur_mb_len == 1) ? 3 : (((cur_mb_index == 1) ? 1 : 0) + ((cur_mb_index == cur_mb_len) ? 2 : 0));
    else
        dfa->multibyte_prop[dfa->tindex] = 3;
}

....
Skipping nonlast:Priority -1
At location src/dfa.c:1147
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    if (t < (1 << 8))
        dfa->multibyte_prop[dfa->tindex] = (cur_mb_len == 1) ? 3 : (((cur_mb_index == 1) ? 1 : 0) + ((cur_mb_index == cur_mb_len) ? 2 : 0));
    else
        dfa->multibyte_prop[dfa->tindex] = 3;
}

....
Skipping nonlast:Priority -1
At location src/dfa.c:1147
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        parse_bracket_exp_mb();
        return lasttok = MBCSET;
    }
    if (t < (1 << 8))
        dfa->multibyte_prop[dfa->tindex] = (cur_mb_len == 1) ? 3 : (((cur_mb_index == 1) ? 1 : 0) + ((cur_mb_index == cur_mb_len) ? 2 : 0));
    else
        dfa->multibyte_prop[dfa->tindex] = 3;
}

....
Skipping nonlast:Priority -1
At location src/dfa.c:1147
--Src File: src/dfa.c
Fragment 0:
{
    if (0 != 0)
        dfaerror(0);
    else
        return lasttok = END;
    if (t < (1 << 8))
        dfa->multibyte_prop[dfa->tindex] = (cur_mb_len == 1) ? 3 : (((cur_mb_index == 1) ? 1 : 0) + ((cur_mb_index == cur_mb_len) ? 2 : 0));
    else
        dfa->multibyte_prop[dfa->tindex] = 3;
}

....
Skipping nonlast:Priority -1
At location src/dfa.c:1147
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
    else
        return lasttok = END;
    if (t < (1 << 8))
        dfa->multibyte_prop[dfa->tindex] = (cur_mb_len == 1) ? 3 : (((cur_mb_index == 1) ? 1 : 0) + ((cur_mb_index == cur_mb_len) ? 2 : 0));
    else
        dfa->multibyte_prop[dfa->tindex] = 3;
}

....
Skipping nonlast:Priority -1
At location src/dfa.c:1147
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
    else
        return lasttok = END;
    if (t < (1 << 8))
        dfa->multibyte_prop[dfa->tindex] = (cur_mb_len == 1) ? 3 : (((cur_mb_index == 1) ? 1 : 0) + ((cur_mb_index == cur_mb_len) ? 2 : 0));
    else
        dfa->multibyte_prop[dfa->tindex] = 3;
}

....
Skipping nonlast:Priority -1
At location src/dfa.c:1147
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    if (t < (1 << 8))
        dfa->multibyte_prop[dfa->tindex] = (cur_mb_len == 1) ? 3 : (((cur_mb_index == 1) ? 1 : 0) + ((cur_mb_index == cur_mb_len) ? 2 : 0));
    else
        dfa->multibyte_prop[dfa->tindex] = 3;
}

....
Skipping nonlast:Priority -1
At location src/dfa.c:1147
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    if (t < (1 << 8))
        dfa->multibyte_prop[dfa->tindex] = (cur_mb_len == 1) ? 3 : (((cur_mb_index == 1) ? 1 : 0) + ((cur_mb_index == cur_mb_len) ? 2 : 0));
    else
        dfa->multibyte_prop[dfa->tindex] = 3;
}

....
Skipping nonlast:Priority -1
At location src/dfa.c:1147
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    if (t < (1 << 8))
        dfa->multibyte_prop[dfa->tindex] = (cur_mb_len == 1) ? 3 : (((cur_mb_index == 1) ? 1 : 0) + ((cur_mb_index == cur_mb_len) ? 2 : 0));
    else
        dfa->multibyte_prop[dfa->tindex] = 3;
}

....
Skipping nonlast addifexit:Priority 3749
At location src/dfa.c:1147
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(t, dfa, dfa->tindex, dfa->multibyte_prop, dfa->nmbcsets, dfa->tindex, dfa->multibyte_prop, dfa->nmbcsets, cur_mb_len, cur_mb_index, dfa->nmultibyte_prop, dfa->nmultibyte_prop, dfa->tokens, dfa->talloc, dfa->tokens, dfa->talloc, depth, dfa->nleaves, dfa->nleaves, dfa->depth, dfa->depth, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts)))
        return;
    if (t < (1 << 8))
        dfa->multibyte_prop[dfa->tindex] = (cur_mb_len == 1) ? 3 : (((cur_mb_index == 1) ? 1 : 0) + ((cur_mb_index == cur_mb_len) ? 2 : 0));
    else
        dfa->multibyte_prop[dfa->tindex] = 3;
}

....
Skipping nonlast:Priority -5
At location src/dfa.c:1148
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    dfa->multibyte_prop[dfa->tindex] = (cur_mb_len == 1) ? 3 : (((cur_mb_index == 1) ? 1 : 0) + ((cur_mb_index == cur_mb_len) ? 2 : 0));
}

....
Skipping nonlast:Priority -5
At location src/dfa.c:1148
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    dfa->multibyte_prop[dfa->tindex] = (cur_mb_len == 1) ? 3 : (((cur_mb_index == 1) ? 1 : 0) + ((cur_mb_index == cur_mb_len) ? 2 : 0));
}

....
Skipping nonlast:Priority -5
At location src/dfa.c:1148
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        parse_bracket_exp_mb();
        return lasttok = MBCSET;
    }
    dfa->multibyte_prop[dfa->tindex] = (cur_mb_len == 1) ? 3 : (((cur_mb_index == 1) ? 1 : 0) + ((cur_mb_index == cur_mb_len) ? 2 : 0));
}

....
Skipping nonlast:Priority -5
At location src/dfa.c:1148
--Src File: src/dfa.c
Fragment 0:
{
    if (0 != 0)
        dfaerror(0);
    else
        return lasttok = END;
    dfa->multibyte_prop[dfa->tindex] = (cur_mb_len == 1) ? 3 : (((cur_mb_index == 1) ? 1 : 0) + ((cur_mb_index == cur_mb_len) ? 2 : 0));
}

....
Skipping nonlast:Priority -5
At location src/dfa.c:1148
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
    else
        return lasttok = END;
    dfa->multibyte_prop[dfa->tindex] = (cur_mb_len == 1) ? 3 : (((cur_mb_index == 1) ? 1 : 0) + ((cur_mb_index == cur_mb_len) ? 2 : 0));
}

....
Skipping nonlast:Priority -5
At location src/dfa.c:1148
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
    else
        return lasttok = END;
    dfa->multibyte_prop[dfa->tindex] = (cur_mb_len == 1) ? 3 : (((cur_mb_index == 1) ? 1 : 0) + ((cur_mb_index == cur_mb_len) ? 2 : 0));
}

....
Skipping nonlast:Priority -5
At location src/dfa.c:1148
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    dfa->multibyte_prop[dfa->tindex] = (cur_mb_len == 1) ? 3 : (((cur_mb_index == 1) ? 1 : 0) + ((cur_mb_index == cur_mb_len) ? 2 : 0));
}

....
Skipping nonlast:Priority -5
At location src/dfa.c:1148
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    dfa->multibyte_prop[dfa->tindex] = (cur_mb_len == 1) ? 3 : (((cur_mb_index == 1) ? 1 : 0) + ((cur_mb_index == cur_mb_len) ? 2 : 0));
}

....
Skipping nonlast:Priority -5
At location src/dfa.c:1148
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    dfa->multibyte_prop[dfa->tindex] = (cur_mb_len == 1) ? 3 : (((cur_mb_index == 1) ? 1 : 0) + ((cur_mb_index == cur_mb_len) ? 2 : 0));
}

....
Skipping nonlast addifexit:Priority 4995
At location src/dfa.c:1148
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(dfa, dfa->tindex, dfa->multibyte_prop, dfa->tindex, dfa->multibyte_prop, t, cur_mb_len, cur_mb_index, dfa->nmbcsets, dfa->nmbcsets, dfa->nmultibyte_prop, dfa->nmultibyte_prop, dfa->tokens, dfa->talloc, dfa->tokens, dfa->talloc, depth, dfa->nleaves, dfa->nleaves, dfa->depth, dfa->depth, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts)))
        return;
    dfa->multibyte_prop[dfa->tindex] = (cur_mb_len == 1) ? 3 : (((cur_mb_index == 1) ? 1 : 0) + ((cur_mb_index == cur_mb_len) ? 2 : 0));
}

....
Skipping nonlast:Priority -0
At location src/dfa.c:1155
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    dfa->multibyte_prop[dfa->tindex] = 3;
}

....
Skipping nonlast:Priority -0
At location src/dfa.c:1155
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    dfa->multibyte_prop[dfa->tindex] = 3;
}

....
Skipping nonlast:Priority -0
At location src/dfa.c:1155
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        parse_bracket_exp_mb();
        return lasttok = MBCSET;
    }
    dfa->multibyte_prop[dfa->tindex] = 3;
}

....
Skipping nonlast:Priority -0
At location src/dfa.c:1155
--Src File: src/dfa.c
Fragment 0:
{
    if (0 != 0)
        dfaerror(0);
    else
        return lasttok = END;
    dfa->multibyte_prop[dfa->tindex] = 3;
}

....
Skipping nonlast:Priority -0
At location src/dfa.c:1155
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
    else
        return lasttok = END;
    dfa->multibyte_prop[dfa->tindex] = 3;
}

....
Skipping nonlast:Priority -0
At location src/dfa.c:1155
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
    else
        return lasttok = END;
    dfa->multibyte_prop[dfa->tindex] = 3;
}

....
Skipping nonlast:Priority -0
At location src/dfa.c:1155
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    dfa->multibyte_prop[dfa->tindex] = 3;
}

....
Skipping nonlast:Priority -0
At location src/dfa.c:1155
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    dfa->multibyte_prop[dfa->tindex] = 3;
}

....
Skipping nonlast:Priority -0
At location src/dfa.c:1155
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    dfa->multibyte_prop[dfa->tindex] = 3;
}

....
Skipping nonlast addifexit:Priority 5000
At location src/dfa.c:1155
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(dfa, dfa->tindex, dfa->multibyte_prop, dfa->tindex, dfa->multibyte_prop, cur_mb_len, cur_mb_index, dfa->tokens, dfa->talloc, dfa->tokens, dfa->talloc, t, dfa->nmbcsets, dfa->nmbcsets, dfa->nmultibyte_prop, dfa->nmultibyte_prop, depth, dfa->nleaves, dfa->nleaves, dfa->depth, dfa->depth, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts)))
        return;
    dfa->multibyte_prop[dfa->tindex] = 3;
}

....
Skipping nonlast:Priority -382
At location src/dfa.c:1159
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if ((dfa->tindex) >= (dfa->talloc)) {
    do 
        (dfa->talloc) *= 2;
    while ((dfa->tindex) >= (dfa->talloc));
    ((dfa->tokens) = xrealloc((ptr_t)(dfa->tokens), (dfa->talloc) * sizeof(token)));
}

....
Skipping nonlast:Priority -382
At location src/dfa.c:1159
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if ((dfa->tindex) >= (dfa->talloc)) {
    do 
        (dfa->talloc) *= 2;
    while ((dfa->tindex) >= (dfa->talloc));
    ((dfa->tokens) = xrealloc((ptr_t)(dfa->tokens), (dfa->talloc) * sizeof(token)));
}

....
Skipping nonlast:Priority -382
At location src/dfa.c:1159
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
if ((dfa->tindex) >= (dfa->talloc)) {
    do 
        (dfa->talloc) *= 2;
    while ((dfa->tindex) >= (dfa->talloc));
    ((dfa->tokens) = xrealloc((ptr_t)(dfa->tokens), (dfa->talloc) * sizeof(token)));
}

....
Skipping nonlast:Priority -382
At location src/dfa.c:1159
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
if ((dfa->tindex) >= (dfa->talloc)) {
    do 
        (dfa->talloc) *= 2;
    while ((dfa->tindex) >= (dfa->talloc));
    ((dfa->tokens) = xrealloc((ptr_t)(dfa->tokens), (dfa->talloc) * sizeof(token)));
}

....
Skipping nonlast:Priority -382
At location src/dfa.c:1159
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
if ((dfa->tindex) >= (dfa->talloc)) {
    do 
        (dfa->talloc) *= 2;
    while ((dfa->tindex) >= (dfa->talloc));
    ((dfa->tokens) = xrealloc((ptr_t)(dfa->tokens), (dfa->talloc) * sizeof(token)));
}

....
Skipping nonlast:Priority -382
At location src/dfa.c:1159
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
if ((dfa->tindex) >= (dfa->talloc)) {
    do 
        (dfa->talloc) *= 2;
    while ((dfa->tindex) >= (dfa->talloc));
    ((dfa->tokens) = xrealloc((ptr_t)(dfa->tokens), (dfa->talloc) * sizeof(token)));
}

....
Skipping nonlast:Priority -382
At location src/dfa.c:1159
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if ((dfa->tindex) >= (dfa->talloc)) {
    do 
        (dfa->talloc) *= 2;
    while ((dfa->tindex) >= (dfa->talloc));
    ((dfa->tokens) = xrealloc((ptr_t)(dfa->tokens), (dfa->talloc) * sizeof(token)));
}

....
Skipping nonlast:Priority -382
At location src/dfa.c:1159
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if ((dfa->tindex) >= (dfa->talloc)) {
    do 
        (dfa->talloc) *= 2;
    while ((dfa->tindex) >= (dfa->talloc));
    ((dfa->tokens) = xrealloc((ptr_t)(dfa->tokens), (dfa->talloc) * sizeof(token)));
}

....
Skipping nonlast:Priority -382
At location src/dfa.c:1159
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if ((dfa->tindex) >= (dfa->talloc)) {
    do 
        (dfa->talloc) *= 2;
    while ((dfa->tindex) >= (dfa->talloc));
    ((dfa->tokens) = xrealloc((ptr_t)(dfa->tokens), (dfa->talloc) * sizeof(token)));
}

....
Skipping nonlast addifexit:Priority 3368
At location src/dfa.c:1159
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(dfa, dfa->tokens, dfa->tindex, dfa->talloc, dfa->tokens, dfa->tindex, dfa->talloc, t, dfa->multibyte_prop, dfa->multibyte_prop, cur_mb_len, cur_mb_index, depth, dfa->nmbcsets, dfa->nmbcsets, dfa->nleaves, dfa->nmultibyte_prop, dfa->nleaves, dfa->nmultibyte_prop, dfa->depth, dfa->depth, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts)))
    return;
if ((dfa->tindex) >= (dfa->talloc)) {
    do 
        (dfa->talloc) *= 2;
    while ((dfa->tindex) >= (dfa->talloc));
    ((dfa->tokens) = xrealloc((ptr_t)(dfa->tokens), (dfa->talloc) * sizeof(token)));
}

....
Skipping nonlast:Priority -361
At location src/dfa.c:1160
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
dfa->tokens[dfa->tindex++] = t;

....
Skipping nonlast:Priority -361
At location src/dfa.c:1160
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
dfa->tokens[dfa->tindex++] = t;

....
Skipping nonlast:Priority -361
At location src/dfa.c:1160
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
dfa->tokens[dfa->tindex++] = t;

....
Skipping nonlast:Priority -361
At location src/dfa.c:1160
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
dfa->tokens[dfa->tindex++] = t;

....
Skipping nonlast:Priority -361
At location src/dfa.c:1160
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
dfa->tokens[dfa->tindex++] = t;

....
Skipping nonlast:Priority -361
At location src/dfa.c:1160
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
dfa->tokens[dfa->tindex++] = t;

....
Skipping nonlast:Priority -361
At location src/dfa.c:1160
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
dfa->tokens[dfa->tindex++] = t;

....
Skipping nonlast:Priority -361
At location src/dfa.c:1160
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
dfa->tokens[dfa->tindex++] = t;

....
Skipping nonlast:Priority -361
At location src/dfa.c:1160
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
dfa->tokens[dfa->tindex++] = t;

....
Skipping nonlast addifexit:Priority 4639
At location src/dfa.c:1160
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(t, dfa, dfa->tokens, dfa->tindex, dfa->tokens, dfa->tindex, dfa->talloc, dfa->talloc, dfa->multibyte_prop, dfa->multibyte_prop, cur_mb_len, cur_mb_index, depth, dfa->nmbcsets, dfa->nmbcsets, dfa->nleaves, dfa->nleaves, dfa->nmultibyte_prop, dfa->nmultibyte_prop, dfa->depth, dfa->depth, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts)))
    return;
dfa->tokens[dfa->tindex++] = t;

....
Skipping nonlast:Priority -360
At location src/dfa.c:1162
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
switch (t) {
  case QMARK:
  case STAR:
  case PLUS:
    break;
  case CAT:
  case OR:
  case ORTOP:
    --depth;
    break;
  default:
    ++dfa->nleaves;
  case EMPTY:
    ++depth;
    break;
}

....
Skipping nonlast:Priority -360
At location src/dfa.c:1162
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
switch (t) {
  case QMARK:
  case STAR:
  case PLUS:
    break;
  case CAT:
  case OR:
  case ORTOP:
    --depth;
    break;
  default:
    ++dfa->nleaves;
  case EMPTY:
    ++depth;
    break;
}

....
Skipping nonlast:Priority -360
At location src/dfa.c:1162
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
switch (t) {
  case QMARK:
  case STAR:
  case PLUS:
    break;
  case CAT:
  case OR:
  case ORTOP:
    --depth;
    break;
  default:
    ++dfa->nleaves;
  case EMPTY:
    ++depth;
    break;
}

....
Skipping nonlast:Priority -360
At location src/dfa.c:1162
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
switch (t) {
  case QMARK:
  case STAR:
  case PLUS:
    break;
  case CAT:
  case OR:
  case ORTOP:
    --depth;
    break;
  default:
    ++dfa->nleaves;
  case EMPTY:
    ++depth;
    break;
}

....
Skipping nonlast:Priority -360
At location src/dfa.c:1162
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
switch (t) {
  case QMARK:
  case STAR:
  case PLUS:
    break;
  case CAT:
  case OR:
  case ORTOP:
    --depth;
    break;
  default:
    ++dfa->nleaves;
  case EMPTY:
    ++depth;
    break;
}

....
Skipping nonlast:Priority -360
At location src/dfa.c:1162
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
switch (t) {
  case QMARK:
  case STAR:
  case PLUS:
    break;
  case CAT:
  case OR:
  case ORTOP:
    --depth;
    break;
  default:
    ++dfa->nleaves;
  case EMPTY:
    ++depth;
    break;
}

....
Skipping nonlast:Priority -360
At location src/dfa.c:1162
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
switch (t) {
  case QMARK:
  case STAR:
  case PLUS:
    break;
  case CAT:
  case OR:
  case ORTOP:
    --depth;
    break;
  default:
    ++dfa->nleaves;
  case EMPTY:
    ++depth;
    break;
}

....
Skipping nonlast:Priority -360
At location src/dfa.c:1162
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
switch (t) {
  case QMARK:
  case STAR:
  case PLUS:
    break;
  case CAT:
  case OR:
  case ORTOP:
    --depth;
    break;
  default:
    ++dfa->nleaves;
  case EMPTY:
    ++depth;
    break;
}

....
Skipping nonlast:Priority -360
At location src/dfa.c:1162
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
switch (t) {
  case QMARK:
  case STAR:
  case PLUS:
    break;
  case CAT:
  case OR:
  case ORTOP:
    --depth;
    break;
  default:
    ++dfa->nleaves;
  case EMPTY:
    ++depth;
    break;
}

....
Skipping nonlast addifexit:Priority 4640
At location src/dfa.c:1162
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(t, dfa, depth, cur_mb_len, cur_mb_index)))
    return;
switch (t) {
  case QMARK:
  case STAR:
  case PLUS:
    break;
  case CAT:
  case OR:
  case ORTOP:
    --depth;
    break;
  default:
    ++dfa->nleaves;
  case EMPTY:
    ++depth;
    break;
}

....
Skipping nonlast:Priority -359
At location src/dfa.c:1173
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
break;

....
Skipping nonlast:Priority -359
At location src/dfa.c:1173
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
break;

....
Skipping nonlast:Priority -359
At location src/dfa.c:1173
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
break;

....
Skipping nonlast:Priority -359
At location src/dfa.c:1173
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
break;

....
Skipping nonlast:Priority -359
At location src/dfa.c:1173
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
break;

....
Skipping nonlast:Priority -359
At location src/dfa.c:1173
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
break;

....
Skipping nonlast:Priority -359
At location src/dfa.c:1173
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
break;

....
Skipping nonlast:Priority -359
At location src/dfa.c:1173
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
break;

....
Skipping nonlast:Priority -359
At location src/dfa.c:1173
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
break;

....
Skipping nonlast addifexit:Priority 4641
At location src/dfa.c:1173
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(depth, dfa, t, cur_mb_len, cur_mb_index)))
    return;
break;

....
Skipping nonlast:Priority -367
At location src/dfa.c:1177
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
case EMPTY:
++depth;

....
Skipping nonlast:Priority -367
At location src/dfa.c:1177
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
case EMPTY:
++depth;

....
Skipping nonlast:Priority -367
At location src/dfa.c:1177
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
case EMPTY:
++depth;

....
Skipping nonlast:Priority -367
At location src/dfa.c:1177
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
case EMPTY:
++depth;

....
Skipping nonlast:Priority -367
At location src/dfa.c:1177
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
case EMPTY:
++depth;

....
Skipping nonlast:Priority -367
At location src/dfa.c:1177
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
case EMPTY:
++depth;

....
Skipping nonlast:Priority -367
At location src/dfa.c:1177
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
case EMPTY:
++depth;

....
Skipping nonlast:Priority -367
At location src/dfa.c:1177
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
case EMPTY:
++depth;

....
Skipping nonlast:Priority -367
At location src/dfa.c:1177
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
case EMPTY:
++depth;

....
Skipping nonlast addifexit:Priority 4633
At location src/dfa.c:1177
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(dfa, depth, dfa->nleaves, dfa->nleaves, dfa->depth, dfa->depth, t, dfa->tokens, dfa->tindex, dfa->tokens, dfa->tindex, dfa->talloc, dfa->talloc, dfa->multibyte_prop, dfa->multibyte_prop, cur_mb_len, cur_mb_index, dfa->nmbcsets, dfa->nmbcsets, dfa->nmultibyte_prop, dfa->nmultibyte_prop, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts)))
    return;
case EMPTY:
++depth;

....
Skipping isstmt addifexit:Priority 3392
At location src/dfa.c:1181
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(dfa, depth, dfa->depth, dfa->depth, dfa->nleaves, dfa->nleaves, t, dfa->tokens, dfa->tindex, dfa->tokens, dfa->tindex, dfa->talloc, dfa->talloc, dfa->multibyte_prop, dfa->multibyte_prop, cur_mb_len, cur_mb_index, dfa->nmbcsets, dfa->nmbcsets, dfa->nmultibyte_prop, dfa->nmultibyte_prop, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts)))
    return;
if (depth > dfa->depth)
    dfa->depth = depth;

....
Skipping nonlast:Priority -406
At location src/dfa.c:1182
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    dfa->depth = depth;
}

....
Skipping nonlast:Priority -406
At location src/dfa.c:1182
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    dfa->depth = depth;
}

....
Skipping nonlast:Priority -406
At location src/dfa.c:1182
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        parse_bracket_exp_mb();
        return lasttok = MBCSET;
    }
    dfa->depth = depth;
}

....
Skipping nonlast:Priority -406
At location src/dfa.c:1182
--Src File: src/dfa.c
Fragment 0:
{
    if (0 != 0)
        dfaerror(0);
    else
        return lasttok = END;
    dfa->depth = depth;
}

....
Skipping nonlast:Priority -406
At location src/dfa.c:1182
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
    else
        return lasttok = END;
    dfa->depth = depth;
}

....
Skipping nonlast:Priority -406
At location src/dfa.c:1182
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
    else
        return lasttok = END;
    dfa->depth = depth;
}

....
Skipping nonlast:Priority -406
At location src/dfa.c:1182
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    dfa->depth = depth;
}

....
Skipping nonlast:Priority -406
At location src/dfa.c:1182
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    dfa->depth = depth;
}

....
Skipping nonlast:Priority -406
At location src/dfa.c:1182
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    dfa->depth = depth;
}

....
Skipping nonlast addifexit:Priority 4594
At location src/dfa.c:1182
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(dfa, depth, dfa->depth, dfa->depth, dfa->nleaves, dfa->nleaves, t, dfa->tokens, dfa->tindex, dfa->tokens, dfa->tindex, dfa->talloc, dfa->talloc, dfa->multibyte_prop, dfa->multibyte_prop, cur_mb_len, cur_mb_index, dfa->nmbcsets, dfa->nmbcsets, dfa->nmultibyte_prop, dfa->nmultibyte_prop, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts)))
        return;
    dfa->depth = depth;
}

....
IsErr:priority 4606
at location src/dfa.c:1224
--src file: src/dfa.c
fragment 0:
if (!(__abst_hole(tok, cur_mb_index)))
    if ((tok >= 0 && tok < (1 << 8)) || tok >= cset || tok == backref || tok == begline || tok == endline || tok == begword || tok == anychar || tok == mbcset || tok == endword || tok == limword || tok == notlimword) {
        addtok(tok);
        tok = lex();
        if ((__ctype_get_mb_cur_max()) > 1) {
            while (cur_mb_index > 1 && tok >= 0 && tok < (1 << 8))
                {
                    addtok(tok);
                    addtok(cat);
                    tok = lex();
                }
        }
    } else if (tok == crange) {
        charclass ccl;
        zeroset(ccl);
        notset(ccl);
        addtok(cset + charclass_index(ccl));
        addtok(backref);
        addtok(cat);
        tok = lex();
    } else if (tok == lparen) {
        tok = lex();
        regexp(0);
        if (tok != rparen)
            dfaerror(dcgettext(((void *)0), "unbalanced (", 5));
        tok = lex();
    } else
        addtok(empty);

....
Skipping error ifguard:Priority 4606
At location src/dfa.c:1224
--Src File: src/dfa.c
Fragment 0:
if (!(__abst_hole(tok, cur_mb_index)))
    if ((tok >= 0 && tok < (1 << 8)) || tok >= CSET || tok == BACKREF || tok == BEGLINE || tok == ENDLINE || tok == BEGWORD || tok == ANYCHAR || tok == MBCSET || tok == ENDWORD || tok == LIMWORD || tok == NOTLIMWORD) {
        addtok(tok);
        tok = lex();
        if ((__ctype_get_mb_cur_max()) > 1) {
            while (cur_mb_index > 1 && tok >= 0 && tok < (1 << 8))
                {
                    addtok(tok);
                    addtok(CAT);
                    tok = lex();
                }
        }
    } else if (tok == CRANGE) {
        charclass ccl;
        zeroset(ccl);
        notset(ccl);
        addtok(CSET + charclass_index(ccl));
        addtok(BACKREF);
        addtok(CAT);
        tok = lex();
    } else if (tok == LPAREN) {
        tok = lex();
        regexp(0);
        if (tok != RPAREN)
            dfaerror(dcgettext(((void *)0), "Unbalanced (", 5));
        tok = lex();
    } else
        addtok(EMPTY);

....
Skipping isstmt addifexit:Priority 10856
At location src/dfa.c:1224
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(tok, cur_mb_index)))
    return;
if ((tok >= 0 && tok < (1 << 8)) || tok >= CSET || tok == BACKREF || tok == BEGLINE || tok == ENDLINE || tok == BEGWORD || tok == ANYCHAR || tok == MBCSET || tok == ENDWORD || tok == LIMWORD || tok == NOTLIMWORD) {
    addtok(tok);
    tok = lex();
    if ((__ctype_get_mb_cur_max()) > 1) {
        while (cur_mb_index > 1 && tok >= 0 && tok < (1 << 8))
            {
                addtok(tok);
                addtok(CAT);
                tok = lex();
            }
    }
} else if (tok == CRANGE) {
    charclass ccl;
    zeroset(ccl);
    notset(ccl);
    addtok(CSET + charclass_index(ccl));
    addtok(BACKREF);
    addtok(CAT);
    tok = lex();
} else if (tok == LPAREN) {
    tok = lex();
    regexp(0);
    if (tok != RPAREN)
        dfaerror(dcgettext(((void *)0), "Unbalanced (", 5));
    tok = lex();
} else
    addtok(EMPTY);

....
Skipping nonlast:Priority 4607
At location src/dfa.c:1231
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
addtok(tok);

....
Skipping nonlast:Priority 4607
At location src/dfa.c:1231
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
addtok(tok);

....
Skipping nonlast:Priority 4607
At location src/dfa.c:1231
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
addtok(tok);

....
Skipping nonlast:Priority 4607
At location src/dfa.c:1231
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
addtok(tok);

....
Skipping nonlast:Priority 4607
At location src/dfa.c:1231
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
addtok(tok);

....
Skipping nonlast:Priority 4607
At location src/dfa.c:1231
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
addtok(tok);

....
Skipping nonlast:Priority 4607
At location src/dfa.c:1231
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
addtok(tok);

....
Skipping nonlast:Priority 4607
At location src/dfa.c:1231
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
addtok(tok);

....
Skipping nonlast:Priority 4607
At location src/dfa.c:1231
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
addtok(tok);

....
Skipping nonlast addifexit:Priority 9607
At location src/dfa.c:1231
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(tok, cur_mb_index)))
    return;
addtok(tok);

....
Skipping nonlast:Priority -392
At location src/dfa.c:1232
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
tok = lex();

....
Skipping nonlast:Priority -392
At location src/dfa.c:1232
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
tok = lex();

....
Skipping nonlast:Priority -392
At location src/dfa.c:1232
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
tok = lex();

....
Skipping nonlast:Priority -392
At location src/dfa.c:1232
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
tok = lex();

....
Skipping nonlast:Priority -392
At location src/dfa.c:1232
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
tok = lex();

....
Skipping nonlast:Priority -392
At location src/dfa.c:1232
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
tok = lex();

....
Skipping nonlast:Priority -392
At location src/dfa.c:1232
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
tok = lex();

....
Skipping nonlast:Priority -392
At location src/dfa.c:1232
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
tok = lex();

....
Skipping nonlast:Priority -392
At location src/dfa.c:1232
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
tok = lex();

....
Skipping nonlast addifexit:Priority 4608
At location src/dfa.c:1232
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(tok, cur_mb_index)))
    return;
tok = lex();

....
Skipping isstmt addifexit:Priority 3365
At location src/dfa.c:1241
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cur_mb_index, tok)))
    return;
if ((__ctype_get_mb_cur_max()) > 1) {
    while (cur_mb_index > 1 && tok >= 0 && tok < (1 << 8))
        {
            addtok(tok);
            addtok(CAT);
            tok = lex();
        }
}

....
Skipping isstmt addifexit:Priority 9992
At location src/dfa.c:1243
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cur_mb_index, tok)))
    return;
while (cur_mb_index > 1 && tok >= 0 && tok < (1 << 8))
    {
        addtok(tok);
        addtok(CAT);
        tok = lex();
    }

....
IsErr:priority 4866
at location src/dfa.c:1252
--src file: src/dfa.c
fragment 0:
{
    if (!(__abst_hole(tok, cur_mb_index)))
        if (tok == crange) {
            charclass ccl;
            zeroset(ccl);
            notset(ccl);
            addtok(cset + charclass_index(ccl));
            addtok(backref);
            addtok(cat);
            tok = lex();
        } else if (tok == lparen) {
            tok = lex();
            regexp(0);
            if (tok != rparen)
                dfaerror(dcgettext(((void *)0), "unbalanced (", 5));
            tok = lex();
        } else
            addtok(empty);
}

....
Skipping error ifguard:Priority 4866
At location src/dfa.c:1252
--Src File: src/dfa.c
Fragment 0:
{
    if (!(__abst_hole(tok, cur_mb_index)))
        if (tok == CRANGE) {
            charclass ccl;
            zeroset(ccl);
            notset(ccl);
            addtok(CSET + charclass_index(ccl));
            addtok(BACKREF);
            addtok(CAT);
            tok = lex();
        } else if (tok == LPAREN) {
            tok = lex();
            regexp(0);
            if (tok != RPAREN)
                dfaerror(dcgettext(((void *)0), "Unbalanced (", 5));
            tok = lex();
        } else
            addtok(EMPTY);
}

....
Skipping nonlast:Priority -134
At location src/dfa.c:1252
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    if (tok == CRANGE) {
        charclass ccl;
        zeroset(ccl);
        notset(ccl);
        addtok(CSET + charclass_index(ccl));
        addtok(BACKREF);
        addtok(CAT);
        tok = lex();
    } else if (tok == LPAREN) {
        tok = lex();
        regexp(0);
        if (tok != RPAREN)
            dfaerror(dcgettext(((void *)0), "Unbalanced (", 5));
        tok = lex();
    } else
        addtok(EMPTY);
}

....
Skipping nonlast:Priority -134
At location src/dfa.c:1252
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    if (tok == CRANGE) {
        charclass ccl;
        zeroset(ccl);
        notset(ccl);
        addtok(CSET + charclass_index(ccl));
        addtok(BACKREF);
        addtok(CAT);
        tok = lex();
    } else if (tok == LPAREN) {
        tok = lex();
        regexp(0);
        if (tok != RPAREN)
            dfaerror(dcgettext(((void *)0), "Unbalanced (", 5));
        tok = lex();
    } else
        addtok(EMPTY);
}

....
Skipping nonlast:Priority -134
At location src/dfa.c:1252
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        parse_bracket_exp_mb();
        return lasttok = MBCSET;
    }
    if (tok == CRANGE) {
        charclass ccl;
        zeroset(ccl);
        notset(ccl);
        addtok(CSET + charclass_index(ccl));
        addtok(BACKREF);
        addtok(CAT);
        tok = lex();
    } else if (tok == LPAREN) {
        tok = lex();
        regexp(0);
        if (tok != RPAREN)
            dfaerror(dcgettext(((void *)0), "Unbalanced (", 5));
        tok = lex();
    } else
        addtok(EMPTY);
}

....
Skipping nonlast:Priority -134
At location src/dfa.c:1252
--Src File: src/dfa.c
Fragment 0:
{
    if (0 != 0)
        dfaerror(0);
    else
        return lasttok = END;
    if (tok == CRANGE) {
        charclass ccl;
        zeroset(ccl);
        notset(ccl);
        addtok(CSET + charclass_index(ccl));
        addtok(BACKREF);
        addtok(CAT);
        tok = lex();
    } else if (tok == LPAREN) {
        tok = lex();
        regexp(0);
        if (tok != RPAREN)
            dfaerror(dcgettext(((void *)0), "Unbalanced (", 5));
        tok = lex();
    } else
        addtok(EMPTY);
}

....
Skipping nonlast:Priority -134
At location src/dfa.c:1252
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
    else
        return lasttok = END;
    if (tok == CRANGE) {
        charclass ccl;
        zeroset(ccl);
        notset(ccl);
        addtok(CSET + charclass_index(ccl));
        addtok(BACKREF);
        addtok(CAT);
        tok = lex();
    } else if (tok == LPAREN) {
        tok = lex();
        regexp(0);
        if (tok != RPAREN)
            dfaerror(dcgettext(((void *)0), "Unbalanced (", 5));
        tok = lex();
    } else
        addtok(EMPTY);
}

....
Skipping nonlast:Priority -134
At location src/dfa.c:1252
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
    else
        return lasttok = END;
    if (tok == CRANGE) {
        charclass ccl;
        zeroset(ccl);
        notset(ccl);
        addtok(CSET + charclass_index(ccl));
        addtok(BACKREF);
        addtok(CAT);
        tok = lex();
    } else if (tok == LPAREN) {
        tok = lex();
        regexp(0);
        if (tok != RPAREN)
            dfaerror(dcgettext(((void *)0), "Unbalanced (", 5));
        tok = lex();
    } else
        addtok(EMPTY);
}

....
Skipping nonlast:Priority -134
At location src/dfa.c:1252
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    if (tok == CRANGE) {
        charclass ccl;
        zeroset(ccl);
        notset(ccl);
        addtok(CSET + charclass_index(ccl));
        addtok(BACKREF);
        addtok(CAT);
        tok = lex();
    } else if (tok == LPAREN) {
        tok = lex();
        regexp(0);
        if (tok != RPAREN)
            dfaerror(dcgettext(((void *)0), "Unbalanced (", 5));
        tok = lex();
    } else
        addtok(EMPTY);
}

....
Skipping nonlast:Priority -134
At location src/dfa.c:1252
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    if (tok == CRANGE) {
        charclass ccl;
        zeroset(ccl);
        notset(ccl);
        addtok(CSET + charclass_index(ccl));
        addtok(BACKREF);
        addtok(CAT);
        tok = lex();
    } else if (tok == LPAREN) {
        tok = lex();
        regexp(0);
        if (tok != RPAREN)
            dfaerror(dcgettext(((void *)0), "Unbalanced (", 5));
        tok = lex();
    } else
        addtok(EMPTY);
}

....
Skipping nonlast:Priority -134
At location src/dfa.c:1252
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    if (tok == CRANGE) {
        charclass ccl;
        zeroset(ccl);
        notset(ccl);
        addtok(CSET + charclass_index(ccl));
        addtok(BACKREF);
        addtok(CAT);
        tok = lex();
    } else if (tok == LPAREN) {
        tok = lex();
        regexp(0);
        if (tok != RPAREN)
            dfaerror(dcgettext(((void *)0), "Unbalanced (", 5));
        tok = lex();
    } else
        addtok(EMPTY);
}

....
Skipping nonlast addifexit:Priority 3616
At location src/dfa.c:1252
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(tok, cur_mb_index)))
        return;
    if (tok == CRANGE) {
        charclass ccl;
        zeroset(ccl);
        notset(ccl);
        addtok(CSET + charclass_index(ccl));
        addtok(BACKREF);
        addtok(CAT);
        tok = lex();
    } else if (tok == LPAREN) {
        tok = lex();
        regexp(0);
        if (tok != RPAREN)
            dfaerror(dcgettext(((void *)0), "Unbalanced (", 5));
        tok = lex();
    } else
        addtok(EMPTY);
}

....
IsErr:priority 4867
at location src/dfa.c:1268
--src file: src/dfa.c
fragment 0:
{
    if (!(__abst_hole(tok, cur_mb_index)))
        if (tok == lparen) {
            tok = lex();
            regexp(0);
            if (tok != rparen)
                dfaerror(dcgettext(((void *)0), "unbalanced (", 5));
            tok = lex();
        } else
            addtok(empty);
}

....
Skipping error ifguard:Priority 4867
At location src/dfa.c:1268
--Src File: src/dfa.c
Fragment 0:
{
    if (!(__abst_hole(tok, cur_mb_index)))
        if (tok == LPAREN) {
            tok = lex();
            regexp(0);
            if (tok != RPAREN)
                dfaerror(dcgettext(((void *)0), "Unbalanced (", 5));
            tok = lex();
        } else
            addtok(EMPTY);
}

....
Skipping nonlast:Priority -133
At location src/dfa.c:1268
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    if (tok == LPAREN) {
        tok = lex();
        regexp(0);
        if (tok != RPAREN)
            dfaerror(dcgettext(((void *)0), "Unbalanced (", 5));
        tok = lex();
    } else
        addtok(EMPTY);
}

....
Skipping nonlast:Priority -133
At location src/dfa.c:1268
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    if (tok == LPAREN) {
        tok = lex();
        regexp(0);
        if (tok != RPAREN)
            dfaerror(dcgettext(((void *)0), "Unbalanced (", 5));
        tok = lex();
    } else
        addtok(EMPTY);
}

....
Skipping nonlast:Priority -133
At location src/dfa.c:1268
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        parse_bracket_exp_mb();
        return lasttok = MBCSET;
    }
    if (tok == LPAREN) {
        tok = lex();
        regexp(0);
        if (tok != RPAREN)
            dfaerror(dcgettext(((void *)0), "Unbalanced (", 5));
        tok = lex();
    } else
        addtok(EMPTY);
}

....
Skipping nonlast:Priority -133
At location src/dfa.c:1268
--Src File: src/dfa.c
Fragment 0:
{
    if (0 != 0)
        dfaerror(0);
    else
        return lasttok = END;
    if (tok == LPAREN) {
        tok = lex();
        regexp(0);
        if (tok != RPAREN)
            dfaerror(dcgettext(((void *)0), "Unbalanced (", 5));
        tok = lex();
    } else
        addtok(EMPTY);
}

....
Skipping nonlast:Priority -133
At location src/dfa.c:1268
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
    else
        return lasttok = END;
    if (tok == LPAREN) {
        tok = lex();
        regexp(0);
        if (tok != RPAREN)
            dfaerror(dcgettext(((void *)0), "Unbalanced (", 5));
        tok = lex();
    } else
        addtok(EMPTY);
}

....
Skipping nonlast:Priority -133
At location src/dfa.c:1268
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
    else
        return lasttok = END;
    if (tok == LPAREN) {
        tok = lex();
        regexp(0);
        if (tok != RPAREN)
            dfaerror(dcgettext(((void *)0), "Unbalanced (", 5));
        tok = lex();
    } else
        addtok(EMPTY);
}

....
Skipping nonlast:Priority -133
At location src/dfa.c:1268
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    if (tok == LPAREN) {
        tok = lex();
        regexp(0);
        if (tok != RPAREN)
            dfaerror(dcgettext(((void *)0), "Unbalanced (", 5));
        tok = lex();
    } else
        addtok(EMPTY);
}

....
Skipping nonlast:Priority -133
At location src/dfa.c:1268
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    if (tok == LPAREN) {
        tok = lex();
        regexp(0);
        if (tok != RPAREN)
            dfaerror(dcgettext(((void *)0), "Unbalanced (", 5));
        tok = lex();
    } else
        addtok(EMPTY);
}

....
Skipping nonlast:Priority -133
At location src/dfa.c:1268
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    if (tok == LPAREN) {
        tok = lex();
        regexp(0);
        if (tok != RPAREN)
            dfaerror(dcgettext(((void *)0), "Unbalanced (", 5));
        tok = lex();
    } else
        addtok(EMPTY);
}

....
Skipping nonlast addifexit:Priority 3617
At location src/dfa.c:1268
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(tok, cur_mb_index)))
        return;
    if (tok == LPAREN) {
        tok = lex();
        regexp(0);
        if (tok != RPAREN)
            dfaerror(dcgettext(((void *)0), "Unbalanced (", 5));
        tok = lex();
    } else
        addtok(EMPTY);
}

....
Skipping nonlast:Priority 4868
At location src/dfa.c:1270
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
tok = lex();

....
Skipping nonlast:Priority 4868
At location src/dfa.c:1270
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
tok = lex();

....
Skipping nonlast:Priority 4868
At location src/dfa.c:1270
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
tok = lex();

....
Skipping nonlast:Priority 4868
At location src/dfa.c:1270
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
tok = lex();

....
Skipping nonlast:Priority 4868
At location src/dfa.c:1270
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
tok = lex();

....
Skipping nonlast:Priority 4868
At location src/dfa.c:1270
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
tok = lex();

....
Skipping nonlast:Priority 4868
At location src/dfa.c:1270
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
tok = lex();

....
Skipping nonlast:Priority 4868
At location src/dfa.c:1270
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
tok = lex();

....
Skipping nonlast:Priority 4868
At location src/dfa.c:1270
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
tok = lex();

....
Skipping nonlast addifexit:Priority 9868
At location src/dfa.c:1270
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(tok, cur_mb_index)))
    return;
tok = lex();

....
Skipping nonlast:Priority -131
At location src/dfa.c:1271
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
regexp(0);

....
Skipping nonlast:Priority -131
At location src/dfa.c:1271
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
regexp(0);

....
Skipping nonlast:Priority -131
At location src/dfa.c:1271
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
regexp(0);

....
Skipping nonlast:Priority -131
At location src/dfa.c:1271
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
regexp(0);

....
Skipping nonlast:Priority -131
At location src/dfa.c:1271
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
regexp(0);

....
Skipping nonlast:Priority -131
At location src/dfa.c:1271
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
regexp(0);

....
Skipping nonlast:Priority -131
At location src/dfa.c:1271
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
regexp(0);

....
Skipping nonlast:Priority -131
At location src/dfa.c:1271
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
regexp(0);

....
Skipping nonlast:Priority -131
At location src/dfa.c:1271
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
regexp(0);

....
Skipping nonlast addifexit:Priority 4869
At location src/dfa.c:1271
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(tok, cur_mb_index)))
    return;
regexp(0);

....
IsErr:priority 4874
at location src/dfa.c:1272
--src file: src/dfa.c
fragment 0:
if (!(__abst_hole(tok, cur_mb_index)))
    if (tok != rparen)
        dfaerror(dcgettext(((void *)0), "unbalanced (", 5));

....
Skipping error ifguard:Priority 4874
At location src/dfa.c:1272
--Src File: src/dfa.c
Fragment 0:
if (!(__abst_hole(tok, cur_mb_index)))
    if (tok != RPAREN)
        dfaerror(dcgettext(((void *)0), "Unbalanced (", 5));

....
Skipping nonlast:Priority -126
At location src/dfa.c:1272
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (tok != RPAREN)
    dfaerror(dcgettext(((void *)0), "Unbalanced (", 5));

....
Skipping nonlast:Priority -126
At location src/dfa.c:1272
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (tok != RPAREN)
    dfaerror(dcgettext(((void *)0), "Unbalanced (", 5));

....
Skipping nonlast:Priority -126
At location src/dfa.c:1272
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
if (tok != RPAREN)
    dfaerror(dcgettext(((void *)0), "Unbalanced (", 5));

....
Skipping nonlast:Priority -126
At location src/dfa.c:1272
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
if (tok != RPAREN)
    dfaerror(dcgettext(((void *)0), "Unbalanced (", 5));

....
Skipping nonlast:Priority -126
At location src/dfa.c:1272
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
if (tok != RPAREN)
    dfaerror(dcgettext(((void *)0), "Unbalanced (", 5));

....
Skipping nonlast:Priority -126
At location src/dfa.c:1272
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
if (tok != RPAREN)
    dfaerror(dcgettext(((void *)0), "Unbalanced (", 5));

....
Skipping nonlast:Priority -126
At location src/dfa.c:1272
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (tok != RPAREN)
    dfaerror(dcgettext(((void *)0), "Unbalanced (", 5));

....
Skipping nonlast:Priority -126
At location src/dfa.c:1272
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (tok != RPAREN)
    dfaerror(dcgettext(((void *)0), "Unbalanced (", 5));

....
Skipping nonlast:Priority -126
At location src/dfa.c:1272
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (tok != RPAREN)
    dfaerror(dcgettext(((void *)0), "Unbalanced (", 5));

....
Skipping nonlast addifexit:Priority 3624
At location src/dfa.c:1272
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(tok, cur_mb_index)))
    return;
if (tok != RPAREN)
    dfaerror(dcgettext(((void *)0), "Unbalanced (", 5));

....
Skipping only addifexit:Priority 4875
At location src/dfa.c:1274
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(tok, cur_mb_index)))
    return;
tok = lex();

....
Skipping nonlast:Priority -396
At location src/dfa.c:1315
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int tindex, ntokens, i;

....
Skipping nonlast:Priority -396
At location src/dfa.c:1315
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int tindex, ntokens, i;

....
Skipping nonlast:Priority -396
At location src/dfa.c:1315
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
int tindex, ntokens, i;

....
Skipping nonlast:Priority -396
At location src/dfa.c:1315
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
int tindex, ntokens, i;

....
Skipping nonlast:Priority -396
At location src/dfa.c:1315
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
int tindex, ntokens, i;

....
Skipping nonlast:Priority -396
At location src/dfa.c:1315
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
int tindex, ntokens, i;

....
Skipping nonlast:Priority -396
At location src/dfa.c:1315
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int tindex, ntokens, i;

....
Skipping nonlast:Priority -396
At location src/dfa.c:1315
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int tindex, ntokens, i;

....
Skipping nonlast:Priority -396
At location src/dfa.c:1315
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int tindex, ntokens, i;

....
Skipping nonlast addifexit:Priority 4604
At location src/dfa.c:1315
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(tok, dfa, maxrep, minrep)))
    return;
int tindex, ntokens, i;

....
Skipping nonlast:Priority 7105
At location src/dfa.c:1317
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
atom();

....
Skipping nonlast:Priority 7105
At location src/dfa.c:1317
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
atom();

....
Skipping nonlast:Priority 7105
At location src/dfa.c:1317
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
atom();

....
Skipping nonlast:Priority 7105
At location src/dfa.c:1317
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
atom();

....
Skipping nonlast:Priority 7105
At location src/dfa.c:1317
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
atom();

....
Skipping nonlast:Priority 7105
At location src/dfa.c:1317
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
atom();

....
Skipping nonlast:Priority 7105
At location src/dfa.c:1317
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
atom();

....
Skipping nonlast:Priority 7105
At location src/dfa.c:1317
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
atom();

....
Skipping nonlast:Priority 7105
At location src/dfa.c:1317
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
atom();

....
Skipping nonlast addifexit:Priority 12105
At location src/dfa.c:1317
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(tok, ntokens, dfa, tindex, maxrep, minrep, i)))
    return;
atom();

....
Skipping isstmt addifexit:Priority 4628
At location src/dfa.c:1318
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(tok, ntokens, dfa, tindex, maxrep, minrep, i)))
    return;
while (tok == QMARK || tok == STAR || tok == PLUS || tok == REPMN)
    if (tok == REPMN) {
        ntokens = nsubtoks(dfa->tindex);
        tindex = dfa->tindex - ntokens;
        if (maxrep < 0)
            addtok(PLUS);
        if (minrep == 0)
            addtok(QMARK);
        for (i = 1; i < minrep; ++i) {
            copytoks(tindex, ntokens);
            addtok(CAT);
        }
        for (; i < maxrep; ++i) {
            copytoks(tindex, ntokens);
            addtok(QMARK);
            addtok(CAT);
        }
        tok = lex();
    } else {
        addtok(tok);
        tok = lex();
    }

....
Skipping nonlast:Priority 4597
At location src/dfa.c:1342
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
addtok(tok);

....
Skipping nonlast:Priority 4597
At location src/dfa.c:1342
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
addtok(tok);

....
Skipping nonlast:Priority 4597
At location src/dfa.c:1342
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
addtok(tok);

....
Skipping nonlast:Priority 4597
At location src/dfa.c:1342
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
addtok(tok);

....
Skipping nonlast:Priority 4597
At location src/dfa.c:1342
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
addtok(tok);

....
Skipping nonlast:Priority 4597
At location src/dfa.c:1342
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
addtok(tok);

....
Skipping nonlast:Priority 4597
At location src/dfa.c:1342
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
addtok(tok);

....
Skipping nonlast:Priority 4597
At location src/dfa.c:1342
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
addtok(tok);

....
Skipping nonlast:Priority 4597
At location src/dfa.c:1342
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
addtok(tok);

....
Skipping nonlast addifexit:Priority 9597
At location src/dfa.c:1342
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(tok, tindex, ntokens, i, maxrep, minrep, dfa)))
    return;
addtok(tok);

....
Skipping nonlast addifexit:Priority 9597
At location src/dfa.c:1342
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(tok, tindex, ntokens, i, maxrep, minrep, dfa)))
    break;
addtok(tok);

....
Skipping nonlast:Priority 7103
At location src/dfa.c:1350
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
closure();

....
Skipping nonlast:Priority 7103
At location src/dfa.c:1350
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
closure();

....
Skipping nonlast:Priority 7103
At location src/dfa.c:1350
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
closure();

....
Skipping nonlast:Priority 7103
At location src/dfa.c:1350
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
closure();

....
Skipping nonlast:Priority 7103
At location src/dfa.c:1350
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
closure();

....
Skipping nonlast:Priority 7103
At location src/dfa.c:1350
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
closure();

....
Skipping nonlast:Priority 7103
At location src/dfa.c:1350
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
closure();

....
Skipping nonlast:Priority 7103
At location src/dfa.c:1350
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
closure();

....
Skipping nonlast:Priority 7103
At location src/dfa.c:1350
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
closure();

....
Skipping nonlast addifexit:Priority 12103
At location src/dfa.c:1350
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(tok)))
    return;
closure();

....
Skipping isstmt addifexit:Priority 4616
At location src/dfa.c:1351
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(tok)))
    return;
while (tok != RPAREN && tok != OR && tok >= 0)
    {
        closure();
        addtok(CAT);
    }

....
Skipping nonlast:Priority 4599
At location src/dfa.c:1353
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
closure();

....
Skipping nonlast:Priority 4599
At location src/dfa.c:1353
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
closure();

....
Skipping nonlast:Priority 4599
At location src/dfa.c:1353
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
closure();

....
Skipping nonlast:Priority 4599
At location src/dfa.c:1353
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
closure();

....
Skipping nonlast:Priority 4599
At location src/dfa.c:1353
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
closure();

....
Skipping nonlast:Priority 4599
At location src/dfa.c:1353
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
closure();

....
Skipping nonlast:Priority 4599
At location src/dfa.c:1353
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
closure();

....
Skipping nonlast:Priority 4599
At location src/dfa.c:1353
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
closure();

....
Skipping nonlast:Priority 4599
At location src/dfa.c:1353
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
closure();

....
Skipping nonlast addifexit:Priority 9599
At location src/dfa.c:1353
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(tok)))
    return;
closure();

....
Skipping nonlast addifexit:Priority 9599
At location src/dfa.c:1353
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(tok)))
    break;
closure();

....
Skipping nonlast:Priority 7102
At location src/dfa.c:1361
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
branch();

....
Skipping nonlast:Priority 7102
At location src/dfa.c:1361
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
branch();

....
Skipping nonlast:Priority 7102
At location src/dfa.c:1361
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
branch();

....
Skipping nonlast:Priority 7102
At location src/dfa.c:1361
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
branch();

....
Skipping nonlast:Priority 7102
At location src/dfa.c:1361
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
branch();

....
Skipping nonlast:Priority 7102
At location src/dfa.c:1361
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
branch();

....
Skipping nonlast:Priority 7102
At location src/dfa.c:1361
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
branch();

....
Skipping nonlast:Priority 7102
At location src/dfa.c:1361
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
branch();

....
Skipping nonlast:Priority 7102
At location src/dfa.c:1361
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
branch();

....
Skipping nonlast addifexit:Priority 12102
At location src/dfa.c:1361
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(tok, toplevel)))
    return;
branch();

....
Skipping isstmt addifexit:Priority 4630
At location src/dfa.c:1362
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(tok, toplevel)))
    return;
while (tok == OR)
    {
        tok = lex();
        branch();
        if (toplevel)
            addtok(ORTOP);
        else
            addtok(OR);
    }

....
Skipping nonlast:Priority 4882
At location src/dfa.c:1364
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
tok = lex();

....
Skipping nonlast:Priority 4882
At location src/dfa.c:1364
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
tok = lex();

....
Skipping nonlast:Priority 4882
At location src/dfa.c:1364
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
tok = lex();

....
Skipping nonlast:Priority 4882
At location src/dfa.c:1364
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
tok = lex();

....
Skipping nonlast:Priority 4882
At location src/dfa.c:1364
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
tok = lex();

....
Skipping nonlast:Priority 4882
At location src/dfa.c:1364
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
tok = lex();

....
Skipping nonlast:Priority 4882
At location src/dfa.c:1364
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
tok = lex();

....
Skipping nonlast:Priority 4882
At location src/dfa.c:1364
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
tok = lex();

....
Skipping nonlast:Priority 4882
At location src/dfa.c:1364
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
tok = lex();

....
Skipping nonlast addifexit:Priority 9882
At location src/dfa.c:1364
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(tok, toplevel)))
    return;
tok = lex();

....
Skipping nonlast addifexit:Priority 9882
At location src/dfa.c:1364
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(tok, toplevel)))
    break;
tok = lex();

....
Skipping nonlast:Priority -115
At location src/dfa.c:1365
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
branch();

....
Skipping nonlast:Priority -115
At location src/dfa.c:1365
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
branch();

....
Skipping nonlast:Priority -115
At location src/dfa.c:1365
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
branch();

....
Skipping nonlast:Priority -115
At location src/dfa.c:1365
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
branch();

....
Skipping nonlast:Priority -115
At location src/dfa.c:1365
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
branch();

....
Skipping nonlast:Priority -115
At location src/dfa.c:1365
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
branch();

....
Skipping nonlast:Priority -115
At location src/dfa.c:1365
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
branch();

....
Skipping nonlast:Priority -115
At location src/dfa.c:1365
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
branch();

....
Skipping nonlast:Priority -115
At location src/dfa.c:1365
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
branch();

....
Skipping nonlast addifexit:Priority 4885
At location src/dfa.c:1365
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(toplevel, tok)))
    return;
branch();

....
Skipping nonlast addifexit:Priority 4885
At location src/dfa.c:1365
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(toplevel, tok)))
    break;
branch();

....
Skipping isstmt addifexit:Priority 3636
At location src/dfa.c:1366
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(toplevel, tok)))
    return;
if (toplevel)
    addtok(ORTOP);
else
    addtok(OR);

....
Skipping isstmt addifexit:Priority 3636
At location src/dfa.c:1366
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(toplevel, tok)))
    break;
if (toplevel)
    addtok(ORTOP);
else
    addtok(OR);

....
Skipping nonlast:Priority -113
At location src/dfa.c:1369
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    addtok(OR);
}

....
Skipping nonlast:Priority -113
At location src/dfa.c:1369
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    addtok(OR);
}

....
Skipping nonlast:Priority -113
At location src/dfa.c:1369
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        parse_bracket_exp_mb();
        return lasttok = MBCSET;
    }
    addtok(OR);
}

....
Skipping nonlast:Priority -113
At location src/dfa.c:1369
--Src File: src/dfa.c
Fragment 0:
{
    if (0 != 0)
        dfaerror(0);
    else
        return lasttok = END;
    addtok(OR);
}

....
Skipping nonlast:Priority -113
At location src/dfa.c:1369
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
    else
        return lasttok = END;
    addtok(OR);
}

....
Skipping nonlast:Priority -113
At location src/dfa.c:1369
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
    else
        return lasttok = END;
    addtok(OR);
}

....
Skipping nonlast:Priority -113
At location src/dfa.c:1369
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    addtok(OR);
}

....
Skipping nonlast:Priority -113
At location src/dfa.c:1369
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    addtok(OR);
}

....
Skipping nonlast:Priority -113
At location src/dfa.c:1369
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    addtok(OR);
}

....
Skipping nonlast addifexit:Priority 4887
At location src/dfa.c:1369
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(toplevel, tok)))
        return;
    addtok(OR);
}

....
Skipping nonlast addifexit:Priority 4887
At location src/dfa.c:1369
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(toplevel, tok)))
        break;
    addtok(OR);
}

....
Skipping nonlast:Priority 7070
At location src/dfa.c:1379
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
dfa = d;

....
Skipping nonlast:Priority 7070
At location src/dfa.c:1379
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
dfa = d;

....
Skipping nonlast:Priority 7070
At location src/dfa.c:1379
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
dfa = d;

....
Skipping nonlast:Priority 7070
At location src/dfa.c:1379
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
dfa = d;

....
Skipping nonlast:Priority 7070
At location src/dfa.c:1379
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
dfa = d;

....
Skipping nonlast:Priority 7070
At location src/dfa.c:1379
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
dfa = d;

....
Skipping nonlast:Priority 7070
At location src/dfa.c:1379
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
dfa = d;

....
Skipping nonlast:Priority 7070
At location src/dfa.c:1379
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
dfa = d;

....
Skipping nonlast:Priority 7070
At location src/dfa.c:1379
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
dfa = d;

....
Skipping nonlast addifexit:Priority 12070
At location src/dfa.c:1379
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, dfa, s, lexptr, len, lexleft, lasttok, laststart, parens, hard_LC_COLLATE, cur_mb_index, cur_mb_len, syntax_bits_set, tok, depth, d->depth, d->nregexps, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->nleaves, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->tokens, dfa->tindex, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts)))
    return;
dfa = d;

....
Skipping nonlast:Priority -429
At location src/dfa.c:1380
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
lexptr = s;

....
Skipping nonlast:Priority -429
At location src/dfa.c:1380
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
lexptr = s;

....
Skipping nonlast:Priority -429
At location src/dfa.c:1380
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
lexptr = s;

....
Skipping nonlast:Priority -429
At location src/dfa.c:1380
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
lexptr = s;

....
Skipping nonlast:Priority -429
At location src/dfa.c:1380
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
lexptr = s;

....
Skipping nonlast:Priority -429
At location src/dfa.c:1380
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
lexptr = s;

....
Skipping nonlast:Priority -429
At location src/dfa.c:1380
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
lexptr = s;

....
Skipping nonlast:Priority -429
At location src/dfa.c:1380
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
lexptr = s;

....
Skipping nonlast:Priority -429
At location src/dfa.c:1380
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
lexptr = s;

....
Skipping nonlast addifexit:Priority 4571
At location src/dfa.c:1380
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, lexptr, len, d, dfa, lexleft, lasttok, laststart, parens, hard_LC_COLLATE, cur_mb_index, cur_mb_len, syntax_bits_set, tok, depth, d->depth, d->nregexps, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->nleaves, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->tokens, dfa->tindex, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts)))
    return;
lexptr = s;

....
Skipping nonlast:Priority -428
At location src/dfa.c:1381
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
lexleft = len;

....
Skipping nonlast:Priority -428
At location src/dfa.c:1381
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
lexleft = len;

....
Skipping nonlast:Priority -428
At location src/dfa.c:1381
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
lexleft = len;

....
Skipping nonlast:Priority -428
At location src/dfa.c:1381
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
lexleft = len;

....
Skipping nonlast:Priority -428
At location src/dfa.c:1381
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
lexleft = len;

....
Skipping nonlast:Priority -428
At location src/dfa.c:1381
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
lexleft = len;

....
Skipping nonlast:Priority -428
At location src/dfa.c:1381
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
lexleft = len;

....
Skipping nonlast:Priority -428
At location src/dfa.c:1381
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
lexleft = len;

....
Skipping nonlast:Priority -428
At location src/dfa.c:1381
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
lexleft = len;

....
Skipping nonlast addifexit:Priority 4572
At location src/dfa.c:1381
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(len, lexleft, s, lexptr, lasttok, d, dfa, laststart, parens, hard_LC_COLLATE, cur_mb_index, cur_mb_len, syntax_bits_set, tok, depth)))
    return;
lexleft = len;

....
Skipping nonlast:Priority -427
At location src/dfa.c:1382
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
lasttok = END;

....
Skipping nonlast:Priority -427
At location src/dfa.c:1382
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
lasttok = END;

....
Skipping nonlast:Priority -427
At location src/dfa.c:1382
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
lasttok = END;

....
Skipping nonlast:Priority -427
At location src/dfa.c:1382
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
lasttok = END;

....
Skipping nonlast:Priority -427
At location src/dfa.c:1382
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
lasttok = END;

....
Skipping nonlast:Priority -427
At location src/dfa.c:1382
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
lasttok = END;

....
Skipping nonlast:Priority -427
At location src/dfa.c:1382
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
lasttok = END;

....
Skipping nonlast:Priority -427
At location src/dfa.c:1382
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
lasttok = END;

....
Skipping nonlast:Priority -427
At location src/dfa.c:1382
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
lasttok = END;

....
Skipping nonlast addifexit:Priority 4573
At location src/dfa.c:1382
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lasttok, len, lexleft, laststart, s, lexptr, parens, d, dfa, hard_LC_COLLATE, cur_mb_index, cur_mb_len, syntax_bits_set, tok, depth)))
    return;
lasttok = END;

....
Skipping nonlast:Priority -426
At location src/dfa.c:1383
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
laststart = 1;

....
Skipping nonlast:Priority -426
At location src/dfa.c:1383
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
laststart = 1;

....
Skipping nonlast:Priority -426
At location src/dfa.c:1383
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
laststart = 1;

....
Skipping nonlast:Priority -426
At location src/dfa.c:1383
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
laststart = 1;

....
Skipping nonlast:Priority -426
At location src/dfa.c:1383
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
laststart = 1;

....
Skipping nonlast:Priority -426
At location src/dfa.c:1383
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
laststart = 1;

....
Skipping nonlast:Priority -426
At location src/dfa.c:1383
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
laststart = 1;

....
Skipping nonlast:Priority -426
At location src/dfa.c:1383
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
laststart = 1;

....
Skipping nonlast:Priority -426
At location src/dfa.c:1383
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
laststart = 1;

....
Skipping nonlast addifexit:Priority 4574
At location src/dfa.c:1383
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(laststart, lasttok, parens, len, lexleft, s, lexptr, hard_LC_COLLATE, d, dfa, cur_mb_index, cur_mb_len, syntax_bits_set, tok, depth)))
    return;
laststart = 1;

....
Skipping nonlast:Priority -425
At location src/dfa.c:1384
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
parens = 0;

....
Skipping nonlast:Priority -425
At location src/dfa.c:1384
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
parens = 0;

....
Skipping nonlast:Priority -425
At location src/dfa.c:1384
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
parens = 0;

....
Skipping nonlast:Priority -425
At location src/dfa.c:1384
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
parens = 0;

....
Skipping nonlast:Priority -425
At location src/dfa.c:1384
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
parens = 0;

....
Skipping nonlast:Priority -425
At location src/dfa.c:1384
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
parens = 0;

....
Skipping nonlast:Priority -425
At location src/dfa.c:1384
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
parens = 0;

....
Skipping nonlast:Priority -425
At location src/dfa.c:1384
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
parens = 0;

....
Skipping nonlast:Priority -425
At location src/dfa.c:1384
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
parens = 0;

....
Skipping nonlast addifexit:Priority 4575
At location src/dfa.c:1384
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(parens, laststart, lasttok, hard_LC_COLLATE, len, lexleft, s, lexptr, d, dfa, cur_mb_index, cur_mb_len, syntax_bits_set, tok, depth)))
    return;
parens = 0;

....
Skipping nonlast:Priority -424
At location src/dfa.c:1386
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
hard_LC_COLLATE = hard_locale(3);

....
Skipping nonlast:Priority -424
At location src/dfa.c:1386
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
hard_LC_COLLATE = hard_locale(3);

....
Skipping nonlast:Priority -424
At location src/dfa.c:1386
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
hard_LC_COLLATE = hard_locale(3);

....
Skipping nonlast:Priority -424
At location src/dfa.c:1386
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
hard_LC_COLLATE = hard_locale(3);

....
Skipping nonlast:Priority -424
At location src/dfa.c:1386
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
hard_LC_COLLATE = hard_locale(3);

....
Skipping nonlast:Priority -424
At location src/dfa.c:1386
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
hard_LC_COLLATE = hard_locale(3);

....
Skipping nonlast:Priority -424
At location src/dfa.c:1386
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
hard_LC_COLLATE = hard_locale(3);

....
Skipping nonlast:Priority -424
At location src/dfa.c:1386
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
hard_LC_COLLATE = hard_locale(3);

....
Skipping nonlast:Priority -424
At location src/dfa.c:1386
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
hard_LC_COLLATE = hard_locale(3);

....
Skipping nonlast addifexit:Priority 4576
At location src/dfa.c:1386
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(hard_LC_COLLATE, parens, laststart, lasttok, len, lexleft, cur_mb_index, s, lexptr, cur_mb_len, d, dfa, syntax_bits_set, tok, depth)))
    return;
hard_LC_COLLATE = hard_locale(3);

....
Skipping nonlast:Priority -411
At location src/dfa.c:1389
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if ((__ctype_get_mb_cur_max()) > 1) {
    cur_mb_index = 0;
    cur_mb_len = 0;
    memset(&mbs, 0, sizeof(mbstate_t));
}

....
Skipping nonlast:Priority -411
At location src/dfa.c:1389
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if ((__ctype_get_mb_cur_max()) > 1) {
    cur_mb_index = 0;
    cur_mb_len = 0;
    memset(&mbs, 0, sizeof(mbstate_t));
}

....
Skipping nonlast:Priority -411
At location src/dfa.c:1389
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
if ((__ctype_get_mb_cur_max()) > 1) {
    cur_mb_index = 0;
    cur_mb_len = 0;
    memset(&mbs, 0, sizeof(mbstate_t));
}

....
Skipping nonlast:Priority -411
At location src/dfa.c:1389
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
if ((__ctype_get_mb_cur_max()) > 1) {
    cur_mb_index = 0;
    cur_mb_len = 0;
    memset(&mbs, 0, sizeof(mbstate_t));
}

....
Skipping nonlast:Priority -411
At location src/dfa.c:1389
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
if ((__ctype_get_mb_cur_max()) > 1) {
    cur_mb_index = 0;
    cur_mb_len = 0;
    memset(&mbs, 0, sizeof(mbstate_t));
}

....
Skipping nonlast:Priority -411
At location src/dfa.c:1389
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
if ((__ctype_get_mb_cur_max()) > 1) {
    cur_mb_index = 0;
    cur_mb_len = 0;
    memset(&mbs, 0, sizeof(mbstate_t));
}

....
Skipping nonlast:Priority -411
At location src/dfa.c:1389
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if ((__ctype_get_mb_cur_max()) > 1) {
    cur_mb_index = 0;
    cur_mb_len = 0;
    memset(&mbs, 0, sizeof(mbstate_t));
}

....
Skipping nonlast:Priority -411
At location src/dfa.c:1389
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if ((__ctype_get_mb_cur_max()) > 1) {
    cur_mb_index = 0;
    cur_mb_len = 0;
    memset(&mbs, 0, sizeof(mbstate_t));
}

....
Skipping nonlast:Priority -411
At location src/dfa.c:1389
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if ((__ctype_get_mb_cur_max()) > 1) {
    cur_mb_index = 0;
    cur_mb_len = 0;
    memset(&mbs, 0, sizeof(mbstate_t));
}

....
Skipping nonlast addifexit:Priority 3339
At location src/dfa.c:1389
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cur_mb_index, hard_LC_COLLATE, cur_mb_len, parens, laststart, lasttok, len, syntax_bits_set, lexleft, s, lexptr, d, dfa, tok, depth)))
    return;
if ((__ctype_get_mb_cur_max()) > 1) {
    cur_mb_index = 0;
    cur_mb_len = 0;
    memset(&mbs, 0, sizeof(mbstate_t));
}

....
Skipping nonlast:Priority 4983
At location src/dfa.c:1391
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
cur_mb_index = 0;

....
Skipping nonlast:Priority 4983
At location src/dfa.c:1391
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
cur_mb_index = 0;

....
Skipping nonlast:Priority 4983
At location src/dfa.c:1391
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
cur_mb_index = 0;

....
Skipping nonlast:Priority 4983
At location src/dfa.c:1391
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
cur_mb_index = 0;

....
Skipping nonlast:Priority 4983
At location src/dfa.c:1391
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
cur_mb_index = 0;

....
Skipping nonlast:Priority 4983
At location src/dfa.c:1391
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
cur_mb_index = 0;

....
Skipping nonlast:Priority 4983
At location src/dfa.c:1391
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
cur_mb_index = 0;

....
Skipping nonlast:Priority 4983
At location src/dfa.c:1391
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
cur_mb_index = 0;

....
Skipping nonlast:Priority 4983
At location src/dfa.c:1391
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
cur_mb_index = 0;

....
Skipping nonlast addifexit:Priority 9983
At location src/dfa.c:1391
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cur_mb_index, cur_mb_len, hard_LC_COLLATE, syntax_bits_set, parens, laststart, lasttok, tok, len, d, lexleft, depth, s, lexptr, dfa)))
    return;
cur_mb_index = 0;

....
Skipping nonlast:Priority -16
At location src/dfa.c:1392
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
cur_mb_len = 0;

....
Skipping nonlast:Priority -16
At location src/dfa.c:1392
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
cur_mb_len = 0;

....
Skipping nonlast:Priority -16
At location src/dfa.c:1392
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
cur_mb_len = 0;

....
Skipping nonlast:Priority -16
At location src/dfa.c:1392
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
cur_mb_len = 0;

....
Skipping nonlast:Priority -16
At location src/dfa.c:1392
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
cur_mb_len = 0;

....
Skipping nonlast:Priority -16
At location src/dfa.c:1392
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
cur_mb_len = 0;

....
Skipping nonlast:Priority -16
At location src/dfa.c:1392
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
cur_mb_len = 0;

....
Skipping nonlast:Priority -16
At location src/dfa.c:1392
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
cur_mb_len = 0;

....
Skipping nonlast:Priority -16
At location src/dfa.c:1392
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
cur_mb_len = 0;

....
Skipping nonlast addifexit:Priority 4984
At location src/dfa.c:1392
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cur_mb_len, cur_mb_index, syntax_bits_set, hard_LC_COLLATE, parens, tok, d, laststart, depth, lasttok, len, lexleft, s, lexptr, dfa, mbs.__count)))
    return;
cur_mb_len = 0;

....
IsErr:priority 4590
at location src/dfa.c:1397
--src file: src/dfa.c
fragment 0:
if (!(__abst_hole(syntax_bits_set, tok, d, depth, cur_mb_len, cur_mb_index, hard_lc_collate, parens, laststart, lasttok, len, lexleft, s, lexptr, dfa)))
    if (!syntax_bits_set)
        dfaerror(dcgettext(((void *)0), "no syntax specified", 5));

....
Skipping error ifguard:Priority 4590
At location src/dfa.c:1397
--Src File: src/dfa.c
Fragment 0:
if (!(__abst_hole(syntax_bits_set, tok, d, depth, cur_mb_len, cur_mb_index, hard_LC_COLLATE, parens, laststart, lasttok, len, lexleft, s, lexptr, dfa)))
    if (!syntax_bits_set)
        dfaerror(dcgettext(((void *)0), "No syntax specified", 5));

....
Skipping nonlast:Priority -410
At location src/dfa.c:1397
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (!syntax_bits_set)
    dfaerror(dcgettext(((void *)0), "No syntax specified", 5));

....
Skipping nonlast:Priority -410
At location src/dfa.c:1397
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (!syntax_bits_set)
    dfaerror(dcgettext(((void *)0), "No syntax specified", 5));

....
Skipping nonlast:Priority -410
At location src/dfa.c:1397
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
if (!syntax_bits_set)
    dfaerror(dcgettext(((void *)0), "No syntax specified", 5));

....
Skipping nonlast:Priority -410
At location src/dfa.c:1397
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
if (!syntax_bits_set)
    dfaerror(dcgettext(((void *)0), "No syntax specified", 5));

....
Skipping nonlast:Priority -410
At location src/dfa.c:1397
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
if (!syntax_bits_set)
    dfaerror(dcgettext(((void *)0), "No syntax specified", 5));

....
Skipping nonlast:Priority -410
At location src/dfa.c:1397
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
if (!syntax_bits_set)
    dfaerror(dcgettext(((void *)0), "No syntax specified", 5));

....
Skipping nonlast:Priority -410
At location src/dfa.c:1397
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (!syntax_bits_set)
    dfaerror(dcgettext(((void *)0), "No syntax specified", 5));

....
Skipping nonlast:Priority -410
At location src/dfa.c:1397
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (!syntax_bits_set)
    dfaerror(dcgettext(((void *)0), "No syntax specified", 5));

....
Skipping nonlast:Priority -410
At location src/dfa.c:1397
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (!syntax_bits_set)
    dfaerror(dcgettext(((void *)0), "No syntax specified", 5));

....
Skipping nonlast addifexit:Priority 3340
At location src/dfa.c:1397
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(syntax_bits_set, tok, d, depth, cur_mb_len, cur_mb_index, hard_LC_COLLATE, parens, laststart, lasttok, len, lexleft, s, lexptr, dfa)))
    return;
if (!syntax_bits_set)
    dfaerror(dcgettext(((void *)0), "No syntax specified", 5));

....
Skipping nonlast:Priority -409
At location src/dfa.c:1400
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
tok = lex();

....
Skipping nonlast:Priority -409
At location src/dfa.c:1400
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
tok = lex();

....
Skipping nonlast:Priority -409
At location src/dfa.c:1400
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
tok = lex();

....
Skipping nonlast:Priority -409
At location src/dfa.c:1400
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
tok = lex();

....
Skipping nonlast:Priority -409
At location src/dfa.c:1400
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
tok = lex();

....
Skipping nonlast:Priority -409
At location src/dfa.c:1400
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
tok = lex();

....
Skipping nonlast:Priority -409
At location src/dfa.c:1400
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
tok = lex();

....
Skipping nonlast:Priority -409
At location src/dfa.c:1400
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
tok = lex();

....
Skipping nonlast:Priority -409
At location src/dfa.c:1400
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
tok = lex();

....
Skipping nonlast addifexit:Priority 4591
At location src/dfa.c:1400
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(tok, d, depth, d->depth, syntax_bits_set, cur_mb_len, d->nregexps, cur_mb_index, hard_LC_COLLATE, parens, laststart, lasttok, len, lexleft, s, lexptr, dfa, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->nleaves, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
tok = lex();

....
Skipping nonlast:Priority -408
At location src/dfa.c:1401
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
depth = d->depth;

....
Skipping nonlast:Priority -408
At location src/dfa.c:1401
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
depth = d->depth;

....
Skipping nonlast:Priority -408
At location src/dfa.c:1401
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
depth = d->depth;

....
Skipping nonlast:Priority -408
At location src/dfa.c:1401
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
depth = d->depth;

....
Skipping nonlast:Priority -408
At location src/dfa.c:1401
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
depth = d->depth;

....
Skipping nonlast:Priority -408
At location src/dfa.c:1401
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
depth = d->depth;

....
Skipping nonlast:Priority -408
At location src/dfa.c:1401
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
depth = d->depth;

....
Skipping nonlast:Priority -408
At location src/dfa.c:1401
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
depth = d->depth;

....
Skipping nonlast:Priority -408
At location src/dfa.c:1401
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
depth = d->depth;

....
Skipping nonlast addifexit:Priority 4592
At location src/dfa.c:1401
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, depth, d->depth, tok, syntax_bits_set, d->nregexps, cur_mb_len, cur_mb_index, hard_LC_COLLATE, parens, laststart, lasttok, len, lexleft, s, lexptr, dfa, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->nleaves, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
depth = d->depth;

....
Skipping nonlast:Priority -407
At location src/dfa.c:1403
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
regexp(1);

....
Skipping nonlast:Priority -407
At location src/dfa.c:1403
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
regexp(1);

....
Skipping nonlast:Priority -407
At location src/dfa.c:1403
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
regexp(1);

....
Skipping nonlast:Priority -407
At location src/dfa.c:1403
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
regexp(1);

....
Skipping nonlast:Priority -407
At location src/dfa.c:1403
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
regexp(1);

....
Skipping nonlast:Priority -407
At location src/dfa.c:1403
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
regexp(1);

....
Skipping nonlast:Priority -407
At location src/dfa.c:1403
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
regexp(1);

....
Skipping nonlast:Priority -407
At location src/dfa.c:1403
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
regexp(1);

....
Skipping nonlast:Priority -407
At location src/dfa.c:1403
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
regexp(1);

....
Skipping nonlast addifexit:Priority 4593
At location src/dfa.c:1403
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, tok, depth, syntax_bits_set, cur_mb_len, cur_mb_index, hard_LC_COLLATE, parens, laststart, lasttok, len, lexleft, s, lexptr, dfa)))
    return;
regexp(1);

....
IsErr:priority 4631
at location src/dfa.c:1405
--src file: src/dfa.c
fragment 0:
if (!(__abst_hole(tok, d, depth, syntax_bits_set, cur_mb_len, cur_mb_index, hard_lc_collate, parens, laststart, lasttok, len, lexleft, s, lexptr, dfa)))
    if (tok != end)
        dfaerror(dcgettext(((void *)0), "unbalanced )", 5));

....
Skipping error ifguard:Priority 4631
At location src/dfa.c:1405
--Src File: src/dfa.c
Fragment 0:
if (!(__abst_hole(tok, d, depth, syntax_bits_set, cur_mb_len, cur_mb_index, hard_LC_COLLATE, parens, laststart, lasttok, len, lexleft, s, lexptr, dfa)))
    if (tok != END)
        dfaerror(dcgettext(((void *)0), "Unbalanced )", 5));

....
Skipping nonlast:Priority -369
At location src/dfa.c:1405
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (tok != END)
    dfaerror(dcgettext(((void *)0), "Unbalanced )", 5));

....
Skipping nonlast:Priority -369
At location src/dfa.c:1405
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (tok != END)
    dfaerror(dcgettext(((void *)0), "Unbalanced )", 5));

....
Skipping nonlast:Priority -369
At location src/dfa.c:1405
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
if (tok != END)
    dfaerror(dcgettext(((void *)0), "Unbalanced )", 5));

....
Skipping nonlast:Priority -369
At location src/dfa.c:1405
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
if (tok != END)
    dfaerror(dcgettext(((void *)0), "Unbalanced )", 5));

....
Skipping nonlast:Priority -369
At location src/dfa.c:1405
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
if (tok != END)
    dfaerror(dcgettext(((void *)0), "Unbalanced )", 5));

....
Skipping nonlast:Priority -369
At location src/dfa.c:1405
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
if (tok != END)
    dfaerror(dcgettext(((void *)0), "Unbalanced )", 5));

....
Skipping nonlast:Priority -369
At location src/dfa.c:1405
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (tok != END)
    dfaerror(dcgettext(((void *)0), "Unbalanced )", 5));

....
Skipping nonlast:Priority -369
At location src/dfa.c:1405
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (tok != END)
    dfaerror(dcgettext(((void *)0), "Unbalanced )", 5));

....
Skipping nonlast:Priority -369
At location src/dfa.c:1405
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (tok != END)
    dfaerror(dcgettext(((void *)0), "Unbalanced )", 5));

....
Skipping nonlast addifexit:Priority 3381
At location src/dfa.c:1405
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(tok, d, depth, syntax_bits_set, cur_mb_len, cur_mb_index, hard_LC_COLLATE, parens, laststart, lasttok, len, lexleft, s, lexptr, dfa)))
    return;
if (tok != END)
    dfaerror(dcgettext(((void *)0), "Unbalanced )", 5));

....
Skipping nonlast:Priority -368
At location src/dfa.c:1408
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
addtok(END - d->nregexps);

....
Skipping nonlast:Priority -368
At location src/dfa.c:1408
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
addtok(END - d->nregexps);

....
Skipping nonlast:Priority -368
At location src/dfa.c:1408
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
addtok(END - d->nregexps);

....
Skipping nonlast:Priority -368
At location src/dfa.c:1408
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
addtok(END - d->nregexps);

....
Skipping nonlast:Priority -368
At location src/dfa.c:1408
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
addtok(END - d->nregexps);

....
Skipping nonlast:Priority -368
At location src/dfa.c:1408
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
addtok(END - d->nregexps);

....
Skipping nonlast:Priority -368
At location src/dfa.c:1408
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
addtok(END - d->nregexps);

....
Skipping nonlast:Priority -368
At location src/dfa.c:1408
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
addtok(END - d->nregexps);

....
Skipping nonlast:Priority -368
At location src/dfa.c:1408
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
addtok(END - d->nregexps);

....
Skipping nonlast addifexit:Priority 4632
At location src/dfa.c:1408
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->nregexps, tok, depth, d->depth, syntax_bits_set, cur_mb_len, cur_mb_index, hard_LC_COLLATE, parens, laststart, lasttok, len, lexleft, s, lexptr, dfa, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->nleaves, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
addtok(END - d->nregexps);

....
Skipping nonlast:Priority -365
At location src/dfa.c:1409
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
addtok(CAT);

....
Skipping nonlast:Priority -365
At location src/dfa.c:1409
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
addtok(CAT);

....
Skipping nonlast:Priority -365
At location src/dfa.c:1409
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
addtok(CAT);

....
Skipping nonlast:Priority -365
At location src/dfa.c:1409
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
addtok(CAT);

....
Skipping nonlast:Priority -365
At location src/dfa.c:1409
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
addtok(CAT);

....
Skipping nonlast:Priority -365
At location src/dfa.c:1409
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
addtok(CAT);

....
Skipping nonlast:Priority -365
At location src/dfa.c:1409
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
addtok(CAT);

....
Skipping nonlast:Priority -365
At location src/dfa.c:1409
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
addtok(CAT);

....
Skipping nonlast:Priority -365
At location src/dfa.c:1409
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
addtok(CAT);

....
Skipping nonlast addifexit:Priority 4635
At location src/dfa.c:1409
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->nregexps, tok, depth, d->depth, syntax_bits_set, cur_mb_len, cur_mb_index, hard_LC_COLLATE, parens, laststart, lasttok, len, lexleft, s, lexptr, dfa, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->nleaves, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
addtok(CAT);

....
Skipping nonlast:Priority -357
At location src/dfa.c:1411
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (d->nregexps)
    addtok(ORTOP);

....
Skipping nonlast:Priority -357
At location src/dfa.c:1411
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (d->nregexps)
    addtok(ORTOP);

....
Skipping nonlast:Priority -357
At location src/dfa.c:1411
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
if (d->nregexps)
    addtok(ORTOP);

....
Skipping nonlast:Priority -357
At location src/dfa.c:1411
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
if (d->nregexps)
    addtok(ORTOP);

....
Skipping nonlast:Priority -357
At location src/dfa.c:1411
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
if (d->nregexps)
    addtok(ORTOP);

....
Skipping nonlast:Priority -357
At location src/dfa.c:1411
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
if (d->nregexps)
    addtok(ORTOP);

....
Skipping nonlast:Priority -357
At location src/dfa.c:1411
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (d->nregexps)
    addtok(ORTOP);

....
Skipping nonlast:Priority -357
At location src/dfa.c:1411
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (d->nregexps)
    addtok(ORTOP);

....
Skipping nonlast:Priority -357
At location src/dfa.c:1411
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (d->nregexps)
    addtok(ORTOP);

....
Skipping nonlast addifexit:Priority 3393
At location src/dfa.c:1411
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->nregexps, tok, depth, d->depth, syntax_bits_set, cur_mb_len, cur_mb_index, hard_LC_COLLATE, parens, laststart, lasttok, len, lexleft, s, lexptr, dfa, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->nleaves, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
if (d->nregexps)
    addtok(ORTOP);

....
Skipping nonlast:Priority -163
At location src/dfa.c:1423
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int i;

....
Skipping nonlast:Priority -163
At location src/dfa.c:1423
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int i;

....
Skipping nonlast:Priority -163
At location src/dfa.c:1423
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
int i;

....
Skipping nonlast:Priority -163
At location src/dfa.c:1423
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
int i;

....
Skipping nonlast:Priority -163
At location src/dfa.c:1423
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
int i;

....
Skipping nonlast:Priority -163
At location src/dfa.c:1423
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
int i;

....
Skipping nonlast:Priority -163
At location src/dfa.c:1423
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int i;

....
Skipping nonlast:Priority -163
At location src/dfa.c:1423
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int i;

....
Skipping nonlast:Priority -163
At location src/dfa.c:1423
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int i;

....
Skipping nonlast addifexit:Priority 4837
At location src/dfa.c:1423
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(src, dst)))
    return;
int i;

....
Skipping nonlast:Priority 7338
At location src/dfa.c:1425
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
for (i = 0; i < src->nelem; ++i) 
    dst->elems[i] = src->elems[i];

....
Skipping nonlast:Priority 7338
At location src/dfa.c:1425
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
for (i = 0; i < src->nelem; ++i) 
    dst->elems[i] = src->elems[i];

....
Skipping nonlast:Priority 7338
At location src/dfa.c:1425
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
for (i = 0; i < src->nelem; ++i) 
    dst->elems[i] = src->elems[i];

....
Skipping nonlast:Priority 7338
At location src/dfa.c:1425
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
for (i = 0; i < src->nelem; ++i) 
    dst->elems[i] = src->elems[i];

....
Skipping nonlast:Priority 7338
At location src/dfa.c:1425
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
for (i = 0; i < src->nelem; ++i) 
    dst->elems[i] = src->elems[i];

....
Skipping nonlast:Priority 7338
At location src/dfa.c:1425
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
for (i = 0; i < src->nelem; ++i) 
    dst->elems[i] = src->elems[i];

....
Skipping nonlast:Priority 7338
At location src/dfa.c:1425
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
for (i = 0; i < src->nelem; ++i) 
    dst->elems[i] = src->elems[i];

....
Skipping nonlast:Priority 7338
At location src/dfa.c:1425
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
for (i = 0; i < src->nelem; ++i) 
    dst->elems[i] = src->elems[i];

....
Skipping nonlast:Priority 7338
At location src/dfa.c:1425
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
for (i = 0; i < src->nelem; ++i) 
    dst->elems[i] = src->elems[i];

....
Skipping nonlast addifexit:Priority 12338
At location src/dfa.c:1425
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(src, i, src->nelem, dst, dst->elems, src->elems, dst->nelem)))
    return;
for (i = 0; i < src->nelem; ++i) 
    dst->elems[i] = src->elems[i];

....
Skipping nonlast:Priority -151
At location src/dfa.c:1437
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int count = s->nelem;

....
Skipping nonlast:Priority -151
At location src/dfa.c:1437
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int count = s->nelem;

....
Skipping nonlast:Priority -151
At location src/dfa.c:1437
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
int count = s->nelem;

....
Skipping nonlast:Priority -151
At location src/dfa.c:1437
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
int count = s->nelem;

....
Skipping nonlast:Priority -151
At location src/dfa.c:1437
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
int count = s->nelem;

....
Skipping nonlast:Priority -151
At location src/dfa.c:1437
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
int count = s->nelem;

....
Skipping nonlast:Priority -151
At location src/dfa.c:1437
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int count = s->nelem;

....
Skipping nonlast:Priority -151
At location src/dfa.c:1437
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int count = s->nelem;

....
Skipping nonlast:Priority -151
At location src/dfa.c:1437
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int count = s->nelem;

....
Skipping nonlast addifexit:Priority 4849
At location src/dfa.c:1437
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, s->nelem, s->elems)))
    return;
int count = s->nelem;

....
Skipping nonlast:Priority -150
At location src/dfa.c:1438
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int lo = 0, hi = count;

....
Skipping nonlast:Priority -150
At location src/dfa.c:1438
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int lo = 0, hi = count;

....
Skipping nonlast:Priority -150
At location src/dfa.c:1438
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
int lo = 0, hi = count;

....
Skipping nonlast:Priority -150
At location src/dfa.c:1438
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
int lo = 0, hi = count;

....
Skipping nonlast:Priority -150
At location src/dfa.c:1438
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
int lo = 0, hi = count;

....
Skipping nonlast:Priority -150
At location src/dfa.c:1438
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
int lo = 0, hi = count;

....
Skipping nonlast:Priority -150
At location src/dfa.c:1438
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int lo = 0, hi = count;

....
Skipping nonlast:Priority -150
At location src/dfa.c:1438
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int lo = 0, hi = count;

....
Skipping nonlast:Priority -150
At location src/dfa.c:1438
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int lo = 0, hi = count;

....
Skipping nonlast addifexit:Priority 4850
At location src/dfa.c:1438
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(count, s, s->nelem, s->elems)))
    return;
int lo = 0, hi = count;

....
Skipping nonlast:Priority 7351
At location src/dfa.c:1439
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
while (lo < hi)
    {
        int mid = ((unsigned int)lo + (unsigned int)hi) >> 1;
        if (s->elems[mid].index < p.index)
            lo = mid + 1;
        else
            hi = mid;
    }

....
Skipping nonlast:Priority 7351
At location src/dfa.c:1439
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
while (lo < hi)
    {
        int mid = ((unsigned int)lo + (unsigned int)hi) >> 1;
        if (s->elems[mid].index < p.index)
            lo = mid + 1;
        else
            hi = mid;
    }

....
Skipping nonlast:Priority 7351
At location src/dfa.c:1439
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
while (lo < hi)
    {
        int mid = ((unsigned int)lo + (unsigned int)hi) >> 1;
        if (s->elems[mid].index < p.index)
            lo = mid + 1;
        else
            hi = mid;
    }

....
Skipping nonlast:Priority 7351
At location src/dfa.c:1439
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
while (lo < hi)
    {
        int mid = ((unsigned int)lo + (unsigned int)hi) >> 1;
        if (s->elems[mid].index < p.index)
            lo = mid + 1;
        else
            hi = mid;
    }

....
Skipping nonlast:Priority 7351
At location src/dfa.c:1439
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
while (lo < hi)
    {
        int mid = ((unsigned int)lo + (unsigned int)hi) >> 1;
        if (s->elems[mid].index < p.index)
            lo = mid + 1;
        else
            hi = mid;
    }

....
Skipping nonlast:Priority 7351
At location src/dfa.c:1439
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
while (lo < hi)
    {
        int mid = ((unsigned int)lo + (unsigned int)hi) >> 1;
        if (s->elems[mid].index < p.index)
            lo = mid + 1;
        else
            hi = mid;
    }

....
Skipping nonlast:Priority 7351
At location src/dfa.c:1439
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
while (lo < hi)
    {
        int mid = ((unsigned int)lo + (unsigned int)hi) >> 1;
        if (s->elems[mid].index < p.index)
            lo = mid + 1;
        else
            hi = mid;
    }

....
Skipping nonlast:Priority 7351
At location src/dfa.c:1439
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
while (lo < hi)
    {
        int mid = ((unsigned int)lo + (unsigned int)hi) >> 1;
        if (s->elems[mid].index < p.index)
            lo = mid + 1;
        else
            hi = mid;
    }

....
Skipping nonlast:Priority 7351
At location src/dfa.c:1439
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
while (lo < hi)
    {
        int mid = ((unsigned int)lo + (unsigned int)hi) >> 1;
        if (s->elems[mid].index < p.index)
            lo = mid + 1;
        else
            hi = mid;
    }

....
Skipping nonlast addifexit:Priority 12351
At location src/dfa.c:1439
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lo, hi, count, s)))
    return;
while (lo < hi)
    {
        int mid = ((unsigned int)lo + (unsigned int)hi) >> 1;
        if (s->elems[mid].index < p.index)
            lo = mid + 1;
        else
            hi = mid;
    }

....
Skipping nonlast:Priority -147
At location src/dfa.c:1441
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int mid = ((unsigned int)lo + (unsigned int)hi) >> 1;

....
Skipping nonlast:Priority -147
At location src/dfa.c:1441
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int mid = ((unsigned int)lo + (unsigned int)hi) >> 1;

....
Skipping nonlast:Priority -147
At location src/dfa.c:1441
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
int mid = ((unsigned int)lo + (unsigned int)hi) >> 1;

....
Skipping nonlast:Priority -147
At location src/dfa.c:1441
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
int mid = ((unsigned int)lo + (unsigned int)hi) >> 1;

....
Skipping nonlast:Priority -147
At location src/dfa.c:1441
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
int mid = ((unsigned int)lo + (unsigned int)hi) >> 1;

....
Skipping nonlast:Priority -147
At location src/dfa.c:1441
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
int mid = ((unsigned int)lo + (unsigned int)hi) >> 1;

....
Skipping nonlast:Priority -147
At location src/dfa.c:1441
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int mid = ((unsigned int)lo + (unsigned int)hi) >> 1;

....
Skipping nonlast:Priority -147
At location src/dfa.c:1441
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int mid = ((unsigned int)lo + (unsigned int)hi) >> 1;

....
Skipping nonlast:Priority -147
At location src/dfa.c:1441
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int mid = ((unsigned int)lo + (unsigned int)hi) >> 1;

....
Skipping nonlast addifexit:Priority 4853
At location src/dfa.c:1441
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lo, hi, s, p.index, s->elems, count, s->nelem, p.constraint)))
    return;
int mid = ((unsigned int)lo + (unsigned int)hi) >> 1;

....
Skipping nonlast addifexit:Priority 4853
At location src/dfa.c:1441
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lo, hi, s, p.index, s->elems, count, s->nelem, p.constraint)))
    break;
int mid = ((unsigned int)lo + (unsigned int)hi) >> 1;

....
Skipping isstmt addifexit:Priority 8604
At location src/dfa.c:1442
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, mid, s->elems[mid].index, p.index, s->elems, lo, hi, count, s->nelem, p.constraint, s->elems[mid].constraint)))
    return;
if (s->elems[mid].index < p.index)
    lo = mid + 1;
else
    hi = mid;

....
Skipping isstmt addifexit:Priority 8604
At location src/dfa.c:1442
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, mid, s->elems[mid].index, p.index, s->elems, lo, hi, count, s->nelem, p.constraint, s->elems[mid].constraint)))
    break;
if (s->elems[mid].index < p.index)
    lo = mid + 1;
else
    hi = mid;

....
Skipping nonlast:Priority -148
At location src/dfa.c:1443
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    lo = mid + 1;
}

....
Skipping nonlast:Priority -148
At location src/dfa.c:1443
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    lo = mid + 1;
}

....
Skipping nonlast:Priority -148
At location src/dfa.c:1443
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        parse_bracket_exp_mb();
        return lasttok = MBCSET;
    }
    lo = mid + 1;
}

....
Skipping nonlast:Priority -148
At location src/dfa.c:1443
--Src File: src/dfa.c
Fragment 0:
{
    if (0 != 0)
        dfaerror(0);
    else
        return lasttok = END;
    lo = mid + 1;
}

....
Skipping nonlast:Priority -148
At location src/dfa.c:1443
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
    else
        return lasttok = END;
    lo = mid + 1;
}

....
Skipping nonlast:Priority -148
At location src/dfa.c:1443
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
    else
        return lasttok = END;
    lo = mid + 1;
}

....
Skipping nonlast:Priority -148
At location src/dfa.c:1443
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    lo = mid + 1;
}

....
Skipping nonlast:Priority -148
At location src/dfa.c:1443
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    lo = mid + 1;
}

....
Skipping nonlast:Priority -148
At location src/dfa.c:1443
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    lo = mid + 1;
}

....
Skipping nonlast addifexit:Priority 4852
At location src/dfa.c:1443
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(lo, mid, s, s->elems[mid].index, p.index, s->elems, hi, count, p.constraint, s->nelem, s->elems[mid].constraint)))
        return;
    lo = mid + 1;
}

....
Skipping nonlast addifexit:Priority 4852
At location src/dfa.c:1443
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(lo, mid, s, s->elems[mid].index, p.index, s->elems, hi, count, p.constraint, s->nelem, s->elems[mid].constraint)))
        break;
    lo = mid + 1;
}

....
Skipping nonlast:Priority -145
At location src/dfa.c:1445
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    hi = mid;
}

....
Skipping nonlast:Priority -145
At location src/dfa.c:1445
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    hi = mid;
}

....
Skipping nonlast:Priority -145
At location src/dfa.c:1445
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        parse_bracket_exp_mb();
        return lasttok = MBCSET;
    }
    hi = mid;
}

....
Skipping nonlast:Priority -145
At location src/dfa.c:1445
--Src File: src/dfa.c
Fragment 0:
{
    if (0 != 0)
        dfaerror(0);
    else
        return lasttok = END;
    hi = mid;
}

....
Skipping nonlast:Priority -145
At location src/dfa.c:1445
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
    else
        return lasttok = END;
    hi = mid;
}

....
Skipping nonlast:Priority -145
At location src/dfa.c:1445
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
    else
        return lasttok = END;
    hi = mid;
}

....
Skipping nonlast:Priority -145
At location src/dfa.c:1445
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    hi = mid;
}

....
Skipping nonlast:Priority -145
At location src/dfa.c:1445
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    hi = mid;
}

....
Skipping nonlast:Priority -145
At location src/dfa.c:1445
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    hi = mid;
}

....
Skipping nonlast addifexit:Priority 4855
At location src/dfa.c:1445
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(hi, mid, lo, s, count)))
        return;
    hi = mid;
}

....
Skipping nonlast addifexit:Priority 4855
At location src/dfa.c:1445
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(hi, mid, lo, s, count)))
        break;
    hi = mid;
}

....
Skipping isstmt addifexit:Priority 3606
At location src/dfa.c:1448
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, count, lo, s->elems[lo].index, p.index, s->elems, s->elems[lo].constraint, p.constraint, hi, s->nelem)))
    return;
if (lo < count && p.index == s->elems[lo].index)
    s->elems[lo].constraint |= p.constraint;
else {
    int i;
    for (i = count; i > lo; i--) 
        s->elems[i] = s->elems[i - 1];
    s->elems[lo] = p;
    ++s->nelem;
}

....
Skipping nonlast:Priority -143
At location src/dfa.c:1452
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int i;

....
Skipping nonlast:Priority -143
At location src/dfa.c:1452
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int i;

....
Skipping nonlast:Priority -143
At location src/dfa.c:1452
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
int i;

....
Skipping nonlast:Priority -143
At location src/dfa.c:1452
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
int i;

....
Skipping nonlast:Priority -143
At location src/dfa.c:1452
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
int i;

....
Skipping nonlast:Priority -143
At location src/dfa.c:1452
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
int i;

....
Skipping nonlast:Priority -143
At location src/dfa.c:1452
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int i;

....
Skipping nonlast:Priority -143
At location src/dfa.c:1452
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int i;

....
Skipping nonlast:Priority -143
At location src/dfa.c:1452
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int i;

....
Skipping nonlast addifexit:Priority 4857
At location src/dfa.c:1452
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(count, lo, s, hi)))
    return;
int i;

....
Skipping nonlast:Priority 4858
At location src/dfa.c:1453
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
for (i = count; i > lo; i--) 
    s->elems[i] = s->elems[i - 1];

....
Skipping nonlast:Priority 4858
At location src/dfa.c:1453
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
for (i = count; i > lo; i--) 
    s->elems[i] = s->elems[i - 1];

....
Skipping nonlast:Priority 4858
At location src/dfa.c:1453
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
for (i = count; i > lo; i--) 
    s->elems[i] = s->elems[i - 1];

....
Skipping nonlast:Priority 4858
At location src/dfa.c:1453
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
for (i = count; i > lo; i--) 
    s->elems[i] = s->elems[i - 1];

....
Skipping nonlast:Priority 4858
At location src/dfa.c:1453
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
for (i = count; i > lo; i--) 
    s->elems[i] = s->elems[i - 1];

....
Skipping nonlast:Priority 4858
At location src/dfa.c:1453
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
for (i = count; i > lo; i--) 
    s->elems[i] = s->elems[i - 1];

....
Skipping nonlast:Priority 4858
At location src/dfa.c:1453
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
for (i = count; i > lo; i--) 
    s->elems[i] = s->elems[i - 1];

....
Skipping nonlast:Priority 4858
At location src/dfa.c:1453
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
for (i = count; i > lo; i--) 
    s->elems[i] = s->elems[i - 1];

....
Skipping nonlast:Priority 4858
At location src/dfa.c:1453
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
for (i = count; i > lo; i--) 
    s->elems[i] = s->elems[i - 1];

....
Skipping nonlast addifexit:Priority 9858
At location src/dfa.c:1453
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(count, lo, i, s, s->elems, s->nelem, hi)))
    return;
for (i = count; i > lo; i--) 
    s->elems[i] = s->elems[i - 1];

....
Skipping nonlast:Priority -141
At location src/dfa.c:1455
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
s->elems[lo] = p;

....
Skipping nonlast:Priority -141
At location src/dfa.c:1455
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
s->elems[lo] = p;

....
Skipping nonlast:Priority -141
At location src/dfa.c:1455
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
s->elems[lo] = p;

....
Skipping nonlast:Priority -141
At location src/dfa.c:1455
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
s->elems[lo] = p;

....
Skipping nonlast:Priority -141
At location src/dfa.c:1455
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
s->elems[lo] = p;

....
Skipping nonlast:Priority -141
At location src/dfa.c:1455
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
s->elems[lo] = p;

....
Skipping nonlast:Priority -141
At location src/dfa.c:1455
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
s->elems[lo] = p;

....
Skipping nonlast:Priority -141
At location src/dfa.c:1455
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
s->elems[lo] = p;

....
Skipping nonlast:Priority -141
At location src/dfa.c:1455
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
s->elems[lo] = p;

....
Skipping nonlast addifexit:Priority 4859
At location src/dfa.c:1455
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, lo, s->elems, i, s->nelem, count, s->elems[lo].constraint, p.constraint, s->elems[lo].index, p.index, hi)))
    return;
s->elems[lo] = p;

....
Skipping nonlast:Priority -185
At location src/dfa.c:1465
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int i = 0, j = 0;

....
Skipping nonlast:Priority -185
At location src/dfa.c:1465
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int i = 0, j = 0;

....
Skipping nonlast:Priority -185
At location src/dfa.c:1465
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
int i = 0, j = 0;

....
Skipping nonlast:Priority -185
At location src/dfa.c:1465
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
int i = 0, j = 0;

....
Skipping nonlast:Priority -185
At location src/dfa.c:1465
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
int i = 0, j = 0;

....
Skipping nonlast:Priority -185
At location src/dfa.c:1465
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
int i = 0, j = 0;

....
Skipping nonlast:Priority -185
At location src/dfa.c:1465
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int i = 0, j = 0;

....
Skipping nonlast:Priority -185
At location src/dfa.c:1465
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int i = 0, j = 0;

....
Skipping nonlast:Priority -185
At location src/dfa.c:1465
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int i = 0, j = 0;

....
Skipping nonlast addifexit:Priority 4815
At location src/dfa.c:1465
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(m, s1, s2)))
    return;
int i = 0, j = 0;

....
Skipping nonlast:Priority 7316
At location src/dfa.c:1467
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
m->nelem = 0;

....
Skipping nonlast:Priority 7316
At location src/dfa.c:1467
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
m->nelem = 0;

....
Skipping nonlast:Priority 7316
At location src/dfa.c:1467
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
m->nelem = 0;

....
Skipping nonlast:Priority 7316
At location src/dfa.c:1467
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
m->nelem = 0;

....
Skipping nonlast:Priority 7316
At location src/dfa.c:1467
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
m->nelem = 0;

....
Skipping nonlast:Priority 7316
At location src/dfa.c:1467
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
m->nelem = 0;

....
Skipping nonlast:Priority 7316
At location src/dfa.c:1467
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
m->nelem = 0;

....
Skipping nonlast:Priority 7316
At location src/dfa.c:1467
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
m->nelem = 0;

....
Skipping nonlast:Priority 7316
At location src/dfa.c:1467
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
m->nelem = 0;

....
Skipping nonlast addifexit:Priority 12316
At location src/dfa.c:1467
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(m, m->nelem, s1, s2, i, j, s1->nelem, s2->nelem, s1->elems, s2->elems, m->elems)))
    return;
m->nelem = 0;

....
Skipping nonlast:Priority -183
At location src/dfa.c:1468
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
while (i < s1->nelem && j < s2->nelem)
    if (s1->elems[i].index > s2->elems[j].index)
        m->elems[m->nelem++] = s1->elems[i++];
    else if (s1->elems[i].index < s2->elems[j].index)
        m->elems[m->nelem++] = s2->elems[j++];
    else {
        m->elems[m->nelem] = s1->elems[i++];
        m->elems[m->nelem++].constraint |= s2->elems[j++].constraint;
    }

....
Skipping nonlast:Priority -183
At location src/dfa.c:1468
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
while (i < s1->nelem && j < s2->nelem)
    if (s1->elems[i].index > s2->elems[j].index)
        m->elems[m->nelem++] = s1->elems[i++];
    else if (s1->elems[i].index < s2->elems[j].index)
        m->elems[m->nelem++] = s2->elems[j++];
    else {
        m->elems[m->nelem] = s1->elems[i++];
        m->elems[m->nelem++].constraint |= s2->elems[j++].constraint;
    }

....
Skipping nonlast:Priority -183
At location src/dfa.c:1468
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
while (i < s1->nelem && j < s2->nelem)
    if (s1->elems[i].index > s2->elems[j].index)
        m->elems[m->nelem++] = s1->elems[i++];
    else if (s1->elems[i].index < s2->elems[j].index)
        m->elems[m->nelem++] = s2->elems[j++];
    else {
        m->elems[m->nelem] = s1->elems[i++];
        m->elems[m->nelem++].constraint |= s2->elems[j++].constraint;
    }

....
Skipping nonlast:Priority -183
At location src/dfa.c:1468
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
while (i < s1->nelem && j < s2->nelem)
    if (s1->elems[i].index > s2->elems[j].index)
        m->elems[m->nelem++] = s1->elems[i++];
    else if (s1->elems[i].index < s2->elems[j].index)
        m->elems[m->nelem++] = s2->elems[j++];
    else {
        m->elems[m->nelem] = s1->elems[i++];
        m->elems[m->nelem++].constraint |= s2->elems[j++].constraint;
    }

....
Skipping nonlast:Priority -183
At location src/dfa.c:1468
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
while (i < s1->nelem && j < s2->nelem)
    if (s1->elems[i].index > s2->elems[j].index)
        m->elems[m->nelem++] = s1->elems[i++];
    else if (s1->elems[i].index < s2->elems[j].index)
        m->elems[m->nelem++] = s2->elems[j++];
    else {
        m->elems[m->nelem] = s1->elems[i++];
        m->elems[m->nelem++].constraint |= s2->elems[j++].constraint;
    }

....
Skipping nonlast:Priority -183
At location src/dfa.c:1468
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
while (i < s1->nelem && j < s2->nelem)
    if (s1->elems[i].index > s2->elems[j].index)
        m->elems[m->nelem++] = s1->elems[i++];
    else if (s1->elems[i].index < s2->elems[j].index)
        m->elems[m->nelem++] = s2->elems[j++];
    else {
        m->elems[m->nelem] = s1->elems[i++];
        m->elems[m->nelem++].constraint |= s2->elems[j++].constraint;
    }

....
Skipping nonlast:Priority -183
At location src/dfa.c:1468
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
while (i < s1->nelem && j < s2->nelem)
    if (s1->elems[i].index > s2->elems[j].index)
        m->elems[m->nelem++] = s1->elems[i++];
    else if (s1->elems[i].index < s2->elems[j].index)
        m->elems[m->nelem++] = s2->elems[j++];
    else {
        m->elems[m->nelem] = s1->elems[i++];
        m->elems[m->nelem++].constraint |= s2->elems[j++].constraint;
    }

....
Skipping nonlast:Priority -183
At location src/dfa.c:1468
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
while (i < s1->nelem && j < s2->nelem)
    if (s1->elems[i].index > s2->elems[j].index)
        m->elems[m->nelem++] = s1->elems[i++];
    else if (s1->elems[i].index < s2->elems[j].index)
        m->elems[m->nelem++] = s2->elems[j++];
    else {
        m->elems[m->nelem] = s1->elems[i++];
        m->elems[m->nelem++].constraint |= s2->elems[j++].constraint;
    }

....
Skipping nonlast:Priority -183
At location src/dfa.c:1468
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
while (i < s1->nelem && j < s2->nelem)
    if (s1->elems[i].index > s2->elems[j].index)
        m->elems[m->nelem++] = s1->elems[i++];
    else if (s1->elems[i].index < s2->elems[j].index)
        m->elems[m->nelem++] = s2->elems[j++];
    else {
        m->elems[m->nelem] = s1->elems[i++];
        m->elems[m->nelem++].constraint |= s2->elems[j++].constraint;
    }

....
Skipping nonlast addifexit:Priority 4817
At location src/dfa.c:1468
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s1, s2, i, j, s1->nelem, s2->nelem, m, s1->elems[i].index, s2->elems[j].index, s1->elems, m->nelem, s2->elems, m->elems, s1->elems[i].constraint, s2->elems[j].constraint)))
    return;
while (i < s1->nelem && j < s2->nelem)
    if (s1->elems[i].index > s2->elems[j].index)
        m->elems[m->nelem++] = s1->elems[i++];
    else if (s1->elems[i].index < s2->elems[j].index)
        m->elems[m->nelem++] = s2->elems[j++];
    else {
        m->elems[m->nelem] = s1->elems[i++];
        m->elems[m->nelem++].constraint |= s2->elems[j++].constraint;
    }

....
Skipping nonlast:Priority -201
At location src/dfa.c:1470
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    m->elems[m->nelem++] = s1->elems[i++];
}

....
Skipping nonlast:Priority -201
At location src/dfa.c:1470
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    m->elems[m->nelem++] = s1->elems[i++];
}

....
Skipping nonlast:Priority -201
At location src/dfa.c:1470
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        parse_bracket_exp_mb();
        return lasttok = MBCSET;
    }
    m->elems[m->nelem++] = s1->elems[i++];
}

....
Skipping nonlast:Priority -201
At location src/dfa.c:1470
--Src File: src/dfa.c
Fragment 0:
{
    if (0 != 0)
        dfaerror(0);
    else
        return lasttok = END;
    m->elems[m->nelem++] = s1->elems[i++];
}

....
Skipping nonlast:Priority -201
At location src/dfa.c:1470
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
    else
        return lasttok = END;
    m->elems[m->nelem++] = s1->elems[i++];
}

....
Skipping nonlast:Priority -201
At location src/dfa.c:1470
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
    else
        return lasttok = END;
    m->elems[m->nelem++] = s1->elems[i++];
}

....
Skipping nonlast:Priority -201
At location src/dfa.c:1470
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    m->elems[m->nelem++] = s1->elems[i++];
}

....
Skipping nonlast:Priority -201
At location src/dfa.c:1470
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    m->elems[m->nelem++] = s1->elems[i++];
}

....
Skipping nonlast:Priority -201
At location src/dfa.c:1470
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    m->elems[m->nelem++] = s1->elems[i++];
}

....
Skipping nonlast addifexit:Priority 4799
At location src/dfa.c:1470
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(s1, m, i, s1->elems, m->elems, m->nelem, s2, j, s1->elems[i].index, s2->elems[j].index, s2->elems, s1->nelem, s2->nelem, m->elems[m->nelem++].constraint, s1->elems[i].constraint, s2->elems[j].constraint, m->elems[m->nelem++].index)))
        return;
    m->elems[m->nelem++] = s1->elems[i++];
}

....
Skipping nonlast addifexit:Priority 4799
At location src/dfa.c:1470
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(s1, m, i, s1->elems, m->elems, m->nelem, s2, j, s1->elems[i].index, s2->elems[j].index, s2->elems, s1->nelem, s2->nelem, m->elems[m->nelem++].constraint, s1->elems[i].constraint, s2->elems[j].constraint, m->elems[m->nelem++].index)))
        break;
    m->elems[m->nelem++] = s1->elems[i++];
}

....
Skipping nonlast:Priority -182
At location src/dfa.c:1478
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
while (i < s1->nelem)
    m->elems[m->nelem++] = s1->elems[i++];

....
Skipping nonlast:Priority -182
At location src/dfa.c:1478
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
while (i < s1->nelem)
    m->elems[m->nelem++] = s1->elems[i++];

....
Skipping nonlast:Priority -182
At location src/dfa.c:1478
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
while (i < s1->nelem)
    m->elems[m->nelem++] = s1->elems[i++];

....
Skipping nonlast:Priority -182
At location src/dfa.c:1478
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
while (i < s1->nelem)
    m->elems[m->nelem++] = s1->elems[i++];

....
Skipping nonlast:Priority -182
At location src/dfa.c:1478
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
while (i < s1->nelem)
    m->elems[m->nelem++] = s1->elems[i++];

....
Skipping nonlast:Priority -182
At location src/dfa.c:1478
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
while (i < s1->nelem)
    m->elems[m->nelem++] = s1->elems[i++];

....
Skipping nonlast:Priority -182
At location src/dfa.c:1478
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
while (i < s1->nelem)
    m->elems[m->nelem++] = s1->elems[i++];

....
Skipping nonlast:Priority -182
At location src/dfa.c:1478
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
while (i < s1->nelem)
    m->elems[m->nelem++] = s1->elems[i++];

....
Skipping nonlast:Priority -182
At location src/dfa.c:1478
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
while (i < s1->nelem)
    m->elems[m->nelem++] = s1->elems[i++];

....
Skipping nonlast addifexit:Priority 4818
At location src/dfa.c:1478
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s1, i, s1->nelem, m, s1->elems, m->elems, m->nelem, s2, j, m->elems[m->nelem++].constraint, m->elems[m->nelem++].index)))
    return;
while (i < s1->nelem)
    m->elems[m->nelem++] = s1->elems[i++];

....
Skipping isstmt addifexit:Priority 4819
At location src/dfa.c:1480
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s2, j, s2->nelem, s1, m, i, s1->elems, m->elems, m->nelem, s2->elems, s1->nelem, m->elems[m->nelem++].constraint, s2->elems[j++].constraint, m->elems[m->nelem++].index, s2->elems[j++].index)))
    return;
while (j < s2->nelem)
    m->elems[m->nelem++] = s2->elems[j++];

....
Skipping nonlast:Priority -36
At location src/dfa.c:1488
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int i;

....
Skipping nonlast:Priority -36
At location src/dfa.c:1488
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int i;

....
Skipping nonlast:Priority -36
At location src/dfa.c:1488
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
int i;

....
Skipping nonlast:Priority -36
At location src/dfa.c:1488
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
int i;

....
Skipping nonlast:Priority -36
At location src/dfa.c:1488
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
int i;

....
Skipping nonlast:Priority -36
At location src/dfa.c:1488
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
int i;

....
Skipping nonlast:Priority -36
At location src/dfa.c:1488
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int i;

....
Skipping nonlast:Priority -36
At location src/dfa.c:1488
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int i;

....
Skipping nonlast:Priority -36
At location src/dfa.c:1488
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int i;

....
Skipping nonlast addifexit:Priority 4964
At location src/dfa.c:1488
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s)))
    return;
int i;

....
Skipping nonlast:Priority 7465
At location src/dfa.c:1490
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
for (i = 0; i < s->nelem; ++i) 
    if (p.index == s->elems[i].index)
        break;

....
Skipping nonlast:Priority 7465
At location src/dfa.c:1490
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
for (i = 0; i < s->nelem; ++i) 
    if (p.index == s->elems[i].index)
        break;

....
Skipping nonlast:Priority 7465
At location src/dfa.c:1490
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
for (i = 0; i < s->nelem; ++i) 
    if (p.index == s->elems[i].index)
        break;

....
Skipping nonlast:Priority 7465
At location src/dfa.c:1490
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
for (i = 0; i < s->nelem; ++i) 
    if (p.index == s->elems[i].index)
        break;

....
Skipping nonlast:Priority 7465
At location src/dfa.c:1490
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
for (i = 0; i < s->nelem; ++i) 
    if (p.index == s->elems[i].index)
        break;

....
Skipping nonlast:Priority 7465
At location src/dfa.c:1490
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
for (i = 0; i < s->nelem; ++i) 
    if (p.index == s->elems[i].index)
        break;

....
Skipping nonlast:Priority 7465
At location src/dfa.c:1490
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
for (i = 0; i < s->nelem; ++i) 
    if (p.index == s->elems[i].index)
        break;

....
Skipping nonlast:Priority 7465
At location src/dfa.c:1490
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
for (i = 0; i < s->nelem; ++i) 
    if (p.index == s->elems[i].index)
        break;

....
Skipping nonlast:Priority 7465
At location src/dfa.c:1490
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
for (i = 0; i < s->nelem; ++i) 
    if (p.index == s->elems[i].index)
        break;

....
Skipping nonlast addifexit:Priority 12465
At location src/dfa.c:1490
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, i, s->nelem, p.index, s->elems[i].index, s->elems, p.constraint, s->elems[i].constraint)))
    return;
for (i = 0; i < s->nelem; ++i) 
    if (p.index == s->elems[i].index)
        break;

....
Skipping nonlast:Priority -34
At location src/dfa.c:1492
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    break;
}

....
Skipping nonlast:Priority -34
At location src/dfa.c:1492
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    break;
}

....
Skipping nonlast:Priority -34
At location src/dfa.c:1492
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        parse_bracket_exp_mb();
        return lasttok = MBCSET;
    }
    break;
}

....
Skipping nonlast:Priority -34
At location src/dfa.c:1492
--Src File: src/dfa.c
Fragment 0:
{
    if (0 != 0)
        dfaerror(0);
    else
        return lasttok = END;
    break;
}

....
Skipping nonlast:Priority -34
At location src/dfa.c:1492
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
    else
        return lasttok = END;
    break;
}

....
Skipping nonlast:Priority -34
At location src/dfa.c:1492
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
    else
        return lasttok = END;
    break;
}

....
Skipping nonlast:Priority -34
At location src/dfa.c:1492
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    break;
}

....
Skipping nonlast:Priority -34
At location src/dfa.c:1492
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    break;
}

....
Skipping nonlast:Priority -34
At location src/dfa.c:1492
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    break;
}

....
Skipping nonlast addifexit:Priority 4966
At location src/dfa.c:1492
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(s, i, p.index, s->elems[i].index, s->elems, s->nelem, p.constraint, s->elems[i].constraint)))
        return;
    break;
}

....
Skipping nonlast addifexit:Priority 4966
At location src/dfa.c:1492
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(s, i, p.index, s->elems[i].index, s->elems, s->nelem, p.constraint, s->elems[i].constraint)))
        break;
    break;
}

....
Skipping isstmt addifexit:Priority 3717
At location src/dfa.c:1493
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, i, s->nelem, s->elems)))
    return;
if (i < s->nelem)
    for (--s->nelem; i < s->nelem; ++i) 
        s->elems[i] = s->elems[i + 1];

....
Skipping nonlast:Priority -32
At location src/dfa.c:1494
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    for (--s->nelem; i < s->nelem; ++i) 
        s->elems[i] = s->elems[i + 1];
}

....
Skipping nonlast:Priority -32
At location src/dfa.c:1494
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    for (--s->nelem; i < s->nelem; ++i) 
        s->elems[i] = s->elems[i + 1];
}

....
Skipping nonlast:Priority -32
At location src/dfa.c:1494
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        parse_bracket_exp_mb();
        return lasttok = MBCSET;
    }
    for (--s->nelem; i < s->nelem; ++i) 
        s->elems[i] = s->elems[i + 1];
}

....
Skipping nonlast:Priority -32
At location src/dfa.c:1494
--Src File: src/dfa.c
Fragment 0:
{
    if (0 != 0)
        dfaerror(0);
    else
        return lasttok = END;
    for (--s->nelem; i < s->nelem; ++i) 
        s->elems[i] = s->elems[i + 1];
}

....
Skipping nonlast:Priority -32
At location src/dfa.c:1494
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
    else
        return lasttok = END;
    for (--s->nelem; i < s->nelem; ++i) 
        s->elems[i] = s->elems[i + 1];
}

....
Skipping nonlast:Priority -32
At location src/dfa.c:1494
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
    else
        return lasttok = END;
    for (--s->nelem; i < s->nelem; ++i) 
        s->elems[i] = s->elems[i + 1];
}

....
Skipping nonlast:Priority -32
At location src/dfa.c:1494
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    for (--s->nelem; i < s->nelem; ++i) 
        s->elems[i] = s->elems[i + 1];
}

....
Skipping nonlast:Priority -32
At location src/dfa.c:1494
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    for (--s->nelem; i < s->nelem; ++i) 
        s->elems[i] = s->elems[i + 1];
}

....
Skipping nonlast:Priority -32
At location src/dfa.c:1494
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    for (--s->nelem; i < s->nelem; ++i) 
        s->elems[i] = s->elems[i + 1];
}

....
Skipping nonlast addifexit:Priority 4968
At location src/dfa.c:1494
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(s, i, s->nelem, s->elems, s->elems[i].index, s->elems[i].constraint)))
        return;
    for (--s->nelem; i < s->nelem; ++i) 
        s->elems[i] = s->elems[i + 1];
}

....
Skipping nonlast:Priority -159
At location src/dfa.c:1575
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int i, j;

....
Skipping nonlast:Priority -159
At location src/dfa.c:1575
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int i, j;

....
Skipping nonlast:Priority -159
At location src/dfa.c:1575
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
int i, j;

....
Skipping nonlast:Priority -159
At location src/dfa.c:1575
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
int i, j;

....
Skipping nonlast:Priority -159
At location src/dfa.c:1575
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
int i, j;

....
Skipping nonlast:Priority -159
At location src/dfa.c:1575
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
int i, j;

....
Skipping nonlast:Priority -159
At location src/dfa.c:1575
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int i, j;

....
Skipping nonlast:Priority -159
At location src/dfa.c:1575
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int i, j;

....
Skipping nonlast:Priority -159
At location src/dfa.c:1575
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int i, j;

....
Skipping nonlast addifexit:Priority 4841
At location src/dfa.c:1575
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, s)))
    return;
int i, j;

....
Skipping nonlast:Priority -158
At location src/dfa.c:1576
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
char *visited;

....
Skipping nonlast:Priority -158
At location src/dfa.c:1576
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
char *visited;

....
Skipping nonlast:Priority -158
At location src/dfa.c:1576
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
char *visited;

....
Skipping nonlast:Priority -158
At location src/dfa.c:1576
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
char *visited;

....
Skipping nonlast:Priority -158
At location src/dfa.c:1576
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
char *visited;

....
Skipping nonlast:Priority -158
At location src/dfa.c:1576
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
char *visited;

....
Skipping nonlast:Priority -158
At location src/dfa.c:1576
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
char *visited;

....
Skipping nonlast:Priority -158
At location src/dfa.c:1576
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
char *visited;

....
Skipping nonlast:Priority -158
At location src/dfa.c:1576
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
char *visited;

....
Skipping nonlast addifexit:Priority 4842
At location src/dfa.c:1576
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, s, i, j)))
    return;
char *visited;

....
Skipping nonlast:Priority -157
At location src/dfa.c:1577
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
position p, old;

....
Skipping nonlast:Priority -157
At location src/dfa.c:1577
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
position p, old;

....
Skipping nonlast:Priority -157
At location src/dfa.c:1577
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
position p, old;

....
Skipping nonlast:Priority -157
At location src/dfa.c:1577
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
position p, old;

....
Skipping nonlast:Priority -157
At location src/dfa.c:1577
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
position p, old;

....
Skipping nonlast:Priority -157
At location src/dfa.c:1577
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
position p, old;

....
Skipping nonlast:Priority -157
At location src/dfa.c:1577
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
position p, old;

....
Skipping nonlast:Priority -157
At location src/dfa.c:1577
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
position p, old;

....
Skipping nonlast:Priority -157
At location src/dfa.c:1577
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
position p, old;

....
Skipping nonlast addifexit:Priority 4843
At location src/dfa.c:1577
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, visited, s, i, j)))
    return;
position p, old;

....
Skipping nonlast:Priority 7344
At location src/dfa.c:1579
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
((visited) = xcalloc((size_t)(d->tindex), sizeof(char)));

....
Skipping nonlast:Priority 7344
At location src/dfa.c:1579
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
((visited) = xcalloc((size_t)(d->tindex), sizeof(char)));

....
Skipping nonlast:Priority 7344
At location src/dfa.c:1579
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
((visited) = xcalloc((size_t)(d->tindex), sizeof(char)));

....
Skipping nonlast:Priority 7344
At location src/dfa.c:1579
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
((visited) = xcalloc((size_t)(d->tindex), sizeof(char)));

....
Skipping nonlast:Priority 7344
At location src/dfa.c:1579
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
((visited) = xcalloc((size_t)(d->tindex), sizeof(char)));

....
Skipping nonlast:Priority 7344
At location src/dfa.c:1579
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
((visited) = xcalloc((size_t)(d->tindex), sizeof(char)));

....
Skipping nonlast:Priority 7344
At location src/dfa.c:1579
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
((visited) = xcalloc((size_t)(d->tindex), sizeof(char)));

....
Skipping nonlast:Priority 7344
At location src/dfa.c:1579
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
((visited) = xcalloc((size_t)(d->tindex), sizeof(char)));

....
Skipping nonlast:Priority 7344
At location src/dfa.c:1579
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
((visited) = xcalloc((size_t)(d->tindex), sizeof(char)));

....
Skipping nonlast addifexit:Priority 12344
At location src/dfa.c:1579
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, visited, d->tindex, s, i, d->tokens, j, d->follows, d->charclasses, d->cindex, d->calloc, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
((visited) = xcalloc((size_t)(d->tindex), sizeof(char)));

....
Skipping nonlast:Priority -152
At location src/dfa.c:1581
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
for (i = 0; i < s->nelem; ++i) 
    if (d->tokens[s->elems[i].index] >= (1 << 8) && d->tokens[s->elems[i].index] != BACKREF && d->tokens[s->elems[i].index] != ANYCHAR && d->tokens[s->elems[i].index] != MBCSET && d->tokens[s->elems[i].index] < CSET) {
        old = s->elems[i];
        p.constraint = old.constraint;
        delete(s->elems[i], s);
        if (visited[old.index]) {
            --i;
            continue;
        }
        visited[old.index] = 1;
        switch (d->tokens[old.index]) {
          case BEGLINE:
            p.constraint &= 207;
            break;
          case ENDLINE:
            p.constraint &= 175;
            break;
          case BEGWORD:
            p.constraint &= 242;
            break;
          case ENDWORD:
            p.constraint &= 244;
            break;
          case LIMWORD:
            p.constraint &= 246;
            break;
          case NOTLIMWORD:
            p.constraint &= 249;
            break;
          default:
            break;
        }
        for (j = 0; j < d->follows[old.index].nelem; ++j) {
            p.index = d->follows[old.index].elems[j].index;
            insert(p, s);
        }
        i = -1;
    }

....
Skipping nonlast:Priority -152
At location src/dfa.c:1581
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
for (i = 0; i < s->nelem; ++i) 
    if (d->tokens[s->elems[i].index] >= (1 << 8) && d->tokens[s->elems[i].index] != BACKREF && d->tokens[s->elems[i].index] != ANYCHAR && d->tokens[s->elems[i].index] != MBCSET && d->tokens[s->elems[i].index] < CSET) {
        old = s->elems[i];
        p.constraint = old.constraint;
        delete(s->elems[i], s);
        if (visited[old.index]) {
            --i;
            continue;
        }
        visited[old.index] = 1;
        switch (d->tokens[old.index]) {
          case BEGLINE:
            p.constraint &= 207;
            break;
          case ENDLINE:
            p.constraint &= 175;
            break;
          case BEGWORD:
            p.constraint &= 242;
            break;
          case ENDWORD:
            p.constraint &= 244;
            break;
          case LIMWORD:
            p.constraint &= 246;
            break;
          case NOTLIMWORD:
            p.constraint &= 249;
            break;
          default:
            break;
        }
        for (j = 0; j < d->follows[old.index].nelem; ++j) {
            p.index = d->follows[old.index].elems[j].index;
            insert(p, s);
        }
        i = -1;
    }

....
Skipping nonlast:Priority -152
At location src/dfa.c:1581
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
for (i = 0; i < s->nelem; ++i) 
    if (d->tokens[s->elems[i].index] >= (1 << 8) && d->tokens[s->elems[i].index] != BACKREF && d->tokens[s->elems[i].index] != ANYCHAR && d->tokens[s->elems[i].index] != MBCSET && d->tokens[s->elems[i].index] < CSET) {
        old = s->elems[i];
        p.constraint = old.constraint;
        delete(s->elems[i], s);
        if (visited[old.index]) {
            --i;
            continue;
        }
        visited[old.index] = 1;
        switch (d->tokens[old.index]) {
          case BEGLINE:
            p.constraint &= 207;
            break;
          case ENDLINE:
            p.constraint &= 175;
            break;
          case BEGWORD:
            p.constraint &= 242;
            break;
          case ENDWORD:
            p.constraint &= 244;
            break;
          case LIMWORD:
            p.constraint &= 246;
            break;
          case NOTLIMWORD:
            p.constraint &= 249;
            break;
          default:
            break;
        }
        for (j = 0; j < d->follows[old.index].nelem; ++j) {
            p.index = d->follows[old.index].elems[j].index;
            insert(p, s);
        }
        i = -1;
    }

....
Skipping nonlast:Priority -152
At location src/dfa.c:1581
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
for (i = 0; i < s->nelem; ++i) 
    if (d->tokens[s->elems[i].index] >= (1 << 8) && d->tokens[s->elems[i].index] != BACKREF && d->tokens[s->elems[i].index] != ANYCHAR && d->tokens[s->elems[i].index] != MBCSET && d->tokens[s->elems[i].index] < CSET) {
        old = s->elems[i];
        p.constraint = old.constraint;
        delete(s->elems[i], s);
        if (visited[old.index]) {
            --i;
            continue;
        }
        visited[old.index] = 1;
        switch (d->tokens[old.index]) {
          case BEGLINE:
            p.constraint &= 207;
            break;
          case ENDLINE:
            p.constraint &= 175;
            break;
          case BEGWORD:
            p.constraint &= 242;
            break;
          case ENDWORD:
            p.constraint &= 244;
            break;
          case LIMWORD:
            p.constraint &= 246;
            break;
          case NOTLIMWORD:
            p.constraint &= 249;
            break;
          default:
            break;
        }
        for (j = 0; j < d->follows[old.index].nelem; ++j) {
            p.index = d->follows[old.index].elems[j].index;
            insert(p, s);
        }
        i = -1;
    }

....
Skipping nonlast:Priority -152
At location src/dfa.c:1581
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
for (i = 0; i < s->nelem; ++i) 
    if (d->tokens[s->elems[i].index] >= (1 << 8) && d->tokens[s->elems[i].index] != BACKREF && d->tokens[s->elems[i].index] != ANYCHAR && d->tokens[s->elems[i].index] != MBCSET && d->tokens[s->elems[i].index] < CSET) {
        old = s->elems[i];
        p.constraint = old.constraint;
        delete(s->elems[i], s);
        if (visited[old.index]) {
            --i;
            continue;
        }
        visited[old.index] = 1;
        switch (d->tokens[old.index]) {
          case BEGLINE:
            p.constraint &= 207;
            break;
          case ENDLINE:
            p.constraint &= 175;
            break;
          case BEGWORD:
            p.constraint &= 242;
            break;
          case ENDWORD:
            p.constraint &= 244;
            break;
          case LIMWORD:
            p.constraint &= 246;
            break;
          case NOTLIMWORD:
            p.constraint &= 249;
            break;
          default:
            break;
        }
        for (j = 0; j < d->follows[old.index].nelem; ++j) {
            p.index = d->follows[old.index].elems[j].index;
            insert(p, s);
        }
        i = -1;
    }

....
Skipping nonlast:Priority -152
At location src/dfa.c:1581
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
for (i = 0; i < s->nelem; ++i) 
    if (d->tokens[s->elems[i].index] >= (1 << 8) && d->tokens[s->elems[i].index] != BACKREF && d->tokens[s->elems[i].index] != ANYCHAR && d->tokens[s->elems[i].index] != MBCSET && d->tokens[s->elems[i].index] < CSET) {
        old = s->elems[i];
        p.constraint = old.constraint;
        delete(s->elems[i], s);
        if (visited[old.index]) {
            --i;
            continue;
        }
        visited[old.index] = 1;
        switch (d->tokens[old.index]) {
          case BEGLINE:
            p.constraint &= 207;
            break;
          case ENDLINE:
            p.constraint &= 175;
            break;
          case BEGWORD:
            p.constraint &= 242;
            break;
          case ENDWORD:
            p.constraint &= 244;
            break;
          case LIMWORD:
            p.constraint &= 246;
            break;
          case NOTLIMWORD:
            p.constraint &= 249;
            break;
          default:
            break;
        }
        for (j = 0; j < d->follows[old.index].nelem; ++j) {
            p.index = d->follows[old.index].elems[j].index;
            insert(p, s);
        }
        i = -1;
    }

....
Skipping nonlast:Priority -152
At location src/dfa.c:1581
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
for (i = 0; i < s->nelem; ++i) 
    if (d->tokens[s->elems[i].index] >= (1 << 8) && d->tokens[s->elems[i].index] != BACKREF && d->tokens[s->elems[i].index] != ANYCHAR && d->tokens[s->elems[i].index] != MBCSET && d->tokens[s->elems[i].index] < CSET) {
        old = s->elems[i];
        p.constraint = old.constraint;
        delete(s->elems[i], s);
        if (visited[old.index]) {
            --i;
            continue;
        }
        visited[old.index] = 1;
        switch (d->tokens[old.index]) {
          case BEGLINE:
            p.constraint &= 207;
            break;
          case ENDLINE:
            p.constraint &= 175;
            break;
          case BEGWORD:
            p.constraint &= 242;
            break;
          case ENDWORD:
            p.constraint &= 244;
            break;
          case LIMWORD:
            p.constraint &= 246;
            break;
          case NOTLIMWORD:
            p.constraint &= 249;
            break;
          default:
            break;
        }
        for (j = 0; j < d->follows[old.index].nelem; ++j) {
            p.index = d->follows[old.index].elems[j].index;
            insert(p, s);
        }
        i = -1;
    }

....
Skipping nonlast:Priority -152
At location src/dfa.c:1581
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
for (i = 0; i < s->nelem; ++i) 
    if (d->tokens[s->elems[i].index] >= (1 << 8) && d->tokens[s->elems[i].index] != BACKREF && d->tokens[s->elems[i].index] != ANYCHAR && d->tokens[s->elems[i].index] != MBCSET && d->tokens[s->elems[i].index] < CSET) {
        old = s->elems[i];
        p.constraint = old.constraint;
        delete(s->elems[i], s);
        if (visited[old.index]) {
            --i;
            continue;
        }
        visited[old.index] = 1;
        switch (d->tokens[old.index]) {
          case BEGLINE:
            p.constraint &= 207;
            break;
          case ENDLINE:
            p.constraint &= 175;
            break;
          case BEGWORD:
            p.constraint &= 242;
            break;
          case ENDWORD:
            p.constraint &= 244;
            break;
          case LIMWORD:
            p.constraint &= 246;
            break;
          case NOTLIMWORD:
            p.constraint &= 249;
            break;
          default:
            break;
        }
        for (j = 0; j < d->follows[old.index].nelem; ++j) {
            p.index = d->follows[old.index].elems[j].index;
            insert(p, s);
        }
        i = -1;
    }

....
Skipping nonlast:Priority -152
At location src/dfa.c:1581
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
for (i = 0; i < s->nelem; ++i) 
    if (d->tokens[s->elems[i].index] >= (1 << 8) && d->tokens[s->elems[i].index] != BACKREF && d->tokens[s->elems[i].index] != ANYCHAR && d->tokens[s->elems[i].index] != MBCSET && d->tokens[s->elems[i].index] < CSET) {
        old = s->elems[i];
        p.constraint = old.constraint;
        delete(s->elems[i], s);
        if (visited[old.index]) {
            --i;
            continue;
        }
        visited[old.index] = 1;
        switch (d->tokens[old.index]) {
          case BEGLINE:
            p.constraint &= 207;
            break;
          case ENDLINE:
            p.constraint &= 175;
            break;
          case BEGWORD:
            p.constraint &= 242;
            break;
          case ENDWORD:
            p.constraint &= 244;
            break;
          case LIMWORD:
            p.constraint &= 246;
            break;
          case NOTLIMWORD:
            p.constraint &= 249;
            break;
          default:
            break;
        }
        for (j = 0; j < d->follows[old.index].nelem; ++j) {
            p.index = d->follows[old.index].elems[j].index;
            insert(p, s);
        }
        i = -1;
    }

....
Skipping nonlast addifexit:Priority 4848
At location src/dfa.c:1581
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, i, s->nelem, d, s->elems[i].index, s->elems, d->tokens, visited, d->tindex, j, d->follows, s->elems[i].constraint, d->charclasses, d->cindex, d->calloc, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
for (i = 0; i < s->nelem; ++i) 
    if (d->tokens[s->elems[i].index] >= (1 << 8) && d->tokens[s->elems[i].index] != BACKREF && d->tokens[s->elems[i].index] != ANYCHAR && d->tokens[s->elems[i].index] != MBCSET && d->tokens[s->elems[i].index] < CSET) {
        old = s->elems[i];
        p.constraint = old.constraint;
        delete(s->elems[i], s);
        if (visited[old.index]) {
            --i;
            continue;
        }
        visited[old.index] = 1;
        switch (d->tokens[old.index]) {
          case BEGLINE:
            p.constraint &= 207;
            break;
          case ENDLINE:
            p.constraint &= 175;
            break;
          case BEGWORD:
            p.constraint &= 242;
            break;
          case ENDWORD:
            p.constraint &= 244;
            break;
          case LIMWORD:
            p.constraint &= 246;
            break;
          case NOTLIMWORD:
            p.constraint &= 249;
            break;
          default:
            break;
        }
        for (j = 0; j < d->follows[old.index].nelem; ++j) {
            p.index = d->follows[old.index].elems[j].index;
            insert(p, s);
        }
        i = -1;
    }

....
Skipping nonlast:Priority 4961
At location src/dfa.c:1590
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
old = s->elems[i];

....
Skipping nonlast:Priority 4961
At location src/dfa.c:1590
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
old = s->elems[i];

....
Skipping nonlast:Priority 4961
At location src/dfa.c:1590
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
old = s->elems[i];

....
Skipping nonlast:Priority 4961
At location src/dfa.c:1590
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
old = s->elems[i];

....
Skipping nonlast:Priority 4961
At location src/dfa.c:1590
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
old = s->elems[i];

....
Skipping nonlast:Priority 4961
At location src/dfa.c:1590
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
old = s->elems[i];

....
Skipping nonlast:Priority 4961
At location src/dfa.c:1590
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
old = s->elems[i];

....
Skipping nonlast:Priority 4961
At location src/dfa.c:1590
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
old = s->elems[i];

....
Skipping nonlast:Priority 4961
At location src/dfa.c:1590
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
old = s->elems[i];

....
Skipping nonlast addifexit:Priority 9961
At location src/dfa.c:1590
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, i, s->elems, p.constraint, old.constraint, d, s->elems[i].index, visited, old.index, s->nelem, j, p.index, s->elems[i].constraint)))
    return;
old = s->elems[i];

....
Skipping nonlast addifexit:Priority 9961
At location src/dfa.c:1590
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, i, s->elems, p.constraint, old.constraint, d, s->elems[i].index, visited, old.index, s->nelem, j, p.index, s->elems[i].constraint)))
    break;
old = s->elems[i];

....
Skipping nonlast:Priority -38
At location src/dfa.c:1591
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
p.constraint = old.constraint;

....
Skipping nonlast:Priority -38
At location src/dfa.c:1591
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
p.constraint = old.constraint;

....
Skipping nonlast:Priority -38
At location src/dfa.c:1591
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
p.constraint = old.constraint;

....
Skipping nonlast:Priority -38
At location src/dfa.c:1591
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
p.constraint = old.constraint;

....
Skipping nonlast:Priority -38
At location src/dfa.c:1591
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
p.constraint = old.constraint;

....
Skipping nonlast:Priority -38
At location src/dfa.c:1591
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
p.constraint = old.constraint;

....
Skipping nonlast:Priority -38
At location src/dfa.c:1591
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
p.constraint = old.constraint;

....
Skipping nonlast:Priority -38
At location src/dfa.c:1591
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
p.constraint = old.constraint;

....
Skipping nonlast:Priority -38
At location src/dfa.c:1591
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
p.constraint = old.constraint;

....
Skipping nonlast addifexit:Priority 4962
At location src/dfa.c:1591
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(p.constraint, old.constraint, s, i, s->elems, visited, old.index, d, s->elems[i].index, s->nelem, j, p.index, s->elems[i].constraint)))
    return;
p.constraint = old.constraint;

....
Skipping nonlast addifexit:Priority 4962
At location src/dfa.c:1591
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(p.constraint, old.constraint, s, i, s->elems, visited, old.index, d, s->elems[i].index, s->nelem, j, p.index, s->elems[i].constraint)))
    break;
p.constraint = old.constraint;

....
Skipping nonlast:Priority -37
At location src/dfa.c:1592
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
delete(s->elems[i], s);

....
Skipping nonlast:Priority -37
At location src/dfa.c:1592
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
delete(s->elems[i], s);

....
Skipping nonlast:Priority -37
At location src/dfa.c:1592
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
delete(s->elems[i], s);

....
Skipping nonlast:Priority -37
At location src/dfa.c:1592
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
delete(s->elems[i], s);

....
Skipping nonlast:Priority -37
At location src/dfa.c:1592
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
delete(s->elems[i], s);

....
Skipping nonlast:Priority -37
At location src/dfa.c:1592
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
delete(s->elems[i], s);

....
Skipping nonlast:Priority -37
At location src/dfa.c:1592
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
delete(s->elems[i], s);

....
Skipping nonlast:Priority -37
At location src/dfa.c:1592
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
delete(s->elems[i], s);

....
Skipping nonlast:Priority -37
At location src/dfa.c:1592
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
delete(s->elems[i], s);

....
Skipping nonlast addifexit:Priority 4963
At location src/dfa.c:1592
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, i, s->elems, visited, p.constraint, old.index, old.constraint, d, s->elems[i].index, s->nelem, j, p.index, s->elems[i].constraint)))
    return;
delete(s->elems[i], s);

....
Skipping nonlast addifexit:Priority 4963
At location src/dfa.c:1592
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, i, s->elems, visited, p.constraint, old.index, old.constraint, d, s->elems[i].index, s->nelem, j, p.index, s->elems[i].constraint)))
    break;
delete(s->elems[i], s);

....
Skipping nonlast:Priority -31
At location src/dfa.c:1593
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (visited[old.index]) {
    --i;
    continue;
}

....
Skipping nonlast:Priority -31
At location src/dfa.c:1593
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (visited[old.index]) {
    --i;
    continue;
}

....
Skipping nonlast:Priority -31
At location src/dfa.c:1593
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
if (visited[old.index]) {
    --i;
    continue;
}

....
Skipping nonlast:Priority -31
At location src/dfa.c:1593
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
if (visited[old.index]) {
    --i;
    continue;
}

....
Skipping nonlast:Priority -31
At location src/dfa.c:1593
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
if (visited[old.index]) {
    --i;
    continue;
}

....
Skipping nonlast:Priority -31
At location src/dfa.c:1593
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
if (visited[old.index]) {
    --i;
    continue;
}

....
Skipping nonlast:Priority -31
At location src/dfa.c:1593
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (visited[old.index]) {
    --i;
    continue;
}

....
Skipping nonlast:Priority -31
At location src/dfa.c:1593
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (visited[old.index]) {
    --i;
    continue;
}

....
Skipping nonlast:Priority -31
At location src/dfa.c:1593
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (visited[old.index]) {
    --i;
    continue;
}

....
Skipping nonlast addifexit:Priority 3719
At location src/dfa.c:1593
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(visited, old.index, s, i, s->elems, old.constraint, d, s->elems[i].index, s->nelem, j, s->elems[i].constraint)))
    return;
if (visited[old.index]) {
    --i;
    continue;
}

....
Skipping nonlast addifexit:Priority 3719
At location src/dfa.c:1593
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(visited, old.index, s, i, s->elems, old.constraint, d, s->elems[i].index, s->nelem, j, s->elems[i].constraint)))
    break;
if (visited[old.index]) {
    --i;
    continue;
}

....
Skipping nonlast:Priority -30
At location src/dfa.c:1598
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
visited[old.index] = 1;

....
Skipping nonlast:Priority -30
At location src/dfa.c:1598
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
visited[old.index] = 1;

....
Skipping nonlast:Priority -30
At location src/dfa.c:1598
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
visited[old.index] = 1;

....
Skipping nonlast:Priority -30
At location src/dfa.c:1598
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
visited[old.index] = 1;

....
Skipping nonlast:Priority -30
At location src/dfa.c:1598
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
visited[old.index] = 1;

....
Skipping nonlast:Priority -30
At location src/dfa.c:1598
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
visited[old.index] = 1;

....
Skipping nonlast:Priority -30
At location src/dfa.c:1598
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
visited[old.index] = 1;

....
Skipping nonlast:Priority -30
At location src/dfa.c:1598
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
visited[old.index] = 1;

....
Skipping nonlast:Priority -30
At location src/dfa.c:1598
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
visited[old.index] = 1;

....
Skipping nonlast addifexit:Priority 4970
At location src/dfa.c:1598
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(visited, old.index, d, d->tokens, i, s, old.constraint, d->tindex, j, d->follows, d->charclasses, d->cindex, d->calloc, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
visited[old.index] = 1;

....
Skipping nonlast addifexit:Priority 4970
At location src/dfa.c:1598
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(visited, old.index, d, d->tokens, i, s, old.constraint, d->tindex, j, d->follows, d->charclasses, d->cindex, d->calloc, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    break;
visited[old.index] = 1;

....
Skipping nonlast:Priority -29
At location src/dfa.c:1599
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
switch (d->tokens[old.index]) {
  case BEGLINE:
    p.constraint &= 207;
    break;
  case ENDLINE:
    p.constraint &= 175;
    break;
  case BEGWORD:
    p.constraint &= 242;
    break;
  case ENDWORD:
    p.constraint &= 244;
    break;
  case LIMWORD:
    p.constraint &= 246;
    break;
  case NOTLIMWORD:
    p.constraint &= 249;
    break;
  default:
    break;
}

....
Skipping nonlast:Priority -29
At location src/dfa.c:1599
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
switch (d->tokens[old.index]) {
  case BEGLINE:
    p.constraint &= 207;
    break;
  case ENDLINE:
    p.constraint &= 175;
    break;
  case BEGWORD:
    p.constraint &= 242;
    break;
  case ENDWORD:
    p.constraint &= 244;
    break;
  case LIMWORD:
    p.constraint &= 246;
    break;
  case NOTLIMWORD:
    p.constraint &= 249;
    break;
  default:
    break;
}

....
Skipping nonlast:Priority -29
At location src/dfa.c:1599
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
switch (d->tokens[old.index]) {
  case BEGLINE:
    p.constraint &= 207;
    break;
  case ENDLINE:
    p.constraint &= 175;
    break;
  case BEGWORD:
    p.constraint &= 242;
    break;
  case ENDWORD:
    p.constraint &= 244;
    break;
  case LIMWORD:
    p.constraint &= 246;
    break;
  case NOTLIMWORD:
    p.constraint &= 249;
    break;
  default:
    break;
}

....
Skipping nonlast:Priority -29
At location src/dfa.c:1599
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
switch (d->tokens[old.index]) {
  case BEGLINE:
    p.constraint &= 207;
    break;
  case ENDLINE:
    p.constraint &= 175;
    break;
  case BEGWORD:
    p.constraint &= 242;
    break;
  case ENDWORD:
    p.constraint &= 244;
    break;
  case LIMWORD:
    p.constraint &= 246;
    break;
  case NOTLIMWORD:
    p.constraint &= 249;
    break;
  default:
    break;
}

....
Skipping nonlast:Priority -29
At location src/dfa.c:1599
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
switch (d->tokens[old.index]) {
  case BEGLINE:
    p.constraint &= 207;
    break;
  case ENDLINE:
    p.constraint &= 175;
    break;
  case BEGWORD:
    p.constraint &= 242;
    break;
  case ENDWORD:
    p.constraint &= 244;
    break;
  case LIMWORD:
    p.constraint &= 246;
    break;
  case NOTLIMWORD:
    p.constraint &= 249;
    break;
  default:
    break;
}

....
Skipping nonlast:Priority -29
At location src/dfa.c:1599
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
switch (d->tokens[old.index]) {
  case BEGLINE:
    p.constraint &= 207;
    break;
  case ENDLINE:
    p.constraint &= 175;
    break;
  case BEGWORD:
    p.constraint &= 242;
    break;
  case ENDWORD:
    p.constraint &= 244;
    break;
  case LIMWORD:
    p.constraint &= 246;
    break;
  case NOTLIMWORD:
    p.constraint &= 249;
    break;
  default:
    break;
}

....
Skipping nonlast:Priority -29
At location src/dfa.c:1599
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
switch (d->tokens[old.index]) {
  case BEGLINE:
    p.constraint &= 207;
    break;
  case ENDLINE:
    p.constraint &= 175;
    break;
  case BEGWORD:
    p.constraint &= 242;
    break;
  case ENDWORD:
    p.constraint &= 244;
    break;
  case LIMWORD:
    p.constraint &= 246;
    break;
  case NOTLIMWORD:
    p.constraint &= 249;
    break;
  default:
    break;
}

....
Skipping nonlast:Priority -29
At location src/dfa.c:1599
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
switch (d->tokens[old.index]) {
  case BEGLINE:
    p.constraint &= 207;
    break;
  case ENDLINE:
    p.constraint &= 175;
    break;
  case BEGWORD:
    p.constraint &= 242;
    break;
  case ENDWORD:
    p.constraint &= 244;
    break;
  case LIMWORD:
    p.constraint &= 246;
    break;
  case NOTLIMWORD:
    p.constraint &= 249;
    break;
  default:
    break;
}

....
Skipping nonlast:Priority -29
At location src/dfa.c:1599
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
switch (d->tokens[old.index]) {
  case BEGLINE:
    p.constraint &= 207;
    break;
  case ENDLINE:
    p.constraint &= 175;
    break;
  case BEGWORD:
    p.constraint &= 242;
    break;
  case ENDWORD:
    p.constraint &= 244;
    break;
  case LIMWORD:
    p.constraint &= 246;
    break;
  case NOTLIMWORD:
    p.constraint &= 249;
    break;
  default:
    break;
}

....
Skipping nonlast addifexit:Priority 4971
At location src/dfa.c:1599
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->tokens, old.index, visited, i, s, old.constraint, d->tindex, j, d->follows, d->charclasses, d->cindex, d->calloc, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
switch (d->tokens[old.index]) {
  case BEGLINE:
    p.constraint &= 207;
    break;
  case ENDLINE:
    p.constraint &= 175;
    break;
  case BEGWORD:
    p.constraint &= 242;
    break;
  case ENDWORD:
    p.constraint &= 244;
    break;
  case LIMWORD:
    p.constraint &= 246;
    break;
  case NOTLIMWORD:
    p.constraint &= 249;
    break;
  default:
    break;
}

....
Skipping nonlast addifexit:Priority 4971
At location src/dfa.c:1599
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->tokens, old.index, visited, i, s, old.constraint, d->tindex, j, d->follows, d->charclasses, d->cindex, d->calloc, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    break;
switch (d->tokens[old.index]) {
  case BEGLINE:
    p.constraint &= 207;
    break;
  case ENDLINE:
    p.constraint &= 175;
    break;
  case BEGWORD:
    p.constraint &= 242;
    break;
  case ENDWORD:
    p.constraint &= 244;
    break;
  case LIMWORD:
    p.constraint &= 246;
    break;
  case NOTLIMWORD:
    p.constraint &= 249;
    break;
  default:
    break;
}

....
Skipping nonlast:Priority -28
At location src/dfa.c:1603
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
break;

....
Skipping nonlast:Priority -28
At location src/dfa.c:1603
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
break;

....
Skipping nonlast:Priority -28
At location src/dfa.c:1603
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
break;

....
Skipping nonlast:Priority -28
At location src/dfa.c:1603
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
break;

....
Skipping nonlast:Priority -28
At location src/dfa.c:1603
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
break;

....
Skipping nonlast:Priority -28
At location src/dfa.c:1603
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
break;

....
Skipping nonlast:Priority -28
At location src/dfa.c:1603
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
break;

....
Skipping nonlast:Priority -28
At location src/dfa.c:1603
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
break;

....
Skipping nonlast:Priority -28
At location src/dfa.c:1603
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
break;

....
Skipping nonlast addifexit:Priority 4972
At location src/dfa.c:1603
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(p.constraint, d, visited, i, s, j, p.index)))
    return;
break;

....
Skipping nonlast addifexit:Priority 4972
At location src/dfa.c:1603
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(p.constraint, d, visited, i, s, j, p.index)))
    break;
break;

....
Skipping nonlast:Priority -41
At location src/dfa.c:1606
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
break;

....
Skipping nonlast:Priority -41
At location src/dfa.c:1606
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
break;

....
Skipping nonlast:Priority -41
At location src/dfa.c:1606
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
break;

....
Skipping nonlast:Priority -41
At location src/dfa.c:1606
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
break;

....
Skipping nonlast:Priority -41
At location src/dfa.c:1606
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
break;

....
Skipping nonlast:Priority -41
At location src/dfa.c:1606
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
break;

....
Skipping nonlast:Priority -41
At location src/dfa.c:1606
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
break;

....
Skipping nonlast:Priority -41
At location src/dfa.c:1606
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
break;

....
Skipping nonlast:Priority -41
At location src/dfa.c:1606
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
break;

....
Skipping nonlast addifexit:Priority 4959
At location src/dfa.c:1606
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(p.constraint, d, visited, i, s, j, p.index)))
    return;
break;

....
Skipping nonlast addifexit:Priority 4959
At location src/dfa.c:1606
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(p.constraint, d, visited, i, s, j, p.index)))
    break;
break;

....
Skipping nonlast:Priority -27
At location src/dfa.c:1622
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
for (j = 0; j < d->follows[old.index].nelem; ++j) {
    p.index = d->follows[old.index].elems[j].index;
    insert(p, s);
}

....
Skipping nonlast:Priority -27
At location src/dfa.c:1622
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
for (j = 0; j < d->follows[old.index].nelem; ++j) {
    p.index = d->follows[old.index].elems[j].index;
    insert(p, s);
}

....
Skipping nonlast:Priority -27
At location src/dfa.c:1622
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
for (j = 0; j < d->follows[old.index].nelem; ++j) {
    p.index = d->follows[old.index].elems[j].index;
    insert(p, s);
}

....
Skipping nonlast:Priority -27
At location src/dfa.c:1622
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
for (j = 0; j < d->follows[old.index].nelem; ++j) {
    p.index = d->follows[old.index].elems[j].index;
    insert(p, s);
}

....
Skipping nonlast:Priority -27
At location src/dfa.c:1622
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
for (j = 0; j < d->follows[old.index].nelem; ++j) {
    p.index = d->follows[old.index].elems[j].index;
    insert(p, s);
}

....
Skipping nonlast:Priority -27
At location src/dfa.c:1622
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
for (j = 0; j < d->follows[old.index].nelem; ++j) {
    p.index = d->follows[old.index].elems[j].index;
    insert(p, s);
}

....
Skipping nonlast:Priority -27
At location src/dfa.c:1622
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
for (j = 0; j < d->follows[old.index].nelem; ++j) {
    p.index = d->follows[old.index].elems[j].index;
    insert(p, s);
}

....
Skipping nonlast:Priority -27
At location src/dfa.c:1622
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
for (j = 0; j < d->follows[old.index].nelem; ++j) {
    p.index = d->follows[old.index].elems[j].index;
    insert(p, s);
}

....
Skipping nonlast:Priority -27
At location src/dfa.c:1622
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
for (j = 0; j < d->follows[old.index].nelem; ++j) {
    p.index = d->follows[old.index].elems[j].index;
    insert(p, s);
}

....
Skipping nonlast addifexit:Priority 4973
At location src/dfa.c:1622
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, j, d->follows, old.index, d->follows[old.index].nelem, d->follows[old.index].elems, s, i, visited, d->tokens, old.constraint, d->tindex, d->charclasses, d->cindex, d->calloc, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
for (j = 0; j < d->follows[old.index].nelem; ++j) {
    p.index = d->follows[old.index].elems[j].index;
    insert(p, s);
}

....
Skipping nonlast addifexit:Priority 4973
At location src/dfa.c:1622
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, j, d->follows, old.index, d->follows[old.index].nelem, d->follows[old.index].elems, s, i, visited, d->tokens, old.constraint, d->tindex, d->charclasses, d->cindex, d->calloc, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    break;
for (j = 0; j < d->follows[old.index].nelem; ++j) {
    p.index = d->follows[old.index].elems[j].index;
    insert(p, s);
}

....
Skipping nonlast:Priority 4975
At location src/dfa.c:1624
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
p.index = d->follows[old.index].elems[j].index;

....
Skipping nonlast:Priority 4975
At location src/dfa.c:1624
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
p.index = d->follows[old.index].elems[j].index;

....
Skipping nonlast:Priority 4975
At location src/dfa.c:1624
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
p.index = d->follows[old.index].elems[j].index;

....
Skipping nonlast:Priority 4975
At location src/dfa.c:1624
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
p.index = d->follows[old.index].elems[j].index;

....
Skipping nonlast:Priority 4975
At location src/dfa.c:1624
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
p.index = d->follows[old.index].elems[j].index;

....
Skipping nonlast:Priority 4975
At location src/dfa.c:1624
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
p.index = d->follows[old.index].elems[j].index;

....
Skipping nonlast:Priority 4975
At location src/dfa.c:1624
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
p.index = d->follows[old.index].elems[j].index;

....
Skipping nonlast:Priority 4975
At location src/dfa.c:1624
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
p.index = d->follows[old.index].elems[j].index;

....
Skipping nonlast:Priority 4975
At location src/dfa.c:1624
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
p.index = d->follows[old.index].elems[j].index;

....
Skipping nonlast addifexit:Priority 9975
At location src/dfa.c:1624
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, j, p.index, d->follows, old.index, d->follows[old.index].elems, d->follows[old.index].elems[j].index, s, d->follows[old.index].nelem, i, visited, p.constraint, d->tokens, s->elems, old.constraint, s->nelem, d->tindex, d->charclasses, d->cindex, d->calloc, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts, d->follows[old.index].elems[j].constraint)))
    return;
p.index = d->follows[old.index].elems[j].index;

....
Skipping nonlast addifexit:Priority 9975
At location src/dfa.c:1624
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, j, p.index, d->follows, old.index, d->follows[old.index].elems, d->follows[old.index].elems[j].index, s, d->follows[old.index].nelem, i, visited, p.constraint, d->tokens, s->elems, old.constraint, s->nelem, d->tindex, d->charclasses, d->cindex, d->calloc, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts, d->follows[old.index].elems[j].constraint)))
    break;
p.index = d->follows[old.index].elems[j].index;

....
Skipping nonlast:Priority -248
At location src/dfa.c:1689
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int *nullable;

....
Skipping nonlast:Priority -248
At location src/dfa.c:1689
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int *nullable;

....
Skipping nonlast:Priority -248
At location src/dfa.c:1689
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
int *nullable;

....
Skipping nonlast:Priority -248
At location src/dfa.c:1689
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
int *nullable;

....
Skipping nonlast:Priority -248
At location src/dfa.c:1689
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
int *nullable;

....
Skipping nonlast:Priority -248
At location src/dfa.c:1689
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
int *nullable;

....
Skipping nonlast:Priority -248
At location src/dfa.c:1689
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int *nullable;

....
Skipping nonlast:Priority -248
At location src/dfa.c:1689
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int *nullable;

....
Skipping nonlast:Priority -248
At location src/dfa.c:1689
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int *nullable;

....
Skipping nonlast addifexit:Priority 4752
At location src/dfa.c:1689
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, searchflag)))
    return;
int *nullable;

....
Skipping nonlast:Priority -247
At location src/dfa.c:1690
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int *nfirstpos;

....
Skipping nonlast:Priority -247
At location src/dfa.c:1690
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int *nfirstpos;

....
Skipping nonlast:Priority -247
At location src/dfa.c:1690
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
int *nfirstpos;

....
Skipping nonlast:Priority -247
At location src/dfa.c:1690
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
int *nfirstpos;

....
Skipping nonlast:Priority -247
At location src/dfa.c:1690
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
int *nfirstpos;

....
Skipping nonlast:Priority -247
At location src/dfa.c:1690
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
int *nfirstpos;

....
Skipping nonlast:Priority -247
At location src/dfa.c:1690
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int *nfirstpos;

....
Skipping nonlast:Priority -247
At location src/dfa.c:1690
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int *nfirstpos;

....
Skipping nonlast:Priority -247
At location src/dfa.c:1690
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int *nfirstpos;

....
Skipping nonlast addifexit:Priority 4753
At location src/dfa.c:1690
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, searchflag, nullable)))
    return;
int *nfirstpos;

....
Skipping nonlast:Priority -246
At location src/dfa.c:1691
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
position *firstpos;

....
Skipping nonlast:Priority -246
At location src/dfa.c:1691
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
position *firstpos;

....
Skipping nonlast:Priority -246
At location src/dfa.c:1691
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
position *firstpos;

....
Skipping nonlast:Priority -246
At location src/dfa.c:1691
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
position *firstpos;

....
Skipping nonlast:Priority -246
At location src/dfa.c:1691
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
position *firstpos;

....
Skipping nonlast:Priority -246
At location src/dfa.c:1691
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
position *firstpos;

....
Skipping nonlast:Priority -246
At location src/dfa.c:1691
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
position *firstpos;

....
Skipping nonlast:Priority -246
At location src/dfa.c:1691
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
position *firstpos;

....
Skipping nonlast:Priority -246
At location src/dfa.c:1691
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
position *firstpos;

....
Skipping nonlast addifexit:Priority 4754
At location src/dfa.c:1691
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, searchflag, nullable, nfirstpos)))
    return;
position *firstpos;

....
Skipping nonlast:Priority -245
At location src/dfa.c:1692
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int *nlastpos;

....
Skipping nonlast:Priority -245
At location src/dfa.c:1692
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int *nlastpos;

....
Skipping nonlast:Priority -245
At location src/dfa.c:1692
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
int *nlastpos;

....
Skipping nonlast:Priority -245
At location src/dfa.c:1692
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
int *nlastpos;

....
Skipping nonlast:Priority -245
At location src/dfa.c:1692
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
int *nlastpos;

....
Skipping nonlast:Priority -245
At location src/dfa.c:1692
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
int *nlastpos;

....
Skipping nonlast:Priority -245
At location src/dfa.c:1692
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int *nlastpos;

....
Skipping nonlast:Priority -245
At location src/dfa.c:1692
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int *nlastpos;

....
Skipping nonlast:Priority -245
At location src/dfa.c:1692
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int *nlastpos;

....
Skipping nonlast addifexit:Priority 4755
At location src/dfa.c:1692
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, searchflag, nullable, nfirstpos, firstpos)))
    return;
int *nlastpos;

....
Skipping nonlast:Priority -244
At location src/dfa.c:1693
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
position *lastpos;

....
Skipping nonlast:Priority -244
At location src/dfa.c:1693
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
position *lastpos;

....
Skipping nonlast:Priority -244
At location src/dfa.c:1693
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
position *lastpos;

....
Skipping nonlast:Priority -244
At location src/dfa.c:1693
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
position *lastpos;

....
Skipping nonlast:Priority -244
At location src/dfa.c:1693
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
position *lastpos;

....
Skipping nonlast:Priority -244
At location src/dfa.c:1693
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
position *lastpos;

....
Skipping nonlast:Priority -244
At location src/dfa.c:1693
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
position *lastpos;

....
Skipping nonlast:Priority -244
At location src/dfa.c:1693
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
position *lastpos;

....
Skipping nonlast:Priority -244
At location src/dfa.c:1693
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
position *lastpos;

....
Skipping nonlast addifexit:Priority 4756
At location src/dfa.c:1693
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, searchflag, nullable, nfirstpos, firstpos, nlastpos)))
    return;
position *lastpos;

....
Skipping nonlast:Priority -243
At location src/dfa.c:1694
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int *nalloc;

....
Skipping nonlast:Priority -243
At location src/dfa.c:1694
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int *nalloc;

....
Skipping nonlast:Priority -243
At location src/dfa.c:1694
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
int *nalloc;

....
Skipping nonlast:Priority -243
At location src/dfa.c:1694
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
int *nalloc;

....
Skipping nonlast:Priority -243
At location src/dfa.c:1694
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
int *nalloc;

....
Skipping nonlast:Priority -243
At location src/dfa.c:1694
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
int *nalloc;

....
Skipping nonlast:Priority -243
At location src/dfa.c:1694
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int *nalloc;

....
Skipping nonlast:Priority -243
At location src/dfa.c:1694
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int *nalloc;

....
Skipping nonlast:Priority -243
At location src/dfa.c:1694
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int *nalloc;

....
Skipping nonlast addifexit:Priority 4757
At location src/dfa.c:1694
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, searchflag, nullable, nfirstpos, firstpos, nlastpos, lastpos)))
    return;
int *nalloc;

....
Skipping nonlast:Priority -242
At location src/dfa.c:1695
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
position_set tmp;

....
Skipping nonlast:Priority -242
At location src/dfa.c:1695
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
position_set tmp;

....
Skipping nonlast:Priority -242
At location src/dfa.c:1695
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
position_set tmp;

....
Skipping nonlast:Priority -242
At location src/dfa.c:1695
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
position_set tmp;

....
Skipping nonlast:Priority -242
At location src/dfa.c:1695
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
position_set tmp;

....
Skipping nonlast:Priority -242
At location src/dfa.c:1695
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
position_set tmp;

....
Skipping nonlast:Priority -242
At location src/dfa.c:1695
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
position_set tmp;

....
Skipping nonlast:Priority -242
At location src/dfa.c:1695
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
position_set tmp;

....
Skipping nonlast:Priority -242
At location src/dfa.c:1695
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
position_set tmp;

....
Skipping nonlast addifexit:Priority 4758
At location src/dfa.c:1695
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, searchflag, nullable, nfirstpos, firstpos, nlastpos, lastpos, nalloc)))
    return;
position_set tmp;

....
Skipping nonlast:Priority -241
At location src/dfa.c:1696
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
position_set merged;

....
Skipping nonlast:Priority -241
At location src/dfa.c:1696
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
position_set merged;

....
Skipping nonlast:Priority -241
At location src/dfa.c:1696
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
position_set merged;

....
Skipping nonlast:Priority -241
At location src/dfa.c:1696
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
position_set merged;

....
Skipping nonlast:Priority -241
At location src/dfa.c:1696
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
position_set merged;

....
Skipping nonlast:Priority -241
At location src/dfa.c:1696
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
position_set merged;

....
Skipping nonlast:Priority -241
At location src/dfa.c:1696
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
position_set merged;

....
Skipping nonlast:Priority -241
At location src/dfa.c:1696
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
position_set merged;

....
Skipping nonlast:Priority -241
At location src/dfa.c:1696
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
position_set merged;

....
Skipping nonlast addifexit:Priority 4759
At location src/dfa.c:1696
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, searchflag, nullable, nfirstpos, firstpos, nlastpos, lastpos, nalloc)))
    return;
position_set merged;

....
Skipping nonlast:Priority -240
At location src/dfa.c:1697
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int wants_newline;

....
Skipping nonlast:Priority -240
At location src/dfa.c:1697
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int wants_newline;

....
Skipping nonlast:Priority -240
At location src/dfa.c:1697
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
int wants_newline;

....
Skipping nonlast:Priority -240
At location src/dfa.c:1697
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
int wants_newline;

....
Skipping nonlast:Priority -240
At location src/dfa.c:1697
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
int wants_newline;

....
Skipping nonlast:Priority -240
At location src/dfa.c:1697
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
int wants_newline;

....
Skipping nonlast:Priority -240
At location src/dfa.c:1697
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int wants_newline;

....
Skipping nonlast:Priority -240
At location src/dfa.c:1697
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int wants_newline;

....
Skipping nonlast:Priority -240
At location src/dfa.c:1697
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int wants_newline;

....
Skipping nonlast addifexit:Priority 4760
At location src/dfa.c:1697
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, searchflag, nullable, nfirstpos, firstpos, nlastpos, lastpos, nalloc)))
    return;
int wants_newline;

....
Skipping nonlast:Priority -239
At location src/dfa.c:1698
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int *o_nullable;

....
Skipping nonlast:Priority -239
At location src/dfa.c:1698
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int *o_nullable;

....
Skipping nonlast:Priority -239
At location src/dfa.c:1698
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
int *o_nullable;

....
Skipping nonlast:Priority -239
At location src/dfa.c:1698
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
int *o_nullable;

....
Skipping nonlast:Priority -239
At location src/dfa.c:1698
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
int *o_nullable;

....
Skipping nonlast:Priority -239
At location src/dfa.c:1698
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
int *o_nullable;

....
Skipping nonlast:Priority -239
At location src/dfa.c:1698
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int *o_nullable;

....
Skipping nonlast:Priority -239
At location src/dfa.c:1698
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int *o_nullable;

....
Skipping nonlast:Priority -239
At location src/dfa.c:1698
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int *o_nullable;

....
Skipping nonlast addifexit:Priority 4761
At location src/dfa.c:1698
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, searchflag, nullable, nfirstpos, firstpos, nlastpos, lastpos, nalloc, wants_newline)))
    return;
int *o_nullable;

....
Skipping nonlast:Priority -238
At location src/dfa.c:1699
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int *o_nfirst, *o_nlast;

....
Skipping nonlast:Priority -238
At location src/dfa.c:1699
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int *o_nfirst, *o_nlast;

....
Skipping nonlast:Priority -238
At location src/dfa.c:1699
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
int *o_nfirst, *o_nlast;

....
Skipping nonlast:Priority -238
At location src/dfa.c:1699
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
int *o_nfirst, *o_nlast;

....
Skipping nonlast:Priority -238
At location src/dfa.c:1699
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
int *o_nfirst, *o_nlast;

....
Skipping nonlast:Priority -238
At location src/dfa.c:1699
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
int *o_nfirst, *o_nlast;

....
Skipping nonlast:Priority -238
At location src/dfa.c:1699
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int *o_nfirst, *o_nlast;

....
Skipping nonlast:Priority -238
At location src/dfa.c:1699
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int *o_nfirst, *o_nlast;

....
Skipping nonlast:Priority -238
At location src/dfa.c:1699
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int *o_nfirst, *o_nlast;

....
Skipping nonlast addifexit:Priority 4762
At location src/dfa.c:1699
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, searchflag, nullable, o_nullable, nfirstpos, firstpos, nlastpos, lastpos, nalloc, wants_newline)))
    return;
int *o_nfirst, *o_nlast;

....
Skipping nonlast:Priority -237
At location src/dfa.c:1700
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
position *o_firstpos, *o_lastpos;

....
Skipping nonlast:Priority -237
At location src/dfa.c:1700
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
position *o_firstpos, *o_lastpos;

....
Skipping nonlast:Priority -237
At location src/dfa.c:1700
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
position *o_firstpos, *o_lastpos;

....
Skipping nonlast:Priority -237
At location src/dfa.c:1700
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
position *o_firstpos, *o_lastpos;

....
Skipping nonlast:Priority -237
At location src/dfa.c:1700
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
position *o_firstpos, *o_lastpos;

....
Skipping nonlast:Priority -237
At location src/dfa.c:1700
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
position *o_firstpos, *o_lastpos;

....
Skipping nonlast:Priority -237
At location src/dfa.c:1700
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
position *o_firstpos, *o_lastpos;

....
Skipping nonlast:Priority -237
At location src/dfa.c:1700
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
position *o_firstpos, *o_lastpos;

....
Skipping nonlast:Priority -237
At location src/dfa.c:1700
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
position *o_firstpos, *o_lastpos;

....
Skipping nonlast addifexit:Priority 4763
At location src/dfa.c:1700
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, searchflag, nullable, o_nullable, nfirstpos, o_nfirst, firstpos, nlastpos, o_nlast, lastpos, nalloc, wants_newline)))
    return;
position *o_firstpos, *o_lastpos;

....
Skipping nonlast:Priority -236
At location src/dfa.c:1701
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int i, j;

....
Skipping nonlast:Priority -236
At location src/dfa.c:1701
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int i, j;

....
Skipping nonlast:Priority -236
At location src/dfa.c:1701
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
int i, j;

....
Skipping nonlast:Priority -236
At location src/dfa.c:1701
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
int i, j;

....
Skipping nonlast:Priority -236
At location src/dfa.c:1701
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
int i, j;

....
Skipping nonlast:Priority -236
At location src/dfa.c:1701
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
int i, j;

....
Skipping nonlast:Priority -236
At location src/dfa.c:1701
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int i, j;

....
Skipping nonlast:Priority -236
At location src/dfa.c:1701
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int i, j;

....
Skipping nonlast:Priority -236
At location src/dfa.c:1701
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int i, j;

....
Skipping nonlast addifexit:Priority 4764
At location src/dfa.c:1701
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, searchflag, nullable, o_nullable, nfirstpos, o_nfirst, firstpos, o_firstpos, nlastpos, o_nlast, lastpos, o_lastpos, nalloc, wants_newline)))
    return;
int i, j;

....
Skipping nonlast:Priority -235
At location src/dfa.c:1702
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
position *pos;

....
Skipping nonlast:Priority -235
At location src/dfa.c:1702
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
position *pos;

....
Skipping nonlast:Priority -235
At location src/dfa.c:1702
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
position *pos;

....
Skipping nonlast:Priority -235
At location src/dfa.c:1702
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
position *pos;

....
Skipping nonlast:Priority -235
At location src/dfa.c:1702
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
position *pos;

....
Skipping nonlast:Priority -235
At location src/dfa.c:1702
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
position *pos;

....
Skipping nonlast:Priority -235
At location src/dfa.c:1702
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
position *pos;

....
Skipping nonlast:Priority -235
At location src/dfa.c:1702
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
position *pos;

....
Skipping nonlast:Priority -235
At location src/dfa.c:1702
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
position *pos;

....
Skipping nonlast addifexit:Priority 4765
At location src/dfa.c:1702
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, searchflag, nullable, o_nullable, nfirstpos, o_nfirst, firstpos, o_firstpos, nlastpos, o_nlast, lastpos, o_lastpos, nalloc, i, j, wants_newline)))
    return;
position *pos;

....
Skipping nonlast:Priority 7266
At location src/dfa.c:1714
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
d->searchflag = searchflag;

....
Skipping nonlast:Priority 7266
At location src/dfa.c:1714
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
d->searchflag = searchflag;

....
Skipping nonlast:Priority 7266
At location src/dfa.c:1714
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
d->searchflag = searchflag;

....
Skipping nonlast:Priority 7266
At location src/dfa.c:1714
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
d->searchflag = searchflag;

....
Skipping nonlast:Priority 7266
At location src/dfa.c:1714
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
d->searchflag = searchflag;

....
Skipping nonlast:Priority 7266
At location src/dfa.c:1714
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
d->searchflag = searchflag;

....
Skipping nonlast:Priority 7266
At location src/dfa.c:1714
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
d->searchflag = searchflag;

....
Skipping nonlast:Priority 7266
At location src/dfa.c:1714
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
d->searchflag = searchflag;

....
Skipping nonlast:Priority 7266
At location src/dfa.c:1714
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
d->searchflag = searchflag;

....
Skipping nonlast addifexit:Priority 12266
At location src/dfa.c:1714
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, searchflag, d->searchflag, nullable, d->depth, o_nullable, nfirstpos, o_nfirst, firstpos, d->nleaves, o_firstpos, nlastpos, o_nlast, lastpos, o_lastpos, nalloc, d->tindex, i, d->follows, d->tokens, pos, j, wants_newline, d->salloc, d->sindex, d->states, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
d->searchflag = searchflag;

....
Skipping nonlast:Priority -233
At location src/dfa.c:1716
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
((nullable) = xmalloc((d->depth) * sizeof(int)));

....
Skipping nonlast:Priority -233
At location src/dfa.c:1716
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
((nullable) = xmalloc((d->depth) * sizeof(int)));

....
Skipping nonlast:Priority -233
At location src/dfa.c:1716
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
((nullable) = xmalloc((d->depth) * sizeof(int)));

....
Skipping nonlast:Priority -233
At location src/dfa.c:1716
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
((nullable) = xmalloc((d->depth) * sizeof(int)));

....
Skipping nonlast:Priority -233
At location src/dfa.c:1716
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
((nullable) = xmalloc((d->depth) * sizeof(int)));

....
Skipping nonlast:Priority -233
At location src/dfa.c:1716
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
((nullable) = xmalloc((d->depth) * sizeof(int)));

....
Skipping nonlast:Priority -233
At location src/dfa.c:1716
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
((nullable) = xmalloc((d->depth) * sizeof(int)));

....
Skipping nonlast:Priority -233
At location src/dfa.c:1716
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
((nullable) = xmalloc((d->depth) * sizeof(int)));

....
Skipping nonlast:Priority -233
At location src/dfa.c:1716
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
((nullable) = xmalloc((d->depth) * sizeof(int)));

....
Skipping nonlast addifexit:Priority 4767
At location src/dfa.c:1716
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, nullable, d->depth, o_nullable, searchflag, nfirstpos, d->searchflag, o_nfirst, firstpos, d->nleaves, o_firstpos, nlastpos, o_nlast, lastpos, o_lastpos, nalloc, d->tindex, i, d->follows, d->tokens, pos, j, wants_newline, d->salloc, d->sindex, d->states, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
((nullable) = xmalloc((d->depth) * sizeof(int)));

....
Skipping nonlast:Priority -232
At location src/dfa.c:1717
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
o_nullable = nullable;

....
Skipping nonlast:Priority -232
At location src/dfa.c:1717
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
o_nullable = nullable;

....
Skipping nonlast:Priority -232
At location src/dfa.c:1717
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
o_nullable = nullable;

....
Skipping nonlast:Priority -232
At location src/dfa.c:1717
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
o_nullable = nullable;

....
Skipping nonlast:Priority -232
At location src/dfa.c:1717
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
o_nullable = nullable;

....
Skipping nonlast:Priority -232
At location src/dfa.c:1717
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
o_nullable = nullable;

....
Skipping nonlast:Priority -232
At location src/dfa.c:1717
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
o_nullable = nullable;

....
Skipping nonlast:Priority -232
At location src/dfa.c:1717
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
o_nullable = nullable;

....
Skipping nonlast:Priority -232
At location src/dfa.c:1717
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
o_nullable = nullable;

....
Skipping nonlast addifexit:Priority 4768
At location src/dfa.c:1717
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nullable, o_nullable, d, nfirstpos, d->depth, o_nfirst, searchflag, firstpos, d->nleaves, d->searchflag, o_firstpos, nlastpos, o_nlast, lastpos, o_lastpos, nalloc, d->tindex, i, d->follows, d->tokens, pos, j, wants_newline, d->salloc, d->sindex, d->states, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
o_nullable = nullable;

....
Skipping nonlast:Priority -231
At location src/dfa.c:1718
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
((nfirstpos) = xmalloc((d->depth) * sizeof(int)));

....
Skipping nonlast:Priority -231
At location src/dfa.c:1718
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
((nfirstpos) = xmalloc((d->depth) * sizeof(int)));

....
Skipping nonlast:Priority -231
At location src/dfa.c:1718
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
((nfirstpos) = xmalloc((d->depth) * sizeof(int)));

....
Skipping nonlast:Priority -231
At location src/dfa.c:1718
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
((nfirstpos) = xmalloc((d->depth) * sizeof(int)));

....
Skipping nonlast:Priority -231
At location src/dfa.c:1718
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
((nfirstpos) = xmalloc((d->depth) * sizeof(int)));

....
Skipping nonlast:Priority -231
At location src/dfa.c:1718
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
((nfirstpos) = xmalloc((d->depth) * sizeof(int)));

....
Skipping nonlast:Priority -231
At location src/dfa.c:1718
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
((nfirstpos) = xmalloc((d->depth) * sizeof(int)));

....
Skipping nonlast:Priority -231
At location src/dfa.c:1718
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
((nfirstpos) = xmalloc((d->depth) * sizeof(int)));

....
Skipping nonlast:Priority -231
At location src/dfa.c:1718
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
((nfirstpos) = xmalloc((d->depth) * sizeof(int)));

....
Skipping nonlast addifexit:Priority 4769
At location src/dfa.c:1718
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, nfirstpos, d->depth, nullable, o_nullable, o_nfirst, firstpos, d->nleaves, o_firstpos, searchflag, nlastpos, d->searchflag, o_nlast, lastpos, o_lastpos, nalloc, d->tindex, i, d->follows, d->tokens, pos, j, wants_newline, d->salloc, d->sindex, d->states, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
((nfirstpos) = xmalloc((d->depth) * sizeof(int)));

....
Skipping nonlast:Priority -230
At location src/dfa.c:1719
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
o_nfirst = nfirstpos;

....
Skipping nonlast:Priority -230
At location src/dfa.c:1719
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
o_nfirst = nfirstpos;

....
Skipping nonlast:Priority -230
At location src/dfa.c:1719
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
o_nfirst = nfirstpos;

....
Skipping nonlast:Priority -230
At location src/dfa.c:1719
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
o_nfirst = nfirstpos;

....
Skipping nonlast:Priority -230
At location src/dfa.c:1719
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
o_nfirst = nfirstpos;

....
Skipping nonlast:Priority -230
At location src/dfa.c:1719
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
o_nfirst = nfirstpos;

....
Skipping nonlast:Priority -230
At location src/dfa.c:1719
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
o_nfirst = nfirstpos;

....
Skipping nonlast:Priority -230
At location src/dfa.c:1719
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
o_nfirst = nfirstpos;

....
Skipping nonlast:Priority -230
At location src/dfa.c:1719
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
o_nfirst = nfirstpos;

....
Skipping nonlast addifexit:Priority 4770
At location src/dfa.c:1719
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nfirstpos, o_nfirst, d, firstpos, d->depth, d->nleaves, nullable, o_nullable, o_firstpos, nlastpos, o_nlast, searchflag, lastpos, d->searchflag, o_lastpos, nalloc, d->tindex, i, d->follows, d->tokens, pos, j, firstpos->index, firstpos->constraint, wants_newline, d->salloc, d->sindex, d->states, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
o_nfirst = nfirstpos;

....
Skipping nonlast:Priority -229
At location src/dfa.c:1720
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
((firstpos) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -229
At location src/dfa.c:1720
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
((firstpos) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -229
At location src/dfa.c:1720
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
((firstpos) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -229
At location src/dfa.c:1720
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
((firstpos) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -229
At location src/dfa.c:1720
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
((firstpos) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -229
At location src/dfa.c:1720
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
((firstpos) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -229
At location src/dfa.c:1720
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
((firstpos) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -229
At location src/dfa.c:1720
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
((firstpos) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -229
At location src/dfa.c:1720
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
((firstpos) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast addifexit:Priority 4771
At location src/dfa.c:1720
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, firstpos, d->nleaves, nfirstpos, o_nfirst, o_firstpos, nlastpos, d->depth, nullable, o_nullable, o_nlast, lastpos, o_lastpos, searchflag, nalloc, d->tindex, d->searchflag, i, d->follows, d->tokens, pos, j, firstpos->index, firstpos->constraint, wants_newline, d->salloc, d->sindex, d->states, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
((firstpos) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -228
At location src/dfa.c:1721
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
o_firstpos = firstpos , firstpos += d->nleaves;

....
Skipping nonlast:Priority -228
At location src/dfa.c:1721
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
o_firstpos = firstpos , firstpos += d->nleaves;

....
Skipping nonlast:Priority -228
At location src/dfa.c:1721
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
o_firstpos = firstpos , firstpos += d->nleaves;

....
Skipping nonlast:Priority -228
At location src/dfa.c:1721
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
o_firstpos = firstpos , firstpos += d->nleaves;

....
Skipping nonlast:Priority -228
At location src/dfa.c:1721
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
o_firstpos = firstpos , firstpos += d->nleaves;

....
Skipping nonlast:Priority -228
At location src/dfa.c:1721
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
o_firstpos = firstpos , firstpos += d->nleaves;

....
Skipping nonlast:Priority -228
At location src/dfa.c:1721
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
o_firstpos = firstpos , firstpos += d->nleaves;

....
Skipping nonlast:Priority -228
At location src/dfa.c:1721
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
o_firstpos = firstpos , firstpos += d->nleaves;

....
Skipping nonlast:Priority -228
At location src/dfa.c:1721
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
o_firstpos = firstpos , firstpos += d->nleaves;

....
Skipping nonlast addifexit:Priority 4772
At location src/dfa.c:1721
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, firstpos, o_firstpos, d->nleaves, nlastpos, d->depth, nfirstpos, o_nfirst, o_nlast, lastpos, nullable, o_nullable, o_lastpos, nalloc, d->tindex, i, searchflag, d->searchflag, d->follows, d->tokens, pos, j, firstpos->index, firstpos->constraint, wants_newline, d->salloc, d->sindex, d->states, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
o_firstpos = firstpos , firstpos += d->nleaves;

....
Skipping nonlast:Priority -227
At location src/dfa.c:1722
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
((nlastpos) = xmalloc((d->depth) * sizeof(int)));

....
Skipping nonlast:Priority -227
At location src/dfa.c:1722
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
((nlastpos) = xmalloc((d->depth) * sizeof(int)));

....
Skipping nonlast:Priority -227
At location src/dfa.c:1722
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
((nlastpos) = xmalloc((d->depth) * sizeof(int)));

....
Skipping nonlast:Priority -227
At location src/dfa.c:1722
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
((nlastpos) = xmalloc((d->depth) * sizeof(int)));

....
Skipping nonlast:Priority -227
At location src/dfa.c:1722
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
((nlastpos) = xmalloc((d->depth) * sizeof(int)));

....
Skipping nonlast:Priority -227
At location src/dfa.c:1722
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
((nlastpos) = xmalloc((d->depth) * sizeof(int)));

....
Skipping nonlast:Priority -227
At location src/dfa.c:1722
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
((nlastpos) = xmalloc((d->depth) * sizeof(int)));

....
Skipping nonlast:Priority -227
At location src/dfa.c:1722
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
((nlastpos) = xmalloc((d->depth) * sizeof(int)));

....
Skipping nonlast:Priority -227
At location src/dfa.c:1722
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
((nlastpos) = xmalloc((d->depth) * sizeof(int)));

....
Skipping nonlast addifexit:Priority 4773
At location src/dfa.c:1722
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, nlastpos, d->depth, firstpos, o_nlast, o_firstpos, d->nleaves, lastpos, nfirstpos, o_nfirst, o_lastpos, nalloc, d->tindex, nullable, o_nullable, i, searchflag, d->searchflag, d->follows, d->tokens, pos, j, firstpos->index, firstpos->constraint, wants_newline, d->salloc, d->sindex, d->states, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
((nlastpos) = xmalloc((d->depth) * sizeof(int)));

....
Skipping nonlast:Priority -226
At location src/dfa.c:1723
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
o_nlast = nlastpos;

....
Skipping nonlast:Priority -226
At location src/dfa.c:1723
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
o_nlast = nlastpos;

....
Skipping nonlast:Priority -226
At location src/dfa.c:1723
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
o_nlast = nlastpos;

....
Skipping nonlast:Priority -226
At location src/dfa.c:1723
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
o_nlast = nlastpos;

....
Skipping nonlast:Priority -226
At location src/dfa.c:1723
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
o_nlast = nlastpos;

....
Skipping nonlast:Priority -226
At location src/dfa.c:1723
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
o_nlast = nlastpos;

....
Skipping nonlast:Priority -226
At location src/dfa.c:1723
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
o_nlast = nlastpos;

....
Skipping nonlast:Priority -226
At location src/dfa.c:1723
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
o_nlast = nlastpos;

....
Skipping nonlast:Priority -226
At location src/dfa.c:1723
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
o_nlast = nlastpos;

....
Skipping nonlast addifexit:Priority 4774
At location src/dfa.c:1723
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nlastpos, o_nlast, d, lastpos, d->depth, d->nleaves, firstpos, o_firstpos, o_lastpos, nalloc, d->tindex, nfirstpos, o_nfirst, i, nullable, o_nullable, d->follows, searchflag, d->searchflag, d->tokens, pos, j, lastpos->index, lastpos->constraint, wants_newline, d->salloc, d->sindex, d->states, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
o_nlast = nlastpos;

....
Skipping nonlast:Priority -225
At location src/dfa.c:1724
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
((lastpos) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -225
At location src/dfa.c:1724
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
((lastpos) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -225
At location src/dfa.c:1724
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
((lastpos) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -225
At location src/dfa.c:1724
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
((lastpos) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -225
At location src/dfa.c:1724
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
((lastpos) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -225
At location src/dfa.c:1724
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
((lastpos) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -225
At location src/dfa.c:1724
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
((lastpos) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -225
At location src/dfa.c:1724
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
((lastpos) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -225
At location src/dfa.c:1724
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
((lastpos) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast addifexit:Priority 4775
At location src/dfa.c:1724
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, lastpos, d->nleaves, nlastpos, o_nlast, o_lastpos, nalloc, d->tindex, d->depth, firstpos, o_firstpos, i, nfirstpos, o_nfirst, nullable, o_nullable, d->follows, searchflag, d->searchflag, d->tokens, pos, j, lastpos->index, lastpos->constraint, wants_newline, d->salloc, d->sindex, d->states, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
((lastpos) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -224
At location src/dfa.c:1725
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
o_lastpos = lastpos , lastpos += d->nleaves;

....
Skipping nonlast:Priority -224
At location src/dfa.c:1725
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
o_lastpos = lastpos , lastpos += d->nleaves;

....
Skipping nonlast:Priority -224
At location src/dfa.c:1725
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
o_lastpos = lastpos , lastpos += d->nleaves;

....
Skipping nonlast:Priority -224
At location src/dfa.c:1725
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
o_lastpos = lastpos , lastpos += d->nleaves;

....
Skipping nonlast:Priority -224
At location src/dfa.c:1725
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
o_lastpos = lastpos , lastpos += d->nleaves;

....
Skipping nonlast:Priority -224
At location src/dfa.c:1725
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
o_lastpos = lastpos , lastpos += d->nleaves;

....
Skipping nonlast:Priority -224
At location src/dfa.c:1725
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
o_lastpos = lastpos , lastpos += d->nleaves;

....
Skipping nonlast:Priority -224
At location src/dfa.c:1725
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
o_lastpos = lastpos , lastpos += d->nleaves;

....
Skipping nonlast:Priority -224
At location src/dfa.c:1725
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
o_lastpos = lastpos , lastpos += d->nleaves;

....
Skipping nonlast addifexit:Priority 4776
At location src/dfa.c:1725
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, lastpos, o_lastpos, d->nleaves, nalloc, d->tindex, nlastpos, o_nlast, i, d->depth, firstpos, o_firstpos, nfirstpos, o_nfirst, d->follows, nullable, o_nullable, searchflag, d->searchflag, d->tokens, pos, j, lastpos->index, lastpos->constraint, wants_newline, d->salloc, d->sindex, d->states, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
o_lastpos = lastpos , lastpos += d->nleaves;

....
Skipping nonlast:Priority -223
At location src/dfa.c:1726
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
((nalloc) = xmalloc((d->tindex) * sizeof(int)));

....
Skipping nonlast:Priority -223
At location src/dfa.c:1726
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
((nalloc) = xmalloc((d->tindex) * sizeof(int)));

....
Skipping nonlast:Priority -223
At location src/dfa.c:1726
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
((nalloc) = xmalloc((d->tindex) * sizeof(int)));

....
Skipping nonlast:Priority -223
At location src/dfa.c:1726
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
((nalloc) = xmalloc((d->tindex) * sizeof(int)));

....
Skipping nonlast:Priority -223
At location src/dfa.c:1726
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
((nalloc) = xmalloc((d->tindex) * sizeof(int)));

....
Skipping nonlast:Priority -223
At location src/dfa.c:1726
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
((nalloc) = xmalloc((d->tindex) * sizeof(int)));

....
Skipping nonlast:Priority -223
At location src/dfa.c:1726
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
((nalloc) = xmalloc((d->tindex) * sizeof(int)));

....
Skipping nonlast:Priority -223
At location src/dfa.c:1726
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
((nalloc) = xmalloc((d->tindex) * sizeof(int)));

....
Skipping nonlast:Priority -223
At location src/dfa.c:1726
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
((nalloc) = xmalloc((d->tindex) * sizeof(int)));

....
Skipping nonlast addifexit:Priority 4777
At location src/dfa.c:1726
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, nalloc, d->tindex, lastpos, o_lastpos, i, d->nleaves, nlastpos, o_nlast, d->depth, firstpos, o_firstpos, d->follows, nfirstpos, o_nfirst, nullable, o_nullable, d->tokens, searchflag, d->searchflag, pos, j, lastpos->index, lastpos->constraint, wants_newline, d->salloc, d->sindex, d->states, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
((nalloc) = xmalloc((d->tindex) * sizeof(int)));

....
Skipping nonlast:Priority -222
At location src/dfa.c:1727
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
for (i = 0; i < d->tindex; ++i) 
    nalloc[i] = 0;

....
Skipping nonlast:Priority -222
At location src/dfa.c:1727
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
for (i = 0; i < d->tindex; ++i) 
    nalloc[i] = 0;

....
Skipping nonlast:Priority -222
At location src/dfa.c:1727
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
for (i = 0; i < d->tindex; ++i) 
    nalloc[i] = 0;

....
Skipping nonlast:Priority -222
At location src/dfa.c:1727
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
for (i = 0; i < d->tindex; ++i) 
    nalloc[i] = 0;

....
Skipping nonlast:Priority -222
At location src/dfa.c:1727
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
for (i = 0; i < d->tindex; ++i) 
    nalloc[i] = 0;

....
Skipping nonlast:Priority -222
At location src/dfa.c:1727
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
for (i = 0; i < d->tindex; ++i) 
    nalloc[i] = 0;

....
Skipping nonlast:Priority -222
At location src/dfa.c:1727
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
for (i = 0; i < d->tindex; ++i) 
    nalloc[i] = 0;

....
Skipping nonlast:Priority -222
At location src/dfa.c:1727
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
for (i = 0; i < d->tindex; ++i) 
    nalloc[i] = 0;

....
Skipping nonlast:Priority -222
At location src/dfa.c:1727
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
for (i = 0; i < d->tindex; ++i) 
    nalloc[i] = 0;

....
Skipping nonlast addifexit:Priority 4778
At location src/dfa.c:1727
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->tindex, nalloc, lastpos, o_lastpos, d->nleaves, nlastpos, o_nlast, d->follows, d->depth, firstpos, o_firstpos, nfirstpos, o_nfirst, nullable, o_nullable, d->tokens, searchflag, d->searchflag, pos, j, wants_newline, d->salloc, d->sindex, d->states, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
for (i = 0; i < d->tindex; ++i) 
    nalloc[i] = 0;

....
Skipping nonlast:Priority -221
At location src/dfa.c:1729
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
((merged.elems) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -221
At location src/dfa.c:1729
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
((merged.elems) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -221
At location src/dfa.c:1729
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
((merged.elems) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -221
At location src/dfa.c:1729
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
((merged.elems) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -221
At location src/dfa.c:1729
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
((merged.elems) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -221
At location src/dfa.c:1729
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
((merged.elems) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -221
At location src/dfa.c:1729
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
((merged.elems) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -221
At location src/dfa.c:1729
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
((merged.elems) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -221
At location src/dfa.c:1729
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
((merged.elems) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast addifexit:Priority 4779
At location src/dfa.c:1729
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->nleaves, merged.elems, nalloc, i, d->tindex, d->follows, lastpos, o_lastpos, nlastpos, o_nlast, d->depth, firstpos, o_firstpos, d->tokens, nfirstpos, o_nfirst, nullable, o_nullable, searchflag, d->searchflag, pos, j, merged.nelem, wants_newline, d->salloc, d->sindex, d->states, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
((merged.elems) = xmalloc((d->nleaves) * sizeof(position)));

....
Skipping nonlast:Priority -220
At location src/dfa.c:1731
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
((d->follows) = xcalloc((size_t)(d->tindex), sizeof(position_set)));

....
Skipping nonlast:Priority -220
At location src/dfa.c:1731
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
((d->follows) = xcalloc((size_t)(d->tindex), sizeof(position_set)));

....
Skipping nonlast:Priority -220
At location src/dfa.c:1731
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
((d->follows) = xcalloc((size_t)(d->tindex), sizeof(position_set)));

....
Skipping nonlast:Priority -220
At location src/dfa.c:1731
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
((d->follows) = xcalloc((size_t)(d->tindex), sizeof(position_set)));

....
Skipping nonlast:Priority -220
At location src/dfa.c:1731
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
((d->follows) = xcalloc((size_t)(d->tindex), sizeof(position_set)));

....
Skipping nonlast:Priority -220
At location src/dfa.c:1731
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
((d->follows) = xcalloc((size_t)(d->tindex), sizeof(position_set)));

....
Skipping nonlast:Priority -220
At location src/dfa.c:1731
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
((d->follows) = xcalloc((size_t)(d->tindex), sizeof(position_set)));

....
Skipping nonlast:Priority -220
At location src/dfa.c:1731
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
((d->follows) = xcalloc((size_t)(d->tindex), sizeof(position_set)));

....
Skipping nonlast:Priority -220
At location src/dfa.c:1731
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
((d->follows) = xcalloc((size_t)(d->tindex), sizeof(position_set)));

....
Skipping nonlast addifexit:Priority 4780
At location src/dfa.c:1731
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->tindex, d->follows, i, d->nleaves, nalloc, lastpos, o_lastpos, d->tokens, nlastpos, o_nlast, d->depth, nullable, firstpos, o_firstpos, nfirstpos, o_nfirst, o_nullable, searchflag, d->searchflag, pos, j, wants_newline, d->salloc, d->sindex, d->states, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
((d->follows) = xcalloc((size_t)(d->tindex), sizeof(position_set)));

....
Skipping nonlast:Priority -219
At location src/dfa.c:1733
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
for (i = 0; i < d->tindex; ++i) 
    switch (d->tokens[i]) {
      case EMPTY:
        *nullable++ = 1;
        *nfirstpos++ = *nlastpos++ = 0;
        break;
      case STAR:
      case PLUS:
        tmp.nelem = nfirstpos[-1];
        tmp.elems = firstpos;
        pos = lastpos;
        for (j = 0; j < nlastpos[-1]; ++j) {
            merge(&tmp, &d->follows[pos[j].index], &merged);
            if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
                do 
                    (nalloc[pos[j].index]) *= 2;
                while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
                ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
            }
            ;
            copy(&merged, &d->follows[pos[j].index]);
        }
      case QMARK:
        if (d->tokens[i] != PLUS)
            nullable[-1] = 1;
        break;
      case CAT:
        tmp.nelem = nfirstpos[-1];
        tmp.elems = firstpos;
        pos = lastpos + nlastpos[-1];
        for (j = 0; j < nlastpos[-2]; ++j) {
            merge(&tmp, &d->follows[pos[j].index], &merged);
            if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
                do 
                    (nalloc[pos[j].index]) *= 2;
                while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
                ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
            }
            ;
            copy(&merged, &d->follows[pos[j].index]);
        }
        if (nullable[-2])
            nfirstpos[-2] += nfirstpos[-1];
        else
            firstpos += nfirstpos[-1];
        --nfirstpos;
        if (nullable[-1])
            nlastpos[-2] += nlastpos[-1];
        else {
            pos = lastpos + nlastpos[-2];
            for (j = nlastpos[-1] - 1; j >= 0; --j) 
                pos[j] = lastpos[j];
            lastpos += nlastpos[-2];
            nlastpos[-2] = nlastpos[-1];
        }
        --nlastpos;
        nullable[-2] = nullable[-1] && nullable[-2];
        --nullable;
        break;
      case OR:
      case ORTOP:
        nfirstpos[-2] += nfirstpos[-1];
        --nfirstpos;
        nlastpos[-2] += nlastpos[-1];
        --nlastpos;
        nullable[-2] = nullable[-1] || nullable[-2];
        --nullable;
        break;
      default:
        *nullable++ = d->tokens[i] == BACKREF;
        *nfirstpos++ = *nlastpos++ = 1;
        --firstpos , --lastpos;
        firstpos->index = lastpos->index = i;
        firstpos->constraint = lastpos->constraint = 255;
        nalloc[i] = 1;
        ((d->follows[i].elems) = xmalloc((nalloc[i]) * sizeof(position)));
        break;
    }

....
Skipping nonlast:Priority -219
At location src/dfa.c:1733
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
for (i = 0; i < d->tindex; ++i) 
    switch (d->tokens[i]) {
      case EMPTY:
        *nullable++ = 1;
        *nfirstpos++ = *nlastpos++ = 0;
        break;
      case STAR:
      case PLUS:
        tmp.nelem = nfirstpos[-1];
        tmp.elems = firstpos;
        pos = lastpos;
        for (j = 0; j < nlastpos[-1]; ++j) {
            merge(&tmp, &d->follows[pos[j].index], &merged);
            if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
                do 
                    (nalloc[pos[j].index]) *= 2;
                while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
                ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
            }
            ;
            copy(&merged, &d->follows[pos[j].index]);
        }
      case QMARK:
        if (d->tokens[i] != PLUS)
            nullable[-1] = 1;
        break;
      case CAT:
        tmp.nelem = nfirstpos[-1];
        tmp.elems = firstpos;
        pos = lastpos + nlastpos[-1];
        for (j = 0; j < nlastpos[-2]; ++j) {
            merge(&tmp, &d->follows[pos[j].index], &merged);
            if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
                do 
                    (nalloc[pos[j].index]) *= 2;
                while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
                ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
            }
            ;
            copy(&merged, &d->follows[pos[j].index]);
        }
        if (nullable[-2])
            nfirstpos[-2] += nfirstpos[-1];
        else
            firstpos += nfirstpos[-1];
        --nfirstpos;
        if (nullable[-1])
            nlastpos[-2] += nlastpos[-1];
        else {
            pos = lastpos + nlastpos[-2];
            for (j = nlastpos[-1] - 1; j >= 0; --j) 
                pos[j] = lastpos[j];
            lastpos += nlastpos[-2];
            nlastpos[-2] = nlastpos[-1];
        }
        --nlastpos;
        nullable[-2] = nullable[-1] && nullable[-2];
        --nullable;
        break;
      case OR:
      case ORTOP:
        nfirstpos[-2] += nfirstpos[-1];
        --nfirstpos;
        nlastpos[-2] += nlastpos[-1];
        --nlastpos;
        nullable[-2] = nullable[-1] || nullable[-2];
        --nullable;
        break;
      default:
        *nullable++ = d->tokens[i] == BACKREF;
        *nfirstpos++ = *nlastpos++ = 1;
        --firstpos , --lastpos;
        firstpos->index = lastpos->index = i;
        firstpos->constraint = lastpos->constraint = 255;
        nalloc[i] = 1;
        ((d->follows[i].elems) = xmalloc((nalloc[i]) * sizeof(position)));
        break;
    }

....
Skipping nonlast:Priority -219
At location src/dfa.c:1733
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
for (i = 0; i < d->tindex; ++i) 
    switch (d->tokens[i]) {
      case EMPTY:
        *nullable++ = 1;
        *nfirstpos++ = *nlastpos++ = 0;
        break;
      case STAR:
      case PLUS:
        tmp.nelem = nfirstpos[-1];
        tmp.elems = firstpos;
        pos = lastpos;
        for (j = 0; j < nlastpos[-1]; ++j) {
            merge(&tmp, &d->follows[pos[j].index], &merged);
            if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
                do 
                    (nalloc[pos[j].index]) *= 2;
                while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
                ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
            }
            ;
            copy(&merged, &d->follows[pos[j].index]);
        }
      case QMARK:
        if (d->tokens[i] != PLUS)
            nullable[-1] = 1;
        break;
      case CAT:
        tmp.nelem = nfirstpos[-1];
        tmp.elems = firstpos;
        pos = lastpos + nlastpos[-1];
        for (j = 0; j < nlastpos[-2]; ++j) {
            merge(&tmp, &d->follows[pos[j].index], &merged);
            if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
                do 
                    (nalloc[pos[j].index]) *= 2;
                while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
                ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
            }
            ;
            copy(&merged, &d->follows[pos[j].index]);
        }
        if (nullable[-2])
            nfirstpos[-2] += nfirstpos[-1];
        else
            firstpos += nfirstpos[-1];
        --nfirstpos;
        if (nullable[-1])
            nlastpos[-2] += nlastpos[-1];
        else {
            pos = lastpos + nlastpos[-2];
            for (j = nlastpos[-1] - 1; j >= 0; --j) 
                pos[j] = lastpos[j];
            lastpos += nlastpos[-2];
            nlastpos[-2] = nlastpos[-1];
        }
        --nlastpos;
        nullable[-2] = nullable[-1] && nullable[-2];
        --nullable;
        break;
      case OR:
      case ORTOP:
        nfirstpos[-2] += nfirstpos[-1];
        --nfirstpos;
        nlastpos[-2] += nlastpos[-1];
        --nlastpos;
        nullable[-2] = nullable[-1] || nullable[-2];
        --nullable;
        break;
      default:
        *nullable++ = d->tokens[i] == BACKREF;
        *nfirstpos++ = *nlastpos++ = 1;
        --firstpos , --lastpos;
        firstpos->index = lastpos->index = i;
        firstpos->constraint = lastpos->constraint = 255;
        nalloc[i] = 1;
        ((d->follows[i].elems) = xmalloc((nalloc[i]) * sizeof(position)));
        break;
    }

....
Skipping nonlast:Priority -219
At location src/dfa.c:1733
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
for (i = 0; i < d->tindex; ++i) 
    switch (d->tokens[i]) {
      case EMPTY:
        *nullable++ = 1;
        *nfirstpos++ = *nlastpos++ = 0;
        break;
      case STAR:
      case PLUS:
        tmp.nelem = nfirstpos[-1];
        tmp.elems = firstpos;
        pos = lastpos;
        for (j = 0; j < nlastpos[-1]; ++j) {
            merge(&tmp, &d->follows[pos[j].index], &merged);
            if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
                do 
                    (nalloc[pos[j].index]) *= 2;
                while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
                ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
            }
            ;
            copy(&merged, &d->follows[pos[j].index]);
        }
      case QMARK:
        if (d->tokens[i] != PLUS)
            nullable[-1] = 1;
        break;
      case CAT:
        tmp.nelem = nfirstpos[-1];
        tmp.elems = firstpos;
        pos = lastpos + nlastpos[-1];
        for (j = 0; j < nlastpos[-2]; ++j) {
            merge(&tmp, &d->follows[pos[j].index], &merged);
            if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
                do 
                    (nalloc[pos[j].index]) *= 2;
                while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
                ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
            }
            ;
            copy(&merged, &d->follows[pos[j].index]);
        }
        if (nullable[-2])
            nfirstpos[-2] += nfirstpos[-1];
        else
            firstpos += nfirstpos[-1];
        --nfirstpos;
        if (nullable[-1])
            nlastpos[-2] += nlastpos[-1];
        else {
            pos = lastpos + nlastpos[-2];
            for (j = nlastpos[-1] - 1; j >= 0; --j) 
                pos[j] = lastpos[j];
            lastpos += nlastpos[-2];
            nlastpos[-2] = nlastpos[-1];
        }
        --nlastpos;
        nullable[-2] = nullable[-1] && nullable[-2];
        --nullable;
        break;
      case OR:
      case ORTOP:
        nfirstpos[-2] += nfirstpos[-1];
        --nfirstpos;
        nlastpos[-2] += nlastpos[-1];
        --nlastpos;
        nullable[-2] = nullable[-1] || nullable[-2];
        --nullable;
        break;
      default:
        *nullable++ = d->tokens[i] == BACKREF;
        *nfirstpos++ = *nlastpos++ = 1;
        --firstpos , --lastpos;
        firstpos->index = lastpos->index = i;
        firstpos->constraint = lastpos->constraint = 255;
        nalloc[i] = 1;
        ((d->follows[i].elems) = xmalloc((nalloc[i]) * sizeof(position)));
        break;
    }

....
Skipping nonlast:Priority -219
At location src/dfa.c:1733
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
for (i = 0; i < d->tindex; ++i) 
    switch (d->tokens[i]) {
      case EMPTY:
        *nullable++ = 1;
        *nfirstpos++ = *nlastpos++ = 0;
        break;
      case STAR:
      case PLUS:
        tmp.nelem = nfirstpos[-1];
        tmp.elems = firstpos;
        pos = lastpos;
        for (j = 0; j < nlastpos[-1]; ++j) {
            merge(&tmp, &d->follows[pos[j].index], &merged);
            if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
                do 
                    (nalloc[pos[j].index]) *= 2;
                while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
                ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
            }
            ;
            copy(&merged, &d->follows[pos[j].index]);
        }
      case QMARK:
        if (d->tokens[i] != PLUS)
            nullable[-1] = 1;
        break;
      case CAT:
        tmp.nelem = nfirstpos[-1];
        tmp.elems = firstpos;
        pos = lastpos + nlastpos[-1];
        for (j = 0; j < nlastpos[-2]; ++j) {
            merge(&tmp, &d->follows[pos[j].index], &merged);
            if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
                do 
                    (nalloc[pos[j].index]) *= 2;
                while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
                ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
            }
            ;
            copy(&merged, &d->follows[pos[j].index]);
        }
        if (nullable[-2])
            nfirstpos[-2] += nfirstpos[-1];
        else
            firstpos += nfirstpos[-1];
        --nfirstpos;
        if (nullable[-1])
            nlastpos[-2] += nlastpos[-1];
        else {
            pos = lastpos + nlastpos[-2];
            for (j = nlastpos[-1] - 1; j >= 0; --j) 
                pos[j] = lastpos[j];
            lastpos += nlastpos[-2];
            nlastpos[-2] = nlastpos[-1];
        }
        --nlastpos;
        nullable[-2] = nullable[-1] && nullable[-2];
        --nullable;
        break;
      case OR:
      case ORTOP:
        nfirstpos[-2] += nfirstpos[-1];
        --nfirstpos;
        nlastpos[-2] += nlastpos[-1];
        --nlastpos;
        nullable[-2] = nullable[-1] || nullable[-2];
        --nullable;
        break;
      default:
        *nullable++ = d->tokens[i] == BACKREF;
        *nfirstpos++ = *nlastpos++ = 1;
        --firstpos , --lastpos;
        firstpos->index = lastpos->index = i;
        firstpos->constraint = lastpos->constraint = 255;
        nalloc[i] = 1;
        ((d->follows[i].elems) = xmalloc((nalloc[i]) * sizeof(position)));
        break;
    }

....
Skipping nonlast:Priority -219
At location src/dfa.c:1733
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
for (i = 0; i < d->tindex; ++i) 
    switch (d->tokens[i]) {
      case EMPTY:
        *nullable++ = 1;
        *nfirstpos++ = *nlastpos++ = 0;
        break;
      case STAR:
      case PLUS:
        tmp.nelem = nfirstpos[-1];
        tmp.elems = firstpos;
        pos = lastpos;
        for (j = 0; j < nlastpos[-1]; ++j) {
            merge(&tmp, &d->follows[pos[j].index], &merged);
            if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
                do 
                    (nalloc[pos[j].index]) *= 2;
                while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
                ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
            }
            ;
            copy(&merged, &d->follows[pos[j].index]);
        }
      case QMARK:
        if (d->tokens[i] != PLUS)
            nullable[-1] = 1;
        break;
      case CAT:
        tmp.nelem = nfirstpos[-1];
        tmp.elems = firstpos;
        pos = lastpos + nlastpos[-1];
        for (j = 0; j < nlastpos[-2]; ++j) {
            merge(&tmp, &d->follows[pos[j].index], &merged);
            if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
                do 
                    (nalloc[pos[j].index]) *= 2;
                while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
                ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
            }
            ;
            copy(&merged, &d->follows[pos[j].index]);
        }
        if (nullable[-2])
            nfirstpos[-2] += nfirstpos[-1];
        else
            firstpos += nfirstpos[-1];
        --nfirstpos;
        if (nullable[-1])
            nlastpos[-2] += nlastpos[-1];
        else {
            pos = lastpos + nlastpos[-2];
            for (j = nlastpos[-1] - 1; j >= 0; --j) 
                pos[j] = lastpos[j];
            lastpos += nlastpos[-2];
            nlastpos[-2] = nlastpos[-1];
        }
        --nlastpos;
        nullable[-2] = nullable[-1] && nullable[-2];
        --nullable;
        break;
      case OR:
      case ORTOP:
        nfirstpos[-2] += nfirstpos[-1];
        --nfirstpos;
        nlastpos[-2] += nlastpos[-1];
        --nlastpos;
        nullable[-2] = nullable[-1] || nullable[-2];
        --nullable;
        break;
      default:
        *nullable++ = d->tokens[i] == BACKREF;
        *nfirstpos++ = *nlastpos++ = 1;
        --firstpos , --lastpos;
        firstpos->index = lastpos->index = i;
        firstpos->constraint = lastpos->constraint = 255;
        nalloc[i] = 1;
        ((d->follows[i].elems) = xmalloc((nalloc[i]) * sizeof(position)));
        break;
    }

....
Skipping nonlast:Priority -219
At location src/dfa.c:1733
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
for (i = 0; i < d->tindex; ++i) 
    switch (d->tokens[i]) {
      case EMPTY:
        *nullable++ = 1;
        *nfirstpos++ = *nlastpos++ = 0;
        break;
      case STAR:
      case PLUS:
        tmp.nelem = nfirstpos[-1];
        tmp.elems = firstpos;
        pos = lastpos;
        for (j = 0; j < nlastpos[-1]; ++j) {
            merge(&tmp, &d->follows[pos[j].index], &merged);
            if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
                do 
                    (nalloc[pos[j].index]) *= 2;
                while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
                ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
            }
            ;
            copy(&merged, &d->follows[pos[j].index]);
        }
      case QMARK:
        if (d->tokens[i] != PLUS)
            nullable[-1] = 1;
        break;
      case CAT:
        tmp.nelem = nfirstpos[-1];
        tmp.elems = firstpos;
        pos = lastpos + nlastpos[-1];
        for (j = 0; j < nlastpos[-2]; ++j) {
            merge(&tmp, &d->follows[pos[j].index], &merged);
            if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
                do 
                    (nalloc[pos[j].index]) *= 2;
                while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
                ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
            }
            ;
            copy(&merged, &d->follows[pos[j].index]);
        }
        if (nullable[-2])
            nfirstpos[-2] += nfirstpos[-1];
        else
            firstpos += nfirstpos[-1];
        --nfirstpos;
        if (nullable[-1])
            nlastpos[-2] += nlastpos[-1];
        else {
            pos = lastpos + nlastpos[-2];
            for (j = nlastpos[-1] - 1; j >= 0; --j) 
                pos[j] = lastpos[j];
            lastpos += nlastpos[-2];
            nlastpos[-2] = nlastpos[-1];
        }
        --nlastpos;
        nullable[-2] = nullable[-1] && nullable[-2];
        --nullable;
        break;
      case OR:
      case ORTOP:
        nfirstpos[-2] += nfirstpos[-1];
        --nfirstpos;
        nlastpos[-2] += nlastpos[-1];
        --nlastpos;
        nullable[-2] = nullable[-1] || nullable[-2];
        --nullable;
        break;
      default:
        *nullable++ = d->tokens[i] == BACKREF;
        *nfirstpos++ = *nlastpos++ = 1;
        --firstpos , --lastpos;
        firstpos->index = lastpos->index = i;
        firstpos->constraint = lastpos->constraint = 255;
        nalloc[i] = 1;
        ((d->follows[i].elems) = xmalloc((nalloc[i]) * sizeof(position)));
        break;
    }

....
Skipping nonlast:Priority -219
At location src/dfa.c:1733
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
for (i = 0; i < d->tindex; ++i) 
    switch (d->tokens[i]) {
      case EMPTY:
        *nullable++ = 1;
        *nfirstpos++ = *nlastpos++ = 0;
        break;
      case STAR:
      case PLUS:
        tmp.nelem = nfirstpos[-1];
        tmp.elems = firstpos;
        pos = lastpos;
        for (j = 0; j < nlastpos[-1]; ++j) {
            merge(&tmp, &d->follows[pos[j].index], &merged);
            if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
                do 
                    (nalloc[pos[j].index]) *= 2;
                while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
                ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
            }
            ;
            copy(&merged, &d->follows[pos[j].index]);
        }
      case QMARK:
        if (d->tokens[i] != PLUS)
            nullable[-1] = 1;
        break;
      case CAT:
        tmp.nelem = nfirstpos[-1];
        tmp.elems = firstpos;
        pos = lastpos + nlastpos[-1];
        for (j = 0; j < nlastpos[-2]; ++j) {
            merge(&tmp, &d->follows[pos[j].index], &merged);
            if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
                do 
                    (nalloc[pos[j].index]) *= 2;
                while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
                ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
            }
            ;
            copy(&merged, &d->follows[pos[j].index]);
        }
        if (nullable[-2])
            nfirstpos[-2] += nfirstpos[-1];
        else
            firstpos += nfirstpos[-1];
        --nfirstpos;
        if (nullable[-1])
            nlastpos[-2] += nlastpos[-1];
        else {
            pos = lastpos + nlastpos[-2];
            for (j = nlastpos[-1] - 1; j >= 0; --j) 
                pos[j] = lastpos[j];
            lastpos += nlastpos[-2];
            nlastpos[-2] = nlastpos[-1];
        }
        --nlastpos;
        nullable[-2] = nullable[-1] && nullable[-2];
        --nullable;
        break;
      case OR:
      case ORTOP:
        nfirstpos[-2] += nfirstpos[-1];
        --nfirstpos;
        nlastpos[-2] += nlastpos[-1];
        --nlastpos;
        nullable[-2] = nullable[-1] || nullable[-2];
        --nullable;
        break;
      default:
        *nullable++ = d->tokens[i] == BACKREF;
        *nfirstpos++ = *nlastpos++ = 1;
        --firstpos , --lastpos;
        firstpos->index = lastpos->index = i;
        firstpos->constraint = lastpos->constraint = 255;
        nalloc[i] = 1;
        ((d->follows[i].elems) = xmalloc((nalloc[i]) * sizeof(position)));
        break;
    }

....
Skipping nonlast:Priority -219
At location src/dfa.c:1733
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
for (i = 0; i < d->tindex; ++i) 
    switch (d->tokens[i]) {
      case EMPTY:
        *nullable++ = 1;
        *nfirstpos++ = *nlastpos++ = 0;
        break;
      case STAR:
      case PLUS:
        tmp.nelem = nfirstpos[-1];
        tmp.elems = firstpos;
        pos = lastpos;
        for (j = 0; j < nlastpos[-1]; ++j) {
            merge(&tmp, &d->follows[pos[j].index], &merged);
            if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
                do 
                    (nalloc[pos[j].index]) *= 2;
                while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
                ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
            }
            ;
            copy(&merged, &d->follows[pos[j].index]);
        }
      case QMARK:
        if (d->tokens[i] != PLUS)
            nullable[-1] = 1;
        break;
      case CAT:
        tmp.nelem = nfirstpos[-1];
        tmp.elems = firstpos;
        pos = lastpos + nlastpos[-1];
        for (j = 0; j < nlastpos[-2]; ++j) {
            merge(&tmp, &d->follows[pos[j].index], &merged);
            if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
                do 
                    (nalloc[pos[j].index]) *= 2;
                while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
                ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
            }
            ;
            copy(&merged, &d->follows[pos[j].index]);
        }
        if (nullable[-2])
            nfirstpos[-2] += nfirstpos[-1];
        else
            firstpos += nfirstpos[-1];
        --nfirstpos;
        if (nullable[-1])
            nlastpos[-2] += nlastpos[-1];
        else {
            pos = lastpos + nlastpos[-2];
            for (j = nlastpos[-1] - 1; j >= 0; --j) 
                pos[j] = lastpos[j];
            lastpos += nlastpos[-2];
            nlastpos[-2] = nlastpos[-1];
        }
        --nlastpos;
        nullable[-2] = nullable[-1] && nullable[-2];
        --nullable;
        break;
      case OR:
      case ORTOP:
        nfirstpos[-2] += nfirstpos[-1];
        --nfirstpos;
        nlastpos[-2] += nlastpos[-1];
        --nlastpos;
        nullable[-2] = nullable[-1] || nullable[-2];
        --nullable;
        break;
      default:
        *nullable++ = d->tokens[i] == BACKREF;
        *nfirstpos++ = *nlastpos++ = 1;
        --firstpos , --lastpos;
        firstpos->index = lastpos->index = i;
        firstpos->constraint = lastpos->constraint = 255;
        nalloc[i] = 1;
        ((d->follows[i].elems) = xmalloc((nalloc[i]) * sizeof(position)));
        break;
    }

....
Skipping nonlast addifexit:Priority 4781
At location src/dfa.c:1733
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->tindex, d->follows, d->tokens, d->nleaves, nalloc, nullable, lastpos, o_lastpos, nlastpos, o_nlast, nfirstpos, d->depth, firstpos, o_firstpos, o_nfirst, o_nullable, searchflag, d->searchflag, pos, j, wants_newline, d->salloc, d->sindex, d->states, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
for (i = 0; i < d->tindex; ++i) 
    switch (d->tokens[i]) {
      case EMPTY:
        *nullable++ = 1;
        *nfirstpos++ = *nlastpos++ = 0;
        break;
      case STAR:
      case PLUS:
        tmp.nelem = nfirstpos[-1];
        tmp.elems = firstpos;
        pos = lastpos;
        for (j = 0; j < nlastpos[-1]; ++j) {
            merge(&tmp, &d->follows[pos[j].index], &merged);
            if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
                do 
                    (nalloc[pos[j].index]) *= 2;
                while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
                ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
            }
            ;
            copy(&merged, &d->follows[pos[j].index]);
        }
      case QMARK:
        if (d->tokens[i] != PLUS)
            nullable[-1] = 1;
        break;
      case CAT:
        tmp.nelem = nfirstpos[-1];
        tmp.elems = firstpos;
        pos = lastpos + nlastpos[-1];
        for (j = 0; j < nlastpos[-2]; ++j) {
            merge(&tmp, &d->follows[pos[j].index], &merged);
            if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
                do 
                    (nalloc[pos[j].index]) *= 2;
                while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
                ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
            }
            ;
            copy(&merged, &d->follows[pos[j].index]);
        }
        if (nullable[-2])
            nfirstpos[-2] += nfirstpos[-1];
        else
            firstpos += nfirstpos[-1];
        --nfirstpos;
        if (nullable[-1])
            nlastpos[-2] += nlastpos[-1];
        else {
            pos = lastpos + nlastpos[-2];
            for (j = nlastpos[-1] - 1; j >= 0; --j) 
                pos[j] = lastpos[j];
            lastpos += nlastpos[-2];
            nlastpos[-2] = nlastpos[-1];
        }
        --nlastpos;
        nullable[-2] = nullable[-1] && nullable[-2];
        --nullable;
        break;
      case OR:
      case ORTOP:
        nfirstpos[-2] += nfirstpos[-1];
        --nfirstpos;
        nlastpos[-2] += nlastpos[-1];
        --nlastpos;
        nullable[-2] = nullable[-1] || nullable[-2];
        --nullable;
        break;
      default:
        *nullable++ = d->tokens[i] == BACKREF;
        *nfirstpos++ = *nlastpos++ = 1;
        --firstpos , --lastpos;
        firstpos->index = lastpos->index = i;
        firstpos->constraint = lastpos->constraint = 255;
        nalloc[i] = 1;
        ((d->follows[i].elems) = xmalloc((nalloc[i]) * sizeof(position)));
        break;
    }

....
Skipping nonlast:Priority -218
At location src/dfa.c:1752
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
tmp.elems = firstpos;

....
Skipping nonlast:Priority -218
At location src/dfa.c:1752
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
tmp.elems = firstpos;

....
Skipping nonlast:Priority -218
At location src/dfa.c:1752
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
tmp.elems = firstpos;

....
Skipping nonlast:Priority -218
At location src/dfa.c:1752
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
tmp.elems = firstpos;

....
Skipping nonlast:Priority -218
At location src/dfa.c:1752
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
tmp.elems = firstpos;

....
Skipping nonlast:Priority -218
At location src/dfa.c:1752
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
tmp.elems = firstpos;

....
Skipping nonlast:Priority -218
At location src/dfa.c:1752
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
tmp.elems = firstpos;

....
Skipping nonlast:Priority -218
At location src/dfa.c:1752
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
tmp.elems = firstpos;

....
Skipping nonlast:Priority -218
At location src/dfa.c:1752
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
tmp.elems = firstpos;

....
Skipping nonlast addifexit:Priority 4782
At location src/dfa.c:1752
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(firstpos, tmp.elems, nfirstpos, lastpos, pos, tmp.nelem, nlastpos, j, d, nalloc, nullable, i, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, firstpos->index, lastpos->index, firstpos->constraint, lastpos->constraint, wants_newline)))
    return;
tmp.elems = firstpos;

....
Skipping nonlast addifexit:Priority 4782
At location src/dfa.c:1752
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(firstpos, tmp.elems, nfirstpos, lastpos, pos, tmp.nelem, nlastpos, j, d, nalloc, nullable, i, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, firstpos->index, lastpos->index, firstpos->constraint, lastpos->constraint, wants_newline)))
    break;
tmp.elems = firstpos;

....
Skipping nonlast:Priority -217
At location src/dfa.c:1753
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
pos = lastpos;

....
Skipping nonlast:Priority -217
At location src/dfa.c:1753
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
pos = lastpos;

....
Skipping nonlast:Priority -217
At location src/dfa.c:1753
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
pos = lastpos;

....
Skipping nonlast:Priority -217
At location src/dfa.c:1753
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
pos = lastpos;

....
Skipping nonlast:Priority -217
At location src/dfa.c:1753
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
pos = lastpos;

....
Skipping nonlast:Priority -217
At location src/dfa.c:1753
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
pos = lastpos;

....
Skipping nonlast:Priority -217
At location src/dfa.c:1753
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
pos = lastpos;

....
Skipping nonlast:Priority -217
At location src/dfa.c:1753
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
pos = lastpos;

....
Skipping nonlast:Priority -217
At location src/dfa.c:1753
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
pos = lastpos;

....
Skipping nonlast addifexit:Priority 4783
At location src/dfa.c:1753
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lastpos, pos, firstpos, nlastpos, j, tmp.elems, nfirstpos, tmp.nelem, d, nalloc, i, nullable, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, firstpos->index, lastpos->index, firstpos->constraint, lastpos->constraint, wants_newline)))
    return;
pos = lastpos;

....
Skipping nonlast addifexit:Priority 4783
At location src/dfa.c:1753
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lastpos, pos, firstpos, nlastpos, j, tmp.elems, nfirstpos, tmp.nelem, d, nalloc, i, nullable, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, firstpos->index, lastpos->index, firstpos->constraint, lastpos->constraint, wants_newline)))
    break;
pos = lastpos;

....
Skipping nonlast:Priority -216
At location src/dfa.c:1754
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
for (j = 0; j < nlastpos[-1]; ++j) {
    merge(&tmp, &d->follows[pos[j].index], &merged);
    if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
        do 
            (nalloc[pos[j].index]) *= 2;
        while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
        ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
    }
    ;
    copy(&merged, &d->follows[pos[j].index]);
}

....
Skipping nonlast:Priority -216
At location src/dfa.c:1754
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
for (j = 0; j < nlastpos[-1]; ++j) {
    merge(&tmp, &d->follows[pos[j].index], &merged);
    if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
        do 
            (nalloc[pos[j].index]) *= 2;
        while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
        ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
    }
    ;
    copy(&merged, &d->follows[pos[j].index]);
}

....
Skipping nonlast:Priority -216
At location src/dfa.c:1754
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
for (j = 0; j < nlastpos[-1]; ++j) {
    merge(&tmp, &d->follows[pos[j].index], &merged);
    if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
        do 
            (nalloc[pos[j].index]) *= 2;
        while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
        ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
    }
    ;
    copy(&merged, &d->follows[pos[j].index]);
}

....
Skipping nonlast:Priority -216
At location src/dfa.c:1754
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
for (j = 0; j < nlastpos[-1]; ++j) {
    merge(&tmp, &d->follows[pos[j].index], &merged);
    if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
        do 
            (nalloc[pos[j].index]) *= 2;
        while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
        ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
    }
    ;
    copy(&merged, &d->follows[pos[j].index]);
}

....
Skipping nonlast:Priority -216
At location src/dfa.c:1754
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
for (j = 0; j < nlastpos[-1]; ++j) {
    merge(&tmp, &d->follows[pos[j].index], &merged);
    if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
        do 
            (nalloc[pos[j].index]) *= 2;
        while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
        ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
    }
    ;
    copy(&merged, &d->follows[pos[j].index]);
}

....
Skipping nonlast:Priority -216
At location src/dfa.c:1754
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
for (j = 0; j < nlastpos[-1]; ++j) {
    merge(&tmp, &d->follows[pos[j].index], &merged);
    if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
        do 
            (nalloc[pos[j].index]) *= 2;
        while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
        ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
    }
    ;
    copy(&merged, &d->follows[pos[j].index]);
}

....
Skipping nonlast:Priority -216
At location src/dfa.c:1754
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
for (j = 0; j < nlastpos[-1]; ++j) {
    merge(&tmp, &d->follows[pos[j].index], &merged);
    if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
        do 
            (nalloc[pos[j].index]) *= 2;
        while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
        ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
    }
    ;
    copy(&merged, &d->follows[pos[j].index]);
}

....
Skipping nonlast:Priority -216
At location src/dfa.c:1754
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
for (j = 0; j < nlastpos[-1]; ++j) {
    merge(&tmp, &d->follows[pos[j].index], &merged);
    if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
        do 
            (nalloc[pos[j].index]) *= 2;
        while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
        ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
    }
    ;
    copy(&merged, &d->follows[pos[j].index]);
}

....
Skipping nonlast:Priority -216
At location src/dfa.c:1754
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
for (j = 0; j < nlastpos[-1]; ++j) {
    merge(&tmp, &d->follows[pos[j].index], &merged);
    if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
        do 
            (nalloc[pos[j].index]) *= 2;
        while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
        ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
    }
    ;
    copy(&merged, &d->follows[pos[j].index]);
}

....
Skipping nonlast addifexit:Priority 4784
At location src/dfa.c:1754
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nlastpos, j, lastpos, pos, d, firstpos, nfirstpos, nalloc, i, nullable, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, lastpos->index, lastpos->constraint, wants_newline)))
    return;
for (j = 0; j < nlastpos[-1]; ++j) {
    merge(&tmp, &d->follows[pos[j].index], &merged);
    if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
        do 
            (nalloc[pos[j].index]) *= 2;
        while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
        ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
    }
    ;
    copy(&merged, &d->follows[pos[j].index]);
}

....
Skipping nonlast addifexit:Priority 4784
At location src/dfa.c:1754
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nlastpos, j, lastpos, pos, d, firstpos, nfirstpos, nalloc, i, nullable, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, lastpos->index, lastpos->constraint, wants_newline)))
    break;
for (j = 0; j < nlastpos[-1]; ++j) {
    merge(&tmp, &d->follows[pos[j].index], &merged);
    if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
        do 
            (nalloc[pos[j].index]) *= 2;
        while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
        ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
    }
    ;
    copy(&merged, &d->follows[pos[j].index]);
}

....
Skipping nonlast:Priority 4785
At location src/dfa.c:1756
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
merge(&tmp, &d->follows[pos[j].index], &merged);

....
Skipping nonlast:Priority 4785
At location src/dfa.c:1756
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
merge(&tmp, &d->follows[pos[j].index], &merged);

....
Skipping nonlast:Priority 4785
At location src/dfa.c:1756
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
merge(&tmp, &d->follows[pos[j].index], &merged);

....
Skipping nonlast:Priority 4785
At location src/dfa.c:1756
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
merge(&tmp, &d->follows[pos[j].index], &merged);

....
Skipping nonlast:Priority 4785
At location src/dfa.c:1756
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
merge(&tmp, &d->follows[pos[j].index], &merged);

....
Skipping nonlast:Priority 4785
At location src/dfa.c:1756
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
merge(&tmp, &d->follows[pos[j].index], &merged);

....
Skipping nonlast:Priority 4785
At location src/dfa.c:1756
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
merge(&tmp, &d->follows[pos[j].index], &merged);

....
Skipping nonlast:Priority 4785
At location src/dfa.c:1756
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
merge(&tmp, &d->follows[pos[j].index], &merged);

....
Skipping nonlast:Priority 4785
At location src/dfa.c:1756
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
merge(&tmp, &d->follows[pos[j].index], &merged);

....
Skipping nonlast addifexit:Priority 9785
At location src/dfa.c:1756
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, j, pos, pos[j].index, d->follows, nalloc, d->follows[pos[j].index].elems, merged.nelem, nlastpos, lastpos, firstpos, tmp.elems, nfirstpos, tmp.nelem, i, d->tokens, nullable, d->tindex, d->nleaves, merged.elems, o_lastpos, o_nlast, d->depth, o_firstpos, o_nfirst, o_nullable, searchflag, d->searchflag, wants_newline, d->salloc, d->sindex, d->states, d->follows[pos[j].index].nelem, pos[j].constraint, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
merge(&tmp, &d->follows[pos[j].index], &merged);

....
Skipping nonlast addifexit:Priority 9785
At location src/dfa.c:1756
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, j, pos, pos[j].index, d->follows, nalloc, d->follows[pos[j].index].elems, merged.nelem, nlastpos, lastpos, firstpos, tmp.elems, nfirstpos, tmp.nelem, i, d->tokens, nullable, d->tindex, d->nleaves, merged.elems, o_lastpos, o_nlast, d->depth, o_firstpos, o_nfirst, o_nullable, searchflag, d->searchflag, wants_newline, d->salloc, d->sindex, d->states, d->follows[pos[j].index].nelem, pos[j].constraint, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    break;
merge(&tmp, &d->follows[pos[j].index], &merged);

....
Skipping nonlast:Priority -49
At location src/dfa.c:1757
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
    do 
        (nalloc[pos[j].index]) *= 2;
    while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
    ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
}

....
Skipping nonlast:Priority -49
At location src/dfa.c:1757
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
    do 
        (nalloc[pos[j].index]) *= 2;
    while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
    ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
}

....
Skipping nonlast:Priority -49
At location src/dfa.c:1757
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
    do 
        (nalloc[pos[j].index]) *= 2;
    while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
    ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
}

....
Skipping nonlast:Priority -49
At location src/dfa.c:1757
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
    do 
        (nalloc[pos[j].index]) *= 2;
    while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
    ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
}

....
Skipping nonlast:Priority -49
At location src/dfa.c:1757
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
    do 
        (nalloc[pos[j].index]) *= 2;
    while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
    ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
}

....
Skipping nonlast:Priority -49
At location src/dfa.c:1757
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
    do 
        (nalloc[pos[j].index]) *= 2;
    while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
    ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
}

....
Skipping nonlast:Priority -49
At location src/dfa.c:1757
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
    do 
        (nalloc[pos[j].index]) *= 2;
    while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
    ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
}

....
Skipping nonlast:Priority -49
At location src/dfa.c:1757
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
    do 
        (nalloc[pos[j].index]) *= 2;
    while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
    ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
}

....
Skipping nonlast:Priority -49
At location src/dfa.c:1757
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
    do 
        (nalloc[pos[j].index]) *= 2;
    while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
    ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
}

....
Skipping nonlast addifexit:Priority 3701
At location src/dfa.c:1757
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, nalloc, j, pos, d->follows[pos[j].index].elems, pos[j].index, d->follows, merged.nelem, nlastpos, lastpos, firstpos, tmp.elems, nfirstpos, tmp.nelem, i, d->tokens, nullable, d->tindex, d->nleaves, merged.elems, o_lastpos, o_nlast, d->depth, o_firstpos, o_nfirst, o_nullable, searchflag, d->searchflag, wants_newline, d->salloc, d->sindex, d->states, d->follows[pos[j].index].nelem, pos[j].constraint, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
    do 
        (nalloc[pos[j].index]) *= 2;
    while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
    ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
}

....
Skipping nonlast addifexit:Priority 3701
At location src/dfa.c:1757
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, nalloc, j, pos, d->follows[pos[j].index].elems, pos[j].index, d->follows, merged.nelem, nlastpos, lastpos, firstpos, tmp.elems, nfirstpos, tmp.nelem, i, d->tokens, nullable, d->tindex, d->nleaves, merged.elems, o_lastpos, o_nlast, d->depth, o_firstpos, o_nfirst, o_nullable, searchflag, d->searchflag, wants_newline, d->salloc, d->sindex, d->states, d->follows[pos[j].index].nelem, pos[j].constraint, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    break;
if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
    do 
        (nalloc[pos[j].index]) *= 2;
    while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
    ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
}

....
Skipping nonlast:Priority -211
At location src/dfa.c:1762
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
case QMARK:
if (d->tokens[i] != PLUS)
    nullable[-1] = 1;

....
Skipping nonlast:Priority -211
At location src/dfa.c:1762
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
case QMARK:
if (d->tokens[i] != PLUS)
    nullable[-1] = 1;

....
Skipping nonlast:Priority -211
At location src/dfa.c:1762
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
case QMARK:
if (d->tokens[i] != PLUS)
    nullable[-1] = 1;

....
Skipping nonlast:Priority -211
At location src/dfa.c:1762
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
case QMARK:
if (d->tokens[i] != PLUS)
    nullable[-1] = 1;

....
Skipping nonlast:Priority -211
At location src/dfa.c:1762
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
case QMARK:
if (d->tokens[i] != PLUS)
    nullable[-1] = 1;

....
Skipping nonlast:Priority -211
At location src/dfa.c:1762
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
case QMARK:
if (d->tokens[i] != PLUS)
    nullable[-1] = 1;

....
Skipping nonlast:Priority -211
At location src/dfa.c:1762
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
case QMARK:
if (d->tokens[i] != PLUS)
    nullable[-1] = 1;

....
Skipping nonlast:Priority -211
At location src/dfa.c:1762
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
case QMARK:
if (d->tokens[i] != PLUS)
    nullable[-1] = 1;

....
Skipping nonlast:Priority -211
At location src/dfa.c:1762
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
case QMARK:
if (d->tokens[i] != PLUS)
    nullable[-1] = 1;

....
Skipping nonlast addifexit:Priority 4789
At location src/dfa.c:1762
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, nullable, j, pos, nalloc, nlastpos, nfirstpos, lastpos, firstpos, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline)))
    return;
case QMARK:
if (d->tokens[i] != PLUS)
    nullable[-1] = 1;

....
Skipping nonlast addifexit:Priority 4789
At location src/dfa.c:1762
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, nullable, j, pos, nalloc, nlastpos, nfirstpos, lastpos, firstpos, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline)))
    break;
case QMARK:
if (d->tokens[i] != PLUS)
    nullable[-1] = 1;

....
Skipping nonlast:Priority -210
At location src/dfa.c:1765
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    nullable[-1] = 1;
}

....
Skipping nonlast:Priority -210
At location src/dfa.c:1765
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    nullable[-1] = 1;
}

....
Skipping nonlast:Priority -210
At location src/dfa.c:1765
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        parse_bracket_exp_mb();
        return lasttok = MBCSET;
    }
    nullable[-1] = 1;
}

....
Skipping nonlast:Priority -210
At location src/dfa.c:1765
--Src File: src/dfa.c
Fragment 0:
{
    if (0 != 0)
        dfaerror(0);
    else
        return lasttok = END;
    nullable[-1] = 1;
}

....
Skipping nonlast:Priority -210
At location src/dfa.c:1765
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
    else
        return lasttok = END;
    nullable[-1] = 1;
}

....
Skipping nonlast:Priority -210
At location src/dfa.c:1765
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
    else
        return lasttok = END;
    nullable[-1] = 1;
}

....
Skipping nonlast:Priority -210
At location src/dfa.c:1765
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    nullable[-1] = 1;
}

....
Skipping nonlast:Priority -210
At location src/dfa.c:1765
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    nullable[-1] = 1;
}

....
Skipping nonlast:Priority -210
At location src/dfa.c:1765
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    nullable[-1] = 1;
}

....
Skipping nonlast addifexit:Priority 4790
At location src/dfa.c:1765
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(nullable, d, i, d->tokens, nfirstpos, j, pos, d->follows, firstpos, nlastpos, lastpos, nalloc, d->tindex, d->nleaves, o_lastpos, o_nlast, d->depth, o_firstpos, o_nfirst, o_nullable, searchflag, d->searchflag, wants_newline, d->salloc, d->sindex, d->states, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
        return;
    nullable[-1] = 1;
}

....
Skipping nonlast addifexit:Priority 4790
At location src/dfa.c:1765
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(nullable, d, i, d->tokens, nfirstpos, j, pos, d->follows, firstpos, nlastpos, lastpos, nalloc, d->tindex, d->nleaves, o_lastpos, o_nlast, d->depth, o_firstpos, o_nfirst, o_nullable, searchflag, d->searchflag, wants_newline, d->salloc, d->sindex, d->states, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
        break;
    nullable[-1] = 1;
}

....
Skipping nonlast:Priority -209
At location src/dfa.c:1766
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
break;

....
Skipping nonlast:Priority -209
At location src/dfa.c:1766
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
break;

....
Skipping nonlast:Priority -209
At location src/dfa.c:1766
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
break;

....
Skipping nonlast:Priority -209
At location src/dfa.c:1766
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
break;

....
Skipping nonlast:Priority -209
At location src/dfa.c:1766
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
break;

....
Skipping nonlast:Priority -209
At location src/dfa.c:1766
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
break;

....
Skipping nonlast:Priority -209
At location src/dfa.c:1766
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
break;

....
Skipping nonlast:Priority -209
At location src/dfa.c:1766
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
break;

....
Skipping nonlast:Priority -209
At location src/dfa.c:1766
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
break;

....
Skipping nonlast addifexit:Priority 4791
At location src/dfa.c:1766
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nullable, d, i, nfirstpos, firstpos, nlastpos, lastpos, j, pos, nalloc, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline)))
    return;
break;

....
Skipping nonlast addifexit:Priority 4791
At location src/dfa.c:1766
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nullable, d, i, nfirstpos, firstpos, nlastpos, lastpos, j, pos, nalloc, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline)))
    break;
break;

....
Skipping nonlast:Priority -189
At location src/dfa.c:1772
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
tmp.elems = firstpos;

....
Skipping nonlast:Priority -189
At location src/dfa.c:1772
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
tmp.elems = firstpos;

....
Skipping nonlast:Priority -189
At location src/dfa.c:1772
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
tmp.elems = firstpos;

....
Skipping nonlast:Priority -189
At location src/dfa.c:1772
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
tmp.elems = firstpos;

....
Skipping nonlast:Priority -189
At location src/dfa.c:1772
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
tmp.elems = firstpos;

....
Skipping nonlast:Priority -189
At location src/dfa.c:1772
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
tmp.elems = firstpos;

....
Skipping nonlast:Priority -189
At location src/dfa.c:1772
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
tmp.elems = firstpos;

....
Skipping nonlast:Priority -189
At location src/dfa.c:1772
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
tmp.elems = firstpos;

....
Skipping nonlast:Priority -189
At location src/dfa.c:1772
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
tmp.elems = firstpos;

....
Skipping nonlast addifexit:Priority 4811
At location src/dfa.c:1772
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(firstpos, tmp.elems, nfirstpos, nlastpos, lastpos, pos, tmp.nelem, j, d, nalloc, nullable, i, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, firstpos->index, lastpos->index, firstpos->constraint, lastpos->constraint, wants_newline)))
    return;
tmp.elems = firstpos;

....
Skipping nonlast addifexit:Priority 4811
At location src/dfa.c:1772
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(firstpos, tmp.elems, nfirstpos, nlastpos, lastpos, pos, tmp.nelem, j, d, nalloc, nullable, i, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, firstpos->index, lastpos->index, firstpos->constraint, lastpos->constraint, wants_newline)))
    break;
tmp.elems = firstpos;

....
Skipping nonlast:Priority -188
At location src/dfa.c:1773
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
pos = lastpos + nlastpos[-1];

....
Skipping nonlast:Priority -188
At location src/dfa.c:1773
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
pos = lastpos + nlastpos[-1];

....
Skipping nonlast:Priority -188
At location src/dfa.c:1773
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
pos = lastpos + nlastpos[-1];

....
Skipping nonlast:Priority -188
At location src/dfa.c:1773
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
pos = lastpos + nlastpos[-1];

....
Skipping nonlast:Priority -188
At location src/dfa.c:1773
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
pos = lastpos + nlastpos[-1];

....
Skipping nonlast:Priority -188
At location src/dfa.c:1773
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
pos = lastpos + nlastpos[-1];

....
Skipping nonlast:Priority -188
At location src/dfa.c:1773
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
pos = lastpos + nlastpos[-1];

....
Skipping nonlast:Priority -188
At location src/dfa.c:1773
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
pos = lastpos + nlastpos[-1];

....
Skipping nonlast:Priority -188
At location src/dfa.c:1773
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
pos = lastpos + nlastpos[-1];

....
Skipping nonlast addifexit:Priority 4812
At location src/dfa.c:1773
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nlastpos, lastpos, pos, firstpos, j, tmp.elems, nfirstpos, tmp.nelem, d, nalloc, nullable, i, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, firstpos->index, lastpos->index, firstpos->constraint, lastpos->constraint, wants_newline)))
    return;
pos = lastpos + nlastpos[-1];

....
Skipping nonlast addifexit:Priority 4812
At location src/dfa.c:1773
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nlastpos, lastpos, pos, firstpos, j, tmp.elems, nfirstpos, tmp.nelem, d, nalloc, nullable, i, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, firstpos->index, lastpos->index, firstpos->constraint, lastpos->constraint, wants_newline)))
    break;
pos = lastpos + nlastpos[-1];

....
Skipping nonlast:Priority -187
At location src/dfa.c:1774
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
for (j = 0; j < nlastpos[-2]; ++j) {
    merge(&tmp, &d->follows[pos[j].index], &merged);
    if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
        do 
            (nalloc[pos[j].index]) *= 2;
        while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
        ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
    }
    ;
    copy(&merged, &d->follows[pos[j].index]);
}

....
Skipping nonlast:Priority -187
At location src/dfa.c:1774
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
for (j = 0; j < nlastpos[-2]; ++j) {
    merge(&tmp, &d->follows[pos[j].index], &merged);
    if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
        do 
            (nalloc[pos[j].index]) *= 2;
        while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
        ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
    }
    ;
    copy(&merged, &d->follows[pos[j].index]);
}

....
Skipping nonlast:Priority -187
At location src/dfa.c:1774
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
for (j = 0; j < nlastpos[-2]; ++j) {
    merge(&tmp, &d->follows[pos[j].index], &merged);
    if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
        do 
            (nalloc[pos[j].index]) *= 2;
        while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
        ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
    }
    ;
    copy(&merged, &d->follows[pos[j].index]);
}

....
Skipping nonlast:Priority -187
At location src/dfa.c:1774
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
for (j = 0; j < nlastpos[-2]; ++j) {
    merge(&tmp, &d->follows[pos[j].index], &merged);
    if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
        do 
            (nalloc[pos[j].index]) *= 2;
        while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
        ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
    }
    ;
    copy(&merged, &d->follows[pos[j].index]);
}

....
Skipping nonlast:Priority -187
At location src/dfa.c:1774
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
for (j = 0; j < nlastpos[-2]; ++j) {
    merge(&tmp, &d->follows[pos[j].index], &merged);
    if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
        do 
            (nalloc[pos[j].index]) *= 2;
        while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
        ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
    }
    ;
    copy(&merged, &d->follows[pos[j].index]);
}

....
Skipping nonlast:Priority -187
At location src/dfa.c:1774
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
for (j = 0; j < nlastpos[-2]; ++j) {
    merge(&tmp, &d->follows[pos[j].index], &merged);
    if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
        do 
            (nalloc[pos[j].index]) *= 2;
        while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
        ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
    }
    ;
    copy(&merged, &d->follows[pos[j].index]);
}

....
Skipping nonlast:Priority -187
At location src/dfa.c:1774
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
for (j = 0; j < nlastpos[-2]; ++j) {
    merge(&tmp, &d->follows[pos[j].index], &merged);
    if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
        do 
            (nalloc[pos[j].index]) *= 2;
        while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
        ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
    }
    ;
    copy(&merged, &d->follows[pos[j].index]);
}

....
Skipping nonlast:Priority -187
At location src/dfa.c:1774
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
for (j = 0; j < nlastpos[-2]; ++j) {
    merge(&tmp, &d->follows[pos[j].index], &merged);
    if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
        do 
            (nalloc[pos[j].index]) *= 2;
        while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
        ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
    }
    ;
    copy(&merged, &d->follows[pos[j].index]);
}

....
Skipping nonlast:Priority -187
At location src/dfa.c:1774
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
for (j = 0; j < nlastpos[-2]; ++j) {
    merge(&tmp, &d->follows[pos[j].index], &merged);
    if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
        do 
            (nalloc[pos[j].index]) *= 2;
        while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
        ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
    }
    ;
    copy(&merged, &d->follows[pos[j].index]);
}

....
Skipping nonlast addifexit:Priority 4813
At location src/dfa.c:1774
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nlastpos, j, lastpos, pos, d, firstpos, nfirstpos, nalloc, nullable, i, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, lastpos->index, lastpos->constraint, wants_newline)))
    return;
for (j = 0; j < nlastpos[-2]; ++j) {
    merge(&tmp, &d->follows[pos[j].index], &merged);
    if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
        do 
            (nalloc[pos[j].index]) *= 2;
        while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
        ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
    }
    ;
    copy(&merged, &d->follows[pos[j].index]);
}

....
Skipping nonlast addifexit:Priority 4813
At location src/dfa.c:1774
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nlastpos, j, lastpos, pos, d, firstpos, nfirstpos, nalloc, nullable, i, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, lastpos->index, lastpos->constraint, wants_newline)))
    break;
for (j = 0; j < nlastpos[-2]; ++j) {
    merge(&tmp, &d->follows[pos[j].index], &merged);
    if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
        do 
            (nalloc[pos[j].index]) *= 2;
        while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
        ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
    }
    ;
    copy(&merged, &d->follows[pos[j].index]);
}

....
Skipping nonlast:Priority 4814
At location src/dfa.c:1776
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
merge(&tmp, &d->follows[pos[j].index], &merged);

....
Skipping nonlast:Priority 4814
At location src/dfa.c:1776
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
merge(&tmp, &d->follows[pos[j].index], &merged);

....
Skipping nonlast:Priority 4814
At location src/dfa.c:1776
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
merge(&tmp, &d->follows[pos[j].index], &merged);

....
Skipping nonlast:Priority 4814
At location src/dfa.c:1776
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
merge(&tmp, &d->follows[pos[j].index], &merged);

....
Skipping nonlast:Priority 4814
At location src/dfa.c:1776
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
merge(&tmp, &d->follows[pos[j].index], &merged);

....
Skipping nonlast:Priority 4814
At location src/dfa.c:1776
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
merge(&tmp, &d->follows[pos[j].index], &merged);

....
Skipping nonlast:Priority 4814
At location src/dfa.c:1776
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
merge(&tmp, &d->follows[pos[j].index], &merged);

....
Skipping nonlast:Priority 4814
At location src/dfa.c:1776
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
merge(&tmp, &d->follows[pos[j].index], &merged);

....
Skipping nonlast:Priority 4814
At location src/dfa.c:1776
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
merge(&tmp, &d->follows[pos[j].index], &merged);

....
Skipping nonlast addifexit:Priority 9814
At location src/dfa.c:1776
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, j, pos, pos[j].index, d->follows, nalloc, d->follows[pos[j].index].elems, merged.nelem, nlastpos, lastpos, firstpos, tmp.elems, nfirstpos, tmp.nelem, nullable, i, d->tokens, d->tindex, d->nleaves, merged.elems, o_lastpos, o_nlast, d->depth, o_firstpos, o_nfirst, o_nullable, searchflag, d->searchflag, wants_newline, d->salloc, d->sindex, d->states, d->follows[pos[j].index].nelem, pos[j].constraint, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
merge(&tmp, &d->follows[pos[j].index], &merged);

....
Skipping nonlast addifexit:Priority 9814
At location src/dfa.c:1776
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, j, pos, pos[j].index, d->follows, nalloc, d->follows[pos[j].index].elems, merged.nelem, nlastpos, lastpos, firstpos, tmp.elems, nfirstpos, tmp.nelem, nullable, i, d->tokens, d->tindex, d->nleaves, merged.elems, o_lastpos, o_nlast, d->depth, o_firstpos, o_nfirst, o_nullable, searchflag, d->searchflag, wants_newline, d->salloc, d->sindex, d->states, d->follows[pos[j].index].nelem, pos[j].constraint, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    break;
merge(&tmp, &d->follows[pos[j].index], &merged);

....
Skipping nonlast:Priority -206
At location src/dfa.c:1777
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
    do 
        (nalloc[pos[j].index]) *= 2;
    while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
    ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
}

....
Skipping nonlast:Priority -206
At location src/dfa.c:1777
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
    do 
        (nalloc[pos[j].index]) *= 2;
    while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
    ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
}

....
Skipping nonlast:Priority -206
At location src/dfa.c:1777
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
    do 
        (nalloc[pos[j].index]) *= 2;
    while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
    ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
}

....
Skipping nonlast:Priority -206
At location src/dfa.c:1777
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
    do 
        (nalloc[pos[j].index]) *= 2;
    while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
    ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
}

....
Skipping nonlast:Priority -206
At location src/dfa.c:1777
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
    do 
        (nalloc[pos[j].index]) *= 2;
    while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
    ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
}

....
Skipping nonlast:Priority -206
At location src/dfa.c:1777
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
    do 
        (nalloc[pos[j].index]) *= 2;
    while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
    ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
}

....
Skipping nonlast:Priority -206
At location src/dfa.c:1777
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
    do 
        (nalloc[pos[j].index]) *= 2;
    while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
    ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
}

....
Skipping nonlast:Priority -206
At location src/dfa.c:1777
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
    do 
        (nalloc[pos[j].index]) *= 2;
    while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
    ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
}

....
Skipping nonlast:Priority -206
At location src/dfa.c:1777
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
    do 
        (nalloc[pos[j].index]) *= 2;
    while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
    ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
}

....
Skipping nonlast addifexit:Priority 3544
At location src/dfa.c:1777
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, nalloc, j, pos, d->follows[pos[j].index].elems, pos[j].index, d->follows, merged.nelem, nlastpos, lastpos, firstpos, tmp.elems, nfirstpos, tmp.nelem, nullable, i, d->tokens, d->tindex, d->nleaves, merged.elems, o_lastpos, o_nlast, d->depth, o_firstpos, o_nfirst, o_nullable, searchflag, d->searchflag, wants_newline, d->salloc, d->sindex, d->states, d->follows[pos[j].index].nelem, pos[j].constraint, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
    do 
        (nalloc[pos[j].index]) *= 2;
    while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
    ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
}

....
Skipping nonlast addifexit:Priority 3544
At location src/dfa.c:1777
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, nalloc, j, pos, d->follows[pos[j].index].elems, pos[j].index, d->follows, merged.nelem, nlastpos, lastpos, firstpos, tmp.elems, nfirstpos, tmp.nelem, nullable, i, d->tokens, d->tindex, d->nleaves, merged.elems, o_lastpos, o_nlast, d->depth, o_firstpos, o_nfirst, o_nullable, searchflag, d->searchflag, wants_newline, d->salloc, d->sindex, d->states, d->follows[pos[j].index].nelem, pos[j].constraint, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    break;
if ((merged.nelem - 1) >= (nalloc[pos[j].index])) {
    do 
        (nalloc[pos[j].index]) *= 2;
    while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
    ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
}

....
Skipping nonlast:Priority -177
At location src/dfa.c:1784
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (nullable[-2])
    nfirstpos[-2] += nfirstpos[-1];
else
    firstpos += nfirstpos[-1];

....
Skipping nonlast:Priority -177
At location src/dfa.c:1784
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (nullable[-2])
    nfirstpos[-2] += nfirstpos[-1];
else
    firstpos += nfirstpos[-1];

....
Skipping nonlast:Priority -177
At location src/dfa.c:1784
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
if (nullable[-2])
    nfirstpos[-2] += nfirstpos[-1];
else
    firstpos += nfirstpos[-1];

....
Skipping nonlast:Priority -177
At location src/dfa.c:1784
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
if (nullable[-2])
    nfirstpos[-2] += nfirstpos[-1];
else
    firstpos += nfirstpos[-1];

....
Skipping nonlast:Priority -177
At location src/dfa.c:1784
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
if (nullable[-2])
    nfirstpos[-2] += nfirstpos[-1];
else
    firstpos += nfirstpos[-1];

....
Skipping nonlast:Priority -177
At location src/dfa.c:1784
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
if (nullable[-2])
    nfirstpos[-2] += nfirstpos[-1];
else
    firstpos += nfirstpos[-1];

....
Skipping nonlast:Priority -177
At location src/dfa.c:1784
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (nullable[-2])
    nfirstpos[-2] += nfirstpos[-1];
else
    firstpos += nfirstpos[-1];

....
Skipping nonlast:Priority -177
At location src/dfa.c:1784
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (nullable[-2])
    nfirstpos[-2] += nfirstpos[-1];
else
    firstpos += nfirstpos[-1];

....
Skipping nonlast:Priority -177
At location src/dfa.c:1784
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (nullable[-2])
    nfirstpos[-2] += nfirstpos[-1];
else
    firstpos += nfirstpos[-1];

....
Skipping nonlast addifexit:Priority 3573
At location src/dfa.c:1784
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nullable, nfirstpos, firstpos, d, j, pos, nalloc, nlastpos, lastpos, i, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline)))
    return;
if (nullable[-2])
    nfirstpos[-2] += nfirstpos[-1];
else
    firstpos += nfirstpos[-1];

....
Skipping nonlast addifexit:Priority 3573
At location src/dfa.c:1784
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nullable, nfirstpos, firstpos, d, j, pos, nalloc, nlastpos, lastpos, i, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline)))
    break;
if (nullable[-2])
    nfirstpos[-2] += nfirstpos[-1];
else
    firstpos += nfirstpos[-1];

....
Skipping nonlast:Priority -42
At location src/dfa.c:1785
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    nfirstpos[-2] += nfirstpos[-1];
}

....
Skipping nonlast:Priority -42
At location src/dfa.c:1785
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    nfirstpos[-2] += nfirstpos[-1];
}

....
Skipping nonlast:Priority -42
At location src/dfa.c:1785
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        parse_bracket_exp_mb();
        return lasttok = MBCSET;
    }
    nfirstpos[-2] += nfirstpos[-1];
}

....
Skipping nonlast:Priority -42
At location src/dfa.c:1785
--Src File: src/dfa.c
Fragment 0:
{
    if (0 != 0)
        dfaerror(0);
    else
        return lasttok = END;
    nfirstpos[-2] += nfirstpos[-1];
}

....
Skipping nonlast:Priority -42
At location src/dfa.c:1785
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
    else
        return lasttok = END;
    nfirstpos[-2] += nfirstpos[-1];
}

....
Skipping nonlast:Priority -42
At location src/dfa.c:1785
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
    else
        return lasttok = END;
    nfirstpos[-2] += nfirstpos[-1];
}

....
Skipping nonlast:Priority -42
At location src/dfa.c:1785
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    nfirstpos[-2] += nfirstpos[-1];
}

....
Skipping nonlast:Priority -42
At location src/dfa.c:1785
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    nfirstpos[-2] += nfirstpos[-1];
}

....
Skipping nonlast:Priority -42
At location src/dfa.c:1785
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    nfirstpos[-2] += nfirstpos[-1];
}

....
Skipping nonlast addifexit:Priority 4958
At location src/dfa.c:1785
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(nfirstpos, nullable, firstpos, d, j, pos, nlastpos, nalloc, lastpos, i, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline)))
        return;
    nfirstpos[-2] += nfirstpos[-1];
}

....
Skipping nonlast addifexit:Priority 4958
At location src/dfa.c:1785
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(nfirstpos, nullable, firstpos, d, j, pos, nlastpos, nalloc, lastpos, i, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline)))
        break;
    nfirstpos[-2] += nfirstpos[-1];
}

....
Skipping nonlast:Priority -176
At location src/dfa.c:1787
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    firstpos += nfirstpos[-1];
}

....
Skipping nonlast:Priority -176
At location src/dfa.c:1787
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    firstpos += nfirstpos[-1];
}

....
Skipping nonlast:Priority -176
At location src/dfa.c:1787
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        parse_bracket_exp_mb();
        return lasttok = MBCSET;
    }
    firstpos += nfirstpos[-1];
}

....
Skipping nonlast:Priority -176
At location src/dfa.c:1787
--Src File: src/dfa.c
Fragment 0:
{
    if (0 != 0)
        dfaerror(0);
    else
        return lasttok = END;
    firstpos += nfirstpos[-1];
}

....
Skipping nonlast:Priority -176
At location src/dfa.c:1787
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
    else
        return lasttok = END;
    firstpos += nfirstpos[-1];
}

....
Skipping nonlast:Priority -176
At location src/dfa.c:1787
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
    else
        return lasttok = END;
    firstpos += nfirstpos[-1];
}

....
Skipping nonlast:Priority -176
At location src/dfa.c:1787
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    firstpos += nfirstpos[-1];
}

....
Skipping nonlast:Priority -176
At location src/dfa.c:1787
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    firstpos += nfirstpos[-1];
}

....
Skipping nonlast:Priority -176
At location src/dfa.c:1787
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    firstpos += nfirstpos[-1];
}

....
Skipping nonlast addifexit:Priority 4824
At location src/dfa.c:1787
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(nfirstpos, firstpos, nullable, nlastpos, d, j, pos, lastpos, nalloc, i, firstpos->index, firstpos->constraint, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline)))
        return;
    firstpos += nfirstpos[-1];
}

....
Skipping nonlast addifexit:Priority 4824
At location src/dfa.c:1787
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(nfirstpos, firstpos, nullable, nlastpos, d, j, pos, lastpos, nalloc, i, firstpos->index, firstpos->constraint, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline)))
        break;
    firstpos += nfirstpos[-1];
}

....
Skipping nonlast:Priority -175
At location src/dfa.c:1788
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
--nfirstpos;

....
Skipping nonlast:Priority -175
At location src/dfa.c:1788
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
--nfirstpos;

....
Skipping nonlast:Priority -175
At location src/dfa.c:1788
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
--nfirstpos;

....
Skipping nonlast:Priority -175
At location src/dfa.c:1788
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
--nfirstpos;

....
Skipping nonlast:Priority -175
At location src/dfa.c:1788
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
--nfirstpos;

....
Skipping nonlast:Priority -175
At location src/dfa.c:1788
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
--nfirstpos;

....
Skipping nonlast:Priority -175
At location src/dfa.c:1788
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
--nfirstpos;

....
Skipping nonlast:Priority -175
At location src/dfa.c:1788
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
--nfirstpos;

....
Skipping nonlast:Priority -175
At location src/dfa.c:1788
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
--nfirstpos;

....
Skipping nonlast addifexit:Priority 4825
At location src/dfa.c:1788
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nfirstpos, firstpos, nullable, nlastpos, lastpos, pos, d, j, nalloc, i, firstpos->index, firstpos->constraint, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline)))
    return;
--nfirstpos;

....
Skipping nonlast addifexit:Priority 4825
At location src/dfa.c:1788
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nfirstpos, firstpos, nullable, nlastpos, lastpos, pos, d, j, nalloc, i, firstpos->index, firstpos->constraint, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline)))
    break;
--nfirstpos;

....
Skipping nonlast:Priority -174
At location src/dfa.c:1792
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (nullable[-1])
    nlastpos[-2] += nlastpos[-1];
else {
    pos = lastpos + nlastpos[-2];
    for (j = nlastpos[-1] - 1; j >= 0; --j) 
        pos[j] = lastpos[j];
    lastpos += nlastpos[-2];
    nlastpos[-2] = nlastpos[-1];
}

....
Skipping nonlast:Priority -174
At location src/dfa.c:1792
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (nullable[-1])
    nlastpos[-2] += nlastpos[-1];
else {
    pos = lastpos + nlastpos[-2];
    for (j = nlastpos[-1] - 1; j >= 0; --j) 
        pos[j] = lastpos[j];
    lastpos += nlastpos[-2];
    nlastpos[-2] = nlastpos[-1];
}

....
Skipping nonlast:Priority -174
At location src/dfa.c:1792
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
if (nullable[-1])
    nlastpos[-2] += nlastpos[-1];
else {
    pos = lastpos + nlastpos[-2];
    for (j = nlastpos[-1] - 1; j >= 0; --j) 
        pos[j] = lastpos[j];
    lastpos += nlastpos[-2];
    nlastpos[-2] = nlastpos[-1];
}

....
Skipping nonlast:Priority -174
At location src/dfa.c:1792
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
if (nullable[-1])
    nlastpos[-2] += nlastpos[-1];
else {
    pos = lastpos + nlastpos[-2];
    for (j = nlastpos[-1] - 1; j >= 0; --j) 
        pos[j] = lastpos[j];
    lastpos += nlastpos[-2];
    nlastpos[-2] = nlastpos[-1];
}

....
Skipping nonlast:Priority -174
At location src/dfa.c:1792
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
if (nullable[-1])
    nlastpos[-2] += nlastpos[-1];
else {
    pos = lastpos + nlastpos[-2];
    for (j = nlastpos[-1] - 1; j >= 0; --j) 
        pos[j] = lastpos[j];
    lastpos += nlastpos[-2];
    nlastpos[-2] = nlastpos[-1];
}

....
Skipping nonlast:Priority -174
At location src/dfa.c:1792
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
if (nullable[-1])
    nlastpos[-2] += nlastpos[-1];
else {
    pos = lastpos + nlastpos[-2];
    for (j = nlastpos[-1] - 1; j >= 0; --j) 
        pos[j] = lastpos[j];
    lastpos += nlastpos[-2];
    nlastpos[-2] = nlastpos[-1];
}

....
Skipping nonlast:Priority -174
At location src/dfa.c:1792
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (nullable[-1])
    nlastpos[-2] += nlastpos[-1];
else {
    pos = lastpos + nlastpos[-2];
    for (j = nlastpos[-1] - 1; j >= 0; --j) 
        pos[j] = lastpos[j];
    lastpos += nlastpos[-2];
    nlastpos[-2] = nlastpos[-1];
}

....
Skipping nonlast:Priority -174
At location src/dfa.c:1792
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (nullable[-1])
    nlastpos[-2] += nlastpos[-1];
else {
    pos = lastpos + nlastpos[-2];
    for (j = nlastpos[-1] - 1; j >= 0; --j) 
        pos[j] = lastpos[j];
    lastpos += nlastpos[-2];
    nlastpos[-2] = nlastpos[-1];
}

....
Skipping nonlast:Priority -174
At location src/dfa.c:1792
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (nullable[-1])
    nlastpos[-2] += nlastpos[-1];
else {
    pos = lastpos + nlastpos[-2];
    for (j = nlastpos[-1] - 1; j >= 0; --j) 
        pos[j] = lastpos[j];
    lastpos += nlastpos[-2];
    nlastpos[-2] = nlastpos[-1];
}

....
Skipping nonlast addifexit:Priority 3576
At location src/dfa.c:1792
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nullable, nlastpos, nfirstpos, lastpos, pos, firstpos, j, d, nalloc, i, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline)))
    return;
if (nullable[-1])
    nlastpos[-2] += nlastpos[-1];
else {
    pos = lastpos + nlastpos[-2];
    for (j = nlastpos[-1] - 1; j >= 0; --j) 
        pos[j] = lastpos[j];
    lastpos += nlastpos[-2];
    nlastpos[-2] = nlastpos[-1];
}

....
Skipping nonlast addifexit:Priority 3576
At location src/dfa.c:1792
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nullable, nlastpos, nfirstpos, lastpos, pos, firstpos, j, d, nalloc, i, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline)))
    break;
if (nullable[-1])
    nlastpos[-2] += nlastpos[-1];
else {
    pos = lastpos + nlastpos[-2];
    for (j = nlastpos[-1] - 1; j >= 0; --j) 
        pos[j] = lastpos[j];
    lastpos += nlastpos[-2];
    nlastpos[-2] = nlastpos[-1];
}

....
Skipping nonlast:Priority -208
At location src/dfa.c:1793
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    nlastpos[-2] += nlastpos[-1];
}

....
Skipping nonlast:Priority -208
At location src/dfa.c:1793
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    nlastpos[-2] += nlastpos[-1];
}

....
Skipping nonlast:Priority -208
At location src/dfa.c:1793
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        parse_bracket_exp_mb();
        return lasttok = MBCSET;
    }
    nlastpos[-2] += nlastpos[-1];
}

....
Skipping nonlast:Priority -208
At location src/dfa.c:1793
--Src File: src/dfa.c
Fragment 0:
{
    if (0 != 0)
        dfaerror(0);
    else
        return lasttok = END;
    nlastpos[-2] += nlastpos[-1];
}

....
Skipping nonlast:Priority -208
At location src/dfa.c:1793
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
    else
        return lasttok = END;
    nlastpos[-2] += nlastpos[-1];
}

....
Skipping nonlast:Priority -208
At location src/dfa.c:1793
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
    else
        return lasttok = END;
    nlastpos[-2] += nlastpos[-1];
}

....
Skipping nonlast:Priority -208
At location src/dfa.c:1793
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    nlastpos[-2] += nlastpos[-1];
}

....
Skipping nonlast:Priority -208
At location src/dfa.c:1793
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    nlastpos[-2] += nlastpos[-1];
}

....
Skipping nonlast:Priority -208
At location src/dfa.c:1793
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    nlastpos[-2] += nlastpos[-1];
}

....
Skipping nonlast addifexit:Priority 4792
At location src/dfa.c:1793
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(nlastpos, nullable, lastpos, pos, j, nfirstpos, firstpos, d, nalloc, i, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline)))
        return;
    nlastpos[-2] += nlastpos[-1];
}

....
Skipping nonlast addifexit:Priority 4792
At location src/dfa.c:1793
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(nlastpos, nullable, lastpos, pos, j, nfirstpos, firstpos, d, nalloc, i, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline)))
        break;
    nlastpos[-2] += nlastpos[-1];
}

....
Skipping nonlast:Priority 4827
At location src/dfa.c:1796
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
pos = lastpos + nlastpos[-2];

....
Skipping nonlast:Priority 4827
At location src/dfa.c:1796
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
pos = lastpos + nlastpos[-2];

....
Skipping nonlast:Priority 4827
At location src/dfa.c:1796
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
pos = lastpos + nlastpos[-2];

....
Skipping nonlast:Priority 4827
At location src/dfa.c:1796
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
pos = lastpos + nlastpos[-2];

....
Skipping nonlast:Priority 4827
At location src/dfa.c:1796
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
pos = lastpos + nlastpos[-2];

....
Skipping nonlast:Priority 4827
At location src/dfa.c:1796
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
pos = lastpos + nlastpos[-2];

....
Skipping nonlast:Priority 4827
At location src/dfa.c:1796
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
pos = lastpos + nlastpos[-2];

....
Skipping nonlast:Priority 4827
At location src/dfa.c:1796
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
pos = lastpos + nlastpos[-2];

....
Skipping nonlast:Priority 4827
At location src/dfa.c:1796
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
pos = lastpos + nlastpos[-2];

....
Skipping nonlast addifexit:Priority 9827
At location src/dfa.c:1796
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nlastpos, lastpos, pos, j, nullable, nfirstpos, firstpos, d, nalloc, i, lastpos->index, lastpos->constraint, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline)))
    return;
pos = lastpos + nlastpos[-2];

....
Skipping nonlast addifexit:Priority 9827
At location src/dfa.c:1796
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nlastpos, lastpos, pos, j, nullable, nfirstpos, firstpos, d, nalloc, i, lastpos->index, lastpos->constraint, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline)))
    break;
pos = lastpos + nlastpos[-2];

....
Skipping nonlast:Priority -172
At location src/dfa.c:1797
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
for (j = nlastpos[-1] - 1; j >= 0; --j) 
    pos[j] = lastpos[j];

....
Skipping nonlast:Priority -172
At location src/dfa.c:1797
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
for (j = nlastpos[-1] - 1; j >= 0; --j) 
    pos[j] = lastpos[j];

....
Skipping nonlast:Priority -172
At location src/dfa.c:1797
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
for (j = nlastpos[-1] - 1; j >= 0; --j) 
    pos[j] = lastpos[j];

....
Skipping nonlast:Priority -172
At location src/dfa.c:1797
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
for (j = nlastpos[-1] - 1; j >= 0; --j) 
    pos[j] = lastpos[j];

....
Skipping nonlast:Priority -172
At location src/dfa.c:1797
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
for (j = nlastpos[-1] - 1; j >= 0; --j) 
    pos[j] = lastpos[j];

....
Skipping nonlast:Priority -172
At location src/dfa.c:1797
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
for (j = nlastpos[-1] - 1; j >= 0; --j) 
    pos[j] = lastpos[j];

....
Skipping nonlast:Priority -172
At location src/dfa.c:1797
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
for (j = nlastpos[-1] - 1; j >= 0; --j) 
    pos[j] = lastpos[j];

....
Skipping nonlast:Priority -172
At location src/dfa.c:1797
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
for (j = nlastpos[-1] - 1; j >= 0; --j) 
    pos[j] = lastpos[j];

....
Skipping nonlast:Priority -172
At location src/dfa.c:1797
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
for (j = nlastpos[-1] - 1; j >= 0; --j) 
    pos[j] = lastpos[j];

....
Skipping nonlast addifexit:Priority 4828
At location src/dfa.c:1797
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nlastpos, j, lastpos, pos, nullable, nfirstpos, firstpos, d, pos[j].index, nalloc, i, lastpos->index, lastpos->constraint, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline, pos[j].constraint)))
    return;
for (j = nlastpos[-1] - 1; j >= 0; --j) 
    pos[j] = lastpos[j];

....
Skipping nonlast addifexit:Priority 4828
At location src/dfa.c:1797
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nlastpos, j, lastpos, pos, nullable, nfirstpos, firstpos, d, pos[j].index, nalloc, i, lastpos->index, lastpos->constraint, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline, pos[j].constraint)))
    break;
for (j = nlastpos[-1] - 1; j >= 0; --j) 
    pos[j] = lastpos[j];

....
Skipping nonlast:Priority -171
At location src/dfa.c:1799
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
lastpos += nlastpos[-2];

....
Skipping nonlast:Priority -171
At location src/dfa.c:1799
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
lastpos += nlastpos[-2];

....
Skipping nonlast:Priority -171
At location src/dfa.c:1799
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
lastpos += nlastpos[-2];

....
Skipping nonlast:Priority -171
At location src/dfa.c:1799
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
lastpos += nlastpos[-2];

....
Skipping nonlast:Priority -171
At location src/dfa.c:1799
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
lastpos += nlastpos[-2];

....
Skipping nonlast:Priority -171
At location src/dfa.c:1799
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
lastpos += nlastpos[-2];

....
Skipping nonlast:Priority -171
At location src/dfa.c:1799
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
lastpos += nlastpos[-2];

....
Skipping nonlast:Priority -171
At location src/dfa.c:1799
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
lastpos += nlastpos[-2];

....
Skipping nonlast:Priority -171
At location src/dfa.c:1799
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
lastpos += nlastpos[-2];

....
Skipping nonlast addifexit:Priority 4829
At location src/dfa.c:1799
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nlastpos, lastpos, j, pos, nullable, nfirstpos, firstpos, d, pos[j].index, nalloc, i, lastpos->index, lastpos->constraint, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline, pos[j].constraint)))
    return;
lastpos += nlastpos[-2];

....
Skipping nonlast addifexit:Priority 4829
At location src/dfa.c:1799
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nlastpos, lastpos, j, pos, nullable, nfirstpos, firstpos, d, pos[j].index, nalloc, i, lastpos->index, lastpos->constraint, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline, pos[j].constraint)))
    break;
lastpos += nlastpos[-2];

....
Skipping nonlast:Priority -169
At location src/dfa.c:1802
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
--nlastpos;

....
Skipping nonlast:Priority -169
At location src/dfa.c:1802
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
--nlastpos;

....
Skipping nonlast:Priority -169
At location src/dfa.c:1802
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
--nlastpos;

....
Skipping nonlast:Priority -169
At location src/dfa.c:1802
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
--nlastpos;

....
Skipping nonlast:Priority -169
At location src/dfa.c:1802
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
--nlastpos;

....
Skipping nonlast:Priority -169
At location src/dfa.c:1802
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
--nlastpos;

....
Skipping nonlast:Priority -169
At location src/dfa.c:1802
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
--nlastpos;

....
Skipping nonlast:Priority -169
At location src/dfa.c:1802
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
--nlastpos;

....
Skipping nonlast:Priority -169
At location src/dfa.c:1802
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
--nlastpos;

....
Skipping nonlast addifexit:Priority 4831
At location src/dfa.c:1802
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nlastpos, nullable, lastpos, j, pos, nfirstpos, firstpos, d, nalloc, i, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline)))
    return;
--nlastpos;

....
Skipping nonlast addifexit:Priority 4831
At location src/dfa.c:1802
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nlastpos, nullable, lastpos, j, pos, nfirstpos, firstpos, d, nalloc, i, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline)))
    break;
--nlastpos;

....
Skipping nonlast:Priority -168
At location src/dfa.c:1805
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
nullable[-2] = nullable[-1] && nullable[-2];

....
Skipping nonlast:Priority -168
At location src/dfa.c:1805
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
nullable[-2] = nullable[-1] && nullable[-2];

....
Skipping nonlast:Priority -168
At location src/dfa.c:1805
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
nullable[-2] = nullable[-1] && nullable[-2];

....
Skipping nonlast:Priority -168
At location src/dfa.c:1805
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
nullable[-2] = nullable[-1] && nullable[-2];

....
Skipping nonlast:Priority -168
At location src/dfa.c:1805
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
nullable[-2] = nullable[-1] && nullable[-2];

....
Skipping nonlast:Priority -168
At location src/dfa.c:1805
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
nullable[-2] = nullable[-1] && nullable[-2];

....
Skipping nonlast:Priority -168
At location src/dfa.c:1805
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
nullable[-2] = nullable[-1] && nullable[-2];

....
Skipping nonlast:Priority -168
At location src/dfa.c:1805
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
nullable[-2] = nullable[-1] && nullable[-2];

....
Skipping nonlast:Priority -168
At location src/dfa.c:1805
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
nullable[-2] = nullable[-1] && nullable[-2];

....
Skipping nonlast addifexit:Priority 4832
At location src/dfa.c:1805
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nullable, nlastpos, lastpos, nfirstpos, j, pos, firstpos, d, i, nalloc, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline)))
    return;
nullable[-2] = nullable[-1] && nullable[-2];

....
Skipping nonlast addifexit:Priority 4832
At location src/dfa.c:1805
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nullable, nlastpos, lastpos, nfirstpos, j, pos, firstpos, d, i, nalloc, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline)))
    break;
nullable[-2] = nullable[-1] && nullable[-2];

....
Skipping nonlast:Priority -167
At location src/dfa.c:1806
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
--nullable;

....
Skipping nonlast:Priority -167
At location src/dfa.c:1806
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
--nullable;

....
Skipping nonlast:Priority -167
At location src/dfa.c:1806
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
--nullable;

....
Skipping nonlast:Priority -167
At location src/dfa.c:1806
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
--nullable;

....
Skipping nonlast:Priority -167
At location src/dfa.c:1806
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
--nullable;

....
Skipping nonlast:Priority -167
At location src/dfa.c:1806
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
--nullable;

....
Skipping nonlast:Priority -167
At location src/dfa.c:1806
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
--nullable;

....
Skipping nonlast:Priority -167
At location src/dfa.c:1806
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
--nullable;

....
Skipping nonlast:Priority -167
At location src/dfa.c:1806
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
--nullable;

....
Skipping nonlast addifexit:Priority 4833
At location src/dfa.c:1806
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nullable, nlastpos, nfirstpos, lastpos, j, pos, firstpos, d, i, nalloc, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline)))
    return;
--nullable;

....
Skipping nonlast addifexit:Priority 4833
At location src/dfa.c:1806
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nullable, nlastpos, nfirstpos, lastpos, j, pos, firstpos, d, i, nalloc, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline)))
    break;
--nullable;

....
Skipping nonlast:Priority -166
At location src/dfa.c:1807
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
break;

....
Skipping nonlast:Priority -166
At location src/dfa.c:1807
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
break;

....
Skipping nonlast:Priority -166
At location src/dfa.c:1807
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
break;

....
Skipping nonlast:Priority -166
At location src/dfa.c:1807
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
break;

....
Skipping nonlast:Priority -166
At location src/dfa.c:1807
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
break;

....
Skipping nonlast:Priority -166
At location src/dfa.c:1807
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
break;

....
Skipping nonlast:Priority -166
At location src/dfa.c:1807
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
break;

....
Skipping nonlast:Priority -166
At location src/dfa.c:1807
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
break;

....
Skipping nonlast:Priority -166
At location src/dfa.c:1807
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
break;

....
Skipping nonlast addifexit:Priority 4834
At location src/dfa.c:1807
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nullable, nfirstpos, nlastpos, lastpos, j, pos, firstpos, d, i, nalloc, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline)))
    return;
break;

....
Skipping nonlast addifexit:Priority 4834
At location src/dfa.c:1807
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nullable, nfirstpos, nlastpos, lastpos, j, pos, firstpos, d, i, nalloc, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline)))
    break;
break;

....
Skipping nonlast:Priority -48
At location src/dfa.c:1813
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
--nfirstpos;

....
Skipping nonlast:Priority -48
At location src/dfa.c:1813
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
--nfirstpos;

....
Skipping nonlast:Priority -48
At location src/dfa.c:1813
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
--nfirstpos;

....
Skipping nonlast:Priority -48
At location src/dfa.c:1813
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
--nfirstpos;

....
Skipping nonlast:Priority -48
At location src/dfa.c:1813
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
--nfirstpos;

....
Skipping nonlast:Priority -48
At location src/dfa.c:1813
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
--nfirstpos;

....
Skipping nonlast:Priority -48
At location src/dfa.c:1813
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
--nfirstpos;

....
Skipping nonlast:Priority -48
At location src/dfa.c:1813
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
--nfirstpos;

....
Skipping nonlast:Priority -48
At location src/dfa.c:1813
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
--nfirstpos;

....
Skipping nonlast addifexit:Priority 4952
At location src/dfa.c:1813
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nfirstpos, nlastpos, nullable, lastpos, j, pos, d, i, firstpos, nalloc, wants_newline, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag)))
    return;
--nfirstpos;

....
Skipping nonlast addifexit:Priority 4952
At location src/dfa.c:1813
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nfirstpos, nlastpos, nullable, lastpos, j, pos, d, i, firstpos, nalloc, wants_newline, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag)))
    break;
--nfirstpos;

....
Skipping nonlast:Priority -47
At location src/dfa.c:1816
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
nlastpos[-2] += nlastpos[-1];

....
Skipping nonlast:Priority -47
At location src/dfa.c:1816
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
nlastpos[-2] += nlastpos[-1];

....
Skipping nonlast:Priority -47
At location src/dfa.c:1816
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
nlastpos[-2] += nlastpos[-1];

....
Skipping nonlast:Priority -47
At location src/dfa.c:1816
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
nlastpos[-2] += nlastpos[-1];

....
Skipping nonlast:Priority -47
At location src/dfa.c:1816
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
nlastpos[-2] += nlastpos[-1];

....
Skipping nonlast:Priority -47
At location src/dfa.c:1816
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
nlastpos[-2] += nlastpos[-1];

....
Skipping nonlast:Priority -47
At location src/dfa.c:1816
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
nlastpos[-2] += nlastpos[-1];

....
Skipping nonlast:Priority -47
At location src/dfa.c:1816
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
nlastpos[-2] += nlastpos[-1];

....
Skipping nonlast:Priority -47
At location src/dfa.c:1816
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
nlastpos[-2] += nlastpos[-1];

....
Skipping nonlast addifexit:Priority 4953
At location src/dfa.c:1816
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nlastpos, nfirstpos, nullable, d, i, lastpos, firstpos, j, pos, nalloc, wants_newline, o_lastpos, o_nlast, o_firstpos, o_nullable, o_nfirst, searchflag)))
    return;
nlastpos[-2] += nlastpos[-1];

....
Skipping nonlast addifexit:Priority 4953
At location src/dfa.c:1816
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nlastpos, nfirstpos, nullable, d, i, lastpos, firstpos, j, pos, nalloc, wants_newline, o_lastpos, o_nlast, o_firstpos, o_nullable, o_nfirst, searchflag)))
    break;
nlastpos[-2] += nlastpos[-1];

....
Skipping nonlast:Priority -46
At location src/dfa.c:1817
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
--nlastpos;

....
Skipping nonlast:Priority -46
At location src/dfa.c:1817
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
--nlastpos;

....
Skipping nonlast:Priority -46
At location src/dfa.c:1817
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
--nlastpos;

....
Skipping nonlast:Priority -46
At location src/dfa.c:1817
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
--nlastpos;

....
Skipping nonlast:Priority -46
At location src/dfa.c:1817
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
--nlastpos;

....
Skipping nonlast:Priority -46
At location src/dfa.c:1817
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
--nlastpos;

....
Skipping nonlast:Priority -46
At location src/dfa.c:1817
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
--nlastpos;

....
Skipping nonlast:Priority -46
At location src/dfa.c:1817
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
--nlastpos;

....
Skipping nonlast:Priority -46
At location src/dfa.c:1817
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
--nlastpos;

....
Skipping nonlast addifexit:Priority 4954
At location src/dfa.c:1817
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nlastpos, nullable, nfirstpos, d, i, firstpos, lastpos, j, pos, nalloc, wants_newline, o_lastpos, o_nlast, o_nullable, o_nfirst, o_firstpos, searchflag)))
    return;
--nlastpos;

....
Skipping nonlast addifexit:Priority 4954
At location src/dfa.c:1817
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nlastpos, nullable, nfirstpos, d, i, firstpos, lastpos, j, pos, nalloc, wants_newline, o_lastpos, o_nlast, o_nullable, o_nfirst, o_firstpos, searchflag)))
    break;
--nlastpos;

....
Skipping nonlast:Priority -45
At location src/dfa.c:1820
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
nullable[-2] = nullable[-1] || nullable[-2];

....
Skipping nonlast:Priority -45
At location src/dfa.c:1820
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
nullable[-2] = nullable[-1] || nullable[-2];

....
Skipping nonlast:Priority -45
At location src/dfa.c:1820
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
nullable[-2] = nullable[-1] || nullable[-2];

....
Skipping nonlast:Priority -45
At location src/dfa.c:1820
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
nullable[-2] = nullable[-1] || nullable[-2];

....
Skipping nonlast:Priority -45
At location src/dfa.c:1820
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
nullable[-2] = nullable[-1] || nullable[-2];

....
Skipping nonlast:Priority -45
At location src/dfa.c:1820
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
nullable[-2] = nullable[-1] || nullable[-2];

....
Skipping nonlast:Priority -45
At location src/dfa.c:1820
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
nullable[-2] = nullable[-1] || nullable[-2];

....
Skipping nonlast:Priority -45
At location src/dfa.c:1820
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
nullable[-2] = nullable[-1] || nullable[-2];

....
Skipping nonlast:Priority -45
At location src/dfa.c:1820
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
nullable[-2] = nullable[-1] || nullable[-2];

....
Skipping nonlast addifexit:Priority 4955
At location src/dfa.c:1820
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nullable, nlastpos, nfirstpos, d, i, firstpos, lastpos, nalloc, j, pos, wants_newline, o_nullable, o_nfirst, o_firstpos, o_nlast, o_lastpos, searchflag)))
    return;
nullable[-2] = nullable[-1] || nullable[-2];

....
Skipping nonlast addifexit:Priority 4955
At location src/dfa.c:1820
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nullable, nlastpos, nfirstpos, d, i, firstpos, lastpos, nalloc, j, pos, wants_newline, o_nullable, o_nfirst, o_firstpos, o_nlast, o_lastpos, searchflag)))
    break;
nullable[-2] = nullable[-1] || nullable[-2];

....
Skipping nonlast:Priority -44
At location src/dfa.c:1821
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
--nullable;

....
Skipping nonlast:Priority -44
At location src/dfa.c:1821
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
--nullable;

....
Skipping nonlast:Priority -44
At location src/dfa.c:1821
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
--nullable;

....
Skipping nonlast:Priority -44
At location src/dfa.c:1821
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
--nullable;

....
Skipping nonlast:Priority -44
At location src/dfa.c:1821
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
--nullable;

....
Skipping nonlast:Priority -44
At location src/dfa.c:1821
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
--nullable;

....
Skipping nonlast:Priority -44
At location src/dfa.c:1821
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
--nullable;

....
Skipping nonlast:Priority -44
At location src/dfa.c:1821
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
--nullable;

....
Skipping nonlast:Priority -44
At location src/dfa.c:1821
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
--nullable;

....
Skipping nonlast addifexit:Priority 4956
At location src/dfa.c:1821
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nullable, nlastpos, nfirstpos, d, i, firstpos, lastpos, nalloc, j, pos, wants_newline, o_nullable, o_nfirst, o_firstpos, o_nlast, o_lastpos, searchflag)))
    return;
--nullable;

....
Skipping nonlast addifexit:Priority 4956
At location src/dfa.c:1821
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nullable, nlastpos, nfirstpos, d, i, firstpos, lastpos, nalloc, j, pos, wants_newline, o_nullable, o_nfirst, o_firstpos, o_nlast, o_lastpos, searchflag)))
    break;
--nullable;

....
Skipping nonlast:Priority -43
At location src/dfa.c:1822
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
break;

....
Skipping nonlast:Priority -43
At location src/dfa.c:1822
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
break;

....
Skipping nonlast:Priority -43
At location src/dfa.c:1822
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
break;

....
Skipping nonlast:Priority -43
At location src/dfa.c:1822
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
break;

....
Skipping nonlast:Priority -43
At location src/dfa.c:1822
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
break;

....
Skipping nonlast:Priority -43
At location src/dfa.c:1822
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
break;

....
Skipping nonlast:Priority -43
At location src/dfa.c:1822
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
break;

....
Skipping nonlast:Priority -43
At location src/dfa.c:1822
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
break;

....
Skipping nonlast:Priority -43
At location src/dfa.c:1822
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
break;

....
Skipping nonlast addifexit:Priority 4957
At location src/dfa.c:1822
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nullable, nlastpos, d, i, nfirstpos, firstpos, lastpos, nalloc, j, pos, wants_newline, o_nullable, o_nfirst, o_firstpos, o_nlast, o_lastpos, searchflag)))
    return;
break;

....
Skipping nonlast addifexit:Priority 4957
At location src/dfa.c:1822
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nullable, nlastpos, d, i, nfirstpos, firstpos, lastpos, nalloc, j, pos, wants_newline, o_nullable, o_nfirst, o_firstpos, o_nlast, o_lastpos, searchflag)))
    break;
break;

....
Skipping nonlast:Priority -200
At location src/dfa.c:1833
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
*nfirstpos++ = *nlastpos++ = 1;

....
Skipping nonlast:Priority -200
At location src/dfa.c:1833
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
*nfirstpos++ = *nlastpos++ = 1;

....
Skipping nonlast:Priority -200
At location src/dfa.c:1833
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
*nfirstpos++ = *nlastpos++ = 1;

....
Skipping nonlast:Priority -200
At location src/dfa.c:1833
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
*nfirstpos++ = *nlastpos++ = 1;

....
Skipping nonlast:Priority -200
At location src/dfa.c:1833
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
*nfirstpos++ = *nlastpos++ = 1;

....
Skipping nonlast:Priority -200
At location src/dfa.c:1833
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
*nfirstpos++ = *nlastpos++ = 1;

....
Skipping nonlast:Priority -200
At location src/dfa.c:1833
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
*nfirstpos++ = *nlastpos++ = 1;

....
Skipping nonlast:Priority -200
At location src/dfa.c:1833
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
*nfirstpos++ = *nlastpos++ = 1;

....
Skipping nonlast:Priority -200
At location src/dfa.c:1833
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
*nfirstpos++ = *nlastpos++ = 1;

....
Skipping nonlast addifexit:Priority 4800
At location src/dfa.c:1833
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nfirstpos, nlastpos, firstpos, lastpos, i, firstpos->index, lastpos->index, d, nullable, firstpos->constraint, lastpos->constraint, nalloc, j, pos, wants_newline, o_nullable, o_nfirst, o_firstpos, o_nlast, o_lastpos, searchflag)))
    return;
*nfirstpos++ = *nlastpos++ = 1;

....
Skipping nonlast addifexit:Priority 4800
At location src/dfa.c:1833
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nfirstpos, nlastpos, firstpos, lastpos, i, firstpos->index, lastpos->index, d, nullable, firstpos->constraint, lastpos->constraint, nalloc, j, pos, wants_newline, o_nullable, o_nfirst, o_firstpos, o_nlast, o_lastpos, searchflag)))
    break;
*nfirstpos++ = *nlastpos++ = 1;

....
Skipping nonlast:Priority -199
At location src/dfa.c:1834
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
--firstpos , --lastpos;

....
Skipping nonlast:Priority -199
At location src/dfa.c:1834
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
--firstpos , --lastpos;

....
Skipping nonlast:Priority -199
At location src/dfa.c:1834
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
--firstpos , --lastpos;

....
Skipping nonlast:Priority -199
At location src/dfa.c:1834
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
--firstpos , --lastpos;

....
Skipping nonlast:Priority -199
At location src/dfa.c:1834
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
--firstpos , --lastpos;

....
Skipping nonlast:Priority -199
At location src/dfa.c:1834
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
--firstpos , --lastpos;

....
Skipping nonlast:Priority -199
At location src/dfa.c:1834
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
--firstpos , --lastpos;

....
Skipping nonlast:Priority -199
At location src/dfa.c:1834
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
--firstpos , --lastpos;

....
Skipping nonlast:Priority -199
At location src/dfa.c:1834
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
--firstpos , --lastpos;

....
Skipping nonlast addifexit:Priority 4801
At location src/dfa.c:1834
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(firstpos, lastpos, nfirstpos, nlastpos, i, firstpos->index, lastpos->index, firstpos->constraint, lastpos->constraint, d, nullable, nalloc, j, pos, wants_newline, o_nullable, o_nfirst, o_firstpos, o_nlast, o_lastpos, searchflag)))
    return;
--firstpos , --lastpos;

....
Skipping nonlast addifexit:Priority 4801
At location src/dfa.c:1834
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(firstpos, lastpos, nfirstpos, nlastpos, i, firstpos->index, lastpos->index, firstpos->constraint, lastpos->constraint, d, nullable, nalloc, j, pos, wants_newline, o_nullable, o_nfirst, o_firstpos, o_nlast, o_lastpos, searchflag)))
    break;
--firstpos , --lastpos;

....
Skipping nonlast:Priority -198
At location src/dfa.c:1835
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
firstpos->index = lastpos->index = i;

....
Skipping nonlast:Priority -198
At location src/dfa.c:1835
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
firstpos->index = lastpos->index = i;

....
Skipping nonlast:Priority -198
At location src/dfa.c:1835
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
firstpos->index = lastpos->index = i;

....
Skipping nonlast:Priority -198
At location src/dfa.c:1835
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
firstpos->index = lastpos->index = i;

....
Skipping nonlast:Priority -198
At location src/dfa.c:1835
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
firstpos->index = lastpos->index = i;

....
Skipping nonlast:Priority -198
At location src/dfa.c:1835
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
firstpos->index = lastpos->index = i;

....
Skipping nonlast:Priority -198
At location src/dfa.c:1835
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
firstpos->index = lastpos->index = i;

....
Skipping nonlast:Priority -198
At location src/dfa.c:1835
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
firstpos->index = lastpos->index = i;

....
Skipping nonlast:Priority -198
At location src/dfa.c:1835
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
firstpos->index = lastpos->index = i;

....
Skipping nonlast addifexit:Priority 4802
At location src/dfa.c:1835
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(firstpos, lastpos, i, firstpos->index, lastpos->index, firstpos->constraint, lastpos->constraint, nfirstpos, nlastpos, nalloc, d, nullable, j, pos, wants_newline, o_nullable, o_nfirst, o_firstpos, o_nlast, o_lastpos, searchflag)))
    return;
firstpos->index = lastpos->index = i;

....
Skipping nonlast addifexit:Priority 4802
At location src/dfa.c:1835
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(firstpos, lastpos, i, firstpos->index, lastpos->index, firstpos->constraint, lastpos->constraint, nfirstpos, nlastpos, nalloc, d, nullable, j, pos, wants_newline, o_nullable, o_nfirst, o_firstpos, o_nlast, o_lastpos, searchflag)))
    break;
firstpos->index = lastpos->index = i;

....
Skipping nonlast:Priority -197
At location src/dfa.c:1836
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
firstpos->constraint = lastpos->constraint = 255;

....
Skipping nonlast:Priority -197
At location src/dfa.c:1836
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
firstpos->constraint = lastpos->constraint = 255;

....
Skipping nonlast:Priority -197
At location src/dfa.c:1836
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
firstpos->constraint = lastpos->constraint = 255;

....
Skipping nonlast:Priority -197
At location src/dfa.c:1836
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
firstpos->constraint = lastpos->constraint = 255;

....
Skipping nonlast:Priority -197
At location src/dfa.c:1836
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
firstpos->constraint = lastpos->constraint = 255;

....
Skipping nonlast:Priority -197
At location src/dfa.c:1836
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
firstpos->constraint = lastpos->constraint = 255;

....
Skipping nonlast:Priority -197
At location src/dfa.c:1836
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
firstpos->constraint = lastpos->constraint = 255;

....
Skipping nonlast:Priority -197
At location src/dfa.c:1836
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
firstpos->constraint = lastpos->constraint = 255;

....
Skipping nonlast:Priority -197
At location src/dfa.c:1836
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
firstpos->constraint = lastpos->constraint = 255;

....
Skipping nonlast addifexit:Priority 4803
At location src/dfa.c:1836
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(firstpos, lastpos, firstpos->constraint, lastpos->constraint, i, firstpos->index, lastpos->index, nfirstpos, nlastpos, nalloc, d, nullable, j, pos, wants_newline, o_nullable, o_nfirst, o_firstpos, o_nlast, o_lastpos, searchflag)))
    return;
firstpos->constraint = lastpos->constraint = 255;

....
Skipping nonlast addifexit:Priority 4803
At location src/dfa.c:1836
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(firstpos, lastpos, firstpos->constraint, lastpos->constraint, i, firstpos->index, lastpos->index, nfirstpos, nlastpos, nalloc, d, nullable, j, pos, wants_newline, o_nullable, o_nfirst, o_firstpos, o_nlast, o_lastpos, searchflag)))
    break;
firstpos->constraint = lastpos->constraint = 255;

....
Skipping nonlast:Priority -196
At location src/dfa.c:1839
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
nalloc[i] = 1;

....
Skipping nonlast:Priority -196
At location src/dfa.c:1839
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
nalloc[i] = 1;

....
Skipping nonlast:Priority -196
At location src/dfa.c:1839
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
nalloc[i] = 1;

....
Skipping nonlast:Priority -196
At location src/dfa.c:1839
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
nalloc[i] = 1;

....
Skipping nonlast:Priority -196
At location src/dfa.c:1839
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
nalloc[i] = 1;

....
Skipping nonlast:Priority -196
At location src/dfa.c:1839
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
nalloc[i] = 1;

....
Skipping nonlast:Priority -196
At location src/dfa.c:1839
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
nalloc[i] = 1;

....
Skipping nonlast:Priority -196
At location src/dfa.c:1839
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
nalloc[i] = 1;

....
Skipping nonlast:Priority -196
At location src/dfa.c:1839
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
nalloc[i] = 1;

....
Skipping nonlast addifexit:Priority 4804
At location src/dfa.c:1839
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nalloc, i, d, d->follows[i].elems, d->follows, firstpos, lastpos, nfirstpos, nlastpos, nullable, d->tokens, d->tindex, j, pos, d->follows[i].nelem, wants_newline, d->salloc, d->sindex, d->states, o_nullable, o_nfirst, o_firstpos, o_nlast, o_lastpos, d->nleaves, d->depth, searchflag, d->searchflag, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
nalloc[i] = 1;

....
Skipping nonlast addifexit:Priority 4804
At location src/dfa.c:1839
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(nalloc, i, d, d->follows[i].elems, d->follows, firstpos, lastpos, nfirstpos, nlastpos, nullable, d->tokens, d->tindex, j, pos, d->follows[i].nelem, wants_newline, d->salloc, d->sindex, d->states, o_nullable, o_nfirst, o_firstpos, o_nlast, o_lastpos, d->nleaves, d->depth, searchflag, d->searchflag, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    break;
nalloc[i] = 1;

....
Skipping nonlast:Priority -195
At location src/dfa.c:1840
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
((d->follows[i].elems) = xmalloc((nalloc[i]) * sizeof(position)));

....
Skipping nonlast:Priority -195
At location src/dfa.c:1840
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
((d->follows[i].elems) = xmalloc((nalloc[i]) * sizeof(position)));

....
Skipping nonlast:Priority -195
At location src/dfa.c:1840
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
((d->follows[i].elems) = xmalloc((nalloc[i]) * sizeof(position)));

....
Skipping nonlast:Priority -195
At location src/dfa.c:1840
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
((d->follows[i].elems) = xmalloc((nalloc[i]) * sizeof(position)));

....
Skipping nonlast:Priority -195
At location src/dfa.c:1840
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
((d->follows[i].elems) = xmalloc((nalloc[i]) * sizeof(position)));

....
Skipping nonlast:Priority -195
At location src/dfa.c:1840
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
((d->follows[i].elems) = xmalloc((nalloc[i]) * sizeof(position)));

....
Skipping nonlast:Priority -195
At location src/dfa.c:1840
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
((d->follows[i].elems) = xmalloc((nalloc[i]) * sizeof(position)));

....
Skipping nonlast:Priority -195
At location src/dfa.c:1840
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
((d->follows[i].elems) = xmalloc((nalloc[i]) * sizeof(position)));

....
Skipping nonlast:Priority -195
At location src/dfa.c:1840
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
((d->follows[i].elems) = xmalloc((nalloc[i]) * sizeof(position)));

....
Skipping nonlast addifexit:Priority 4805
At location src/dfa.c:1840
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, nalloc, i, d->follows[i].elems, d->follows, firstpos, lastpos, nfirstpos, nlastpos, nullable, d->tokens, d->tindex, j, pos, d->follows[i].nelem, wants_newline, d->salloc, d->sindex, d->states, o_nullable, o_nfirst, o_firstpos, o_nlast, o_lastpos, d->nleaves, d->depth, searchflag, d->searchflag, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
((d->follows[i].elems) = xmalloc((nalloc[i]) * sizeof(position)));

....
Skipping nonlast addifexit:Priority 4805
At location src/dfa.c:1840
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, nalloc, i, d->follows[i].elems, d->follows, firstpos, lastpos, nfirstpos, nlastpos, nullable, d->tokens, d->tindex, j, pos, d->follows[i].nelem, wants_newline, d->salloc, d->sindex, d->states, o_nullable, o_nfirst, o_firstpos, o_nlast, o_lastpos, d->nleaves, d->depth, searchflag, d->searchflag, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    break;
((d->follows[i].elems) = xmalloc((nalloc[i]) * sizeof(position)));

....
Skipping nonlast:Priority -165
At location src/dfa.c:1867
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
for (i = 0; i < d->tindex; ++i) 
    if (d->tokens[i] < (1 << 8) || d->tokens[i] == BACKREF || d->tokens[i] == ANYCHAR || d->tokens[i] == MBCSET || d->tokens[i] >= CSET) {
        copy(&d->follows[i], &merged);
        epsclosure(&merged, d);
        if (d->follows[i].nelem < merged.nelem)
            ((d->follows[i].elems) = xrealloc((ptr_t)(d->follows[i].elems), (merged.nelem) * sizeof(position)));
        copy(&merged, &d->follows[i]);
    }

....
Skipping nonlast:Priority -165
At location src/dfa.c:1867
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
for (i = 0; i < d->tindex; ++i) 
    if (d->tokens[i] < (1 << 8) || d->tokens[i] == BACKREF || d->tokens[i] == ANYCHAR || d->tokens[i] == MBCSET || d->tokens[i] >= CSET) {
        copy(&d->follows[i], &merged);
        epsclosure(&merged, d);
        if (d->follows[i].nelem < merged.nelem)
            ((d->follows[i].elems) = xrealloc((ptr_t)(d->follows[i].elems), (merged.nelem) * sizeof(position)));
        copy(&merged, &d->follows[i]);
    }

....
Skipping nonlast:Priority -165
At location src/dfa.c:1867
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
for (i = 0; i < d->tindex; ++i) 
    if (d->tokens[i] < (1 << 8) || d->tokens[i] == BACKREF || d->tokens[i] == ANYCHAR || d->tokens[i] == MBCSET || d->tokens[i] >= CSET) {
        copy(&d->follows[i], &merged);
        epsclosure(&merged, d);
        if (d->follows[i].nelem < merged.nelem)
            ((d->follows[i].elems) = xrealloc((ptr_t)(d->follows[i].elems), (merged.nelem) * sizeof(position)));
        copy(&merged, &d->follows[i]);
    }

....
Skipping nonlast:Priority -165
At location src/dfa.c:1867
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
for (i = 0; i < d->tindex; ++i) 
    if (d->tokens[i] < (1 << 8) || d->tokens[i] == BACKREF || d->tokens[i] == ANYCHAR || d->tokens[i] == MBCSET || d->tokens[i] >= CSET) {
        copy(&d->follows[i], &merged);
        epsclosure(&merged, d);
        if (d->follows[i].nelem < merged.nelem)
            ((d->follows[i].elems) = xrealloc((ptr_t)(d->follows[i].elems), (merged.nelem) * sizeof(position)));
        copy(&merged, &d->follows[i]);
    }

....
Skipping nonlast:Priority -165
At location src/dfa.c:1867
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
for (i = 0; i < d->tindex; ++i) 
    if (d->tokens[i] < (1 << 8) || d->tokens[i] == BACKREF || d->tokens[i] == ANYCHAR || d->tokens[i] == MBCSET || d->tokens[i] >= CSET) {
        copy(&d->follows[i], &merged);
        epsclosure(&merged, d);
        if (d->follows[i].nelem < merged.nelem)
            ((d->follows[i].elems) = xrealloc((ptr_t)(d->follows[i].elems), (merged.nelem) * sizeof(position)));
        copy(&merged, &d->follows[i]);
    }

....
Skipping nonlast:Priority -165
At location src/dfa.c:1867
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
for (i = 0; i < d->tindex; ++i) 
    if (d->tokens[i] < (1 << 8) || d->tokens[i] == BACKREF || d->tokens[i] == ANYCHAR || d->tokens[i] == MBCSET || d->tokens[i] >= CSET) {
        copy(&d->follows[i], &merged);
        epsclosure(&merged, d);
        if (d->follows[i].nelem < merged.nelem)
            ((d->follows[i].elems) = xrealloc((ptr_t)(d->follows[i].elems), (merged.nelem) * sizeof(position)));
        copy(&merged, &d->follows[i]);
    }

....
Skipping nonlast:Priority -165
At location src/dfa.c:1867
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
for (i = 0; i < d->tindex; ++i) 
    if (d->tokens[i] < (1 << 8) || d->tokens[i] == BACKREF || d->tokens[i] == ANYCHAR || d->tokens[i] == MBCSET || d->tokens[i] >= CSET) {
        copy(&d->follows[i], &merged);
        epsclosure(&merged, d);
        if (d->follows[i].nelem < merged.nelem)
            ((d->follows[i].elems) = xrealloc((ptr_t)(d->follows[i].elems), (merged.nelem) * sizeof(position)));
        copy(&merged, &d->follows[i]);
    }

....
Skipping nonlast:Priority -165
At location src/dfa.c:1867
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
for (i = 0; i < d->tindex; ++i) 
    if (d->tokens[i] < (1 << 8) || d->tokens[i] == BACKREF || d->tokens[i] == ANYCHAR || d->tokens[i] == MBCSET || d->tokens[i] >= CSET) {
        copy(&d->follows[i], &merged);
        epsclosure(&merged, d);
        if (d->follows[i].nelem < merged.nelem)
            ((d->follows[i].elems) = xrealloc((ptr_t)(d->follows[i].elems), (merged.nelem) * sizeof(position)));
        copy(&merged, &d->follows[i]);
    }

....
Skipping nonlast:Priority -165
At location src/dfa.c:1867
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
for (i = 0; i < d->tindex; ++i) 
    if (d->tokens[i] < (1 << 8) || d->tokens[i] == BACKREF || d->tokens[i] == ANYCHAR || d->tokens[i] == MBCSET || d->tokens[i] >= CSET) {
        copy(&d->follows[i], &merged);
        epsclosure(&merged, d);
        if (d->follows[i].nelem < merged.nelem)
            ((d->follows[i].elems) = xrealloc((ptr_t)(d->follows[i].elems), (merged.nelem) * sizeof(position)));
        copy(&merged, &d->follows[i]);
    }

....
Skipping nonlast addifexit:Priority 4835
At location src/dfa.c:1867
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->tindex, d->tokens, d->follows, nalloc, nfirstpos, firstpos, lastpos, nlastpos, wants_newline, nullable, d->salloc, d->sindex, d->states, o_nullable, o_nfirst, o_firstpos, o_nlast, o_lastpos, j, pos, d->nleaves, d->depth, searchflag, d->searchflag, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
for (i = 0; i < d->tindex; ++i) 
    if (d->tokens[i] < (1 << 8) || d->tokens[i] == BACKREF || d->tokens[i] == ANYCHAR || d->tokens[i] == MBCSET || d->tokens[i] >= CSET) {
        copy(&d->follows[i], &merged);
        epsclosure(&merged, d);
        if (d->follows[i].nelem < merged.nelem)
            ((d->follows[i].elems) = xrealloc((ptr_t)(d->follows[i].elems), (merged.nelem) * sizeof(position)));
        copy(&merged, &d->follows[i]);
    }

....
Skipping nonlast:Priority 4836
At location src/dfa.c:1886
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
copy(&d->follows[i], &merged);

....
Skipping nonlast:Priority 4836
At location src/dfa.c:1886
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
copy(&d->follows[i], &merged);

....
Skipping nonlast:Priority 4836
At location src/dfa.c:1886
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
copy(&d->follows[i], &merged);

....
Skipping nonlast:Priority 4836
At location src/dfa.c:1886
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
copy(&d->follows[i], &merged);

....
Skipping nonlast:Priority 4836
At location src/dfa.c:1886
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
copy(&d->follows[i], &merged);

....
Skipping nonlast:Priority 4836
At location src/dfa.c:1886
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
copy(&d->follows[i], &merged);

....
Skipping nonlast:Priority 4836
At location src/dfa.c:1886
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
copy(&d->follows[i], &merged);

....
Skipping nonlast:Priority 4836
At location src/dfa.c:1886
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
copy(&d->follows[i], &merged);

....
Skipping nonlast:Priority 4836
At location src/dfa.c:1886
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
copy(&d->follows[i], &merged);

....
Skipping nonlast addifexit:Priority 9836
At location src/dfa.c:1886
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->follows, d->follows[i].nelem, merged.nelem, d->follows[i].elems, nfirstpos, firstpos, d->tokens, wants_newline, merged.elems, d->tindex, d->salloc, d->sindex, d->states, o_nullable, o_nfirst, o_firstpos, o_nlast, o_lastpos, nalloc, lastpos, nlastpos, nullable, j, pos, d->nleaves, d->depth, searchflag, d->searchflag, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
copy(&d->follows[i], &merged);

....
Skipping nonlast addifexit:Priority 9836
At location src/dfa.c:1886
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->follows, d->follows[i].nelem, merged.nelem, d->follows[i].elems, nfirstpos, firstpos, d->tokens, wants_newline, merged.elems, d->tindex, d->salloc, d->sindex, d->states, o_nullable, o_nfirst, o_firstpos, o_nlast, o_lastpos, nalloc, lastpos, nlastpos, nullable, j, pos, d->nleaves, d->depth, searchflag, d->searchflag, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    break;
copy(&d->follows[i], &merged);

....
Skipping nonlast:Priority -160
At location src/dfa.c:1887
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
epsclosure(&merged, d);

....
Skipping nonlast:Priority -160
At location src/dfa.c:1887
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
epsclosure(&merged, d);

....
Skipping nonlast:Priority -160
At location src/dfa.c:1887
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
epsclosure(&merged, d);

....
Skipping nonlast:Priority -160
At location src/dfa.c:1887
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
epsclosure(&merged, d);

....
Skipping nonlast:Priority -160
At location src/dfa.c:1887
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
epsclosure(&merged, d);

....
Skipping nonlast:Priority -160
At location src/dfa.c:1887
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
epsclosure(&merged, d);

....
Skipping nonlast:Priority -160
At location src/dfa.c:1887
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
epsclosure(&merged, d);

....
Skipping nonlast:Priority -160
At location src/dfa.c:1887
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
epsclosure(&merged, d);

....
Skipping nonlast:Priority -160
At location src/dfa.c:1887
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
epsclosure(&merged, d);

....
Skipping nonlast addifexit:Priority 4840
At location src/dfa.c:1887
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->follows[i].nelem, d->follows, merged.nelem, d->follows[i].elems, nfirstpos, firstpos, wants_newline, d->tokens, merged.elems, d->tindex, d->salloc, d->sindex, d->states, o_nullable, o_nfirst, o_firstpos, o_nlast, o_lastpos, nalloc, lastpos, nlastpos, nullable, j, pos, d->nleaves, d->depth, searchflag, d->searchflag, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
epsclosure(&merged, d);

....
Skipping nonlast addifexit:Priority 4840
At location src/dfa.c:1887
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, i, d->follows[i].nelem, d->follows, merged.nelem, d->follows[i].elems, nfirstpos, firstpos, wants_newline, d->tokens, merged.elems, d->tindex, d->salloc, d->sindex, d->states, o_nullable, o_nfirst, o_firstpos, o_nlast, o_lastpos, nalloc, lastpos, nlastpos, nullable, j, pos, d->nleaves, d->depth, searchflag, d->searchflag, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    break;
epsclosure(&merged, d);

....
Skipping nonlast:Priority 7059
At location src/dfa.c:2942
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
d->calloc = 1;

....
Skipping nonlast:Priority 7059
At location src/dfa.c:2942
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
d->calloc = 1;

....
Skipping nonlast:Priority 7059
At location src/dfa.c:2942
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
d->calloc = 1;

....
Skipping nonlast:Priority 7059
At location src/dfa.c:2942
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
d->calloc = 1;

....
Skipping nonlast:Priority 7059
At location src/dfa.c:2942
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
d->calloc = 1;

....
Skipping nonlast:Priority 7059
At location src/dfa.c:2942
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
d->calloc = 1;

....
Skipping nonlast:Priority 7059
At location src/dfa.c:2942
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
d->calloc = 1;

....
Skipping nonlast:Priority 7059
At location src/dfa.c:2942
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
d->calloc = 1;

....
Skipping nonlast:Priority 7059
At location src/dfa.c:2942
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
d->calloc = 1;

....
Skipping nonlast addifexit:Priority 12059
At location src/dfa.c:2942
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->calloc, d->charclasses, d->cindex, d->talloc, d->tokens, d->tindex, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->nmbcsets, d->mbcsets_alloc, d->mbcsets, d->searchflag, d->tralloc, d->musts, d->states, d->sindex, d->salloc, d->follows, d->trcount, d->trans, d->realtrans, d->fails, d->success)))
    return;
d->calloc = 1;

....
Skipping nonlast:Priority -440
At location src/dfa.c:2943
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
((d->charclasses) = xmalloc((d->calloc) * sizeof(charclass)));

....
Skipping nonlast:Priority -440
At location src/dfa.c:2943
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
((d->charclasses) = xmalloc((d->calloc) * sizeof(charclass)));

....
Skipping nonlast:Priority -440
At location src/dfa.c:2943
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
((d->charclasses) = xmalloc((d->calloc) * sizeof(charclass)));

....
Skipping nonlast:Priority -440
At location src/dfa.c:2943
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
((d->charclasses) = xmalloc((d->calloc) * sizeof(charclass)));

....
Skipping nonlast:Priority -440
At location src/dfa.c:2943
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
((d->charclasses) = xmalloc((d->calloc) * sizeof(charclass)));

....
Skipping nonlast:Priority -440
At location src/dfa.c:2943
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
((d->charclasses) = xmalloc((d->calloc) * sizeof(charclass)));

....
Skipping nonlast:Priority -440
At location src/dfa.c:2943
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
((d->charclasses) = xmalloc((d->calloc) * sizeof(charclass)));

....
Skipping nonlast:Priority -440
At location src/dfa.c:2943
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
((d->charclasses) = xmalloc((d->calloc) * sizeof(charclass)));

....
Skipping nonlast:Priority -440
At location src/dfa.c:2943
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
((d->charclasses) = xmalloc((d->calloc) * sizeof(charclass)));

....
Skipping nonlast addifexit:Priority 4560
At location src/dfa.c:2943
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->charclasses, d->calloc, d->cindex, d->talloc, d->tokens, d->tindex, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->nmbcsets, d->mbcsets_alloc, d->mbcsets, d->searchflag, d->tralloc, d->musts, d->states, d->sindex, d->salloc, d->follows, d->trcount, d->trans, d->realtrans, d->fails, d->success)))
    return;
((d->charclasses) = xmalloc((d->calloc) * sizeof(charclass)));

....
Skipping nonlast:Priority -439
At location src/dfa.c:2944
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
d->cindex = 0;

....
Skipping nonlast:Priority -439
At location src/dfa.c:2944
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
d->cindex = 0;

....
Skipping nonlast:Priority -439
At location src/dfa.c:2944
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
d->cindex = 0;

....
Skipping nonlast:Priority -439
At location src/dfa.c:2944
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
d->cindex = 0;

....
Skipping nonlast:Priority -439
At location src/dfa.c:2944
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
d->cindex = 0;

....
Skipping nonlast:Priority -439
At location src/dfa.c:2944
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
d->cindex = 0;

....
Skipping nonlast:Priority -439
At location src/dfa.c:2944
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
d->cindex = 0;

....
Skipping nonlast:Priority -439
At location src/dfa.c:2944
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
d->cindex = 0;

....
Skipping nonlast:Priority -439
At location src/dfa.c:2944
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
d->cindex = 0;

....
Skipping nonlast addifexit:Priority 4561
At location src/dfa.c:2944
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->cindex, d->charclasses, d->calloc, d->talloc, d->tokens, d->tindex, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->nmbcsets, d->mbcsets_alloc, d->mbcsets, d->searchflag, d->tralloc, d->musts, d->states, d->sindex, d->salloc, d->follows, d->trcount, d->trans, d->realtrans, d->fails, d->success)))
    return;
d->cindex = 0;

....
Skipping nonlast:Priority -438
At location src/dfa.c:2946
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
d->talloc = 1;

....
Skipping nonlast:Priority -438
At location src/dfa.c:2946
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
d->talloc = 1;

....
Skipping nonlast:Priority -438
At location src/dfa.c:2946
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
d->talloc = 1;

....
Skipping nonlast:Priority -438
At location src/dfa.c:2946
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
d->talloc = 1;

....
Skipping nonlast:Priority -438
At location src/dfa.c:2946
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
d->talloc = 1;

....
Skipping nonlast:Priority -438
At location src/dfa.c:2946
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
d->talloc = 1;

....
Skipping nonlast:Priority -438
At location src/dfa.c:2946
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
d->talloc = 1;

....
Skipping nonlast:Priority -438
At location src/dfa.c:2946
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
d->talloc = 1;

....
Skipping nonlast:Priority -438
At location src/dfa.c:2946
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
d->talloc = 1;

....
Skipping nonlast addifexit:Priority 4562
At location src/dfa.c:2946
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->talloc, d->tokens, d->cindex, d->tindex, d->depth, d->nleaves, d->nregexps, d->charclasses, d->calloc, d->nmultibyte_prop, d->multibyte_prop, d->nmbcsets, d->mbcsets_alloc, d->mbcsets, d->searchflag, d->tralloc, d->musts, d->states, d->sindex, d->salloc, d->follows, d->trcount, d->trans, d->realtrans, d->fails, d->success)))
    return;
d->talloc = 1;

....
Skipping nonlast:Priority -437
At location src/dfa.c:2947
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
((d->tokens) = xmalloc((d->talloc) * sizeof(token)));

....
Skipping nonlast:Priority -437
At location src/dfa.c:2947
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
((d->tokens) = xmalloc((d->talloc) * sizeof(token)));

....
Skipping nonlast:Priority -437
At location src/dfa.c:2947
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
((d->tokens) = xmalloc((d->talloc) * sizeof(token)));

....
Skipping nonlast:Priority -437
At location src/dfa.c:2947
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
((d->tokens) = xmalloc((d->talloc) * sizeof(token)));

....
Skipping nonlast:Priority -437
At location src/dfa.c:2947
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
((d->tokens) = xmalloc((d->talloc) * sizeof(token)));

....
Skipping nonlast:Priority -437
At location src/dfa.c:2947
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
((d->tokens) = xmalloc((d->talloc) * sizeof(token)));

....
Skipping nonlast:Priority -437
At location src/dfa.c:2947
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
((d->tokens) = xmalloc((d->talloc) * sizeof(token)));

....
Skipping nonlast:Priority -437
At location src/dfa.c:2947
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
((d->tokens) = xmalloc((d->talloc) * sizeof(token)));

....
Skipping nonlast:Priority -437
At location src/dfa.c:2947
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
((d->tokens) = xmalloc((d->talloc) * sizeof(token)));

....
Skipping nonlast addifexit:Priority 4563
At location src/dfa.c:2947
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->tokens, d->talloc, d->tindex, d->depth, d->nleaves, d->nregexps, d->cindex, d->charclasses, d->calloc, d->nmultibyte_prop, d->multibyte_prop, d->nmbcsets, d->mbcsets_alloc, d->mbcsets, d->searchflag, d->tralloc, d->musts, d->states, d->sindex, d->salloc, d->follows, d->trcount, d->trans, d->realtrans, d->fails, d->success)))
    return;
((d->tokens) = xmalloc((d->talloc) * sizeof(token)));

....
Skipping nonlast:Priority -436
At location src/dfa.c:2948
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
d->tindex = d->depth = d->nleaves = d->nregexps = 0;

....
Skipping nonlast:Priority -436
At location src/dfa.c:2948
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
d->tindex = d->depth = d->nleaves = d->nregexps = 0;

....
Skipping nonlast:Priority -436
At location src/dfa.c:2948
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
d->tindex = d->depth = d->nleaves = d->nregexps = 0;

....
Skipping nonlast:Priority -436
At location src/dfa.c:2948
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
d->tindex = d->depth = d->nleaves = d->nregexps = 0;

....
Skipping nonlast:Priority -436
At location src/dfa.c:2948
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
d->tindex = d->depth = d->nleaves = d->nregexps = 0;

....
Skipping nonlast:Priority -436
At location src/dfa.c:2948
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
d->tindex = d->depth = d->nleaves = d->nregexps = 0;

....
Skipping nonlast:Priority -436
At location src/dfa.c:2948
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
d->tindex = d->depth = d->nleaves = d->nregexps = 0;

....
Skipping nonlast:Priority -436
At location src/dfa.c:2948
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
d->tindex = d->depth = d->nleaves = d->nregexps = 0;

....
Skipping nonlast:Priority -436
At location src/dfa.c:2948
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
d->tindex = d->depth = d->nleaves = d->nregexps = 0;

....
Skipping nonlast addifexit:Priority 4564
At location src/dfa.c:2948
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->tindex, d->depth, d->nleaves, d->nregexps, d->tokens, d->talloc, d->cindex, d->nmultibyte_prop, d->charclasses, d->calloc, d->multibyte_prop, d->nmbcsets, d->mbcsets_alloc, d->mbcsets, d->searchflag, d->tralloc, d->musts, d->states, d->sindex, d->salloc, d->follows, d->trcount, d->trans, d->realtrans, d->fails, d->success)))
    return;
d->tindex = d->depth = d->nleaves = d->nregexps = 0;

....
Skipping nonlast:Priority -435
At location src/dfa.c:2950
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if ((__ctype_get_mb_cur_max()) > 1) {
    d->nmultibyte_prop = 1;
    ((d->multibyte_prop) = xmalloc((d->nmultibyte_prop) * sizeof(int)));
    d->nmbcsets = 0;
    d->mbcsets_alloc = 1;
    ((d->mbcsets) = xmalloc((d->mbcsets_alloc) * sizeof(struct mb_char_classes)));
}

....
Skipping nonlast:Priority -435
At location src/dfa.c:2950
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if ((__ctype_get_mb_cur_max()) > 1) {
    d->nmultibyte_prop = 1;
    ((d->multibyte_prop) = xmalloc((d->nmultibyte_prop) * sizeof(int)));
    d->nmbcsets = 0;
    d->mbcsets_alloc = 1;
    ((d->mbcsets) = xmalloc((d->mbcsets_alloc) * sizeof(struct mb_char_classes)));
}

....
Skipping nonlast:Priority -435
At location src/dfa.c:2950
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
if ((__ctype_get_mb_cur_max()) > 1) {
    d->nmultibyte_prop = 1;
    ((d->multibyte_prop) = xmalloc((d->nmultibyte_prop) * sizeof(int)));
    d->nmbcsets = 0;
    d->mbcsets_alloc = 1;
    ((d->mbcsets) = xmalloc((d->mbcsets_alloc) * sizeof(struct mb_char_classes)));
}

....
Skipping nonlast:Priority -435
At location src/dfa.c:2950
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
if ((__ctype_get_mb_cur_max()) > 1) {
    d->nmultibyte_prop = 1;
    ((d->multibyte_prop) = xmalloc((d->nmultibyte_prop) * sizeof(int)));
    d->nmbcsets = 0;
    d->mbcsets_alloc = 1;
    ((d->mbcsets) = xmalloc((d->mbcsets_alloc) * sizeof(struct mb_char_classes)));
}

....
Skipping nonlast:Priority -435
At location src/dfa.c:2950
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
if ((__ctype_get_mb_cur_max()) > 1) {
    d->nmultibyte_prop = 1;
    ((d->multibyte_prop) = xmalloc((d->nmultibyte_prop) * sizeof(int)));
    d->nmbcsets = 0;
    d->mbcsets_alloc = 1;
    ((d->mbcsets) = xmalloc((d->mbcsets_alloc) * sizeof(struct mb_char_classes)));
}

....
Skipping nonlast:Priority -435
At location src/dfa.c:2950
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
if ((__ctype_get_mb_cur_max()) > 1) {
    d->nmultibyte_prop = 1;
    ((d->multibyte_prop) = xmalloc((d->nmultibyte_prop) * sizeof(int)));
    d->nmbcsets = 0;
    d->mbcsets_alloc = 1;
    ((d->mbcsets) = xmalloc((d->mbcsets_alloc) * sizeof(struct mb_char_classes)));
}

....
Skipping nonlast:Priority -435
At location src/dfa.c:2950
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if ((__ctype_get_mb_cur_max()) > 1) {
    d->nmultibyte_prop = 1;
    ((d->multibyte_prop) = xmalloc((d->nmultibyte_prop) * sizeof(int)));
    d->nmbcsets = 0;
    d->mbcsets_alloc = 1;
    ((d->mbcsets) = xmalloc((d->mbcsets_alloc) * sizeof(struct mb_char_classes)));
}

....
Skipping nonlast:Priority -435
At location src/dfa.c:2950
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if ((__ctype_get_mb_cur_max()) > 1) {
    d->nmultibyte_prop = 1;
    ((d->multibyte_prop) = xmalloc((d->nmultibyte_prop) * sizeof(int)));
    d->nmbcsets = 0;
    d->mbcsets_alloc = 1;
    ((d->mbcsets) = xmalloc((d->mbcsets_alloc) * sizeof(struct mb_char_classes)));
}

....
Skipping nonlast:Priority -435
At location src/dfa.c:2950
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if ((__ctype_get_mb_cur_max()) > 1) {
    d->nmultibyte_prop = 1;
    ((d->multibyte_prop) = xmalloc((d->nmultibyte_prop) * sizeof(int)));
    d->nmbcsets = 0;
    d->mbcsets_alloc = 1;
    ((d->mbcsets) = xmalloc((d->mbcsets_alloc) * sizeof(struct mb_char_classes)));
}

....
Skipping nonlast addifexit:Priority 3315
At location src/dfa.c:2950
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d)))
    return;
if ((__ctype_get_mb_cur_max()) > 1) {
    d->nmultibyte_prop = 1;
    ((d->multibyte_prop) = xmalloc((d->nmultibyte_prop) * sizeof(int)));
    d->nmbcsets = 0;
    d->mbcsets_alloc = 1;
    ((d->mbcsets) = xmalloc((d->mbcsets_alloc) * sizeof(struct mb_char_classes)));
}

....
Skipping nonlast:Priority 4976
At location src/dfa.c:2952
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
d->nmultibyte_prop = 1;

....
Skipping nonlast:Priority 4976
At location src/dfa.c:2952
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
d->nmultibyte_prop = 1;

....
Skipping nonlast:Priority 4976
At location src/dfa.c:2952
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
d->nmultibyte_prop = 1;

....
Skipping nonlast:Priority 4976
At location src/dfa.c:2952
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
d->nmultibyte_prop = 1;

....
Skipping nonlast:Priority 4976
At location src/dfa.c:2952
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
d->nmultibyte_prop = 1;

....
Skipping nonlast:Priority 4976
At location src/dfa.c:2952
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
d->nmultibyte_prop = 1;

....
Skipping nonlast:Priority 4976
At location src/dfa.c:2952
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
d->nmultibyte_prop = 1;

....
Skipping nonlast:Priority 4976
At location src/dfa.c:2952
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
d->nmultibyte_prop = 1;

....
Skipping nonlast:Priority 4976
At location src/dfa.c:2952
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
d->nmultibyte_prop = 1;

....
Skipping nonlast addifexit:Priority 9976
At location src/dfa.c:2952
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->nmultibyte_prop, d->multibyte_prop, d->nmbcsets, d->mbcsets_alloc, d->tindex, d->depth, d->nleaves, d->nregexps, d->mbcsets, d->tokens, d->talloc, d->cindex, d->searchflag, d->charclasses, d->calloc, d->tralloc, d->musts, d->states, d->sindex, d->salloc, d->follows, d->trcount, d->trans, d->realtrans, d->fails, d->success)))
    return;
d->nmultibyte_prop = 1;

....
Skipping nonlast:Priority -23
At location src/dfa.c:2953
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
((d->multibyte_prop) = xmalloc((d->nmultibyte_prop) * sizeof(int)));

....
Skipping nonlast:Priority -23
At location src/dfa.c:2953
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
((d->multibyte_prop) = xmalloc((d->nmultibyte_prop) * sizeof(int)));

....
Skipping nonlast:Priority -23
At location src/dfa.c:2953
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
((d->multibyte_prop) = xmalloc((d->nmultibyte_prop) * sizeof(int)));

....
Skipping nonlast:Priority -23
At location src/dfa.c:2953
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
((d->multibyte_prop) = xmalloc((d->nmultibyte_prop) * sizeof(int)));

....
Skipping nonlast:Priority -23
At location src/dfa.c:2953
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
((d->multibyte_prop) = xmalloc((d->nmultibyte_prop) * sizeof(int)));

....
Skipping nonlast:Priority -23
At location src/dfa.c:2953
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
((d->multibyte_prop) = xmalloc((d->nmultibyte_prop) * sizeof(int)));

....
Skipping nonlast:Priority -23
At location src/dfa.c:2953
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
((d->multibyte_prop) = xmalloc((d->nmultibyte_prop) * sizeof(int)));

....
Skipping nonlast:Priority -23
At location src/dfa.c:2953
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
((d->multibyte_prop) = xmalloc((d->nmultibyte_prop) * sizeof(int)));

....
Skipping nonlast:Priority -23
At location src/dfa.c:2953
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
((d->multibyte_prop) = xmalloc((d->nmultibyte_prop) * sizeof(int)));

....
Skipping nonlast addifexit:Priority 4977
At location src/dfa.c:2953
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->nmultibyte_prop, d->multibyte_prop, d->nmbcsets, d->mbcsets_alloc, d->mbcsets, d->tindex, d->depth, d->nleaves, d->nregexps, d->tokens, d->talloc, d->searchflag, d->tralloc, d->cindex, d->charclasses, d->calloc, d->musts, d->states, d->sindex, d->salloc, d->follows, d->trcount, d->trans, d->realtrans, d->fails, d->success)))
    return;
((d->multibyte_prop) = xmalloc((d->nmultibyte_prop) * sizeof(int)));

....
Skipping nonlast:Priority -22
At location src/dfa.c:2954
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
d->nmbcsets = 0;

....
Skipping nonlast:Priority -22
At location src/dfa.c:2954
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
d->nmbcsets = 0;

....
Skipping nonlast:Priority -22
At location src/dfa.c:2954
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
d->nmbcsets = 0;

....
Skipping nonlast:Priority -22
At location src/dfa.c:2954
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
d->nmbcsets = 0;

....
Skipping nonlast:Priority -22
At location src/dfa.c:2954
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
d->nmbcsets = 0;

....
Skipping nonlast:Priority -22
At location src/dfa.c:2954
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
d->nmbcsets = 0;

....
Skipping nonlast:Priority -22
At location src/dfa.c:2954
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
d->nmbcsets = 0;

....
Skipping nonlast:Priority -22
At location src/dfa.c:2954
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
d->nmbcsets = 0;

....
Skipping nonlast:Priority -22
At location src/dfa.c:2954
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
d->nmbcsets = 0;

....
Skipping nonlast addifexit:Priority 4978
At location src/dfa.c:2954
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->nmbcsets, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets_alloc, d->mbcsets, d->tindex, d->depth, d->nleaves, d->nregexps, d->searchflag, d->tokens, d->talloc, d->tralloc, d->musts, d->cindex, d->charclasses, d->calloc, d->states, d->sindex, d->salloc, d->follows, d->trcount, d->trans, d->realtrans, d->fails, d->success)))
    return;
d->nmbcsets = 0;

....
Skipping nonlast:Priority -21
At location src/dfa.c:2955
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
d->mbcsets_alloc = 1;

....
Skipping nonlast:Priority -21
At location src/dfa.c:2955
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
d->mbcsets_alloc = 1;

....
Skipping nonlast:Priority -21
At location src/dfa.c:2955
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
d->mbcsets_alloc = 1;

....
Skipping nonlast:Priority -21
At location src/dfa.c:2955
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
d->mbcsets_alloc = 1;

....
Skipping nonlast:Priority -21
At location src/dfa.c:2955
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
d->mbcsets_alloc = 1;

....
Skipping nonlast:Priority -21
At location src/dfa.c:2955
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
d->mbcsets_alloc = 1;

....
Skipping nonlast:Priority -21
At location src/dfa.c:2955
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
d->mbcsets_alloc = 1;

....
Skipping nonlast:Priority -21
At location src/dfa.c:2955
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
d->mbcsets_alloc = 1;

....
Skipping nonlast:Priority -21
At location src/dfa.c:2955
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
d->mbcsets_alloc = 1;

....
Skipping nonlast addifexit:Priority 4979
At location src/dfa.c:2955
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->mbcsets_alloc, d->mbcsets, d->nmbcsets, d->nmultibyte_prop, d->multibyte_prop, d->searchflag, d->tralloc, d->tindex, d->depth, d->nleaves, d->nregexps, d->tokens, d->talloc, d->musts, d->cindex, d->charclasses, d->calloc, d->states, d->sindex, d->salloc, d->follows, d->trcount, d->trans, d->realtrans, d->fails, d->success)))
    return;
d->mbcsets_alloc = 1;

....
Skipping nonlast:Priority -434
At location src/dfa.c:2960
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
d->searchflag = 0;

....
Skipping nonlast:Priority -434
At location src/dfa.c:2960
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
d->searchflag = 0;

....
Skipping nonlast:Priority -434
At location src/dfa.c:2960
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
d->searchflag = 0;

....
Skipping nonlast:Priority -434
At location src/dfa.c:2960
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
d->searchflag = 0;

....
Skipping nonlast:Priority -434
At location src/dfa.c:2960
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
d->searchflag = 0;

....
Skipping nonlast:Priority -434
At location src/dfa.c:2960
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
d->searchflag = 0;

....
Skipping nonlast:Priority -434
At location src/dfa.c:2960
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
d->searchflag = 0;

....
Skipping nonlast:Priority -434
At location src/dfa.c:2960
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
d->searchflag = 0;

....
Skipping nonlast:Priority -434
At location src/dfa.c:2960
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
d->searchflag = 0;

....
Skipping nonlast addifexit:Priority 4566
At location src/dfa.c:2960
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->searchflag, d->tralloc, d->musts, d->mbcsets, d->mbcsets_alloc, d->nmbcsets, d->nmultibyte_prop, d->multibyte_prop, d->tindex, d->depth, d->nleaves, d->nregexps, d->tokens, d->talloc, d->cindex, d->charclasses, d->calloc, d->states, d->sindex, d->salloc, d->follows, d->trcount, d->trans, d->realtrans, d->fails, d->success)))
    return;
d->searchflag = 0;

....
Skipping nonlast:Priority -433
At location src/dfa.c:2961
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
d->tralloc = 0;

....
Skipping nonlast:Priority -433
At location src/dfa.c:2961
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
d->tralloc = 0;

....
Skipping nonlast:Priority -433
At location src/dfa.c:2961
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
d->tralloc = 0;

....
Skipping nonlast:Priority -433
At location src/dfa.c:2961
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
d->tralloc = 0;

....
Skipping nonlast:Priority -433
At location src/dfa.c:2961
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
d->tralloc = 0;

....
Skipping nonlast:Priority -433
At location src/dfa.c:2961
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
d->tralloc = 0;

....
Skipping nonlast:Priority -433
At location src/dfa.c:2961
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
d->tralloc = 0;

....
Skipping nonlast:Priority -433
At location src/dfa.c:2961
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
d->tralloc = 0;

....
Skipping nonlast:Priority -433
At location src/dfa.c:2961
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
d->tralloc = 0;

....
Skipping nonlast addifexit:Priority 4567
At location src/dfa.c:2961
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, d->tralloc, d->searchflag, d->musts, d->mbcsets, d->mbcsets_alloc, d->nmbcsets, d->nmultibyte_prop, d->multibyte_prop, d->tindex, d->depth, d->nleaves, d->nregexps, d->tokens, d->talloc, d->cindex, d->charclasses, d->calloc, d->states, d->sindex, d->salloc, d->follows, d->trcount, d->trans, d->realtrans, d->fails, d->success)))
    return;
d->tralloc = 0;

....
IsErr:priority 4557
at location src/dfa.c:2970
--src file: src/dfa.c
fragment 0:
if (!(__abst_hole(case_fold, len, s, d, searchflag)))
    if (case_fold) {
        char *lcopy;
        int i;
        lcopy = malloc(len);
        if (!lcopy)
            dfaerror(dcgettext(((void *)0), "memory exhausted", 5));
        case_fold = 0;
        for (i = 0; i < len; ++i) 
            if (((*__ctype_b_loc())[(int)(((unsigned char)s[i]))] & (unsigned short)_isupper))
                lcopy[i] = (__extension__ ({
                    int __res;
                    if (sizeof ((unsigned char)s[i]) > 1) {
                        if (__builtin_constant_p((unsigned char)s[i])) {
                            int __c = ((unsigned char)s[i]);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower((unsigned char)s[i]);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)((unsigned char)s[i])];
                    __res;
                }));
            else
                lcopy[i] = s[i];
        dfainit(d);
        dfaparse(lcopy, len, d);
        free(lcopy);
        dfamust(d);
        d->cindex = d->tindex = d->depth = d->nleaves = d->nregexps = 0;
        case_fold = 1;
        dfaparse(s, len, d);
        dfaanalyze(d, searchflag);
    } else {
        dfainit(d);
        dfaparse(s, len, d);
        dfamust(d);
        dfaanalyze(d, searchflag);
    }

....
Skipping error ifguard:Priority 4557
At location src/dfa.c:2970
--Src File: src/dfa.c
Fragment 0:
if (!(__abst_hole(case_fold, len, s, d, searchflag)))
    if (case_fold) {
        char *lcopy;
        int i;
        lcopy = malloc(len);
        if (!lcopy)
            dfaerror(dcgettext(((void *)0), "memory exhausted", 5));
        case_fold = 0;
        for (i = 0; i < len; ++i) 
            if (((*__ctype_b_loc())[(int)(((unsigned char)s[i]))] & (unsigned short)_ISupper))
                lcopy[i] = (__extension__ ({
                    int __res;
                    if (sizeof ((unsigned char)s[i]) > 1) {
                        if (__builtin_constant_p((unsigned char)s[i])) {
                            int __c = ((unsigned char)s[i]);
                            __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                        } else
                            __res = tolower((unsigned char)s[i]);
                    } else
                        __res = (*__ctype_tolower_loc())[(int)((unsigned char)s[i])];
                    __res;
                }));
            else
                lcopy[i] = s[i];
        dfainit(d);
        dfaparse(lcopy, len, d);
        free(lcopy);
        dfamust(d);
        d->cindex = d->tindex = d->depth = d->nleaves = d->nregexps = 0;
        case_fold = 1;
        dfaparse(s, len, d);
        dfaanalyze(d, searchflag);
    } else {
        dfainit(d);
        dfaparse(s, len, d);
        dfamust(d);
        dfaanalyze(d, searchflag);
    }

....
Skipping isstmt addifexit:Priority 10807
At location src/dfa.c:2970
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(case_fold, len, s, d, searchflag)))
    return;
if (case_fold) {
    char *lcopy;
    int i;
    lcopy = malloc(len);
    if (!lcopy)
        dfaerror(dcgettext(((void *)0), "memory exhausted", 5));
    case_fold = 0;
    for (i = 0; i < len; ++i) 
        if (((*__ctype_b_loc())[(int)(((unsigned char)s[i]))] & (unsigned short)_ISupper))
            lcopy[i] = (__extension__ ({
                int __res;
                if (sizeof ((unsigned char)s[i]) > 1) {
                    if (__builtin_constant_p((unsigned char)s[i])) {
                        int __c = ((unsigned char)s[i]);
                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                    } else
                        __res = tolower((unsigned char)s[i]);
                } else
                    __res = (*__ctype_tolower_loc())[(int)((unsigned char)s[i])];
                __res;
            }));
        else
            lcopy[i] = s[i];
    dfainit(d);
    dfaparse(lcopy, len, d);
    free(lcopy);
    dfamust(d);
    d->cindex = d->tindex = d->depth = d->nleaves = d->nregexps = 0;
    case_fold = 1;
    dfaparse(s, len, d);
    dfaanalyze(d, searchflag);
} else {
    dfainit(d);
    dfaparse(s, len, d);
    dfamust(d);
    dfaanalyze(d, searchflag);
}

....
Skipping nonlast:Priority 4558
At location src/dfa.c:2998
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
dfainit(d);

....
Skipping nonlast:Priority 4558
At location src/dfa.c:2998
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
dfainit(d);

....
Skipping nonlast:Priority 4558
At location src/dfa.c:2998
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
dfainit(d);

....
Skipping nonlast:Priority 4558
At location src/dfa.c:2998
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
dfainit(d);

....
Skipping nonlast:Priority 4558
At location src/dfa.c:2998
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
dfainit(d);

....
Skipping nonlast:Priority 4558
At location src/dfa.c:2998
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
dfainit(d);

....
Skipping nonlast:Priority 4558
At location src/dfa.c:2998
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
dfainit(d);

....
Skipping nonlast:Priority 4558
At location src/dfa.c:2998
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
dfainit(d);

....
Skipping nonlast:Priority 4558
At location src/dfa.c:2998
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
dfainit(d);

....
Skipping nonlast addifexit:Priority 9558
At location src/dfa.c:2998
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, s, len, searchflag, case_fold, d->cindex, d->tindex, d->depth, d->nleaves, d->nregexps, d->charclasses, d->calloc, d->tokens, d->talloc, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
dfainit(d);

....
Skipping nonlast:Priority -431
At location src/dfa.c:2999
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
dfaparse(s, len, d);

....
Skipping nonlast:Priority -431
At location src/dfa.c:2999
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
dfaparse(s, len, d);

....
Skipping nonlast:Priority -431
At location src/dfa.c:2999
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
dfaparse(s, len, d);

....
Skipping nonlast:Priority -431
At location src/dfa.c:2999
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
dfaparse(s, len, d);

....
Skipping nonlast:Priority -431
At location src/dfa.c:2999
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
dfaparse(s, len, d);

....
Skipping nonlast:Priority -431
At location src/dfa.c:2999
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
dfaparse(s, len, d);

....
Skipping nonlast:Priority -431
At location src/dfa.c:2999
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
dfaparse(s, len, d);

....
Skipping nonlast:Priority -431
At location src/dfa.c:2999
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
dfaparse(s, len, d);

....
Skipping nonlast:Priority -431
At location src/dfa.c:2999
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
dfaparse(s, len, d);

....
Skipping nonlast addifexit:Priority 4569
At location src/dfa.c:2999
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(s, len, d, searchflag, case_fold, d->cindex, d->tindex, d->depth, d->nleaves, d->nregexps, d->charclasses, d->calloc, d->tokens, d->talloc, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
dfaparse(s, len, d);

....
Skipping nonlast:Priority -355
At location src/dfa.c:3000
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
dfamust(d);

....
Skipping nonlast:Priority -355
At location src/dfa.c:3000
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
dfamust(d);

....
Skipping nonlast:Priority -355
At location src/dfa.c:3000
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
dfamust(d);

....
Skipping nonlast:Priority -355
At location src/dfa.c:3000
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
dfamust(d);

....
Skipping nonlast:Priority -355
At location src/dfa.c:3000
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
dfamust(d);

....
Skipping nonlast:Priority -355
At location src/dfa.c:3000
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
dfamust(d);

....
Skipping nonlast:Priority -355
At location src/dfa.c:3000
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
dfamust(d);

....
Skipping nonlast:Priority -355
At location src/dfa.c:3000
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
dfamust(d);

....
Skipping nonlast:Priority -355
At location src/dfa.c:3000
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
dfamust(d);

....
Skipping nonlast addifexit:Priority 4645
At location src/dfa.c:3000
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, s, len, searchflag, case_fold, d->cindex, d->tindex, d->depth, d->nleaves, d->nregexps, d->charclasses, d->calloc, d->tokens, d->talloc, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
dfamust(d);

....
Skipping only addifexit:Priority 4751
At location src/dfa.c:3001
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(d, searchflag, s, len, case_fold, d->cindex, d->tindex, d->depth, d->nleaves, d->nregexps, d->charclasses, d->calloc, d->tokens, d->talloc, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    return;
dfaanalyze(d, searchflag);

....
Skipping nonlast:Priority -279
At location src/dfa.c:3156
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
char *result;

....
Skipping nonlast:Priority -279
At location src/dfa.c:3156
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
char *result;

....
Skipping nonlast:Priority -279
At location src/dfa.c:3156
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
char *result;

....
Skipping nonlast:Priority -279
At location src/dfa.c:3156
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
char *result;

....
Skipping nonlast:Priority -279
At location src/dfa.c:3156
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
char *result;

....
Skipping nonlast:Priority -279
At location src/dfa.c:3156
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
char *result;

....
Skipping nonlast:Priority -279
At location src/dfa.c:3156
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
char *result;

....
Skipping nonlast:Priority -279
At location src/dfa.c:3156
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
char *result;

....
Skipping nonlast:Priority -279
At location src/dfa.c:3156
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
char *result;

....
Skipping nonlast addifexit:Priority 4721
At location src/dfa.c:3156
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(new, old)))
    return 0;
char *result;

....
Skipping nonlast:Priority -278
At location src/dfa.c:3157
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
size_t oldsize, newsize;

....
Skipping nonlast:Priority -278
At location src/dfa.c:3157
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
size_t oldsize, newsize;

....
Skipping nonlast:Priority -278
At location src/dfa.c:3157
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
size_t oldsize, newsize;

....
Skipping nonlast:Priority -278
At location src/dfa.c:3157
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
size_t oldsize, newsize;

....
Skipping nonlast:Priority -278
At location src/dfa.c:3157
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
size_t oldsize, newsize;

....
Skipping nonlast:Priority -278
At location src/dfa.c:3157
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
size_t oldsize, newsize;

....
Skipping nonlast:Priority -278
At location src/dfa.c:3157
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
size_t oldsize, newsize;

....
Skipping nonlast:Priority -278
At location src/dfa.c:3157
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
size_t oldsize, newsize;

....
Skipping nonlast:Priority -278
At location src/dfa.c:3157
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
size_t oldsize, newsize;

....
Skipping nonlast addifexit:Priority 4722
At location src/dfa.c:3157
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(new, old, result)))
    return 0;
size_t oldsize, newsize;

....
Skipping nonlast:Priority 7223
At location src/dfa.c:3159
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
newsize = (new == ((void *)0)) ? 0 : strlen(new);

....
Skipping nonlast:Priority 7223
At location src/dfa.c:3159
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
newsize = (new == ((void *)0)) ? 0 : strlen(new);

....
Skipping nonlast:Priority 7223
At location src/dfa.c:3159
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
newsize = (new == ((void *)0)) ? 0 : strlen(new);

....
Skipping nonlast:Priority 7223
At location src/dfa.c:3159
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
newsize = (new == ((void *)0)) ? 0 : strlen(new);

....
Skipping nonlast:Priority 7223
At location src/dfa.c:3159
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
newsize = (new == ((void *)0)) ? 0 : strlen(new);

....
Skipping nonlast:Priority 7223
At location src/dfa.c:3159
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
newsize = (new == ((void *)0)) ? 0 : strlen(new);

....
Skipping nonlast:Priority 7223
At location src/dfa.c:3159
--Src File: src/dfa.c
Fragment 0:
if (newsize == 0)
    return old;
else
    oldsize = strlen(old);
newsize = (new == ((void *)0)) ? 0 : strlen(new);

....
Skipping nonlast:Priority 7223
At location src/dfa.c:3159
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
newsize = (new == ((void *)0)) ? 0 : strlen(new);

....
Skipping nonlast:Priority 7223
At location src/dfa.c:3159
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
newsize = (new == ((void *)0)) ? 0 : strlen(new);

....
Skipping nonlast:Priority 7223
At location src/dfa.c:3159
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
newsize = (new == ((void *)0)) ? 0 : strlen(new);

....
Skipping nonlast addifexit:Priority 12223
At location src/dfa.c:3159
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(new, newsize, old, oldsize, result)))
    return 0;
newsize = (new == ((void *)0)) ? 0 : strlen(new);

....
Skipping nonlast:Priority -276
At location src/dfa.c:3160
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (old == ((void *)0))
    oldsize = 0;
else if (newsize == 0)
    return old;
else
    oldsize = strlen(old);

....
Skipping nonlast:Priority -276
At location src/dfa.c:3160
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (old == ((void *)0))
    oldsize = 0;
else if (newsize == 0)
    return old;
else
    oldsize = strlen(old);

....
Skipping nonlast:Priority -276
At location src/dfa.c:3160
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
if (old == ((void *)0))
    oldsize = 0;
else if (newsize == 0)
    return old;
else
    oldsize = strlen(old);

....
Skipping nonlast:Priority -276
At location src/dfa.c:3160
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
if (old == ((void *)0))
    oldsize = 0;
else if (newsize == 0)
    return old;
else
    oldsize = strlen(old);

....
Skipping nonlast:Priority -276
At location src/dfa.c:3160
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
if (old == ((void *)0))
    oldsize = 0;
else if (newsize == 0)
    return old;
else
    oldsize = strlen(old);

....
Skipping nonlast:Priority -276
At location src/dfa.c:3160
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
if (old == ((void *)0))
    oldsize = 0;
else if (newsize == 0)
    return old;
else
    oldsize = strlen(old);

....
Skipping nonlast:Priority -276
At location src/dfa.c:3160
--Src File: src/dfa.c
Fragment 0:
if (newsize == 0)
    return old;
else
    oldsize = strlen(old);
if (old == ((void *)0))
    oldsize = 0;
else if (newsize == 0)
    return old;
else
    oldsize = strlen(old);

....
Skipping nonlast:Priority -276
At location src/dfa.c:3160
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (old == ((void *)0))
    oldsize = 0;
else if (newsize == 0)
    return old;
else
    oldsize = strlen(old);

....
Skipping nonlast:Priority -276
At location src/dfa.c:3160
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (old == ((void *)0))
    oldsize = 0;
else if (newsize == 0)
    return old;
else
    oldsize = strlen(old);

....
Skipping nonlast:Priority -276
At location src/dfa.c:3160
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (old == ((void *)0))
    oldsize = 0;
else if (newsize == 0)
    return old;
else
    oldsize = strlen(old);

....
Skipping nonlast addifexit:Priority 3474
At location src/dfa.c:3160
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(old, new, oldsize, newsize, result)))
    return 0;
if (old == ((void *)0))
    oldsize = 0;
else if (newsize == 0)
    return old;
else
    oldsize = strlen(old);

....
Skipping nonlast:Priority -316
At location src/dfa.c:3161
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    oldsize = 0;
}

....
Skipping nonlast:Priority -316
At location src/dfa.c:3161
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    oldsize = 0;
}

....
Skipping nonlast:Priority -316
At location src/dfa.c:3161
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        parse_bracket_exp_mb();
        return lasttok = MBCSET;
    }
    oldsize = 0;
}

....
Skipping nonlast:Priority -316
At location src/dfa.c:3161
--Src File: src/dfa.c
Fragment 0:
{
    if (0 != 0)
        dfaerror(0);
    else
        return lasttok = END;
    oldsize = 0;
}

....
Skipping nonlast:Priority -316
At location src/dfa.c:3161
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
    else
        return lasttok = END;
    oldsize = 0;
}

....
Skipping nonlast:Priority -316
At location src/dfa.c:3161
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
    else
        return lasttok = END;
    oldsize = 0;
}

....
Skipping nonlast:Priority -316
At location src/dfa.c:3161
--Src File: src/dfa.c
Fragment 0:
{
    if (newsize == 0)
        return old;
    else
        oldsize = strlen(old);
    oldsize = 0;
}

....
Skipping nonlast:Priority -316
At location src/dfa.c:3161
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    oldsize = 0;
}

....
Skipping nonlast:Priority -316
At location src/dfa.c:3161
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    oldsize = 0;
}

....
Skipping nonlast:Priority -316
At location src/dfa.c:3161
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    oldsize = 0;
}

....
Skipping nonlast addifexit:Priority 4684
At location src/dfa.c:3161
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(oldsize, old, newsize, new, result)))
        return 0;
    oldsize = 0;
}

....
Skipping nonlast:Priority -275
At location src/dfa.c:3162
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    if (newsize == 0)
        return old;
    else
        oldsize = strlen(old);
}

....
Skipping nonlast:Priority -275
At location src/dfa.c:3162
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    if (newsize == 0)
        return old;
    else
        oldsize = strlen(old);
}

....
Skipping nonlast:Priority -275
At location src/dfa.c:3162
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        parse_bracket_exp_mb();
        return lasttok = MBCSET;
    }
    if (newsize == 0)
        return old;
    else
        oldsize = strlen(old);
}

....
Skipping nonlast:Priority -275
At location src/dfa.c:3162
--Src File: src/dfa.c
Fragment 0:
{
    if (0 != 0)
        dfaerror(0);
    else
        return lasttok = END;
    if (newsize == 0)
        return old;
    else
        oldsize = strlen(old);
}

....
Skipping nonlast:Priority -275
At location src/dfa.c:3162
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
    else
        return lasttok = END;
    if (newsize == 0)
        return old;
    else
        oldsize = strlen(old);
}

....
Skipping nonlast:Priority -275
At location src/dfa.c:3162
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
    else
        return lasttok = END;
    if (newsize == 0)
        return old;
    else
        oldsize = strlen(old);
}

....
Skipping nonlast:Priority -275
At location src/dfa.c:3162
--Src File: src/dfa.c
Fragment 0:
{
    if (newsize == 0)
        return old;
    else
        oldsize = strlen(old);
    if (newsize == 0)
        return old;
    else
        oldsize = strlen(old);
}

....
Skipping nonlast:Priority -275
At location src/dfa.c:3162
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    if (newsize == 0)
        return old;
    else
        oldsize = strlen(old);
}

....
Skipping nonlast:Priority -275
At location src/dfa.c:3162
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    if (newsize == 0)
        return old;
    else
        oldsize = strlen(old);
}

....
Skipping nonlast:Priority -275
At location src/dfa.c:3162
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    if (newsize == 0)
        return old;
    else
        oldsize = strlen(old);
}

....
Skipping nonlast addifexit:Priority 3475
At location src/dfa.c:3162
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(newsize, old, oldsize, new, result)))
        return 0;
    if (newsize == 0)
        return old;
    else
        oldsize = strlen(old);
}

....
Skipping nonlast:Priority -274
At location src/dfa.c:3163
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    return old;
}

....
Skipping nonlast:Priority -274
At location src/dfa.c:3163
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    return old;
}

....
Skipping nonlast:Priority -274
At location src/dfa.c:3163
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        parse_bracket_exp_mb();
        return lasttok = MBCSET;
    }
    return old;
}

....
Skipping nonlast:Priority -274
At location src/dfa.c:3163
--Src File: src/dfa.c
Fragment 0:
{
    if (0 != 0)
        dfaerror(0);
    else
        return lasttok = END;
    return old;
}

....
Skipping nonlast:Priority -274
At location src/dfa.c:3163
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
    else
        return lasttok = END;
    return old;
}

....
Skipping nonlast:Priority -274
At location src/dfa.c:3163
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
    else
        return lasttok = END;
    return old;
}

....
Skipping nonlast:Priority -274
At location src/dfa.c:3163
--Src File: src/dfa.c
Fragment 0:
{
    if (newsize == 0)
        return old;
    else
        oldsize = strlen(old);
    return old;
}

....
Skipping nonlast:Priority -274
At location src/dfa.c:3163
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    return old;
}

....
Skipping nonlast:Priority -274
At location src/dfa.c:3163
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    return old;
}

....
Skipping nonlast:Priority -274
At location src/dfa.c:3163
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    return old;
}

....
Skipping nonlast addifexit:Priority 4726
At location src/dfa.c:3163
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(old, oldsize, newsize, result, new)))
        return 0;
    return old;
}

....
Skipping nonlast:Priority -315
At location src/dfa.c:3165
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (old == ((void *)0))
    result = (char *)malloc(newsize + 1);
else
    result = (char *)realloc((void *)old, oldsize + newsize + 1);

....
Skipping nonlast:Priority -315
At location src/dfa.c:3165
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (old == ((void *)0))
    result = (char *)malloc(newsize + 1);
else
    result = (char *)realloc((void *)old, oldsize + newsize + 1);

....
Skipping nonlast:Priority -315
At location src/dfa.c:3165
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
if (old == ((void *)0))
    result = (char *)malloc(newsize + 1);
else
    result = (char *)realloc((void *)old, oldsize + newsize + 1);

....
Skipping nonlast:Priority -315
At location src/dfa.c:3165
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
if (old == ((void *)0))
    result = (char *)malloc(newsize + 1);
else
    result = (char *)realloc((void *)old, oldsize + newsize + 1);

....
Skipping nonlast:Priority -315
At location src/dfa.c:3165
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
if (old == ((void *)0))
    result = (char *)malloc(newsize + 1);
else
    result = (char *)realloc((void *)old, oldsize + newsize + 1);

....
Skipping nonlast:Priority -315
At location src/dfa.c:3165
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
if (old == ((void *)0))
    result = (char *)malloc(newsize + 1);
else
    result = (char *)realloc((void *)old, oldsize + newsize + 1);

....
Skipping nonlast:Priority -315
At location src/dfa.c:3165
--Src File: src/dfa.c
Fragment 0:
if (newsize == 0)
    return old;
else
    oldsize = strlen(old);
if (old == ((void *)0))
    result = (char *)malloc(newsize + 1);
else
    result = (char *)realloc((void *)old, oldsize + newsize + 1);

....
Skipping nonlast:Priority -315
At location src/dfa.c:3165
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (old == ((void *)0))
    result = (char *)malloc(newsize + 1);
else
    result = (char *)realloc((void *)old, oldsize + newsize + 1);

....
Skipping nonlast:Priority -315
At location src/dfa.c:3165
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (old == ((void *)0))
    result = (char *)malloc(newsize + 1);
else
    result = (char *)realloc((void *)old, oldsize + newsize + 1);

....
Skipping nonlast:Priority -315
At location src/dfa.c:3165
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (old == ((void *)0))
    result = (char *)malloc(newsize + 1);
else
    result = (char *)realloc((void *)old, oldsize + newsize + 1);

....
Skipping nonlast addifexit:Priority 3435
At location src/dfa.c:3165
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(old, result, oldsize, newsize, new)))
    return 0;
if (old == ((void *)0))
    result = (char *)malloc(newsize + 1);
else
    result = (char *)realloc((void *)old, oldsize + newsize + 1);

....
Skipping nonlast:Priority -314
At location src/dfa.c:3166
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    result = (char *)malloc(newsize + 1);
}

....
Skipping nonlast:Priority -314
At location src/dfa.c:3166
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    result = (char *)malloc(newsize + 1);
}

....
Skipping nonlast:Priority -314
At location src/dfa.c:3166
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        parse_bracket_exp_mb();
        return lasttok = MBCSET;
    }
    result = (char *)malloc(newsize + 1);
}

....
Skipping nonlast:Priority -314
At location src/dfa.c:3166
--Src File: src/dfa.c
Fragment 0:
{
    if (0 != 0)
        dfaerror(0);
    else
        return lasttok = END;
    result = (char *)malloc(newsize + 1);
}

....
Skipping nonlast:Priority -314
At location src/dfa.c:3166
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
    else
        return lasttok = END;
    result = (char *)malloc(newsize + 1);
}

....
Skipping nonlast:Priority -314
At location src/dfa.c:3166
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
    else
        return lasttok = END;
    result = (char *)malloc(newsize + 1);
}

....
Skipping nonlast:Priority -314
At location src/dfa.c:3166
--Src File: src/dfa.c
Fragment 0:
{
    if (newsize == 0)
        return old;
    else
        oldsize = strlen(old);
    result = (char *)malloc(newsize + 1);
}

....
Skipping nonlast:Priority -314
At location src/dfa.c:3166
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    result = (char *)malloc(newsize + 1);
}

....
Skipping nonlast:Priority -314
At location src/dfa.c:3166
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    result = (char *)malloc(newsize + 1);
}

....
Skipping nonlast:Priority -314
At location src/dfa.c:3166
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    result = (char *)malloc(newsize + 1);
}

....
Skipping nonlast addifexit:Priority 4686
At location src/dfa.c:3166
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(result, newsize, old, oldsize, new)))
        return 0;
    result = (char *)malloc(newsize + 1);
}

....
Skipping nonlast:Priority -313
At location src/dfa.c:3169
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (result != ((void *)0) && new != ((void *)0))
    (void)strcpy(result + oldsize, new);

....
Skipping nonlast:Priority -313
At location src/dfa.c:3169
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (result != ((void *)0) && new != ((void *)0))
    (void)strcpy(result + oldsize, new);

....
Skipping nonlast:Priority -313
At location src/dfa.c:3169
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
if (result != ((void *)0) && new != ((void *)0))
    (void)strcpy(result + oldsize, new);

....
Skipping nonlast:Priority -313
At location src/dfa.c:3169
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
if (result != ((void *)0) && new != ((void *)0))
    (void)strcpy(result + oldsize, new);

....
Skipping nonlast:Priority -313
At location src/dfa.c:3169
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
if (result != ((void *)0) && new != ((void *)0))
    (void)strcpy(result + oldsize, new);

....
Skipping nonlast:Priority -313
At location src/dfa.c:3169
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
if (result != ((void *)0) && new != ((void *)0))
    (void)strcpy(result + oldsize, new);

....
Skipping nonlast:Priority -313
At location src/dfa.c:3169
--Src File: src/dfa.c
Fragment 0:
if (newsize == 0)
    return old;
else
    oldsize = strlen(old);
if (result != ((void *)0) && new != ((void *)0))
    (void)strcpy(result + oldsize, new);

....
Skipping nonlast:Priority -313
At location src/dfa.c:3169
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (result != ((void *)0) && new != ((void *)0))
    (void)strcpy(result + oldsize, new);

....
Skipping nonlast:Priority -313
At location src/dfa.c:3169
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (result != ((void *)0) && new != ((void *)0))
    (void)strcpy(result + oldsize, new);

....
Skipping nonlast:Priority -313
At location src/dfa.c:3169
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (result != ((void *)0) && new != ((void *)0))
    (void)strcpy(result + oldsize, new);

....
Skipping nonlast addifexit:Priority 3437
At location src/dfa.c:3169
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(new, result, old, oldsize, newsize)))
    return 0;
if (result != ((void *)0) && new != ((void *)0))
    (void)strcpy(result + oldsize, new);

....
Skipping nonlast:Priority -312
At location src/dfa.c:3170
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    (void)strcpy(result + oldsize, new);
}

....
Skipping nonlast:Priority -312
At location src/dfa.c:3170
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    (void)strcpy(result + oldsize, new);
}

....
Skipping nonlast:Priority -312
At location src/dfa.c:3170
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        parse_bracket_exp_mb();
        return lasttok = MBCSET;
    }
    (void)strcpy(result + oldsize, new);
}

....
Skipping nonlast:Priority -312
At location src/dfa.c:3170
--Src File: src/dfa.c
Fragment 0:
{
    if (0 != 0)
        dfaerror(0);
    else
        return lasttok = END;
    (void)strcpy(result + oldsize, new);
}

....
Skipping nonlast:Priority -312
At location src/dfa.c:3170
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
    else
        return lasttok = END;
    (void)strcpy(result + oldsize, new);
}

....
Skipping nonlast:Priority -312
At location src/dfa.c:3170
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
    else
        return lasttok = END;
    (void)strcpy(result + oldsize, new);
}

....
Skipping nonlast:Priority -312
At location src/dfa.c:3170
--Src File: src/dfa.c
Fragment 0:
{
    if (newsize == 0)
        return old;
    else
        oldsize = strlen(old);
    (void)strcpy(result + oldsize, new);
}

....
Skipping nonlast:Priority -312
At location src/dfa.c:3170
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    (void)strcpy(result + oldsize, new);
}

....
Skipping nonlast:Priority -312
At location src/dfa.c:3170
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    (void)strcpy(result + oldsize, new);
}

....
Skipping nonlast:Priority -312
At location src/dfa.c:3170
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    (void)strcpy(result + oldsize, new);
}

....
Skipping nonlast addifexit:Priority 4688
At location src/dfa.c:3170
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(new, result, oldsize, old, newsize)))
        return 0;
    (void)strcpy(result + oldsize, new);
}

....
Skipping returnreturn addifexit:Priority 4689
At location src/dfa.c:3171
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(result, new, oldsize, old, newsize)))
    return 0;
return result;

....
Skipping returnreturn addifexit:Priority 12183
At location src/dfa.c:3177
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(string)))
    return 0;
return icatalloc((char *)((void *)0), string);

....
Skipping isstmt addifexit:Priority 10998
At location src/dfa.c:3196
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cp)))
    return;
if (cp != ((void *)0))
    free(cp);

....
Skipping nonlast:Priority -251
At location src/dfa.c:3197
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    free(cp);
}

....
Skipping nonlast:Priority -251
At location src/dfa.c:3197
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    free(cp);
}

....
Skipping nonlast:Priority -251
At location src/dfa.c:3197
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        parse_bracket_exp_mb();
        return lasttok = MBCSET;
    }
    free(cp);
}

....
Skipping nonlast:Priority -251
At location src/dfa.c:3197
--Src File: src/dfa.c
Fragment 0:
{
    if (0 != 0)
        dfaerror(0);
    else
        return lasttok = END;
    free(cp);
}

....
Skipping nonlast:Priority -251
At location src/dfa.c:3197
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
    else
        return lasttok = END;
    free(cp);
}

....
Skipping nonlast:Priority -251
At location src/dfa.c:3197
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
    else
        return lasttok = END;
    free(cp);
}

....
Skipping nonlast:Priority -251
At location src/dfa.c:3197
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    free(cp);
}

....
Skipping nonlast:Priority -251
At location src/dfa.c:3197
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    free(cp);
}

....
Skipping nonlast:Priority -251
At location src/dfa.c:3197
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    free(cp);
}

....
Skipping nonlast addifexit:Priority 4749
At location src/dfa.c:3197
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(cp)))
        return;
    free(cp);
}

....
Skipping nonlast:Priority -259
At location src/dfa.c:3203
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int i;

....
Skipping nonlast:Priority -259
At location src/dfa.c:3203
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int i;

....
Skipping nonlast:Priority -259
At location src/dfa.c:3203
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
int i;

....
Skipping nonlast:Priority -259
At location src/dfa.c:3203
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
int i;

....
Skipping nonlast:Priority -259
At location src/dfa.c:3203
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
int i;

....
Skipping nonlast:Priority -259
At location src/dfa.c:3203
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
int i;

....
Skipping nonlast:Priority -259
At location src/dfa.c:3203
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int i;

....
Skipping nonlast:Priority -259
At location src/dfa.c:3203
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int i;

....
Skipping nonlast:Priority -259
At location src/dfa.c:3203
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int i;

....
Skipping nonlast addifexit:Priority 4741
At location src/dfa.c:3203
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cpp)))
    return;
int i;

....
Skipping nonlast:Priority 7242
At location src/dfa.c:3205
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (cpp == ((void *)0))
    return;

....
Skipping nonlast:Priority 7242
At location src/dfa.c:3205
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (cpp == ((void *)0))
    return;

....
Skipping nonlast:Priority 7242
At location src/dfa.c:3205
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
if (cpp == ((void *)0))
    return;

....
Skipping nonlast:Priority 7242
At location src/dfa.c:3205
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
if (cpp == ((void *)0))
    return;

....
Skipping nonlast:Priority 7242
At location src/dfa.c:3205
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
if (cpp == ((void *)0))
    return;

....
Skipping nonlast:Priority 7242
At location src/dfa.c:3205
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
if (cpp == ((void *)0))
    return;

....
Skipping nonlast:Priority 7242
At location src/dfa.c:3205
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (cpp == ((void *)0))
    return;

....
Skipping nonlast:Priority 7242
At location src/dfa.c:3205
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (cpp == ((void *)0))
    return;

....
Skipping nonlast:Priority 7242
At location src/dfa.c:3205
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (cpp == ((void *)0))
    return;

....
Skipping nonlast addifexit:Priority 10992
At location src/dfa.c:3205
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cpp, i)))
    return;
if (cpp == ((void *)0))
    return;

....
Skipping isstmt addifexit:Priority 4743
At location src/dfa.c:3207
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cpp, i)))
    return;
for (i = 0; cpp[i] != ((void *)0); ++i) {
    free(cpp[i]);
    cpp[i] = ((void *)0);
}

....
Skipping nonlast:Priority 4703
At location src/dfa.c:3209
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
free(cpp[i]);

....
Skipping nonlast:Priority 4703
At location src/dfa.c:3209
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
free(cpp[i]);

....
Skipping nonlast:Priority 4703
At location src/dfa.c:3209
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
free(cpp[i]);

....
Skipping nonlast:Priority 4703
At location src/dfa.c:3209
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
free(cpp[i]);

....
Skipping nonlast:Priority 4703
At location src/dfa.c:3209
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
free(cpp[i]);

....
Skipping nonlast:Priority 4703
At location src/dfa.c:3209
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
free(cpp[i]);

....
Skipping nonlast:Priority 4703
At location src/dfa.c:3209
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
free(cpp[i]);

....
Skipping nonlast:Priority 4703
At location src/dfa.c:3209
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
free(cpp[i]);

....
Skipping nonlast:Priority 4703
At location src/dfa.c:3209
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
free(cpp[i]);

....
Skipping nonlast addifexit:Priority 9703
At location src/dfa.c:3209
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cpp, i)))
    return;
free(cpp[i]);

....
Skipping nonlast addifexit:Priority 9703
At location src/dfa.c:3209
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cpp, i)))
    break;
free(cpp[i]);

....
Skipping nonlast:Priority -320
At location src/dfa.c:3217
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int i, j;

....
Skipping nonlast:Priority -320
At location src/dfa.c:3217
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int i, j;

....
Skipping nonlast:Priority -320
At location src/dfa.c:3217
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
int i, j;

....
Skipping nonlast:Priority -320
At location src/dfa.c:3217
--Src File: src/dfa.c
Fragment 0:
if ((new = icpyalloc(new)) == ((void *)0)) {
    freelist(cpp);
    return ((void *)0);
}
int i, j;

....
Skipping nonlast:Priority -320
At location src/dfa.c:3217
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
int i, j;

....
Skipping nonlast:Priority -320
At location src/dfa.c:3217
--Src File: src/dfa.c
Fragment 0:
if (cpp == ((void *)0))
    return ((void *)0);
int i, j;

....
Skipping nonlast:Priority -320
At location src/dfa.c:3217
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
int i, j;

....
Skipping nonlast:Priority -320
At location src/dfa.c:3217
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
int i, j;

....
Skipping nonlast:Priority -320
At location src/dfa.c:3217
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int i, j;

....
Skipping nonlast:Priority -320
At location src/dfa.c:3217
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int i, j;

....
Skipping nonlast:Priority -320
At location src/dfa.c:3217
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int i, j;

....
Skipping nonlast addifexit:Priority 4680
At location src/dfa.c:3217
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cpp, new, len)))
    return 0;
int i, j;

....
Skipping nonlast:Priority 7181
At location src/dfa.c:3219
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (cpp == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority 7181
At location src/dfa.c:3219
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (cpp == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority 7181
At location src/dfa.c:3219
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
if (cpp == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority 7181
At location src/dfa.c:3219
--Src File: src/dfa.c
Fragment 0:
if ((new = icpyalloc(new)) == ((void *)0)) {
    freelist(cpp);
    return ((void *)0);
}
if (cpp == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority 7181
At location src/dfa.c:3219
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
if (cpp == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority 7181
At location src/dfa.c:3219
--Src File: src/dfa.c
Fragment 0:
if (cpp == ((void *)0))
    return ((void *)0);
if (cpp == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority 7181
At location src/dfa.c:3219
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
if (cpp == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority 7181
At location src/dfa.c:3219
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
if (cpp == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority 7181
At location src/dfa.c:3219
--Src File: src/dfa.c
Fragment 0:
if (istrstr(cpp[i], new) != ((void *)0)) {
    free(new);
    return cpp;
}
if (cpp == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority 7181
At location src/dfa.c:3219
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (cpp == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority 7181
At location src/dfa.c:3219
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (cpp == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority 7181
At location src/dfa.c:3219
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (cpp == ((void *)0))
    return ((void *)0);

....
Skipping nonlast addifexit:Priority 10931
At location src/dfa.c:3219
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cpp, new, len, i, j)))
    return 0;
if (cpp == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority -318
At location src/dfa.c:3221
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if ((new = icpyalloc(new)) == ((void *)0)) {
    freelist(cpp);
    return ((void *)0);
}

....
Skipping nonlast:Priority -318
At location src/dfa.c:3221
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if ((new = icpyalloc(new)) == ((void *)0)) {
    freelist(cpp);
    return ((void *)0);
}

....
Skipping nonlast:Priority -318
At location src/dfa.c:3221
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
if ((new = icpyalloc(new)) == ((void *)0)) {
    freelist(cpp);
    return ((void *)0);
}

....
Skipping nonlast:Priority -318
At location src/dfa.c:3221
--Src File: src/dfa.c
Fragment 0:
if ((new = icpyalloc(new)) == ((void *)0)) {
    freelist(cpp);
    return ((void *)0);
}
if ((new = icpyalloc(new)) == ((void *)0)) {
    freelist(cpp);
    return ((void *)0);
}

....
Skipping nonlast:Priority -318
At location src/dfa.c:3221
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
if ((new = icpyalloc(new)) == ((void *)0)) {
    freelist(cpp);
    return ((void *)0);
}

....
Skipping nonlast:Priority -318
At location src/dfa.c:3221
--Src File: src/dfa.c
Fragment 0:
if (cpp == ((void *)0))
    return ((void *)0);
if ((new = icpyalloc(new)) == ((void *)0)) {
    freelist(cpp);
    return ((void *)0);
}

....
Skipping nonlast:Priority -318
At location src/dfa.c:3221
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
if ((new = icpyalloc(new)) == ((void *)0)) {
    freelist(cpp);
    return ((void *)0);
}

....
Skipping nonlast:Priority -318
At location src/dfa.c:3221
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
if ((new = icpyalloc(new)) == ((void *)0)) {
    freelist(cpp);
    return ((void *)0);
}

....
Skipping nonlast:Priority -318
At location src/dfa.c:3221
--Src File: src/dfa.c
Fragment 0:
if (istrstr(cpp[i], new) != ((void *)0)) {
    free(new);
    return cpp;
}
if ((new = icpyalloc(new)) == ((void *)0)) {
    freelist(cpp);
    return ((void *)0);
}

....
Skipping nonlast:Priority -318
At location src/dfa.c:3221
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if ((new = icpyalloc(new)) == ((void *)0)) {
    freelist(cpp);
    return ((void *)0);
}

....
Skipping nonlast:Priority -318
At location src/dfa.c:3221
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if ((new = icpyalloc(new)) == ((void *)0)) {
    freelist(cpp);
    return ((void *)0);
}

....
Skipping nonlast:Priority -318
At location src/dfa.c:3221
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if ((new = icpyalloc(new)) == ((void *)0)) {
    freelist(cpp);
    return ((void *)0);
}

....
Skipping nonlast addifexit:Priority 3432
At location src/dfa.c:3221
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(new, cpp, len, i, j)))
    return 0;
if ((new = icpyalloc(new)) == ((void *)0)) {
    freelist(cpp);
    return ((void *)0);
}

....
Skipping nonlast:Priority -310
At location src/dfa.c:3226
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
new[len] = '\x00';

....
Skipping nonlast:Priority -310
At location src/dfa.c:3226
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
new[len] = '\x00';

....
Skipping nonlast:Priority -310
At location src/dfa.c:3226
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
new[len] = '\x00';

....
Skipping nonlast:Priority -310
At location src/dfa.c:3226
--Src File: src/dfa.c
Fragment 0:
if ((new = icpyalloc(new)) == ((void *)0)) {
    freelist(cpp);
    return ((void *)0);
}
new[len] = '\x00';

....
Skipping nonlast:Priority -310
At location src/dfa.c:3226
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
new[len] = '\x00';

....
Skipping nonlast:Priority -310
At location src/dfa.c:3226
--Src File: src/dfa.c
Fragment 0:
if (cpp == ((void *)0))
    return ((void *)0);
new[len] = '\x00';

....
Skipping nonlast:Priority -310
At location src/dfa.c:3226
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
new[len] = '\x00';

....
Skipping nonlast:Priority -310
At location src/dfa.c:3226
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
new[len] = '\x00';

....
Skipping nonlast:Priority -310
At location src/dfa.c:3226
--Src File: src/dfa.c
Fragment 0:
if (istrstr(cpp[i], new) != ((void *)0)) {
    free(new);
    return cpp;
}
new[len] = '\x00';

....
Skipping nonlast:Priority -310
At location src/dfa.c:3226
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
new[len] = '\x00';

....
Skipping nonlast:Priority -310
At location src/dfa.c:3226
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
new[len] = '\x00';

....
Skipping nonlast:Priority -310
At location src/dfa.c:3226
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
new[len] = '\x00';

....
Skipping nonlast addifexit:Priority 4690
At location src/dfa.c:3226
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(new, len, cpp, i, j)))
    return 0;
new[len] = '\x00';

....
Skipping nonlast:Priority -309
At location src/dfa.c:3228
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
for (i = 0; cpp[i] != ((void *)0); ++i) 
    if (istrstr(cpp[i], new) != ((void *)0)) {
        free(new);
        return cpp;
    }

....
Skipping nonlast:Priority -309
At location src/dfa.c:3228
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
for (i = 0; cpp[i] != ((void *)0); ++i) 
    if (istrstr(cpp[i], new) != ((void *)0)) {
        free(new);
        return cpp;
    }

....
Skipping nonlast:Priority -309
At location src/dfa.c:3228
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
for (i = 0; cpp[i] != ((void *)0); ++i) 
    if (istrstr(cpp[i], new) != ((void *)0)) {
        free(new);
        return cpp;
    }

....
Skipping nonlast:Priority -309
At location src/dfa.c:3228
--Src File: src/dfa.c
Fragment 0:
if ((new = icpyalloc(new)) == ((void *)0)) {
    freelist(cpp);
    return ((void *)0);
}
for (i = 0; cpp[i] != ((void *)0); ++i) 
    if (istrstr(cpp[i], new) != ((void *)0)) {
        free(new);
        return cpp;
    }

....
Skipping nonlast:Priority -309
At location src/dfa.c:3228
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
for (i = 0; cpp[i] != ((void *)0); ++i) 
    if (istrstr(cpp[i], new) != ((void *)0)) {
        free(new);
        return cpp;
    }

....
Skipping nonlast:Priority -309
At location src/dfa.c:3228
--Src File: src/dfa.c
Fragment 0:
if (cpp == ((void *)0))
    return ((void *)0);
for (i = 0; cpp[i] != ((void *)0); ++i) 
    if (istrstr(cpp[i], new) != ((void *)0)) {
        free(new);
        return cpp;
    }

....
Skipping nonlast:Priority -309
At location src/dfa.c:3228
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
for (i = 0; cpp[i] != ((void *)0); ++i) 
    if (istrstr(cpp[i], new) != ((void *)0)) {
        free(new);
        return cpp;
    }

....
Skipping nonlast:Priority -309
At location src/dfa.c:3228
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
for (i = 0; cpp[i] != ((void *)0); ++i) 
    if (istrstr(cpp[i], new) != ((void *)0)) {
        free(new);
        return cpp;
    }

....
Skipping nonlast:Priority -309
At location src/dfa.c:3228
--Src File: src/dfa.c
Fragment 0:
if (istrstr(cpp[i], new) != ((void *)0)) {
    free(new);
    return cpp;
}
for (i = 0; cpp[i] != ((void *)0); ++i) 
    if (istrstr(cpp[i], new) != ((void *)0)) {
        free(new);
        return cpp;
    }

....
Skipping nonlast:Priority -309
At location src/dfa.c:3228
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
for (i = 0; cpp[i] != ((void *)0); ++i) 
    if (istrstr(cpp[i], new) != ((void *)0)) {
        free(new);
        return cpp;
    }

....
Skipping nonlast:Priority -309
At location src/dfa.c:3228
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
for (i = 0; cpp[i] != ((void *)0); ++i) 
    if (istrstr(cpp[i], new) != ((void *)0)) {
        free(new);
        return cpp;
    }

....
Skipping nonlast:Priority -309
At location src/dfa.c:3228
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
for (i = 0; cpp[i] != ((void *)0); ++i) 
    if (istrstr(cpp[i], new) != ((void *)0)) {
        free(new);
        return cpp;
    }

....
Skipping nonlast addifexit:Priority 4691
At location src/dfa.c:3228
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cpp, i, new, len, j)))
    return 0;
for (i = 0; cpp[i] != ((void *)0); ++i) 
    if (istrstr(cpp[i], new) != ((void *)0)) {
        free(new);
        return cpp;
    }

....
Skipping nonlast:Priority -308
At location src/dfa.c:3235
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
j = 0;

....
Skipping nonlast:Priority -308
At location src/dfa.c:3235
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
j = 0;

....
Skipping nonlast:Priority -308
At location src/dfa.c:3235
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
j = 0;

....
Skipping nonlast:Priority -308
At location src/dfa.c:3235
--Src File: src/dfa.c
Fragment 0:
if ((new = icpyalloc(new)) == ((void *)0)) {
    freelist(cpp);
    return ((void *)0);
}
j = 0;

....
Skipping nonlast:Priority -308
At location src/dfa.c:3235
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
j = 0;

....
Skipping nonlast:Priority -308
At location src/dfa.c:3235
--Src File: src/dfa.c
Fragment 0:
if (cpp == ((void *)0))
    return ((void *)0);
j = 0;

....
Skipping nonlast:Priority -308
At location src/dfa.c:3235
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
j = 0;

....
Skipping nonlast:Priority -308
At location src/dfa.c:3235
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
j = 0;

....
Skipping nonlast:Priority -308
At location src/dfa.c:3235
--Src File: src/dfa.c
Fragment 0:
if (istrstr(cpp[i], new) != ((void *)0)) {
    free(new);
    return cpp;
}
j = 0;

....
Skipping nonlast:Priority -308
At location src/dfa.c:3235
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
j = 0;

....
Skipping nonlast:Priority -308
At location src/dfa.c:3235
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
j = 0;

....
Skipping nonlast:Priority -308
At location src/dfa.c:3235
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
j = 0;

....
Skipping nonlast addifexit:Priority 4692
At location src/dfa.c:3235
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(j, cpp, new, i, len)))
    return 0;
j = 0;

....
Skipping nonlast:Priority -307
At location src/dfa.c:3236
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
while (cpp[j] != ((void *)0))
    if (istrstr(new, cpp[j]) == ((void *)0))
        ++j;
    else {
        free(cpp[j]);
        if (--i == j)
            break;
        cpp[j] = cpp[i];
        cpp[i] = ((void *)0);
    }

....
Skipping nonlast:Priority -307
At location src/dfa.c:3236
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
while (cpp[j] != ((void *)0))
    if (istrstr(new, cpp[j]) == ((void *)0))
        ++j;
    else {
        free(cpp[j]);
        if (--i == j)
            break;
        cpp[j] = cpp[i];
        cpp[i] = ((void *)0);
    }

....
Skipping nonlast:Priority -307
At location src/dfa.c:3236
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
while (cpp[j] != ((void *)0))
    if (istrstr(new, cpp[j]) == ((void *)0))
        ++j;
    else {
        free(cpp[j]);
        if (--i == j)
            break;
        cpp[j] = cpp[i];
        cpp[i] = ((void *)0);
    }

....
Skipping nonlast:Priority -307
At location src/dfa.c:3236
--Src File: src/dfa.c
Fragment 0:
if ((new = icpyalloc(new)) == ((void *)0)) {
    freelist(cpp);
    return ((void *)0);
}
while (cpp[j] != ((void *)0))
    if (istrstr(new, cpp[j]) == ((void *)0))
        ++j;
    else {
        free(cpp[j]);
        if (--i == j)
            break;
        cpp[j] = cpp[i];
        cpp[i] = ((void *)0);
    }

....
Skipping nonlast:Priority -307
At location src/dfa.c:3236
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
while (cpp[j] != ((void *)0))
    if (istrstr(new, cpp[j]) == ((void *)0))
        ++j;
    else {
        free(cpp[j]);
        if (--i == j)
            break;
        cpp[j] = cpp[i];
        cpp[i] = ((void *)0);
    }

....
Skipping nonlast:Priority -307
At location src/dfa.c:3236
--Src File: src/dfa.c
Fragment 0:
if (cpp == ((void *)0))
    return ((void *)0);
while (cpp[j] != ((void *)0))
    if (istrstr(new, cpp[j]) == ((void *)0))
        ++j;
    else {
        free(cpp[j]);
        if (--i == j)
            break;
        cpp[j] = cpp[i];
        cpp[i] = ((void *)0);
    }

....
Skipping nonlast:Priority -307
At location src/dfa.c:3236
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
while (cpp[j] != ((void *)0))
    if (istrstr(new, cpp[j]) == ((void *)0))
        ++j;
    else {
        free(cpp[j]);
        if (--i == j)
            break;
        cpp[j] = cpp[i];
        cpp[i] = ((void *)0);
    }

....
Skipping nonlast:Priority -307
At location src/dfa.c:3236
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
while (cpp[j] != ((void *)0))
    if (istrstr(new, cpp[j]) == ((void *)0))
        ++j;
    else {
        free(cpp[j]);
        if (--i == j)
            break;
        cpp[j] = cpp[i];
        cpp[i] = ((void *)0);
    }

....
Skipping nonlast:Priority -307
At location src/dfa.c:3236
--Src File: src/dfa.c
Fragment 0:
if (istrstr(cpp[i], new) != ((void *)0)) {
    free(new);
    return cpp;
}
while (cpp[j] != ((void *)0))
    if (istrstr(new, cpp[j]) == ((void *)0))
        ++j;
    else {
        free(cpp[j]);
        if (--i == j)
            break;
        cpp[j] = cpp[i];
        cpp[i] = ((void *)0);
    }

....
Skipping nonlast:Priority -307
At location src/dfa.c:3236
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
while (cpp[j] != ((void *)0))
    if (istrstr(new, cpp[j]) == ((void *)0))
        ++j;
    else {
        free(cpp[j]);
        if (--i == j)
            break;
        cpp[j] = cpp[i];
        cpp[i] = ((void *)0);
    }

....
Skipping nonlast:Priority -307
At location src/dfa.c:3236
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
while (cpp[j] != ((void *)0))
    if (istrstr(new, cpp[j]) == ((void *)0))
        ++j;
    else {
        free(cpp[j]);
        if (--i == j)
            break;
        cpp[j] = cpp[i];
        cpp[i] = ((void *)0);
    }

....
Skipping nonlast:Priority -307
At location src/dfa.c:3236
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
while (cpp[j] != ((void *)0))
    if (istrstr(new, cpp[j]) == ((void *)0))
        ++j;
    else {
        free(cpp[j]);
        if (--i == j)
            break;
        cpp[j] = cpp[i];
        cpp[i] = ((void *)0);
    }

....
Skipping nonlast addifexit:Priority 4693
At location src/dfa.c:3236
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cpp, j, new, i, len)))
    return 0;
while (cpp[j] != ((void *)0))
    if (istrstr(new, cpp[j]) == ((void *)0))
        ++j;
    else {
        free(cpp[j]);
        if (--i == j)
            break;
        cpp[j] = cpp[i];
        cpp[i] = ((void *)0);
    }

....
Skipping nonlast:Priority -306
At location src/dfa.c:3248
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
cpp = (char **)realloc((char *)cpp, (i + 2) * sizeof *cpp);

....
Skipping nonlast:Priority -306
At location src/dfa.c:3248
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
cpp = (char **)realloc((char *)cpp, (i + 2) * sizeof *cpp);

....
Skipping nonlast:Priority -306
At location src/dfa.c:3248
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
cpp = (char **)realloc((char *)cpp, (i + 2) * sizeof *cpp);

....
Skipping nonlast:Priority -306
At location src/dfa.c:3248
--Src File: src/dfa.c
Fragment 0:
if ((new = icpyalloc(new)) == ((void *)0)) {
    freelist(cpp);
    return ((void *)0);
}
cpp = (char **)realloc((char *)cpp, (i + 2) * sizeof *cpp);

....
Skipping nonlast:Priority -306
At location src/dfa.c:3248
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
cpp = (char **)realloc((char *)cpp, (i + 2) * sizeof *cpp);

....
Skipping nonlast:Priority -306
At location src/dfa.c:3248
--Src File: src/dfa.c
Fragment 0:
if (cpp == ((void *)0))
    return ((void *)0);
cpp = (char **)realloc((char *)cpp, (i + 2) * sizeof *cpp);

....
Skipping nonlast:Priority -306
At location src/dfa.c:3248
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
cpp = (char **)realloc((char *)cpp, (i + 2) * sizeof *cpp);

....
Skipping nonlast:Priority -306
At location src/dfa.c:3248
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
cpp = (char **)realloc((char *)cpp, (i + 2) * sizeof *cpp);

....
Skipping nonlast:Priority -306
At location src/dfa.c:3248
--Src File: src/dfa.c
Fragment 0:
if (istrstr(cpp[i], new) != ((void *)0)) {
    free(new);
    return cpp;
}
cpp = (char **)realloc((char *)cpp, (i + 2) * sizeof *cpp);

....
Skipping nonlast:Priority -306
At location src/dfa.c:3248
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
cpp = (char **)realloc((char *)cpp, (i + 2) * sizeof *cpp);

....
Skipping nonlast:Priority -306
At location src/dfa.c:3248
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
cpp = (char **)realloc((char *)cpp, (i + 2) * sizeof *cpp);

....
Skipping nonlast:Priority -306
At location src/dfa.c:3248
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
cpp = (char **)realloc((char *)cpp, (i + 2) * sizeof *cpp);

....
Skipping nonlast addifexit:Priority 4694
At location src/dfa.c:3248
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cpp, i, new, j, len)))
    return 0;
cpp = (char **)realloc((char *)cpp, (i + 2) * sizeof *cpp);

....
Skipping nonlast:Priority -305
At location src/dfa.c:3249
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (cpp == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority -305
At location src/dfa.c:3249
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (cpp == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority -305
At location src/dfa.c:3249
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
if (cpp == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority -305
At location src/dfa.c:3249
--Src File: src/dfa.c
Fragment 0:
if ((new = icpyalloc(new)) == ((void *)0)) {
    freelist(cpp);
    return ((void *)0);
}
if (cpp == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority -305
At location src/dfa.c:3249
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
if (cpp == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority -305
At location src/dfa.c:3249
--Src File: src/dfa.c
Fragment 0:
if (cpp == ((void *)0))
    return ((void *)0);
if (cpp == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority -305
At location src/dfa.c:3249
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
if (cpp == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority -305
At location src/dfa.c:3249
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
if (cpp == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority -305
At location src/dfa.c:3249
--Src File: src/dfa.c
Fragment 0:
if (istrstr(cpp[i], new) != ((void *)0)) {
    free(new);
    return cpp;
}
if (cpp == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority -305
At location src/dfa.c:3249
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (cpp == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority -305
At location src/dfa.c:3249
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (cpp == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority -305
At location src/dfa.c:3249
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (cpp == ((void *)0))
    return ((void *)0);

....
Skipping nonlast addifexit:Priority 3445
At location src/dfa.c:3249
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cpp, i, new, j, len)))
    return 0;
if (cpp == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority -304
At location src/dfa.c:3251
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
cpp[i] = new;

....
Skipping nonlast:Priority -304
At location src/dfa.c:3251
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
cpp[i] = new;

....
Skipping nonlast:Priority -304
At location src/dfa.c:3251
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
cpp[i] = new;

....
Skipping nonlast:Priority -304
At location src/dfa.c:3251
--Src File: src/dfa.c
Fragment 0:
if ((new = icpyalloc(new)) == ((void *)0)) {
    freelist(cpp);
    return ((void *)0);
}
cpp[i] = new;

....
Skipping nonlast:Priority -304
At location src/dfa.c:3251
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
cpp[i] = new;

....
Skipping nonlast:Priority -304
At location src/dfa.c:3251
--Src File: src/dfa.c
Fragment 0:
if (cpp == ((void *)0))
    return ((void *)0);
cpp[i] = new;

....
Skipping nonlast:Priority -304
At location src/dfa.c:3251
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
cpp[i] = new;

....
Skipping nonlast:Priority -304
At location src/dfa.c:3251
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
cpp[i] = new;

....
Skipping nonlast:Priority -304
At location src/dfa.c:3251
--Src File: src/dfa.c
Fragment 0:
if (istrstr(cpp[i], new) != ((void *)0)) {
    free(new);
    return cpp;
}
cpp[i] = new;

....
Skipping nonlast:Priority -304
At location src/dfa.c:3251
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
cpp[i] = new;

....
Skipping nonlast:Priority -304
At location src/dfa.c:3251
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
cpp[i] = new;

....
Skipping nonlast:Priority -304
At location src/dfa.c:3251
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
cpp[i] = new;

....
Skipping nonlast addifexit:Priority 4696
At location src/dfa.c:3251
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cpp, new, i, j, len)))
    return 0;
cpp[i] = new;

....
Skipping nonlast:Priority -303
At location src/dfa.c:3252
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
cpp[i + 1] = ((void *)0);

....
Skipping nonlast:Priority -303
At location src/dfa.c:3252
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
cpp[i + 1] = ((void *)0);

....
Skipping nonlast:Priority -303
At location src/dfa.c:3252
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
cpp[i + 1] = ((void *)0);

....
Skipping nonlast:Priority -303
At location src/dfa.c:3252
--Src File: src/dfa.c
Fragment 0:
if ((new = icpyalloc(new)) == ((void *)0)) {
    freelist(cpp);
    return ((void *)0);
}
cpp[i + 1] = ((void *)0);

....
Skipping nonlast:Priority -303
At location src/dfa.c:3252
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
cpp[i + 1] = ((void *)0);

....
Skipping nonlast:Priority -303
At location src/dfa.c:3252
--Src File: src/dfa.c
Fragment 0:
if (cpp == ((void *)0))
    return ((void *)0);
cpp[i + 1] = ((void *)0);

....
Skipping nonlast:Priority -303
At location src/dfa.c:3252
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
cpp[i + 1] = ((void *)0);

....
Skipping nonlast:Priority -303
At location src/dfa.c:3252
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
cpp[i + 1] = ((void *)0);

....
Skipping nonlast:Priority -303
At location src/dfa.c:3252
--Src File: src/dfa.c
Fragment 0:
if (istrstr(cpp[i], new) != ((void *)0)) {
    free(new);
    return cpp;
}
cpp[i + 1] = ((void *)0);

....
Skipping nonlast:Priority -303
At location src/dfa.c:3252
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
cpp[i + 1] = ((void *)0);

....
Skipping nonlast:Priority -303
At location src/dfa.c:3252
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
cpp[i + 1] = ((void *)0);

....
Skipping nonlast:Priority -303
At location src/dfa.c:3252
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
cpp[i + 1] = ((void *)0);

....
Skipping nonlast addifexit:Priority 4697
At location src/dfa.c:3252
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cpp, i, new, j, len)))
    return 0;
cpp[i + 1] = ((void *)0);

....
Skipping returnreturn addifexit:Priority 4698
At location src/dfa.c:3253
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cpp, i, new, j, len)))
    return 0;
return cpp;

....
Skipping nonlast:Priority -110
At location src/dfa.c:3262
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
char **cpp;

....
Skipping nonlast:Priority -110
At location src/dfa.c:3262
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
char **cpp;

....
Skipping nonlast:Priority -110
At location src/dfa.c:3262
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
char **cpp;

....
Skipping nonlast:Priority -110
At location src/dfa.c:3262
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
char **cpp;

....
Skipping nonlast:Priority -110
At location src/dfa.c:3262
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
char **cpp;

....
Skipping nonlast:Priority -110
At location src/dfa.c:3262
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
char **cpp;

....
Skipping nonlast:Priority -110
At location src/dfa.c:3262
--Src File: src/dfa.c
Fragment 0:
if (left == ((void *)0) || right == ((void *)0))
    return ((void *)0);
char **cpp;

....
Skipping nonlast:Priority -110
At location src/dfa.c:3262
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
char **cpp;

....
Skipping nonlast:Priority -110
At location src/dfa.c:3262
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
char **cpp;

....
Skipping nonlast:Priority -110
At location src/dfa.c:3262
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
char **cpp;

....
Skipping nonlast addifexit:Priority 4890
At location src/dfa.c:3262
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(left, right)))
    return 0;
char **cpp;

....
Skipping nonlast:Priority -109
At location src/dfa.c:3263
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
char *lcp;

....
Skipping nonlast:Priority -109
At location src/dfa.c:3263
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
char *lcp;

....
Skipping nonlast:Priority -109
At location src/dfa.c:3263
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
char *lcp;

....
Skipping nonlast:Priority -109
At location src/dfa.c:3263
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
char *lcp;

....
Skipping nonlast:Priority -109
At location src/dfa.c:3263
--Src File: src/dfa.c
Fragment 0:
if (cpp == ((void *)0))
    return ((void *)0);
char *lcp;

....
Skipping nonlast:Priority -109
At location src/dfa.c:3263
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
char *lcp;

....
Skipping nonlast:Priority -109
At location src/dfa.c:3263
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
char *lcp;

....
Skipping nonlast:Priority -109
At location src/dfa.c:3263
--Src File: src/dfa.c
Fragment 0:
if (left == ((void *)0) || right == ((void *)0))
    return ((void *)0);
char *lcp;

....
Skipping nonlast:Priority -109
At location src/dfa.c:3263
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
char *lcp;

....
Skipping nonlast:Priority -109
At location src/dfa.c:3263
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
char *lcp;

....
Skipping nonlast:Priority -109
At location src/dfa.c:3263
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
char *lcp;

....
Skipping nonlast addifexit:Priority 4891
At location src/dfa.c:3263
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(left, right, cpp)))
    return 0;
char *lcp;

....
Skipping nonlast:Priority -108
At location src/dfa.c:3264
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
char *rcp;

....
Skipping nonlast:Priority -108
At location src/dfa.c:3264
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
char *rcp;

....
Skipping nonlast:Priority -108
At location src/dfa.c:3264
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
char *rcp;

....
Skipping nonlast:Priority -108
At location src/dfa.c:3264
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
char *rcp;

....
Skipping nonlast:Priority -108
At location src/dfa.c:3264
--Src File: src/dfa.c
Fragment 0:
if (cpp == ((void *)0))
    return ((void *)0);
char *rcp;

....
Skipping nonlast:Priority -108
At location src/dfa.c:3264
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
char *rcp;

....
Skipping nonlast:Priority -108
At location src/dfa.c:3264
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
char *rcp;

....
Skipping nonlast:Priority -108
At location src/dfa.c:3264
--Src File: src/dfa.c
Fragment 0:
if (left == ((void *)0) || right == ((void *)0))
    return ((void *)0);
char *rcp;

....
Skipping nonlast:Priority -108
At location src/dfa.c:3264
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
char *rcp;

....
Skipping nonlast:Priority -108
At location src/dfa.c:3264
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
char *rcp;

....
Skipping nonlast:Priority -108
At location src/dfa.c:3264
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
char *rcp;

....
Skipping nonlast addifexit:Priority 4892
At location src/dfa.c:3264
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(left, right, cpp, lcp)))
    return 0;
char *rcp;

....
Skipping nonlast:Priority -107
At location src/dfa.c:3265
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
size_t i, len;

....
Skipping nonlast:Priority -107
At location src/dfa.c:3265
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
size_t i, len;

....
Skipping nonlast:Priority -107
At location src/dfa.c:3265
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
size_t i, len;

....
Skipping nonlast:Priority -107
At location src/dfa.c:3265
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
size_t i, len;

....
Skipping nonlast:Priority -107
At location src/dfa.c:3265
--Src File: src/dfa.c
Fragment 0:
if (cpp == ((void *)0))
    return ((void *)0);
size_t i, len;

....
Skipping nonlast:Priority -107
At location src/dfa.c:3265
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
size_t i, len;

....
Skipping nonlast:Priority -107
At location src/dfa.c:3265
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
size_t i, len;

....
Skipping nonlast:Priority -107
At location src/dfa.c:3265
--Src File: src/dfa.c
Fragment 0:
if (left == ((void *)0) || right == ((void *)0))
    return ((void *)0);
size_t i, len;

....
Skipping nonlast:Priority -107
At location src/dfa.c:3265
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
size_t i, len;

....
Skipping nonlast:Priority -107
At location src/dfa.c:3265
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
size_t i, len;

....
Skipping nonlast:Priority -107
At location src/dfa.c:3265
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
size_t i, len;

....
Skipping nonlast addifexit:Priority 4893
At location src/dfa.c:3265
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(left, right, cpp, lcp, rcp)))
    return 0;
size_t i, len;

....
Skipping nonlast:Priority 7394
At location src/dfa.c:3267
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (left == ((void *)0) || right == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority 7394
At location src/dfa.c:3267
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (left == ((void *)0) || right == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority 7394
At location src/dfa.c:3267
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
if (left == ((void *)0) || right == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority 7394
At location src/dfa.c:3267
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
if (left == ((void *)0) || right == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority 7394
At location src/dfa.c:3267
--Src File: src/dfa.c
Fragment 0:
if (cpp == ((void *)0))
    return ((void *)0);
if (left == ((void *)0) || right == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority 7394
At location src/dfa.c:3267
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
if (left == ((void *)0) || right == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority 7394
At location src/dfa.c:3267
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
if (left == ((void *)0) || right == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority 7394
At location src/dfa.c:3267
--Src File: src/dfa.c
Fragment 0:
if (left == ((void *)0) || right == ((void *)0))
    return ((void *)0);
if (left == ((void *)0) || right == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority 7394
At location src/dfa.c:3267
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (left == ((void *)0) || right == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority 7394
At location src/dfa.c:3267
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (left == ((void *)0) || right == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority 7394
At location src/dfa.c:3267
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (left == ((void *)0) || right == ((void *)0))
    return ((void *)0);

....
Skipping nonlast addifexit:Priority 11144
At location src/dfa.c:3267
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(left, right, cpp, lcp, len, rcp, i)))
    return 0;
if (left == ((void *)0) || right == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority -105
At location src/dfa.c:3269
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
cpp = (char **)malloc(sizeof *cpp);

....
Skipping nonlast:Priority -105
At location src/dfa.c:3269
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
cpp = (char **)malloc(sizeof *cpp);

....
Skipping nonlast:Priority -105
At location src/dfa.c:3269
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
cpp = (char **)malloc(sizeof *cpp);

....
Skipping nonlast:Priority -105
At location src/dfa.c:3269
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
cpp = (char **)malloc(sizeof *cpp);

....
Skipping nonlast:Priority -105
At location src/dfa.c:3269
--Src File: src/dfa.c
Fragment 0:
if (cpp == ((void *)0))
    return ((void *)0);
cpp = (char **)malloc(sizeof *cpp);

....
Skipping nonlast:Priority -105
At location src/dfa.c:3269
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
cpp = (char **)malloc(sizeof *cpp);

....
Skipping nonlast:Priority -105
At location src/dfa.c:3269
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
cpp = (char **)malloc(sizeof *cpp);

....
Skipping nonlast:Priority -105
At location src/dfa.c:3269
--Src File: src/dfa.c
Fragment 0:
if (left == ((void *)0) || right == ((void *)0))
    return ((void *)0);
cpp = (char **)malloc(sizeof *cpp);

....
Skipping nonlast:Priority -105
At location src/dfa.c:3269
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
cpp = (char **)malloc(sizeof *cpp);

....
Skipping nonlast:Priority -105
At location src/dfa.c:3269
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
cpp = (char **)malloc(sizeof *cpp);

....
Skipping nonlast:Priority -105
At location src/dfa.c:3269
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
cpp = (char **)malloc(sizeof *cpp);

....
Skipping nonlast addifexit:Priority 4895
At location src/dfa.c:3269
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cpp, left, right, lcp, len, rcp, i)))
    return 0;
cpp = (char **)malloc(sizeof *cpp);

....
Skipping nonlast:Priority -104
At location src/dfa.c:3270
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (cpp == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority -104
At location src/dfa.c:3270
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (cpp == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority -104
At location src/dfa.c:3270
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
if (cpp == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority -104
At location src/dfa.c:3270
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
if (cpp == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority -104
At location src/dfa.c:3270
--Src File: src/dfa.c
Fragment 0:
if (cpp == ((void *)0))
    return ((void *)0);
if (cpp == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority -104
At location src/dfa.c:3270
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
if (cpp == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority -104
At location src/dfa.c:3270
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
if (cpp == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority -104
At location src/dfa.c:3270
--Src File: src/dfa.c
Fragment 0:
if (left == ((void *)0) || right == ((void *)0))
    return ((void *)0);
if (cpp == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority -104
At location src/dfa.c:3270
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (cpp == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority -104
At location src/dfa.c:3270
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (cpp == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority -104
At location src/dfa.c:3270
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (cpp == ((void *)0))
    return ((void *)0);

....
Skipping nonlast addifexit:Priority 3646
At location src/dfa.c:3270
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cpp, left, right, lcp, len, rcp, i)))
    return 0;
if (cpp == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority -103
At location src/dfa.c:3272
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
cpp[0] = ((void *)0);

....
Skipping nonlast:Priority -103
At location src/dfa.c:3272
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
cpp[0] = ((void *)0);

....
Skipping nonlast:Priority -103
At location src/dfa.c:3272
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
cpp[0] = ((void *)0);

....
Skipping nonlast:Priority -103
At location src/dfa.c:3272
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
cpp[0] = ((void *)0);

....
Skipping nonlast:Priority -103
At location src/dfa.c:3272
--Src File: src/dfa.c
Fragment 0:
if (cpp == ((void *)0))
    return ((void *)0);
cpp[0] = ((void *)0);

....
Skipping nonlast:Priority -103
At location src/dfa.c:3272
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
cpp[0] = ((void *)0);

....
Skipping nonlast:Priority -103
At location src/dfa.c:3272
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
cpp[0] = ((void *)0);

....
Skipping nonlast:Priority -103
At location src/dfa.c:3272
--Src File: src/dfa.c
Fragment 0:
if (left == ((void *)0) || right == ((void *)0))
    return ((void *)0);
cpp[0] = ((void *)0);

....
Skipping nonlast:Priority -103
At location src/dfa.c:3272
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
cpp[0] = ((void *)0);

....
Skipping nonlast:Priority -103
At location src/dfa.c:3272
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
cpp[0] = ((void *)0);

....
Skipping nonlast:Priority -103
At location src/dfa.c:3272
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
cpp[0] = ((void *)0);

....
Skipping nonlast addifexit:Priority 4897
At location src/dfa.c:3272
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cpp, left, lcp, len, right, rcp, i)))
    return 0;
cpp[0] = ((void *)0);

....
Skipping nonlast:Priority -102
At location src/dfa.c:3273
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
for (lcp = left; *lcp != '\x00'; ++lcp) {
    len = 0;
    rcp = (__extension__ (__builtin_constant_p(*lcp) && !__builtin_constant_p(right) && (*lcp) == '\x00' ? (char *)__rawmemchr(right, *lcp) : __builtin_strchr(right, *lcp)));
    while (rcp != ((void *)0))
        {
            for (i = 1; lcp[i] != '\x00' && lcp[i] == rcp[i]; ++i) 
                continue;
            if (i > len)
                len = i;
            rcp = (__extension__ (__builtin_constant_p(*lcp) && !__builtin_constant_p(rcp + 1) && (*lcp) == '\x00' ? (char *)__rawmemchr(rcp + 1, *lcp) : __builtin_strchr(rcp + 1, *lcp)));
        }
    if (len == 0)
        continue;
    if ((cpp = enlist(cpp, lcp, len)) == ((void *)0))
        break;
}

....
Skipping nonlast:Priority -102
At location src/dfa.c:3273
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
for (lcp = left; *lcp != '\x00'; ++lcp) {
    len = 0;
    rcp = (__extension__ (__builtin_constant_p(*lcp) && !__builtin_constant_p(right) && (*lcp) == '\x00' ? (char *)__rawmemchr(right, *lcp) : __builtin_strchr(right, *lcp)));
    while (rcp != ((void *)0))
        {
            for (i = 1; lcp[i] != '\x00' && lcp[i] == rcp[i]; ++i) 
                continue;
            if (i > len)
                len = i;
            rcp = (__extension__ (__builtin_constant_p(*lcp) && !__builtin_constant_p(rcp + 1) && (*lcp) == '\x00' ? (char *)__rawmemchr(rcp + 1, *lcp) : __builtin_strchr(rcp + 1, *lcp)));
        }
    if (len == 0)
        continue;
    if ((cpp = enlist(cpp, lcp, len)) == ((void *)0))
        break;
}

....
Skipping nonlast:Priority -102
At location src/dfa.c:3273
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
for (lcp = left; *lcp != '\x00'; ++lcp) {
    len = 0;
    rcp = (__extension__ (__builtin_constant_p(*lcp) && !__builtin_constant_p(right) && (*lcp) == '\x00' ? (char *)__rawmemchr(right, *lcp) : __builtin_strchr(right, *lcp)));
    while (rcp != ((void *)0))
        {
            for (i = 1; lcp[i] != '\x00' && lcp[i] == rcp[i]; ++i) 
                continue;
            if (i > len)
                len = i;
            rcp = (__extension__ (__builtin_constant_p(*lcp) && !__builtin_constant_p(rcp + 1) && (*lcp) == '\x00' ? (char *)__rawmemchr(rcp + 1, *lcp) : __builtin_strchr(rcp + 1, *lcp)));
        }
    if (len == 0)
        continue;
    if ((cpp = enlist(cpp, lcp, len)) == ((void *)0))
        break;
}

....
Skipping nonlast:Priority -102
At location src/dfa.c:3273
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
for (lcp = left; *lcp != '\x00'; ++lcp) {
    len = 0;
    rcp = (__extension__ (__builtin_constant_p(*lcp) && !__builtin_constant_p(right) && (*lcp) == '\x00' ? (char *)__rawmemchr(right, *lcp) : __builtin_strchr(right, *lcp)));
    while (rcp != ((void *)0))
        {
            for (i = 1; lcp[i] != '\x00' && lcp[i] == rcp[i]; ++i) 
                continue;
            if (i > len)
                len = i;
            rcp = (__extension__ (__builtin_constant_p(*lcp) && !__builtin_constant_p(rcp + 1) && (*lcp) == '\x00' ? (char *)__rawmemchr(rcp + 1, *lcp) : __builtin_strchr(rcp + 1, *lcp)));
        }
    if (len == 0)
        continue;
    if ((cpp = enlist(cpp, lcp, len)) == ((void *)0))
        break;
}

....
Skipping nonlast:Priority -102
At location src/dfa.c:3273
--Src File: src/dfa.c
Fragment 0:
if (cpp == ((void *)0))
    return ((void *)0);
for (lcp = left; *lcp != '\x00'; ++lcp) {
    len = 0;
    rcp = (__extension__ (__builtin_constant_p(*lcp) && !__builtin_constant_p(right) && (*lcp) == '\x00' ? (char *)__rawmemchr(right, *lcp) : __builtin_strchr(right, *lcp)));
    while (rcp != ((void *)0))
        {
            for (i = 1; lcp[i] != '\x00' && lcp[i] == rcp[i]; ++i) 
                continue;
            if (i > len)
                len = i;
            rcp = (__extension__ (__builtin_constant_p(*lcp) && !__builtin_constant_p(rcp + 1) && (*lcp) == '\x00' ? (char *)__rawmemchr(rcp + 1, *lcp) : __builtin_strchr(rcp + 1, *lcp)));
        }
    if (len == 0)
        continue;
    if ((cpp = enlist(cpp, lcp, len)) == ((void *)0))
        break;
}

....
Skipping nonlast:Priority -102
At location src/dfa.c:3273
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
for (lcp = left; *lcp != '\x00'; ++lcp) {
    len = 0;
    rcp = (__extension__ (__builtin_constant_p(*lcp) && !__builtin_constant_p(right) && (*lcp) == '\x00' ? (char *)__rawmemchr(right, *lcp) : __builtin_strchr(right, *lcp)));
    while (rcp != ((void *)0))
        {
            for (i = 1; lcp[i] != '\x00' && lcp[i] == rcp[i]; ++i) 
                continue;
            if (i > len)
                len = i;
            rcp = (__extension__ (__builtin_constant_p(*lcp) && !__builtin_constant_p(rcp + 1) && (*lcp) == '\x00' ? (char *)__rawmemchr(rcp + 1, *lcp) : __builtin_strchr(rcp + 1, *lcp)));
        }
    if (len == 0)
        continue;
    if ((cpp = enlist(cpp, lcp, len)) == ((void *)0))
        break;
}

....
Skipping nonlast:Priority -102
At location src/dfa.c:3273
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
for (lcp = left; *lcp != '\x00'; ++lcp) {
    len = 0;
    rcp = (__extension__ (__builtin_constant_p(*lcp) && !__builtin_constant_p(right) && (*lcp) == '\x00' ? (char *)__rawmemchr(right, *lcp) : __builtin_strchr(right, *lcp)));
    while (rcp != ((void *)0))
        {
            for (i = 1; lcp[i] != '\x00' && lcp[i] == rcp[i]; ++i) 
                continue;
            if (i > len)
                len = i;
            rcp = (__extension__ (__builtin_constant_p(*lcp) && !__builtin_constant_p(rcp + 1) && (*lcp) == '\x00' ? (char *)__rawmemchr(rcp + 1, *lcp) : __builtin_strchr(rcp + 1, *lcp)));
        }
    if (len == 0)
        continue;
    if ((cpp = enlist(cpp, lcp, len)) == ((void *)0))
        break;
}

....
Skipping nonlast:Priority -102
At location src/dfa.c:3273
--Src File: src/dfa.c
Fragment 0:
if (left == ((void *)0) || right == ((void *)0))
    return ((void *)0);
for (lcp = left; *lcp != '\x00'; ++lcp) {
    len = 0;
    rcp = (__extension__ (__builtin_constant_p(*lcp) && !__builtin_constant_p(right) && (*lcp) == '\x00' ? (char *)__rawmemchr(right, *lcp) : __builtin_strchr(right, *lcp)));
    while (rcp != ((void *)0))
        {
            for (i = 1; lcp[i] != '\x00' && lcp[i] == rcp[i]; ++i) 
                continue;
            if (i > len)
                len = i;
            rcp = (__extension__ (__builtin_constant_p(*lcp) && !__builtin_constant_p(rcp + 1) && (*lcp) == '\x00' ? (char *)__rawmemchr(rcp + 1, *lcp) : __builtin_strchr(rcp + 1, *lcp)));
        }
    if (len == 0)
        continue;
    if ((cpp = enlist(cpp, lcp, len)) == ((void *)0))
        break;
}

....
Skipping nonlast:Priority -102
At location src/dfa.c:3273
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
for (lcp = left; *lcp != '\x00'; ++lcp) {
    len = 0;
    rcp = (__extension__ (__builtin_constant_p(*lcp) && !__builtin_constant_p(right) && (*lcp) == '\x00' ? (char *)__rawmemchr(right, *lcp) : __builtin_strchr(right, *lcp)));
    while (rcp != ((void *)0))
        {
            for (i = 1; lcp[i] != '\x00' && lcp[i] == rcp[i]; ++i) 
                continue;
            if (i > len)
                len = i;
            rcp = (__extension__ (__builtin_constant_p(*lcp) && !__builtin_constant_p(rcp + 1) && (*lcp) == '\x00' ? (char *)__rawmemchr(rcp + 1, *lcp) : __builtin_strchr(rcp + 1, *lcp)));
        }
    if (len == 0)
        continue;
    if ((cpp = enlist(cpp, lcp, len)) == ((void *)0))
        break;
}

....
Skipping nonlast:Priority -102
At location src/dfa.c:3273
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
for (lcp = left; *lcp != '\x00'; ++lcp) {
    len = 0;
    rcp = (__extension__ (__builtin_constant_p(*lcp) && !__builtin_constant_p(right) && (*lcp) == '\x00' ? (char *)__rawmemchr(right, *lcp) : __builtin_strchr(right, *lcp)));
    while (rcp != ((void *)0))
        {
            for (i = 1; lcp[i] != '\x00' && lcp[i] == rcp[i]; ++i) 
                continue;
            if (i > len)
                len = i;
            rcp = (__extension__ (__builtin_constant_p(*lcp) && !__builtin_constant_p(rcp + 1) && (*lcp) == '\x00' ? (char *)__rawmemchr(rcp + 1, *lcp) : __builtin_strchr(rcp + 1, *lcp)));
        }
    if (len == 0)
        continue;
    if ((cpp = enlist(cpp, lcp, len)) == ((void *)0))
        break;
}

....
Skipping nonlast:Priority -102
At location src/dfa.c:3273
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
for (lcp = left; *lcp != '\x00'; ++lcp) {
    len = 0;
    rcp = (__extension__ (__builtin_constant_p(*lcp) && !__builtin_constant_p(right) && (*lcp) == '\x00' ? (char *)__rawmemchr(right, *lcp) : __builtin_strchr(right, *lcp)));
    while (rcp != ((void *)0))
        {
            for (i = 1; lcp[i] != '\x00' && lcp[i] == rcp[i]; ++i) 
                continue;
            if (i > len)
                len = i;
            rcp = (__extension__ (__builtin_constant_p(*lcp) && !__builtin_constant_p(rcp + 1) && (*lcp) == '\x00' ? (char *)__rawmemchr(rcp + 1, *lcp) : __builtin_strchr(rcp + 1, *lcp)));
        }
    if (len == 0)
        continue;
    if ((cpp = enlist(cpp, lcp, len)) == ((void *)0))
        break;
}

....
Skipping nonlast addifexit:Priority 4898
At location src/dfa.c:3273
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(left, lcp, cpp, len, right, rcp, i)))
    return 0;
for (lcp = left; *lcp != '\x00'; ++lcp) {
    len = 0;
    rcp = (__extension__ (__builtin_constant_p(*lcp) && !__builtin_constant_p(right) && (*lcp) == '\x00' ? (char *)__rawmemchr(right, *lcp) : __builtin_strchr(right, *lcp)));
    while (rcp != ((void *)0))
        {
            for (i = 1; lcp[i] != '\x00' && lcp[i] == rcp[i]; ++i) 
                continue;
            if (i > len)
                len = i;
            rcp = (__extension__ (__builtin_constant_p(*lcp) && !__builtin_constant_p(rcp + 1) && (*lcp) == '\x00' ? (char *)__rawmemchr(rcp + 1, *lcp) : __builtin_strchr(rcp + 1, *lcp)));
        }
    if (len == 0)
        continue;
    if ((cpp = enlist(cpp, lcp, len)) == ((void *)0))
        break;
}

....
Skipping nonlast:Priority 4899
At location src/dfa.c:3275
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
len = 0;

....
Skipping nonlast:Priority 4899
At location src/dfa.c:3275
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
len = 0;

....
Skipping nonlast:Priority 4899
At location src/dfa.c:3275
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
len = 0;

....
Skipping nonlast:Priority 4899
At location src/dfa.c:3275
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
len = 0;

....
Skipping nonlast:Priority 4899
At location src/dfa.c:3275
--Src File: src/dfa.c
Fragment 0:
if (cpp == ((void *)0))
    return ((void *)0);
len = 0;

....
Skipping nonlast:Priority 4899
At location src/dfa.c:3275
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
len = 0;

....
Skipping nonlast:Priority 4899
At location src/dfa.c:3275
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
len = 0;

....
Skipping nonlast:Priority 4899
At location src/dfa.c:3275
--Src File: src/dfa.c
Fragment 0:
if (left == ((void *)0) || right == ((void *)0))
    return ((void *)0);
len = 0;

....
Skipping nonlast:Priority 4899
At location src/dfa.c:3275
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
len = 0;

....
Skipping nonlast:Priority 4899
At location src/dfa.c:3275
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
len = 0;

....
Skipping nonlast:Priority 4899
At location src/dfa.c:3275
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
len = 0;

....
Skipping nonlast addifexit:Priority 9899
At location src/dfa.c:3275
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(len, right, lcp, rcp, left, cpp, i)))
    return 0;
len = 0;

....
Skipping nonlast addifexit:Priority 9899
At location src/dfa.c:3275
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(len, right, lcp, rcp, left, cpp, i)))
    break;
len = 0;

....
Skipping nonlast:Priority -100
At location src/dfa.c:3276
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
rcp = (__extension__ (__builtin_constant_p(*lcp) && !__builtin_constant_p(right) && (*lcp) == '\x00' ? (char *)__rawmemchr(right, *lcp) : __builtin_strchr(right, *lcp)));

....
Skipping nonlast:Priority -100
At location src/dfa.c:3276
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
rcp = (__extension__ (__builtin_constant_p(*lcp) && !__builtin_constant_p(right) && (*lcp) == '\x00' ? (char *)__rawmemchr(right, *lcp) : __builtin_strchr(right, *lcp)));

....
Skipping nonlast:Priority -100
At location src/dfa.c:3276
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
rcp = (__extension__ (__builtin_constant_p(*lcp) && !__builtin_constant_p(right) && (*lcp) == '\x00' ? (char *)__rawmemchr(right, *lcp) : __builtin_strchr(right, *lcp)));

....
Skipping nonlast:Priority -100
At location src/dfa.c:3276
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
rcp = (__extension__ (__builtin_constant_p(*lcp) && !__builtin_constant_p(right) && (*lcp) == '\x00' ? (char *)__rawmemchr(right, *lcp) : __builtin_strchr(right, *lcp)));

....
Skipping nonlast:Priority -100
At location src/dfa.c:3276
--Src File: src/dfa.c
Fragment 0:
if (cpp == ((void *)0))
    return ((void *)0);
rcp = (__extension__ (__builtin_constant_p(*lcp) && !__builtin_constant_p(right) && (*lcp) == '\x00' ? (char *)__rawmemchr(right, *lcp) : __builtin_strchr(right, *lcp)));

....
Skipping nonlast:Priority -100
At location src/dfa.c:3276
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
rcp = (__extension__ (__builtin_constant_p(*lcp) && !__builtin_constant_p(right) && (*lcp) == '\x00' ? (char *)__rawmemchr(right, *lcp) : __builtin_strchr(right, *lcp)));

....
Skipping nonlast:Priority -100
At location src/dfa.c:3276
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
rcp = (__extension__ (__builtin_constant_p(*lcp) && !__builtin_constant_p(right) && (*lcp) == '\x00' ? (char *)__rawmemchr(right, *lcp) : __builtin_strchr(right, *lcp)));

....
Skipping nonlast:Priority -100
At location src/dfa.c:3276
--Src File: src/dfa.c
Fragment 0:
if (left == ((void *)0) || right == ((void *)0))
    return ((void *)0);
rcp = (__extension__ (__builtin_constant_p(*lcp) && !__builtin_constant_p(right) && (*lcp) == '\x00' ? (char *)__rawmemchr(right, *lcp) : __builtin_strchr(right, *lcp)));

....
Skipping nonlast:Priority -100
At location src/dfa.c:3276
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
rcp = (__extension__ (__builtin_constant_p(*lcp) && !__builtin_constant_p(right) && (*lcp) == '\x00' ? (char *)__rawmemchr(right, *lcp) : __builtin_strchr(right, *lcp)));

....
Skipping nonlast:Priority -100
At location src/dfa.c:3276
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
rcp = (__extension__ (__builtin_constant_p(*lcp) && !__builtin_constant_p(right) && (*lcp) == '\x00' ? (char *)__rawmemchr(right, *lcp) : __builtin_strchr(right, *lcp)));

....
Skipping nonlast:Priority -100
At location src/dfa.c:3276
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
rcp = (__extension__ (__builtin_constant_p(*lcp) && !__builtin_constant_p(right) && (*lcp) == '\x00' ? (char *)__rawmemchr(right, *lcp) : __builtin_strchr(right, *lcp)));

....
Skipping nonlast addifexit:Priority 4900
At location src/dfa.c:3276
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(right, lcp, rcp, len, left, i, cpp)))
    return 0;
rcp = (__extension__ (__builtin_constant_p(*lcp) && !__builtin_constant_p(right) && (*lcp) == '\x00' ? (char *)__rawmemchr(right, *lcp) : __builtin_strchr(right, *lcp)));

....
Skipping nonlast addifexit:Priority 4900
At location src/dfa.c:3276
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(right, lcp, rcp, len, left, i, cpp)))
    break;
rcp = (__extension__ (__builtin_constant_p(*lcp) && !__builtin_constant_p(right) && (*lcp) == '\x00' ? (char *)__rawmemchr(right, *lcp) : __builtin_strchr(right, *lcp)));

....
Skipping nonlast:Priority -99
At location src/dfa.c:3277
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
while (rcp != ((void *)0))
    {
        for (i = 1; lcp[i] != '\x00' && lcp[i] == rcp[i]; ++i) 
            continue;
        if (i > len)
            len = i;
        rcp = (__extension__ (__builtin_constant_p(*lcp) && !__builtin_constant_p(rcp + 1) && (*lcp) == '\x00' ? (char *)__rawmemchr(rcp + 1, *lcp) : __builtin_strchr(rcp + 1, *lcp)));
    }

....
Skipping nonlast:Priority -99
At location src/dfa.c:3277
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
while (rcp != ((void *)0))
    {
        for (i = 1; lcp[i] != '\x00' && lcp[i] == rcp[i]; ++i) 
            continue;
        if (i > len)
            len = i;
        rcp = (__extension__ (__builtin_constant_p(*lcp) && !__builtin_constant_p(rcp + 1) && (*lcp) == '\x00' ? (char *)__rawmemchr(rcp + 1, *lcp) : __builtin_strchr(rcp + 1, *lcp)));
    }

....
Skipping nonlast:Priority -99
At location src/dfa.c:3277
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
while (rcp != ((void *)0))
    {
        for (i = 1; lcp[i] != '\x00' && lcp[i] == rcp[i]; ++i) 
            continue;
        if (i > len)
            len = i;
        rcp = (__extension__ (__builtin_constant_p(*lcp) && !__builtin_constant_p(rcp + 1) && (*lcp) == '\x00' ? (char *)__rawmemchr(rcp + 1, *lcp) : __builtin_strchr(rcp + 1, *lcp)));
    }

....
Skipping nonlast:Priority -99
At location src/dfa.c:3277
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
while (rcp != ((void *)0))
    {
        for (i = 1; lcp[i] != '\x00' && lcp[i] == rcp[i]; ++i) 
            continue;
        if (i > len)
            len = i;
        rcp = (__extension__ (__builtin_constant_p(*lcp) && !__builtin_constant_p(rcp + 1) && (*lcp) == '\x00' ? (char *)__rawmemchr(rcp + 1, *lcp) : __builtin_strchr(rcp + 1, *lcp)));
    }

....
Skipping nonlast:Priority -99
At location src/dfa.c:3277
--Src File: src/dfa.c
Fragment 0:
if (cpp == ((void *)0))
    return ((void *)0);
while (rcp != ((void *)0))
    {
        for (i = 1; lcp[i] != '\x00' && lcp[i] == rcp[i]; ++i) 
            continue;
        if (i > len)
            len = i;
        rcp = (__extension__ (__builtin_constant_p(*lcp) && !__builtin_constant_p(rcp + 1) && (*lcp) == '\x00' ? (char *)__rawmemchr(rcp + 1, *lcp) : __builtin_strchr(rcp + 1, *lcp)));
    }

....
Skipping nonlast:Priority -99
At location src/dfa.c:3277
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
while (rcp != ((void *)0))
    {
        for (i = 1; lcp[i] != '\x00' && lcp[i] == rcp[i]; ++i) 
            continue;
        if (i > len)
            len = i;
        rcp = (__extension__ (__builtin_constant_p(*lcp) && !__builtin_constant_p(rcp + 1) && (*lcp) == '\x00' ? (char *)__rawmemchr(rcp + 1, *lcp) : __builtin_strchr(rcp + 1, *lcp)));
    }

....
Skipping nonlast:Priority -99
At location src/dfa.c:3277
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
while (rcp != ((void *)0))
    {
        for (i = 1; lcp[i] != '\x00' && lcp[i] == rcp[i]; ++i) 
            continue;
        if (i > len)
            len = i;
        rcp = (__extension__ (__builtin_constant_p(*lcp) && !__builtin_constant_p(rcp + 1) && (*lcp) == '\x00' ? (char *)__rawmemchr(rcp + 1, *lcp) : __builtin_strchr(rcp + 1, *lcp)));
    }

....
Skipping nonlast:Priority -99
At location src/dfa.c:3277
--Src File: src/dfa.c
Fragment 0:
if (left == ((void *)0) || right == ((void *)0))
    return ((void *)0);
while (rcp != ((void *)0))
    {
        for (i = 1; lcp[i] != '\x00' && lcp[i] == rcp[i]; ++i) 
            continue;
        if (i > len)
            len = i;
        rcp = (__extension__ (__builtin_constant_p(*lcp) && !__builtin_constant_p(rcp + 1) && (*lcp) == '\x00' ? (char *)__rawmemchr(rcp + 1, *lcp) : __builtin_strchr(rcp + 1, *lcp)));
    }

....
Skipping nonlast:Priority -99
At location src/dfa.c:3277
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
while (rcp != ((void *)0))
    {
        for (i = 1; lcp[i] != '\x00' && lcp[i] == rcp[i]; ++i) 
            continue;
        if (i > len)
            len = i;
        rcp = (__extension__ (__builtin_constant_p(*lcp) && !__builtin_constant_p(rcp + 1) && (*lcp) == '\x00' ? (char *)__rawmemchr(rcp + 1, *lcp) : __builtin_strchr(rcp + 1, *lcp)));
    }

....
Skipping nonlast:Priority -99
At location src/dfa.c:3277
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
while (rcp != ((void *)0))
    {
        for (i = 1; lcp[i] != '\x00' && lcp[i] == rcp[i]; ++i) 
            continue;
        if (i > len)
            len = i;
        rcp = (__extension__ (__builtin_constant_p(*lcp) && !__builtin_constant_p(rcp + 1) && (*lcp) == '\x00' ? (char *)__rawmemchr(rcp + 1, *lcp) : __builtin_strchr(rcp + 1, *lcp)));
    }

....
Skipping nonlast:Priority -99
At location src/dfa.c:3277
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
while (rcp != ((void *)0))
    {
        for (i = 1; lcp[i] != '\x00' && lcp[i] == rcp[i]; ++i) 
            continue;
        if (i > len)
            len = i;
        rcp = (__extension__ (__builtin_constant_p(*lcp) && !__builtin_constant_p(rcp + 1) && (*lcp) == '\x00' ? (char *)__rawmemchr(rcp + 1, *lcp) : __builtin_strchr(rcp + 1, *lcp)));
    }

....
Skipping nonlast addifexit:Priority 4901
At location src/dfa.c:3277
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(rcp, right, lcp, i, len, left, cpp)))
    return 0;
while (rcp != ((void *)0))
    {
        for (i = 1; lcp[i] != '\x00' && lcp[i] == rcp[i]; ++i) 
            continue;
        if (i > len)
            len = i;
        rcp = (__extension__ (__builtin_constant_p(*lcp) && !__builtin_constant_p(rcp + 1) && (*lcp) == '\x00' ? (char *)__rawmemchr(rcp + 1, *lcp) : __builtin_strchr(rcp + 1, *lcp)));
    }

....
Skipping nonlast addifexit:Priority 4901
At location src/dfa.c:3277
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(rcp, right, lcp, i, len, left, cpp)))
    break;
while (rcp != ((void *)0))
    {
        for (i = 1; lcp[i] != '\x00' && lcp[i] == rcp[i]; ++i) 
            continue;
        if (i > len)
            len = i;
        rcp = (__extension__ (__builtin_constant_p(*lcp) && !__builtin_constant_p(rcp + 1) && (*lcp) == '\x00' ? (char *)__rawmemchr(rcp + 1, *lcp) : __builtin_strchr(rcp + 1, *lcp)));
    }

....
Skipping nonlast:Priority -98
At location src/dfa.c:3285
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (len == 0)
    continue;

....
Skipping nonlast:Priority -98
At location src/dfa.c:3285
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (len == 0)
    continue;

....
Skipping nonlast:Priority -98
At location src/dfa.c:3285
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
if (len == 0)
    continue;

....
Skipping nonlast:Priority -98
At location src/dfa.c:3285
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
if (len == 0)
    continue;

....
Skipping nonlast:Priority -98
At location src/dfa.c:3285
--Src File: src/dfa.c
Fragment 0:
if (cpp == ((void *)0))
    return ((void *)0);
if (len == 0)
    continue;

....
Skipping nonlast:Priority -98
At location src/dfa.c:3285
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
if (len == 0)
    continue;

....
Skipping nonlast:Priority -98
At location src/dfa.c:3285
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
if (len == 0)
    continue;

....
Skipping nonlast:Priority -98
At location src/dfa.c:3285
--Src File: src/dfa.c
Fragment 0:
if (left == ((void *)0) || right == ((void *)0))
    return ((void *)0);
if (len == 0)
    continue;

....
Skipping nonlast:Priority -98
At location src/dfa.c:3285
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (len == 0)
    continue;

....
Skipping nonlast:Priority -98
At location src/dfa.c:3285
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (len == 0)
    continue;

....
Skipping nonlast:Priority -98
At location src/dfa.c:3285
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (len == 0)
    continue;

....
Skipping nonlast addifexit:Priority 3652
At location src/dfa.c:3285
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(len, cpp, lcp, rcp, i, right, left)))
    return 0;
if (len == 0)
    continue;

....
Skipping nonlast addifexit:Priority 3652
At location src/dfa.c:3285
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(len, cpp, lcp, rcp, i, right, left)))
    break;
if (len == 0)
    continue;

....
Skipping nonlast:Priority -97
At location src/dfa.c:3286
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    continue;
}

....
Skipping nonlast:Priority -97
At location src/dfa.c:3286
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    continue;
}

....
Skipping nonlast:Priority -97
At location src/dfa.c:3286
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        parse_bracket_exp_mb();
        return lasttok = MBCSET;
    }
    continue;
}

....
Skipping nonlast:Priority -97
At location src/dfa.c:3286
--Src File: src/dfa.c
Fragment 0:
{
    if (0 != 0)
        dfaerror(0);
    else
        return lasttok = END;
    continue;
}

....
Skipping nonlast:Priority -97
At location src/dfa.c:3286
--Src File: src/dfa.c
Fragment 0:
{
    if (cpp == ((void *)0))
        return ((void *)0);
    continue;
}

....
Skipping nonlast:Priority -97
At location src/dfa.c:3286
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
    else
        return lasttok = END;
    continue;
}

....
Skipping nonlast:Priority -97
At location src/dfa.c:3286
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
    else
        return lasttok = END;
    continue;
}

....
Skipping nonlast:Priority -97
At location src/dfa.c:3286
--Src File: src/dfa.c
Fragment 0:
{
    if (left == ((void *)0) || right == ((void *)0))
        return ((void *)0);
    continue;
}

....
Skipping nonlast:Priority -97
At location src/dfa.c:3286
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    continue;
}

....
Skipping nonlast:Priority -97
At location src/dfa.c:3286
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    continue;
}

....
Skipping nonlast:Priority -97
At location src/dfa.c:3286
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    continue;
}

....
Skipping nonlast addifexit:Priority 4903
At location src/dfa.c:3286
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(cpp, lcp, len, rcp, i, right, left)))
        return 0;
    continue;
}

....
Skipping nonlast addifexit:Priority 4903
At location src/dfa.c:3286
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(cpp, lcp, len, rcp, i, right, left)))
        break;
    continue;
}

....
Skipping returnreturn addifexit:Priority 4904
At location src/dfa.c:3290
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(cpp, lcp, len, rcp, i, right, left)))
    return 0;
return cpp;

....
Skipping nonlast:Priority -289
At location src/dfa.c:3296
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int i;

....
Skipping nonlast:Priority -289
At location src/dfa.c:3296
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int i;

....
Skipping nonlast:Priority -289
At location src/dfa.c:3296
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
int i;

....
Skipping nonlast:Priority -289
At location src/dfa.c:3296
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
int i;

....
Skipping nonlast:Priority -289
At location src/dfa.c:3296
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
int i;

....
Skipping nonlast:Priority -289
At location src/dfa.c:3296
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
int i;

....
Skipping nonlast:Priority -289
At location src/dfa.c:3296
--Src File: src/dfa.c
Fragment 0:
if (old == ((void *)0) || new == ((void *)0))
    return ((void *)0);
int i;

....
Skipping nonlast:Priority -289
At location src/dfa.c:3296
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int i;

....
Skipping nonlast:Priority -289
At location src/dfa.c:3296
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int i;

....
Skipping nonlast:Priority -289
At location src/dfa.c:3296
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int i;

....
Skipping nonlast addifexit:Priority 4711
At location src/dfa.c:3296
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(old, new)))
    return 0;
int i;

....
Skipping nonlast:Priority 7212
At location src/dfa.c:3298
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (old == ((void *)0) || new == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority 7212
At location src/dfa.c:3298
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (old == ((void *)0) || new == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority 7212
At location src/dfa.c:3298
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
if (old == ((void *)0) || new == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority 7212
At location src/dfa.c:3298
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
if (old == ((void *)0) || new == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority 7212
At location src/dfa.c:3298
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
if (old == ((void *)0) || new == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority 7212
At location src/dfa.c:3298
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
if (old == ((void *)0) || new == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority 7212
At location src/dfa.c:3298
--Src File: src/dfa.c
Fragment 0:
if (old == ((void *)0) || new == ((void *)0))
    return ((void *)0);
if (old == ((void *)0) || new == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority 7212
At location src/dfa.c:3298
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (old == ((void *)0) || new == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority 7212
At location src/dfa.c:3298
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (old == ((void *)0) || new == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority 7212
At location src/dfa.c:3298
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (old == ((void *)0) || new == ((void *)0))
    return ((void *)0);

....
Skipping nonlast addifexit:Priority 10962
At location src/dfa.c:3298
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(old, new, i)))
    return 0;
if (old == ((void *)0) || new == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority -287
At location src/dfa.c:3300
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
for (i = 0; new[i] != ((void *)0); ++i) {
    old = enlist(old, new[i], strlen(new[i]));
    if (old == ((void *)0))
        break;
}

....
Skipping nonlast:Priority -287
At location src/dfa.c:3300
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
for (i = 0; new[i] != ((void *)0); ++i) {
    old = enlist(old, new[i], strlen(new[i]));
    if (old == ((void *)0))
        break;
}

....
Skipping nonlast:Priority -287
At location src/dfa.c:3300
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
for (i = 0; new[i] != ((void *)0); ++i) {
    old = enlist(old, new[i], strlen(new[i]));
    if (old == ((void *)0))
        break;
}

....
Skipping nonlast:Priority -287
At location src/dfa.c:3300
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
for (i = 0; new[i] != ((void *)0); ++i) {
    old = enlist(old, new[i], strlen(new[i]));
    if (old == ((void *)0))
        break;
}

....
Skipping nonlast:Priority -287
At location src/dfa.c:3300
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
for (i = 0; new[i] != ((void *)0); ++i) {
    old = enlist(old, new[i], strlen(new[i]));
    if (old == ((void *)0))
        break;
}

....
Skipping nonlast:Priority -287
At location src/dfa.c:3300
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
for (i = 0; new[i] != ((void *)0); ++i) {
    old = enlist(old, new[i], strlen(new[i]));
    if (old == ((void *)0))
        break;
}

....
Skipping nonlast:Priority -287
At location src/dfa.c:3300
--Src File: src/dfa.c
Fragment 0:
if (old == ((void *)0) || new == ((void *)0))
    return ((void *)0);
for (i = 0; new[i] != ((void *)0); ++i) {
    old = enlist(old, new[i], strlen(new[i]));
    if (old == ((void *)0))
        break;
}

....
Skipping nonlast:Priority -287
At location src/dfa.c:3300
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
for (i = 0; new[i] != ((void *)0); ++i) {
    old = enlist(old, new[i], strlen(new[i]));
    if (old == ((void *)0))
        break;
}

....
Skipping nonlast:Priority -287
At location src/dfa.c:3300
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
for (i = 0; new[i] != ((void *)0); ++i) {
    old = enlist(old, new[i], strlen(new[i]));
    if (old == ((void *)0))
        break;
}

....
Skipping nonlast:Priority -287
At location src/dfa.c:3300
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
for (i = 0; new[i] != ((void *)0); ++i) {
    old = enlist(old, new[i], strlen(new[i]));
    if (old == ((void *)0))
        break;
}

....
Skipping nonlast addifexit:Priority 4713
At location src/dfa.c:3300
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(new, i, old)))
    return 0;
for (i = 0; new[i] != ((void *)0); ++i) {
    old = enlist(old, new[i], strlen(new[i]));
    if (old == ((void *)0))
        break;
}

....
Skipping returnreturn addifexit:Priority 4714
At location src/dfa.c:3306
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(old, new, i)))
    return 0;
return old;

....
Skipping nonlast:Priority -66
At location src/dfa.c:3314
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
char **both;

....
Skipping nonlast:Priority -66
At location src/dfa.c:3314
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
char **both;

....
Skipping nonlast:Priority -66
At location src/dfa.c:3314
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
char **both;

....
Skipping nonlast:Priority -66
At location src/dfa.c:3314
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
char **both;

....
Skipping nonlast:Priority -66
At location src/dfa.c:3314
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
char **both;

....
Skipping nonlast:Priority -66
At location src/dfa.c:3314
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
char **both;

....
Skipping nonlast:Priority -66
At location src/dfa.c:3314
--Src File: src/dfa.c
Fragment 0:
if (left == ((void *)0) || right == ((void *)0))
    return ((void *)0);
char **both;

....
Skipping nonlast:Priority -66
At location src/dfa.c:3314
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
char **both;

....
Skipping nonlast:Priority -66
At location src/dfa.c:3314
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
char **both;

....
Skipping nonlast:Priority -66
At location src/dfa.c:3314
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
char **both;

....
Skipping nonlast addifexit:Priority 4934
At location src/dfa.c:3314
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(left, right)))
    return 0;
char **both;

....
Skipping nonlast:Priority -65
At location src/dfa.c:3315
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
char **temp;

....
Skipping nonlast:Priority -65
At location src/dfa.c:3315
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
char **temp;

....
Skipping nonlast:Priority -65
At location src/dfa.c:3315
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
char **temp;

....
Skipping nonlast:Priority -65
At location src/dfa.c:3315
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
char **temp;

....
Skipping nonlast:Priority -65
At location src/dfa.c:3315
--Src File: src/dfa.c
Fragment 0:
if (both == ((void *)0))
    return ((void *)0);
char **temp;

....
Skipping nonlast:Priority -65
At location src/dfa.c:3315
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
char **temp;

....
Skipping nonlast:Priority -65
At location src/dfa.c:3315
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
char **temp;

....
Skipping nonlast:Priority -65
At location src/dfa.c:3315
--Src File: src/dfa.c
Fragment 0:
if (left == ((void *)0) || right == ((void *)0))
    return ((void *)0);
char **temp;

....
Skipping nonlast:Priority -65
At location src/dfa.c:3315
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
char **temp;

....
Skipping nonlast:Priority -65
At location src/dfa.c:3315
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
char **temp;

....
Skipping nonlast:Priority -65
At location src/dfa.c:3315
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
char **temp;

....
Skipping nonlast addifexit:Priority 4935
At location src/dfa.c:3315
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(left, right, both)))
    return 0;
char **temp;

....
Skipping nonlast:Priority -64
At location src/dfa.c:3316
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int lnum, rnum;

....
Skipping nonlast:Priority -64
At location src/dfa.c:3316
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int lnum, rnum;

....
Skipping nonlast:Priority -64
At location src/dfa.c:3316
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
int lnum, rnum;

....
Skipping nonlast:Priority -64
At location src/dfa.c:3316
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
int lnum, rnum;

....
Skipping nonlast:Priority -64
At location src/dfa.c:3316
--Src File: src/dfa.c
Fragment 0:
if (both == ((void *)0))
    return ((void *)0);
int lnum, rnum;

....
Skipping nonlast:Priority -64
At location src/dfa.c:3316
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
int lnum, rnum;

....
Skipping nonlast:Priority -64
At location src/dfa.c:3316
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
int lnum, rnum;

....
Skipping nonlast:Priority -64
At location src/dfa.c:3316
--Src File: src/dfa.c
Fragment 0:
if (left == ((void *)0) || right == ((void *)0))
    return ((void *)0);
int lnum, rnum;

....
Skipping nonlast:Priority -64
At location src/dfa.c:3316
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int lnum, rnum;

....
Skipping nonlast:Priority -64
At location src/dfa.c:3316
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int lnum, rnum;

....
Skipping nonlast:Priority -64
At location src/dfa.c:3316
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int lnum, rnum;

....
Skipping nonlast:Priority -64
At location src/dfa.c:3316
--Src File: src/dfa.c
Fragment 0:
if (temp == ((void *)0)) {
    freelist(both);
    return ((void *)0);
}
int lnum, rnum;

....
Skipping nonlast addifexit:Priority 4936
At location src/dfa.c:3316
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(left, right, both, temp)))
    return 0;
int lnum, rnum;

....
Skipping nonlast:Priority 7437
At location src/dfa.c:3318
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (left == ((void *)0) || right == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority 7437
At location src/dfa.c:3318
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (left == ((void *)0) || right == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority 7437
At location src/dfa.c:3318
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
if (left == ((void *)0) || right == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority 7437
At location src/dfa.c:3318
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
if (left == ((void *)0) || right == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority 7437
At location src/dfa.c:3318
--Src File: src/dfa.c
Fragment 0:
if (both == ((void *)0))
    return ((void *)0);
if (left == ((void *)0) || right == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority 7437
At location src/dfa.c:3318
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
if (left == ((void *)0) || right == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority 7437
At location src/dfa.c:3318
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
if (left == ((void *)0) || right == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority 7437
At location src/dfa.c:3318
--Src File: src/dfa.c
Fragment 0:
if (left == ((void *)0) || right == ((void *)0))
    return ((void *)0);
if (left == ((void *)0) || right == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority 7437
At location src/dfa.c:3318
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (left == ((void *)0) || right == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority 7437
At location src/dfa.c:3318
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (left == ((void *)0) || right == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority 7437
At location src/dfa.c:3318
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (left == ((void *)0) || right == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority 7437
At location src/dfa.c:3318
--Src File: src/dfa.c
Fragment 0:
if (temp == ((void *)0)) {
    freelist(both);
    return ((void *)0);
}
if (left == ((void *)0) || right == ((void *)0))
    return ((void *)0);

....
Skipping nonlast addifexit:Priority 11187
At location src/dfa.c:3318
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(left, right, both, lnum, rnum, temp)))
    return 0;
if (left == ((void *)0) || right == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority -62
At location src/dfa.c:3320
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
both = (char **)malloc(sizeof *both);

....
Skipping nonlast:Priority -62
At location src/dfa.c:3320
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
both = (char **)malloc(sizeof *both);

....
Skipping nonlast:Priority -62
At location src/dfa.c:3320
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
both = (char **)malloc(sizeof *both);

....
Skipping nonlast:Priority -62
At location src/dfa.c:3320
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
both = (char **)malloc(sizeof *both);

....
Skipping nonlast:Priority -62
At location src/dfa.c:3320
--Src File: src/dfa.c
Fragment 0:
if (both == ((void *)0))
    return ((void *)0);
both = (char **)malloc(sizeof *both);

....
Skipping nonlast:Priority -62
At location src/dfa.c:3320
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
both = (char **)malloc(sizeof *both);

....
Skipping nonlast:Priority -62
At location src/dfa.c:3320
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
both = (char **)malloc(sizeof *both);

....
Skipping nonlast:Priority -62
At location src/dfa.c:3320
--Src File: src/dfa.c
Fragment 0:
if (left == ((void *)0) || right == ((void *)0))
    return ((void *)0);
both = (char **)malloc(sizeof *both);

....
Skipping nonlast:Priority -62
At location src/dfa.c:3320
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
both = (char **)malloc(sizeof *both);

....
Skipping nonlast:Priority -62
At location src/dfa.c:3320
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
both = (char **)malloc(sizeof *both);

....
Skipping nonlast:Priority -62
At location src/dfa.c:3320
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
both = (char **)malloc(sizeof *both);

....
Skipping nonlast:Priority -62
At location src/dfa.c:3320
--Src File: src/dfa.c
Fragment 0:
if (temp == ((void *)0)) {
    freelist(both);
    return ((void *)0);
}
both = (char **)malloc(sizeof *both);

....
Skipping nonlast addifexit:Priority 4938
At location src/dfa.c:3320
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(both, left, right, lnum, rnum, temp)))
    return 0;
both = (char **)malloc(sizeof *both);

....
Skipping nonlast:Priority -61
At location src/dfa.c:3321
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (both == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority -61
At location src/dfa.c:3321
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (both == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority -61
At location src/dfa.c:3321
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
if (both == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority -61
At location src/dfa.c:3321
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
if (both == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority -61
At location src/dfa.c:3321
--Src File: src/dfa.c
Fragment 0:
if (both == ((void *)0))
    return ((void *)0);
if (both == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority -61
At location src/dfa.c:3321
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
if (both == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority -61
At location src/dfa.c:3321
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
if (both == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority -61
At location src/dfa.c:3321
--Src File: src/dfa.c
Fragment 0:
if (left == ((void *)0) || right == ((void *)0))
    return ((void *)0);
if (both == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority -61
At location src/dfa.c:3321
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (both == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority -61
At location src/dfa.c:3321
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (both == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority -61
At location src/dfa.c:3321
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (both == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority -61
At location src/dfa.c:3321
--Src File: src/dfa.c
Fragment 0:
if (temp == ((void *)0)) {
    freelist(both);
    return ((void *)0);
}
if (both == ((void *)0))
    return ((void *)0);

....
Skipping nonlast addifexit:Priority 3689
At location src/dfa.c:3321
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(both, left, right, lnum, rnum, temp)))
    return 0;
if (both == ((void *)0))
    return ((void *)0);

....
Skipping nonlast:Priority -60
At location src/dfa.c:3323
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
both[0] = ((void *)0);

....
Skipping nonlast:Priority -60
At location src/dfa.c:3323
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
both[0] = ((void *)0);

....
Skipping nonlast:Priority -60
At location src/dfa.c:3323
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
both[0] = ((void *)0);

....
Skipping nonlast:Priority -60
At location src/dfa.c:3323
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
both[0] = ((void *)0);

....
Skipping nonlast:Priority -60
At location src/dfa.c:3323
--Src File: src/dfa.c
Fragment 0:
if (both == ((void *)0))
    return ((void *)0);
both[0] = ((void *)0);

....
Skipping nonlast:Priority -60
At location src/dfa.c:3323
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
both[0] = ((void *)0);

....
Skipping nonlast:Priority -60
At location src/dfa.c:3323
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
both[0] = ((void *)0);

....
Skipping nonlast:Priority -60
At location src/dfa.c:3323
--Src File: src/dfa.c
Fragment 0:
if (left == ((void *)0) || right == ((void *)0))
    return ((void *)0);
both[0] = ((void *)0);

....
Skipping nonlast:Priority -60
At location src/dfa.c:3323
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
both[0] = ((void *)0);

....
Skipping nonlast:Priority -60
At location src/dfa.c:3323
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
both[0] = ((void *)0);

....
Skipping nonlast:Priority -60
At location src/dfa.c:3323
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
both[0] = ((void *)0);

....
Skipping nonlast:Priority -60
At location src/dfa.c:3323
--Src File: src/dfa.c
Fragment 0:
if (temp == ((void *)0)) {
    freelist(both);
    return ((void *)0);
}
both[0] = ((void *)0);

....
Skipping nonlast addifexit:Priority 4940
At location src/dfa.c:3323
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(both, left, lnum, right, rnum, temp)))
    return 0;
both[0] = ((void *)0);

....
Skipping nonlast:Priority -59
At location src/dfa.c:3324
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
for (lnum = 0; left[lnum] != ((void *)0); ++lnum) {
    for (rnum = 0; right[rnum] != ((void *)0); ++rnum) {
        temp = comsubs(left[lnum], right[rnum]);
        if (temp == ((void *)0)) {
            freelist(both);
            return ((void *)0);
        }
        both = addlists(both, temp);
        freelist(temp);
        free(temp);
        if (both == ((void *)0))
            return ((void *)0);
    }
}

....
Skipping nonlast:Priority -59
At location src/dfa.c:3324
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
for (lnum = 0; left[lnum] != ((void *)0); ++lnum) {
    for (rnum = 0; right[rnum] != ((void *)0); ++rnum) {
        temp = comsubs(left[lnum], right[rnum]);
        if (temp == ((void *)0)) {
            freelist(both);
            return ((void *)0);
        }
        both = addlists(both, temp);
        freelist(temp);
        free(temp);
        if (both == ((void *)0))
            return ((void *)0);
    }
}

....
Skipping nonlast:Priority -59
At location src/dfa.c:3324
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
for (lnum = 0; left[lnum] != ((void *)0); ++lnum) {
    for (rnum = 0; right[rnum] != ((void *)0); ++rnum) {
        temp = comsubs(left[lnum], right[rnum]);
        if (temp == ((void *)0)) {
            freelist(both);
            return ((void *)0);
        }
        both = addlists(both, temp);
        freelist(temp);
        free(temp);
        if (both == ((void *)0))
            return ((void *)0);
    }
}

....
Skipping nonlast:Priority -59
At location src/dfa.c:3324
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
for (lnum = 0; left[lnum] != ((void *)0); ++lnum) {
    for (rnum = 0; right[rnum] != ((void *)0); ++rnum) {
        temp = comsubs(left[lnum], right[rnum]);
        if (temp == ((void *)0)) {
            freelist(both);
            return ((void *)0);
        }
        both = addlists(both, temp);
        freelist(temp);
        free(temp);
        if (both == ((void *)0))
            return ((void *)0);
    }
}

....
Skipping nonlast:Priority -59
At location src/dfa.c:3324
--Src File: src/dfa.c
Fragment 0:
if (both == ((void *)0))
    return ((void *)0);
for (lnum = 0; left[lnum] != ((void *)0); ++lnum) {
    for (rnum = 0; right[rnum] != ((void *)0); ++rnum) {
        temp = comsubs(left[lnum], right[rnum]);
        if (temp == ((void *)0)) {
            freelist(both);
            return ((void *)0);
        }
        both = addlists(both, temp);
        freelist(temp);
        free(temp);
        if (both == ((void *)0))
            return ((void *)0);
    }
}

....
Skipping nonlast:Priority -59
At location src/dfa.c:3324
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
for (lnum = 0; left[lnum] != ((void *)0); ++lnum) {
    for (rnum = 0; right[rnum] != ((void *)0); ++rnum) {
        temp = comsubs(left[lnum], right[rnum]);
        if (temp == ((void *)0)) {
            freelist(both);
            return ((void *)0);
        }
        both = addlists(both, temp);
        freelist(temp);
        free(temp);
        if (both == ((void *)0))
            return ((void *)0);
    }
}

....
Skipping nonlast:Priority -59
At location src/dfa.c:3324
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
for (lnum = 0; left[lnum] != ((void *)0); ++lnum) {
    for (rnum = 0; right[rnum] != ((void *)0); ++rnum) {
        temp = comsubs(left[lnum], right[rnum]);
        if (temp == ((void *)0)) {
            freelist(both);
            return ((void *)0);
        }
        both = addlists(both, temp);
        freelist(temp);
        free(temp);
        if (both == ((void *)0))
            return ((void *)0);
    }
}

....
Skipping nonlast:Priority -59
At location src/dfa.c:3324
--Src File: src/dfa.c
Fragment 0:
if (left == ((void *)0) || right == ((void *)0))
    return ((void *)0);
for (lnum = 0; left[lnum] != ((void *)0); ++lnum) {
    for (rnum = 0; right[rnum] != ((void *)0); ++rnum) {
        temp = comsubs(left[lnum], right[rnum]);
        if (temp == ((void *)0)) {
            freelist(both);
            return ((void *)0);
        }
        both = addlists(both, temp);
        freelist(temp);
        free(temp);
        if (both == ((void *)0))
            return ((void *)0);
    }
}

....
Skipping nonlast:Priority -59
At location src/dfa.c:3324
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
for (lnum = 0; left[lnum] != ((void *)0); ++lnum) {
    for (rnum = 0; right[rnum] != ((void *)0); ++rnum) {
        temp = comsubs(left[lnum], right[rnum]);
        if (temp == ((void *)0)) {
            freelist(both);
            return ((void *)0);
        }
        both = addlists(both, temp);
        freelist(temp);
        free(temp);
        if (both == ((void *)0))
            return ((void *)0);
    }
}

....
Skipping nonlast:Priority -59
At location src/dfa.c:3324
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
for (lnum = 0; left[lnum] != ((void *)0); ++lnum) {
    for (rnum = 0; right[rnum] != ((void *)0); ++rnum) {
        temp = comsubs(left[lnum], right[rnum]);
        if (temp == ((void *)0)) {
            freelist(both);
            return ((void *)0);
        }
        both = addlists(both, temp);
        freelist(temp);
        free(temp);
        if (both == ((void *)0))
            return ((void *)0);
    }
}

....
Skipping nonlast:Priority -59
At location src/dfa.c:3324
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
for (lnum = 0; left[lnum] != ((void *)0); ++lnum) {
    for (rnum = 0; right[rnum] != ((void *)0); ++rnum) {
        temp = comsubs(left[lnum], right[rnum]);
        if (temp == ((void *)0)) {
            freelist(both);
            return ((void *)0);
        }
        both = addlists(both, temp);
        freelist(temp);
        free(temp);
        if (both == ((void *)0))
            return ((void *)0);
    }
}

....
Skipping nonlast:Priority -59
At location src/dfa.c:3324
--Src File: src/dfa.c
Fragment 0:
if (temp == ((void *)0)) {
    freelist(both);
    return ((void *)0);
}
for (lnum = 0; left[lnum] != ((void *)0); ++lnum) {
    for (rnum = 0; right[rnum] != ((void *)0); ++rnum) {
        temp = comsubs(left[lnum], right[rnum]);
        if (temp == ((void *)0)) {
            freelist(both);
            return ((void *)0);
        }
        both = addlists(both, temp);
        freelist(temp);
        free(temp);
        if (both == ((void *)0))
            return ((void *)0);
    }
}

....
Skipping nonlast addifexit:Priority 4941
At location src/dfa.c:3324
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(left, lnum, both, right, rnum, temp)))
    return 0;
for (lnum = 0; left[lnum] != ((void *)0); ++lnum) {
    for (rnum = 0; right[rnum] != ((void *)0); ++rnum) {
        temp = comsubs(left[lnum], right[rnum]);
        if (temp == ((void *)0)) {
            freelist(both);
            return ((void *)0);
        }
        both = addlists(both, temp);
        freelist(temp);
        free(temp);
        if (both == ((void *)0))
            return ((void *)0);
    }
}

....
Skipping returnreturn addifexit:Priority 9942
At location src/dfa.c:3326
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(right, rnum, left, temp, lnum, both)))
    return 0;
for (rnum = 0; right[rnum] != ((void *)0); ++rnum) {
    temp = comsubs(left[lnum], right[rnum]);
    if (temp == ((void *)0)) {
        freelist(both);
        return ((void *)0);
    }
    both = addlists(both, temp);
    freelist(temp);
    free(temp);
    if (both == ((void *)0))
        return ((void *)0);
}

....
Skipping returnreturn addifexit:Priority 9942
At location src/dfa.c:3326
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(right, rnum, left, temp, lnum, both)))
    break;
for (rnum = 0; right[rnum] != ((void *)0); ++rnum) {
    temp = comsubs(left[lnum], right[rnum]);
    if (temp == ((void *)0)) {
        freelist(both);
        return ((void *)0);
    }
    both = addlists(both, temp);
    freelist(temp);
    free(temp);
    if (both == ((void *)0))
        return ((void *)0);
}

....
Skipping nonlast:Priority 4889
At location src/dfa.c:3328
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
temp = comsubs(left[lnum], right[rnum]);

....
Skipping nonlast:Priority 4889
At location src/dfa.c:3328
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
temp = comsubs(left[lnum], right[rnum]);

....
Skipping nonlast:Priority 4889
At location src/dfa.c:3328
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
temp = comsubs(left[lnum], right[rnum]);

....
Skipping nonlast:Priority 4889
At location src/dfa.c:3328
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
temp = comsubs(left[lnum], right[rnum]);

....
Skipping nonlast:Priority 4889
At location src/dfa.c:3328
--Src File: src/dfa.c
Fragment 0:
if (both == ((void *)0))
    return ((void *)0);
temp = comsubs(left[lnum], right[rnum]);

....
Skipping nonlast:Priority 4889
At location src/dfa.c:3328
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
temp = comsubs(left[lnum], right[rnum]);

....
Skipping nonlast:Priority 4889
At location src/dfa.c:3328
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
temp = comsubs(left[lnum], right[rnum]);

....
Skipping nonlast:Priority 4889
At location src/dfa.c:3328
--Src File: src/dfa.c
Fragment 0:
if (left == ((void *)0) || right == ((void *)0))
    return ((void *)0);
temp = comsubs(left[lnum], right[rnum]);

....
Skipping nonlast:Priority 4889
At location src/dfa.c:3328
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
temp = comsubs(left[lnum], right[rnum]);

....
Skipping nonlast:Priority 4889
At location src/dfa.c:3328
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
temp = comsubs(left[lnum], right[rnum]);

....
Skipping nonlast:Priority 4889
At location src/dfa.c:3328
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
temp = comsubs(left[lnum], right[rnum]);

....
Skipping nonlast:Priority 4889
At location src/dfa.c:3328
--Src File: src/dfa.c
Fragment 0:
if (temp == ((void *)0)) {
    freelist(both);
    return ((void *)0);
}
temp = comsubs(left[lnum], right[rnum]);

....
Skipping nonlast addifexit:Priority 9889
At location src/dfa.c:3328
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(left, right, temp, lnum, rnum, both)))
    return 0;
temp = comsubs(left[lnum], right[rnum]);

....
Skipping nonlast addifexit:Priority 9889
At location src/dfa.c:3328
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(left, right, temp, lnum, rnum, both)))
    break;
temp = comsubs(left[lnum], right[rnum]);

....
Skipping nonlast:Priority -95
At location src/dfa.c:3329
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (temp == ((void *)0)) {
    freelist(both);
    return ((void *)0);
}

....
Skipping nonlast:Priority -95
At location src/dfa.c:3329
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (temp == ((void *)0)) {
    freelist(both);
    return ((void *)0);
}

....
Skipping nonlast:Priority -95
At location src/dfa.c:3329
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
if (temp == ((void *)0)) {
    freelist(both);
    return ((void *)0);
}

....
Skipping nonlast:Priority -95
At location src/dfa.c:3329
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
if (temp == ((void *)0)) {
    freelist(both);
    return ((void *)0);
}

....
Skipping nonlast:Priority -95
At location src/dfa.c:3329
--Src File: src/dfa.c
Fragment 0:
if (both == ((void *)0))
    return ((void *)0);
if (temp == ((void *)0)) {
    freelist(both);
    return ((void *)0);
}

....
Skipping nonlast:Priority -95
At location src/dfa.c:3329
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
if (temp == ((void *)0)) {
    freelist(both);
    return ((void *)0);
}

....
Skipping nonlast:Priority -95
At location src/dfa.c:3329
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
if (temp == ((void *)0)) {
    freelist(both);
    return ((void *)0);
}

....
Skipping nonlast:Priority -95
At location src/dfa.c:3329
--Src File: src/dfa.c
Fragment 0:
if (left == ((void *)0) || right == ((void *)0))
    return ((void *)0);
if (temp == ((void *)0)) {
    freelist(both);
    return ((void *)0);
}

....
Skipping nonlast:Priority -95
At location src/dfa.c:3329
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (temp == ((void *)0)) {
    freelist(both);
    return ((void *)0);
}

....
Skipping nonlast:Priority -95
At location src/dfa.c:3329
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (temp == ((void *)0)) {
    freelist(both);
    return ((void *)0);
}

....
Skipping nonlast:Priority -95
At location src/dfa.c:3329
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (temp == ((void *)0)) {
    freelist(both);
    return ((void *)0);
}

....
Skipping nonlast:Priority -95
At location src/dfa.c:3329
--Src File: src/dfa.c
Fragment 0:
if (temp == ((void *)0)) {
    freelist(both);
    return ((void *)0);
}
if (temp == ((void *)0)) {
    freelist(both);
    return ((void *)0);
}

....
Skipping nonlast addifexit:Priority 3655
At location src/dfa.c:3329
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(temp, left, right, lnum, rnum, both)))
    return 0;
if (temp == ((void *)0)) {
    freelist(both);
    return ((void *)0);
}

....
Skipping nonlast addifexit:Priority 3655
At location src/dfa.c:3329
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(temp, left, right, lnum, rnum, both)))
    break;
if (temp == ((void *)0)) {
    freelist(both);
    return ((void *)0);
}

....
Skipping nonlast:Priority -94
At location src/dfa.c:3334
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
both = addlists(both, temp);

....
Skipping nonlast:Priority -94
At location src/dfa.c:3334
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
both = addlists(both, temp);

....
Skipping nonlast:Priority -94
At location src/dfa.c:3334
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
both = addlists(both, temp);

....
Skipping nonlast:Priority -94
At location src/dfa.c:3334
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
both = addlists(both, temp);

....
Skipping nonlast:Priority -94
At location src/dfa.c:3334
--Src File: src/dfa.c
Fragment 0:
if (both == ((void *)0))
    return ((void *)0);
both = addlists(both, temp);

....
Skipping nonlast:Priority -94
At location src/dfa.c:3334
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
both = addlists(both, temp);

....
Skipping nonlast:Priority -94
At location src/dfa.c:3334
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
both = addlists(both, temp);

....
Skipping nonlast:Priority -94
At location src/dfa.c:3334
--Src File: src/dfa.c
Fragment 0:
if (left == ((void *)0) || right == ((void *)0))
    return ((void *)0);
both = addlists(both, temp);

....
Skipping nonlast:Priority -94
At location src/dfa.c:3334
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
both = addlists(both, temp);

....
Skipping nonlast:Priority -94
At location src/dfa.c:3334
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
both = addlists(both, temp);

....
Skipping nonlast:Priority -94
At location src/dfa.c:3334
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
both = addlists(both, temp);

....
Skipping nonlast:Priority -94
At location src/dfa.c:3334
--Src File: src/dfa.c
Fragment 0:
if (temp == ((void *)0)) {
    freelist(both);
    return ((void *)0);
}
both = addlists(both, temp);

....
Skipping nonlast addifexit:Priority 4906
At location src/dfa.c:3334
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(both, temp, left, right, lnum, rnum)))
    return 0;
both = addlists(both, temp);

....
Skipping nonlast addifexit:Priority 4906
At location src/dfa.c:3334
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(both, temp, left, right, lnum, rnum)))
    break;
both = addlists(both, temp);

....
Skipping nonlast:Priority -93
At location src/dfa.c:3335
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
freelist(temp);

....
Skipping nonlast:Priority -93
At location src/dfa.c:3335
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
freelist(temp);

....
Skipping nonlast:Priority -93
At location src/dfa.c:3335
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
freelist(temp);

....
Skipping nonlast:Priority -93
At location src/dfa.c:3335
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
freelist(temp);

....
Skipping nonlast:Priority -93
At location src/dfa.c:3335
--Src File: src/dfa.c
Fragment 0:
if (both == ((void *)0))
    return ((void *)0);
freelist(temp);

....
Skipping nonlast:Priority -93
At location src/dfa.c:3335
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
freelist(temp);

....
Skipping nonlast:Priority -93
At location src/dfa.c:3335
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
freelist(temp);

....
Skipping nonlast:Priority -93
At location src/dfa.c:3335
--Src File: src/dfa.c
Fragment 0:
if (left == ((void *)0) || right == ((void *)0))
    return ((void *)0);
freelist(temp);

....
Skipping nonlast:Priority -93
At location src/dfa.c:3335
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
freelist(temp);

....
Skipping nonlast:Priority -93
At location src/dfa.c:3335
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
freelist(temp);

....
Skipping nonlast:Priority -93
At location src/dfa.c:3335
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
freelist(temp);

....
Skipping nonlast:Priority -93
At location src/dfa.c:3335
--Src File: src/dfa.c
Fragment 0:
if (temp == ((void *)0)) {
    freelist(both);
    return ((void *)0);
}
freelist(temp);

....
Skipping nonlast addifexit:Priority 4907
At location src/dfa.c:3335
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(temp, both, left, right, lnum, rnum)))
    return 0;
freelist(temp);

....
Skipping nonlast addifexit:Priority 4907
At location src/dfa.c:3335
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(temp, both, left, right, lnum, rnum)))
    break;
freelist(temp);

....
Skipping nonlast:Priority -92
At location src/dfa.c:3336
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
free(temp);

....
Skipping nonlast:Priority -92
At location src/dfa.c:3336
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
free(temp);

....
Skipping nonlast:Priority -92
At location src/dfa.c:3336
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
free(temp);

....
Skipping nonlast:Priority -92
At location src/dfa.c:3336
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
free(temp);

....
Skipping nonlast:Priority -92
At location src/dfa.c:3336
--Src File: src/dfa.c
Fragment 0:
if (both == ((void *)0))
    return ((void *)0);
free(temp);

....
Skipping nonlast:Priority -92
At location src/dfa.c:3336
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
free(temp);

....
Skipping nonlast:Priority -92
At location src/dfa.c:3336
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
free(temp);

....
Skipping nonlast:Priority -92
At location src/dfa.c:3336
--Src File: src/dfa.c
Fragment 0:
if (left == ((void *)0) || right == ((void *)0))
    return ((void *)0);
free(temp);

....
Skipping nonlast:Priority -92
At location src/dfa.c:3336
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
free(temp);

....
Skipping nonlast:Priority -92
At location src/dfa.c:3336
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
free(temp);

....
Skipping nonlast:Priority -92
At location src/dfa.c:3336
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
free(temp);

....
Skipping nonlast:Priority -92
At location src/dfa.c:3336
--Src File: src/dfa.c
Fragment 0:
if (temp == ((void *)0)) {
    freelist(both);
    return ((void *)0);
}
free(temp);

....
Skipping nonlast addifexit:Priority 4908
At location src/dfa.c:3336
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(temp, both, left, right, lnum, rnum)))
    return 0;
free(temp);

....
Skipping nonlast addifexit:Priority 4908
At location src/dfa.c:3336
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(temp, both, left, right, lnum, rnum)))
    break;
free(temp);

....
Skipping returnreturn addifexit:Priority 3659
At location src/dfa.c:3337
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(both, temp, left, right, lnum, rnum)))
    return 0;
if (both == ((void *)0))
    return ((void *)0);

....
Skipping returnreturn addifexit:Priority 3659
At location src/dfa.c:3337
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(both, temp, left, right, lnum, rnum)))
    break;
if (both == ((void *)0))
    return ((void *)0);

....
Skipping returnreturn addifexit:Priority 4943
At location src/dfa.c:3341
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(both, temp, left, right, lnum, rnum)))
    return 0;
return both;

....
Skipping nonlast:Priority 7201
At location src/dfa.c:3355
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
mp->left[0] = mp->right[0] = mp->is[0] = '\x00';

....
Skipping nonlast:Priority 7201
At location src/dfa.c:3355
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
mp->left[0] = mp->right[0] = mp->is[0] = '\x00';

....
Skipping nonlast:Priority 7201
At location src/dfa.c:3355
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
mp->left[0] = mp->right[0] = mp->is[0] = '\x00';

....
Skipping nonlast:Priority 7201
At location src/dfa.c:3355
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
mp->left[0] = mp->right[0] = mp->is[0] = '\x00';

....
Skipping nonlast:Priority 7201
At location src/dfa.c:3355
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
mp->left[0] = mp->right[0] = mp->is[0] = '\x00';

....
Skipping nonlast:Priority 7201
At location src/dfa.c:3355
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
mp->left[0] = mp->right[0] = mp->is[0] = '\x00';

....
Skipping nonlast:Priority 7201
At location src/dfa.c:3355
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
mp->left[0] = mp->right[0] = mp->is[0] = '\x00';

....
Skipping nonlast:Priority 7201
At location src/dfa.c:3355
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
mp->left[0] = mp->right[0] = mp->is[0] = '\x00';

....
Skipping nonlast:Priority 7201
At location src/dfa.c:3355
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
mp->left[0] = mp->right[0] = mp->is[0] = '\x00';

....
Skipping nonlast addifexit:Priority 12201
At location src/dfa.c:3355
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, mp->left, mp->right, mp->is, mp->in)))
    return;
mp->left[0] = mp->right[0] = mp->is[0] = '\x00';

....
Skipping nonlast:Priority -354
At location src/dfa.c:3362
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
must *musts;

....
Skipping nonlast:Priority -354
At location src/dfa.c:3362
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
must *musts;

....
Skipping nonlast:Priority -354
At location src/dfa.c:3362
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
must *musts;

....
Skipping nonlast:Priority -354
At location src/dfa.c:3362
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
must *musts;

....
Skipping nonlast:Priority -354
At location src/dfa.c:3362
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
must *musts;

....
Skipping nonlast:Priority -354
At location src/dfa.c:3362
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
must *musts;

....
Skipping nonlast:Priority -354
At location src/dfa.c:3362
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
must *musts;

....
Skipping nonlast:Priority -354
At location src/dfa.c:3362
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
must *musts;

....
Skipping nonlast:Priority -354
At location src/dfa.c:3362
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
must *musts;

....
Skipping nonlast addifexit:Priority 4646
At location src/dfa.c:3362
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(dfa, dfa)))
    return;
must *musts;

....
Skipping nonlast addifexit:Priority 4846
At location src/dfa.c:3362
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(dfa, dfa)))
    goto done;
must *musts;

....
Skipping nonlast:Priority -353
At location src/dfa.c:3363
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
must *mp;

....
Skipping nonlast:Priority -353
At location src/dfa.c:3363
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
must *mp;

....
Skipping nonlast:Priority -353
At location src/dfa.c:3363
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
must *mp;

....
Skipping nonlast:Priority -353
At location src/dfa.c:3363
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
must *mp;

....
Skipping nonlast:Priority -353
At location src/dfa.c:3363
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
must *mp;

....
Skipping nonlast:Priority -353
At location src/dfa.c:3363
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
must *mp;

....
Skipping nonlast:Priority -353
At location src/dfa.c:3363
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
must *mp;

....
Skipping nonlast:Priority -353
At location src/dfa.c:3363
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
must *mp;

....
Skipping nonlast:Priority -353
At location src/dfa.c:3363
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
must *mp;

....
Skipping nonlast addifexit:Priority 4647
At location src/dfa.c:3363
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(dfa, musts, dfa)))
    return;
must *mp;

....
Skipping nonlast addifexit:Priority 4847
At location src/dfa.c:3363
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(dfa, musts, dfa)))
    goto done;
must *mp;

....
Skipping nonlast:Priority -352
At location src/dfa.c:3364
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
char *result;

....
Skipping nonlast:Priority -352
At location src/dfa.c:3364
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
char *result;

....
Skipping nonlast:Priority -352
At location src/dfa.c:3364
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
char *result;

....
Skipping nonlast:Priority -352
At location src/dfa.c:3364
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
char *result;

....
Skipping nonlast:Priority -352
At location src/dfa.c:3364
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
char *result;

....
Skipping nonlast:Priority -352
At location src/dfa.c:3364
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
char *result;

....
Skipping nonlast:Priority -352
At location src/dfa.c:3364
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
char *result;

....
Skipping nonlast:Priority -352
At location src/dfa.c:3364
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
char *result;

....
Skipping nonlast:Priority -352
At location src/dfa.c:3364
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
char *result;

....
Skipping nonlast addifexit:Priority 4648
At location src/dfa.c:3364
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(dfa, musts, dfa, mp)))
    return;
char *result;

....
Skipping nonlast addifexit:Priority 4848
At location src/dfa.c:3364
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(dfa, musts, dfa, mp)))
    goto done;
char *result;

....
Skipping nonlast:Priority -351
At location src/dfa.c:3365
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int ri;

....
Skipping nonlast:Priority -351
At location src/dfa.c:3365
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int ri;

....
Skipping nonlast:Priority -351
At location src/dfa.c:3365
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
int ri;

....
Skipping nonlast:Priority -351
At location src/dfa.c:3365
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
int ri;

....
Skipping nonlast:Priority -351
At location src/dfa.c:3365
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
int ri;

....
Skipping nonlast:Priority -351
At location src/dfa.c:3365
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
int ri;

....
Skipping nonlast:Priority -351
At location src/dfa.c:3365
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int ri;

....
Skipping nonlast:Priority -351
At location src/dfa.c:3365
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int ri;

....
Skipping nonlast:Priority -351
At location src/dfa.c:3365
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int ri;

....
Skipping nonlast addifexit:Priority 4649
At location src/dfa.c:3365
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(result, dfa, musts, dfa, mp)))
    return;
int ri;

....
Skipping nonlast addifexit:Priority 4849
At location src/dfa.c:3365
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(result, dfa, musts, dfa, mp)))
    goto done;
int ri;

....
Skipping nonlast:Priority -350
At location src/dfa.c:3366
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int i;

....
Skipping nonlast:Priority -350
At location src/dfa.c:3366
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int i;

....
Skipping nonlast:Priority -350
At location src/dfa.c:3366
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
int i;

....
Skipping nonlast:Priority -350
At location src/dfa.c:3366
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
int i;

....
Skipping nonlast:Priority -350
At location src/dfa.c:3366
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
int i;

....
Skipping nonlast:Priority -350
At location src/dfa.c:3366
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
int i;

....
Skipping nonlast:Priority -350
At location src/dfa.c:3366
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int i;

....
Skipping nonlast:Priority -350
At location src/dfa.c:3366
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int i;

....
Skipping nonlast:Priority -350
At location src/dfa.c:3366
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int i;

....
Skipping nonlast addifexit:Priority 4650
At location src/dfa.c:3366
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(result, dfa, musts, dfa, mp, ri)))
    return;
int i;

....
Skipping nonlast addifexit:Priority 4850
At location src/dfa.c:3366
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(result, dfa, musts, dfa, mp, ri)))
    goto done;
int i;

....
Skipping nonlast:Priority -349
At location src/dfa.c:3367
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int exact;

....
Skipping nonlast:Priority -349
At location src/dfa.c:3367
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int exact;

....
Skipping nonlast:Priority -349
At location src/dfa.c:3367
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
int exact;

....
Skipping nonlast:Priority -349
At location src/dfa.c:3367
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
int exact;

....
Skipping nonlast:Priority -349
At location src/dfa.c:3367
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
int exact;

....
Skipping nonlast:Priority -349
At location src/dfa.c:3367
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
int exact;

....
Skipping nonlast:Priority -349
At location src/dfa.c:3367
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int exact;

....
Skipping nonlast:Priority -349
At location src/dfa.c:3367
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int exact;

....
Skipping nonlast:Priority -349
At location src/dfa.c:3367
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int exact;

....
Skipping nonlast addifexit:Priority 4651
At location src/dfa.c:3367
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(result, dfa, musts, dfa, mp, i, ri)))
    return;
int exact;

....
Skipping nonlast addifexit:Priority 4851
At location src/dfa.c:3367
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(result, dfa, musts, dfa, mp, i, ri)))
    goto done;
int exact;

....
Skipping nonlast:Priority -348
At location src/dfa.c:3368
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
token t;

....
Skipping nonlast:Priority -348
At location src/dfa.c:3368
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
token t;

....
Skipping nonlast:Priority -348
At location src/dfa.c:3368
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
token t;

....
Skipping nonlast:Priority -348
At location src/dfa.c:3368
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
token t;

....
Skipping nonlast:Priority -348
At location src/dfa.c:3368
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
token t;

....
Skipping nonlast:Priority -348
At location src/dfa.c:3368
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
token t;

....
Skipping nonlast:Priority -348
At location src/dfa.c:3368
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
token t;

....
Skipping nonlast:Priority -348
At location src/dfa.c:3368
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
token t;

....
Skipping nonlast:Priority -348
At location src/dfa.c:3368
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
token t;

....
Skipping nonlast addifexit:Priority 4652
At location src/dfa.c:3368
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(result, exact, dfa, musts, dfa, mp, i, ri)))
    return;
token t;

....
Skipping nonlast addifexit:Priority 4852
At location src/dfa.c:3368
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(result, exact, dfa, musts, dfa, mp, i, ri)))
    goto done;
token t;

....
Skipping nonlast:Priority -347
At location src/dfa.c:3369
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
static must must0;

....
Skipping nonlast:Priority -347
At location src/dfa.c:3369
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
static must must0;

....
Skipping nonlast:Priority -347
At location src/dfa.c:3369
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
static must must0;

....
Skipping nonlast:Priority -347
At location src/dfa.c:3369
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
static must must0;

....
Skipping nonlast:Priority -347
At location src/dfa.c:3369
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
static must must0;

....
Skipping nonlast:Priority -347
At location src/dfa.c:3369
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
static must must0;

....
Skipping nonlast:Priority -347
At location src/dfa.c:3369
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
static must must0;

....
Skipping nonlast:Priority -347
At location src/dfa.c:3369
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
static must must0;

....
Skipping nonlast:Priority -347
At location src/dfa.c:3369
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
static must must0;

....
Skipping nonlast addifexit:Priority 4653
At location src/dfa.c:3369
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(result, exact, dfa, musts, dfa, mp, i, ri, t)))
    return;
static must must0;

....
Skipping nonlast addifexit:Priority 4853
At location src/dfa.c:3369
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(result, exact, dfa, musts, dfa, mp, i, ri, t)))
    goto done;
static must must0;

....
Skipping nonlast:Priority -346
At location src/dfa.c:3370
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
struct dfamust *dm;

....
Skipping nonlast:Priority -346
At location src/dfa.c:3370
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
struct dfamust *dm;

....
Skipping nonlast:Priority -346
At location src/dfa.c:3370
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
struct dfamust *dm;

....
Skipping nonlast:Priority -346
At location src/dfa.c:3370
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
struct dfamust *dm;

....
Skipping nonlast:Priority -346
At location src/dfa.c:3370
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
struct dfamust *dm;

....
Skipping nonlast:Priority -346
At location src/dfa.c:3370
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
struct dfamust *dm;

....
Skipping nonlast:Priority -346
At location src/dfa.c:3370
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
struct dfamust *dm;

....
Skipping nonlast:Priority -346
At location src/dfa.c:3370
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
struct dfamust *dm;

....
Skipping nonlast:Priority -346
At location src/dfa.c:3370
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
struct dfamust *dm;

....
Skipping nonlast addifexit:Priority 4654
At location src/dfa.c:3370
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(result, exact, dfa, musts, dfa, mp, i, ri, t)))
    return;
struct dfamust *dm;

....
Skipping nonlast addifexit:Priority 4854
At location src/dfa.c:3370
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(result, exact, dfa, musts, dfa, mp, i, ri, t)))
    goto done;
struct dfamust *dm;

....
Skipping nonlast:Priority -345
At location src/dfa.c:3371
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
static char empty_string[] = "";

....
Skipping nonlast:Priority -345
At location src/dfa.c:3371
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
static char empty_string[] = "";

....
Skipping nonlast:Priority -345
At location src/dfa.c:3371
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
static char empty_string[] = "";

....
Skipping nonlast:Priority -345
At location src/dfa.c:3371
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
static char empty_string[] = "";

....
Skipping nonlast:Priority -345
At location src/dfa.c:3371
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
static char empty_string[] = "";

....
Skipping nonlast:Priority -345
At location src/dfa.c:3371
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
static char empty_string[] = "";

....
Skipping nonlast:Priority -345
At location src/dfa.c:3371
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
static char empty_string[] = "";

....
Skipping nonlast:Priority -345
At location src/dfa.c:3371
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
static char empty_string[] = "";

....
Skipping nonlast:Priority -345
At location src/dfa.c:3371
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
static char empty_string[] = "";

....
Skipping nonlast addifexit:Priority 4655
At location src/dfa.c:3371
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(result, exact, dfa, musts, dfa, mp, i, ri, t, dm)))
    return;
static char empty_string[] = "";

....
Skipping nonlast addifexit:Priority 4855
At location src/dfa.c:3371
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(result, exact, dfa, musts, dfa, mp, i, ri, t, dm)))
    goto done;
static char empty_string[] = "";

....
Skipping nonlast:Priority 7156
At location src/dfa.c:3373
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
result = empty_string;

....
Skipping nonlast:Priority 7156
At location src/dfa.c:3373
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
result = empty_string;

....
Skipping nonlast:Priority 7156
At location src/dfa.c:3373
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
result = empty_string;

....
Skipping nonlast:Priority 7156
At location src/dfa.c:3373
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
result = empty_string;

....
Skipping nonlast:Priority 7156
At location src/dfa.c:3373
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
result = empty_string;

....
Skipping nonlast:Priority 7156
At location src/dfa.c:3373
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
result = empty_string;

....
Skipping nonlast:Priority 7156
At location src/dfa.c:3373
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
result = empty_string;

....
Skipping nonlast:Priority 7156
At location src/dfa.c:3373
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
result = empty_string;

....
Skipping nonlast:Priority 7156
At location src/dfa.c:3373
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
result = empty_string;

....
Skipping nonlast addifexit:Priority 12156
At location src/dfa.c:3373
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(result, exact, dfa, musts, dfa, mp, i, ri, t, dm)))
    return;
result = empty_string;

....
Skipping nonlast addifexit:Priority 9856
At location src/dfa.c:3373
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(result, exact, dfa, musts, dfa, mp, i, ri, t, dm)))
    goto done;
result = empty_string;

....
Skipping nonlast:Priority -343
At location src/dfa.c:3374
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
exact = 0;

....
Skipping nonlast:Priority -343
At location src/dfa.c:3374
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
exact = 0;

....
Skipping nonlast:Priority -343
At location src/dfa.c:3374
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
exact = 0;

....
Skipping nonlast:Priority -343
At location src/dfa.c:3374
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
exact = 0;

....
Skipping nonlast:Priority -343
At location src/dfa.c:3374
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
exact = 0;

....
Skipping nonlast:Priority -343
At location src/dfa.c:3374
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
exact = 0;

....
Skipping nonlast:Priority -343
At location src/dfa.c:3374
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
exact = 0;

....
Skipping nonlast:Priority -343
At location src/dfa.c:3374
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
exact = 0;

....
Skipping nonlast:Priority -343
At location src/dfa.c:3374
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
exact = 0;

....
Skipping nonlast addifexit:Priority 4657
At location src/dfa.c:3374
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(exact, dfa, musts, result, dfa, dfa->tindex, dfa->tindex, mp, i, ri, t, dfa->tokens, dfa->tokens, dm, dfa->musts, dfa->musts, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success)))
    return;
exact = 0;

....
Skipping nonlast addifexit:Priority 4857
At location src/dfa.c:3374
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(exact, dfa, musts, result, dfa, dfa->tindex, dfa->tindex, mp, i, ri, t, dfa->tokens, dfa->tokens, dm, dfa->musts, dfa->musts, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success)))
    goto done;
exact = 0;

....
Skipping nonlast:Priority -342
At location src/dfa.c:3375
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
musts = (must *)malloc((dfa->tindex + 1) * sizeof *musts);

....
Skipping nonlast:Priority -342
At location src/dfa.c:3375
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
musts = (must *)malloc((dfa->tindex + 1) * sizeof *musts);

....
Skipping nonlast:Priority -342
At location src/dfa.c:3375
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
musts = (must *)malloc((dfa->tindex + 1) * sizeof *musts);

....
Skipping nonlast:Priority -342
At location src/dfa.c:3375
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
musts = (must *)malloc((dfa->tindex + 1) * sizeof *musts);

....
Skipping nonlast:Priority -342
At location src/dfa.c:3375
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
musts = (must *)malloc((dfa->tindex + 1) * sizeof *musts);

....
Skipping nonlast:Priority -342
At location src/dfa.c:3375
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
musts = (must *)malloc((dfa->tindex + 1) * sizeof *musts);

....
Skipping nonlast:Priority -342
At location src/dfa.c:3375
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
musts = (must *)malloc((dfa->tindex + 1) * sizeof *musts);

....
Skipping nonlast:Priority -342
At location src/dfa.c:3375
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
musts = (must *)malloc((dfa->tindex + 1) * sizeof *musts);

....
Skipping nonlast:Priority -342
At location src/dfa.c:3375
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
musts = (must *)malloc((dfa->tindex + 1) * sizeof *musts);

....
Skipping nonlast addifexit:Priority 4658
At location src/dfa.c:3375
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(dfa, musts, dfa, dfa->tindex, dfa->tindex, exact, result, mp, i, ri, t, dfa->tokens, dfa->tokens, dm, dfa->musts, dfa->musts, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success)))
    return;
musts = (must *)malloc((dfa->tindex + 1) * sizeof *musts);

....
Skipping nonlast addifexit:Priority 4858
At location src/dfa.c:3375
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(dfa, musts, dfa, dfa->tindex, dfa->tindex, exact, result, mp, i, ri, t, dfa->tokens, dfa->tokens, dm, dfa->musts, dfa->musts, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success)))
    goto done;
musts = (must *)malloc((dfa->tindex + 1) * sizeof *musts);

....
Skipping nonlast:Priority -341
At location src/dfa.c:3376
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (musts == ((void *)0))
    return;

....
Skipping nonlast:Priority -341
At location src/dfa.c:3376
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (musts == ((void *)0))
    return;

....
Skipping nonlast:Priority -341
At location src/dfa.c:3376
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
if (musts == ((void *)0))
    return;

....
Skipping nonlast:Priority -341
At location src/dfa.c:3376
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
if (musts == ((void *)0))
    return;

....
Skipping nonlast:Priority -341
At location src/dfa.c:3376
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
if (musts == ((void *)0))
    return;

....
Skipping nonlast:Priority -341
At location src/dfa.c:3376
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
if (musts == ((void *)0))
    return;

....
Skipping nonlast:Priority -341
At location src/dfa.c:3376
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (musts == ((void *)0))
    return;

....
Skipping nonlast:Priority -341
At location src/dfa.c:3376
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (musts == ((void *)0))
    return;

....
Skipping nonlast:Priority -341
At location src/dfa.c:3376
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (musts == ((void *)0))
    return;

....
Skipping nonlast addifexit:Priority 3409
At location src/dfa.c:3376
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(musts, dfa, dfa, dfa->tindex, dfa->tindex, mp, exact, result, i, ri, t, dfa->tokens, dfa->tokens, dm, dfa->musts, dfa->musts, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success)))
    return;
if (musts == ((void *)0))
    return;

....
Skipping nonlast addifexit:Priority 3609
At location src/dfa.c:3376
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(musts, dfa, dfa, dfa->tindex, dfa->tindex, mp, exact, result, i, ri, t, dfa->tokens, dfa->tokens, dm, dfa->musts, dfa->musts, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success)))
    goto done;
if (musts == ((void *)0))
    return;

....
Skipping nonlast:Priority -340
At location src/dfa.c:3378
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
mp = musts;

....
Skipping nonlast:Priority -340
At location src/dfa.c:3378
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
mp = musts;

....
Skipping nonlast:Priority -340
At location src/dfa.c:3378
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
mp = musts;

....
Skipping nonlast:Priority -340
At location src/dfa.c:3378
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
mp = musts;

....
Skipping nonlast:Priority -340
At location src/dfa.c:3378
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
mp = musts;

....
Skipping nonlast:Priority -340
At location src/dfa.c:3378
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
mp = musts;

....
Skipping nonlast:Priority -340
At location src/dfa.c:3378
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
mp = musts;

....
Skipping nonlast:Priority -340
At location src/dfa.c:3378
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
mp = musts;

....
Skipping nonlast:Priority -340
At location src/dfa.c:3378
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
mp = musts;

....
Skipping nonlast addifexit:Priority 4660
At location src/dfa.c:3378
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(musts, mp, dfa, i, dfa, dfa->tindex, dfa->tindex, exact, result, ri, t, dfa->tokens, dfa->tokens, mp->is, mp->left, mp->right, mp->in, dm, dfa->musts, dfa->musts, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success)))
    return;
mp = musts;

....
Skipping nonlast addifexit:Priority 4860
At location src/dfa.c:3378
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(musts, mp, dfa, i, dfa, dfa->tindex, dfa->tindex, exact, result, ri, t, dfa->tokens, dfa->tokens, mp->is, mp->left, mp->right, mp->in, dm, dfa->musts, dfa->musts, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success)))
    goto done;
mp = musts;

....
Skipping nonlast:Priority -339
At location src/dfa.c:3379
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
for (i = 0; i <= dfa->tindex; ++i) 
    mp[i] = must0;

....
Skipping nonlast:Priority -339
At location src/dfa.c:3379
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
for (i = 0; i <= dfa->tindex; ++i) 
    mp[i] = must0;

....
Skipping nonlast:Priority -339
At location src/dfa.c:3379
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
for (i = 0; i <= dfa->tindex; ++i) 
    mp[i] = must0;

....
Skipping nonlast:Priority -339
At location src/dfa.c:3379
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
for (i = 0; i <= dfa->tindex; ++i) 
    mp[i] = must0;

....
Skipping nonlast:Priority -339
At location src/dfa.c:3379
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
for (i = 0; i <= dfa->tindex; ++i) 
    mp[i] = must0;

....
Skipping nonlast:Priority -339
At location src/dfa.c:3379
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
for (i = 0; i <= dfa->tindex; ++i) 
    mp[i] = must0;

....
Skipping nonlast:Priority -339
At location src/dfa.c:3379
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
for (i = 0; i <= dfa->tindex; ++i) 
    mp[i] = must0;

....
Skipping nonlast:Priority -339
At location src/dfa.c:3379
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
for (i = 0; i <= dfa->tindex; ++i) 
    mp[i] = must0;

....
Skipping nonlast:Priority -339
At location src/dfa.c:3379
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
for (i = 0; i <= dfa->tindex; ++i) 
    mp[i] = must0;

....
Skipping nonlast addifexit:Priority 4661
At location src/dfa.c:3379
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(dfa, i, dfa, dfa->tindex, dfa->tindex, musts, mp, mp[i].in, exact, mp[i].left, result, mp[i].right, mp[i].is, ri, t, dfa->tokens, dfa->tokens, mp->is, mp->left, mp->right, mp->in, dm, dfa->musts, dfa->musts, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success)))
    return;
for (i = 0; i <= dfa->tindex; ++i) 
    mp[i] = must0;

....
Skipping nonlast addifexit:Priority 4861
At location src/dfa.c:3379
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(dfa, i, dfa, dfa->tindex, dfa->tindex, musts, mp, mp[i].in, exact, mp[i].left, result, mp[i].right, mp[i].is, ri, t, dfa->tokens, dfa->tokens, mp->is, mp->left, mp->right, mp->in, dm, dfa->musts, dfa->musts, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success)))
    goto done;
for (i = 0; i <= dfa->tindex; ++i) 
    mp[i] = must0;

....
Skipping nonlast:Priority -338
At location src/dfa.c:3381
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
for (i = 0; i <= dfa->tindex; ++i) {
    mp[i].in = (char **)malloc(sizeof *mp[i].in);
    mp[i].left = malloc(2);
    mp[i].right = malloc(2);
    mp[i].is = malloc(2);
    if (mp[i].in == ((void *)0) || mp[i].left == ((void *)0) || mp[i].right == ((void *)0) || mp[i].is == ((void *)0))
        goto done;
    mp[i].left[0] = mp[i].right[0] = mp[i].is[0] = '\x00';
    mp[i].in[0] = ((void *)0);
}

....
Skipping nonlast:Priority -338
At location src/dfa.c:3381
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
for (i = 0; i <= dfa->tindex; ++i) {
    mp[i].in = (char **)malloc(sizeof *mp[i].in);
    mp[i].left = malloc(2);
    mp[i].right = malloc(2);
    mp[i].is = malloc(2);
    if (mp[i].in == ((void *)0) || mp[i].left == ((void *)0) || mp[i].right == ((void *)0) || mp[i].is == ((void *)0))
        goto done;
    mp[i].left[0] = mp[i].right[0] = mp[i].is[0] = '\x00';
    mp[i].in[0] = ((void *)0);
}

....
Skipping nonlast:Priority -338
At location src/dfa.c:3381
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
for (i = 0; i <= dfa->tindex; ++i) {
    mp[i].in = (char **)malloc(sizeof *mp[i].in);
    mp[i].left = malloc(2);
    mp[i].right = malloc(2);
    mp[i].is = malloc(2);
    if (mp[i].in == ((void *)0) || mp[i].left == ((void *)0) || mp[i].right == ((void *)0) || mp[i].is == ((void *)0))
        goto done;
    mp[i].left[0] = mp[i].right[0] = mp[i].is[0] = '\x00';
    mp[i].in[0] = ((void *)0);
}

....
Skipping nonlast:Priority -338
At location src/dfa.c:3381
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
for (i = 0; i <= dfa->tindex; ++i) {
    mp[i].in = (char **)malloc(sizeof *mp[i].in);
    mp[i].left = malloc(2);
    mp[i].right = malloc(2);
    mp[i].is = malloc(2);
    if (mp[i].in == ((void *)0) || mp[i].left == ((void *)0) || mp[i].right == ((void *)0) || mp[i].is == ((void *)0))
        goto done;
    mp[i].left[0] = mp[i].right[0] = mp[i].is[0] = '\x00';
    mp[i].in[0] = ((void *)0);
}

....
Skipping nonlast:Priority -338
At location src/dfa.c:3381
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
for (i = 0; i <= dfa->tindex; ++i) {
    mp[i].in = (char **)malloc(sizeof *mp[i].in);
    mp[i].left = malloc(2);
    mp[i].right = malloc(2);
    mp[i].is = malloc(2);
    if (mp[i].in == ((void *)0) || mp[i].left == ((void *)0) || mp[i].right == ((void *)0) || mp[i].is == ((void *)0))
        goto done;
    mp[i].left[0] = mp[i].right[0] = mp[i].is[0] = '\x00';
    mp[i].in[0] = ((void *)0);
}

....
Skipping nonlast:Priority -338
At location src/dfa.c:3381
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
for (i = 0; i <= dfa->tindex; ++i) {
    mp[i].in = (char **)malloc(sizeof *mp[i].in);
    mp[i].left = malloc(2);
    mp[i].right = malloc(2);
    mp[i].is = malloc(2);
    if (mp[i].in == ((void *)0) || mp[i].left == ((void *)0) || mp[i].right == ((void *)0) || mp[i].is == ((void *)0))
        goto done;
    mp[i].left[0] = mp[i].right[0] = mp[i].is[0] = '\x00';
    mp[i].in[0] = ((void *)0);
}

....
Skipping nonlast:Priority -338
At location src/dfa.c:3381
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
for (i = 0; i <= dfa->tindex; ++i) {
    mp[i].in = (char **)malloc(sizeof *mp[i].in);
    mp[i].left = malloc(2);
    mp[i].right = malloc(2);
    mp[i].is = malloc(2);
    if (mp[i].in == ((void *)0) || mp[i].left == ((void *)0) || mp[i].right == ((void *)0) || mp[i].is == ((void *)0))
        goto done;
    mp[i].left[0] = mp[i].right[0] = mp[i].is[0] = '\x00';
    mp[i].in[0] = ((void *)0);
}

....
Skipping nonlast:Priority -338
At location src/dfa.c:3381
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
for (i = 0; i <= dfa->tindex; ++i) {
    mp[i].in = (char **)malloc(sizeof *mp[i].in);
    mp[i].left = malloc(2);
    mp[i].right = malloc(2);
    mp[i].is = malloc(2);
    if (mp[i].in == ((void *)0) || mp[i].left == ((void *)0) || mp[i].right == ((void *)0) || mp[i].is == ((void *)0))
        goto done;
    mp[i].left[0] = mp[i].right[0] = mp[i].is[0] = '\x00';
    mp[i].in[0] = ((void *)0);
}

....
Skipping nonlast:Priority -338
At location src/dfa.c:3381
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
for (i = 0; i <= dfa->tindex; ++i) {
    mp[i].in = (char **)malloc(sizeof *mp[i].in);
    mp[i].left = malloc(2);
    mp[i].right = malloc(2);
    mp[i].is = malloc(2);
    if (mp[i].in == ((void *)0) || mp[i].left == ((void *)0) || mp[i].right == ((void *)0) || mp[i].is == ((void *)0))
        goto done;
    mp[i].left[0] = mp[i].right[0] = mp[i].is[0] = '\x00';
    mp[i].in[0] = ((void *)0);
}

....
Skipping nonlast addifexit:Priority 4662
At location src/dfa.c:3381
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(dfa, i, dfa, dfa->tindex, dfa->tindex, mp, mp[i].in, musts, mp[i].left, mp[i].right, mp[i].is, exact, result, ri, t, dfa->tokens, dfa->tokens, mp->is, mp->left, mp->right, mp->in, dm, dfa->musts, dfa->musts, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success)))
    return;
for (i = 0; i <= dfa->tindex; ++i) {
    mp[i].in = (char **)malloc(sizeof *mp[i].in);
    mp[i].left = malloc(2);
    mp[i].right = malloc(2);
    mp[i].is = malloc(2);
    if (mp[i].in == ((void *)0) || mp[i].left == ((void *)0) || mp[i].right == ((void *)0) || mp[i].is == ((void *)0))
        goto done;
    mp[i].left[0] = mp[i].right[0] = mp[i].is[0] = '\x00';
    mp[i].in[0] = ((void *)0);
}

....
Skipping nonlast addifexit:Priority 4862
At location src/dfa.c:3381
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(dfa, i, dfa, dfa->tindex, dfa->tindex, mp, mp[i].in, musts, mp[i].left, mp[i].right, mp[i].is, exact, result, ri, t, dfa->tokens, dfa->tokens, mp->is, mp->left, mp->right, mp->in, dm, dfa->musts, dfa->musts, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success)))
    goto done;
for (i = 0; i <= dfa->tindex; ++i) {
    mp[i].in = (char **)malloc(sizeof *mp[i].in);
    mp[i].left = malloc(2);
    mp[i].right = malloc(2);
    mp[i].is = malloc(2);
    if (mp[i].in == ((void *)0) || mp[i].left == ((void *)0) || mp[i].right == ((void *)0) || mp[i].is == ((void *)0))
        goto done;
    mp[i].left[0] = mp[i].right[0] = mp[i].is[0] = '\x00';
    mp[i].in[0] = ((void *)0);
}

....
Skipping nonlast:Priority 4663
At location src/dfa.c:3383
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
mp[i].in = (char **)malloc(sizeof *mp[i].in);

....
Skipping nonlast:Priority 4663
At location src/dfa.c:3383
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
mp[i].in = (char **)malloc(sizeof *mp[i].in);

....
Skipping nonlast:Priority 4663
At location src/dfa.c:3383
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
mp[i].in = (char **)malloc(sizeof *mp[i].in);

....
Skipping nonlast:Priority 4663
At location src/dfa.c:3383
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
mp[i].in = (char **)malloc(sizeof *mp[i].in);

....
Skipping nonlast:Priority 4663
At location src/dfa.c:3383
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
mp[i].in = (char **)malloc(sizeof *mp[i].in);

....
Skipping nonlast:Priority 4663
At location src/dfa.c:3383
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
mp[i].in = (char **)malloc(sizeof *mp[i].in);

....
Skipping nonlast:Priority 4663
At location src/dfa.c:3383
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
mp[i].in = (char **)malloc(sizeof *mp[i].in);

....
Skipping nonlast:Priority 4663
At location src/dfa.c:3383
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
mp[i].in = (char **)malloc(sizeof *mp[i].in);

....
Skipping nonlast:Priority 4663
At location src/dfa.c:3383
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
mp[i].in = (char **)malloc(sizeof *mp[i].in);

....
Skipping nonlast addifexit:Priority 9663
At location src/dfa.c:3383
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].in, mp[i].left, dfa, dfa, mp[i].right, mp[i].is, musts, exact, result, ri, t, mp->is, mp->left, mp->right, mp->in, dm)))
    return;
mp[i].in = (char **)malloc(sizeof *mp[i].in);

....
Skipping nonlast addifexit:Priority 9663
At location src/dfa.c:3383
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].in, mp[i].left, dfa, dfa, mp[i].right, mp[i].is, musts, exact, result, ri, t, mp->is, mp->left, mp->right, mp->in, dm)))
    break;
mp[i].in = (char **)malloc(sizeof *mp[i].in);

....
Skipping nonlast addifexit:Priority 9863
At location src/dfa.c:3383
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].in, mp[i].left, dfa, dfa, mp[i].right, mp[i].is, musts, exact, result, ri, t, mp->is, mp->left, mp->right, mp->in, dm)))
    goto done;
mp[i].in = (char **)malloc(sizeof *mp[i].in);

....
Skipping nonlast:Priority -336
At location src/dfa.c:3384
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
mp[i].left = malloc(2);

....
Skipping nonlast:Priority -336
At location src/dfa.c:3384
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
mp[i].left = malloc(2);

....
Skipping nonlast:Priority -336
At location src/dfa.c:3384
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
mp[i].left = malloc(2);

....
Skipping nonlast:Priority -336
At location src/dfa.c:3384
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
mp[i].left = malloc(2);

....
Skipping nonlast:Priority -336
At location src/dfa.c:3384
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
mp[i].left = malloc(2);

....
Skipping nonlast:Priority -336
At location src/dfa.c:3384
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
mp[i].left = malloc(2);

....
Skipping nonlast:Priority -336
At location src/dfa.c:3384
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
mp[i].left = malloc(2);

....
Skipping nonlast:Priority -336
At location src/dfa.c:3384
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
mp[i].left = malloc(2);

....
Skipping nonlast:Priority -336
At location src/dfa.c:3384
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
mp[i].left = malloc(2);

....
Skipping nonlast addifexit:Priority 4664
At location src/dfa.c:3384
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].left, mp[i].in, mp[i].right, mp[i].is, dfa, dfa, musts, exact, result, ri, t, mp->is, mp->left, mp->right, mp->in, dm)))
    return;
mp[i].left = malloc(2);

....
Skipping nonlast addifexit:Priority 4664
At location src/dfa.c:3384
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].left, mp[i].in, mp[i].right, mp[i].is, dfa, dfa, musts, exact, result, ri, t, mp->is, mp->left, mp->right, mp->in, dm)))
    break;
mp[i].left = malloc(2);

....
Skipping nonlast addifexit:Priority 4864
At location src/dfa.c:3384
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].left, mp[i].in, mp[i].right, mp[i].is, dfa, dfa, musts, exact, result, ri, t, mp->is, mp->left, mp->right, mp->in, dm)))
    goto done;
mp[i].left = malloc(2);

....
Skipping nonlast:Priority -335
At location src/dfa.c:3385
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
mp[i].right = malloc(2);

....
Skipping nonlast:Priority -335
At location src/dfa.c:3385
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
mp[i].right = malloc(2);

....
Skipping nonlast:Priority -335
At location src/dfa.c:3385
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
mp[i].right = malloc(2);

....
Skipping nonlast:Priority -335
At location src/dfa.c:3385
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
mp[i].right = malloc(2);

....
Skipping nonlast:Priority -335
At location src/dfa.c:3385
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
mp[i].right = malloc(2);

....
Skipping nonlast:Priority -335
At location src/dfa.c:3385
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
mp[i].right = malloc(2);

....
Skipping nonlast:Priority -335
At location src/dfa.c:3385
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
mp[i].right = malloc(2);

....
Skipping nonlast:Priority -335
At location src/dfa.c:3385
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
mp[i].right = malloc(2);

....
Skipping nonlast:Priority -335
At location src/dfa.c:3385
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
mp[i].right = malloc(2);

....
Skipping nonlast addifexit:Priority 4665
At location src/dfa.c:3385
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].right, mp[i].left, mp[i].is, mp[i].in, dfa, dfa, musts, exact, result, ri, t, mp->is, mp->left, mp->right, mp->in, dm)))
    return;
mp[i].right = malloc(2);

....
Skipping nonlast addifexit:Priority 4665
At location src/dfa.c:3385
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].right, mp[i].left, mp[i].is, mp[i].in, dfa, dfa, musts, exact, result, ri, t, mp->is, mp->left, mp->right, mp->in, dm)))
    break;
mp[i].right = malloc(2);

....
Skipping nonlast addifexit:Priority 4865
At location src/dfa.c:3385
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].right, mp[i].left, mp[i].is, mp[i].in, dfa, dfa, musts, exact, result, ri, t, mp->is, mp->left, mp->right, mp->in, dm)))
    goto done;
mp[i].right = malloc(2);

....
Skipping nonlast:Priority -334
At location src/dfa.c:3386
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
mp[i].is = malloc(2);

....
Skipping nonlast:Priority -334
At location src/dfa.c:3386
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
mp[i].is = malloc(2);

....
Skipping nonlast:Priority -334
At location src/dfa.c:3386
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
mp[i].is = malloc(2);

....
Skipping nonlast:Priority -334
At location src/dfa.c:3386
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
mp[i].is = malloc(2);

....
Skipping nonlast:Priority -334
At location src/dfa.c:3386
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
mp[i].is = malloc(2);

....
Skipping nonlast:Priority -334
At location src/dfa.c:3386
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
mp[i].is = malloc(2);

....
Skipping nonlast:Priority -334
At location src/dfa.c:3386
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
mp[i].is = malloc(2);

....
Skipping nonlast:Priority -334
At location src/dfa.c:3386
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
mp[i].is = malloc(2);

....
Skipping nonlast:Priority -334
At location src/dfa.c:3386
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
mp[i].is = malloc(2);

....
Skipping nonlast addifexit:Priority 4666
At location src/dfa.c:3386
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].is, mp[i].in, mp[i].left, mp[i].right, dfa, dfa, musts, exact, result, ri, t, mp->is, mp->left, mp->right, mp->in, dm)))
    return;
mp[i].is = malloc(2);

....
Skipping nonlast addifexit:Priority 4666
At location src/dfa.c:3386
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].is, mp[i].in, mp[i].left, mp[i].right, dfa, dfa, musts, exact, result, ri, t, mp->is, mp->left, mp->right, mp->in, dm)))
    break;
mp[i].is = malloc(2);

....
Skipping nonlast addifexit:Priority 4866
At location src/dfa.c:3386
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].is, mp[i].in, mp[i].left, mp[i].right, dfa, dfa, musts, exact, result, ri, t, mp->is, mp->left, mp->right, mp->in, dm)))
    goto done;
mp[i].is = malloc(2);

....
Skipping nonlast:Priority -333
At location src/dfa.c:3387
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (mp[i].in == ((void *)0) || mp[i].left == ((void *)0) || mp[i].right == ((void *)0) || mp[i].is == ((void *)0))
    goto done;

....
Skipping nonlast:Priority -333
At location src/dfa.c:3387
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (mp[i].in == ((void *)0) || mp[i].left == ((void *)0) || mp[i].right == ((void *)0) || mp[i].is == ((void *)0))
    goto done;

....
Skipping nonlast:Priority -333
At location src/dfa.c:3387
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
if (mp[i].in == ((void *)0) || mp[i].left == ((void *)0) || mp[i].right == ((void *)0) || mp[i].is == ((void *)0))
    goto done;

....
Skipping nonlast:Priority -333
At location src/dfa.c:3387
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
if (mp[i].in == ((void *)0) || mp[i].left == ((void *)0) || mp[i].right == ((void *)0) || mp[i].is == ((void *)0))
    goto done;

....
Skipping nonlast:Priority -333
At location src/dfa.c:3387
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
if (mp[i].in == ((void *)0) || mp[i].left == ((void *)0) || mp[i].right == ((void *)0) || mp[i].is == ((void *)0))
    goto done;

....
Skipping nonlast:Priority -333
At location src/dfa.c:3387
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
if (mp[i].in == ((void *)0) || mp[i].left == ((void *)0) || mp[i].right == ((void *)0) || mp[i].is == ((void *)0))
    goto done;

....
Skipping nonlast:Priority -333
At location src/dfa.c:3387
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (mp[i].in == ((void *)0) || mp[i].left == ((void *)0) || mp[i].right == ((void *)0) || mp[i].is == ((void *)0))
    goto done;

....
Skipping nonlast:Priority -333
At location src/dfa.c:3387
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (mp[i].in == ((void *)0) || mp[i].left == ((void *)0) || mp[i].right == ((void *)0) || mp[i].is == ((void *)0))
    goto done;

....
Skipping nonlast:Priority -333
At location src/dfa.c:3387
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (mp[i].in == ((void *)0) || mp[i].left == ((void *)0) || mp[i].right == ((void *)0) || mp[i].is == ((void *)0))
    goto done;

....
Skipping nonlast addifexit:Priority 3417
At location src/dfa.c:3387
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].in, mp[i].left, mp[i].right, mp[i].is, dfa, dfa, musts, exact, result, ri, t, mp->is, mp->left, mp->right, mp->in, dm)))
    return;
if (mp[i].in == ((void *)0) || mp[i].left == ((void *)0) || mp[i].right == ((void *)0) || mp[i].is == ((void *)0))
    goto done;

....
Skipping nonlast addifexit:Priority 3417
At location src/dfa.c:3387
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].in, mp[i].left, mp[i].right, mp[i].is, dfa, dfa, musts, exact, result, ri, t, mp->is, mp->left, mp->right, mp->in, dm)))
    break;
if (mp[i].in == ((void *)0) || mp[i].left == ((void *)0) || mp[i].right == ((void *)0) || mp[i].is == ((void *)0))
    goto done;

....
Skipping nonlast addifexit:Priority 3617
At location src/dfa.c:3387
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].in, mp[i].left, mp[i].right, mp[i].is, dfa, dfa, musts, exact, result, ri, t, mp->is, mp->left, mp->right, mp->in, dm)))
    goto done;
if (mp[i].in == ((void *)0) || mp[i].left == ((void *)0) || mp[i].right == ((void *)0) || mp[i].is == ((void *)0))
    goto done;

....
Skipping nonlast:Priority -332
At location src/dfa.c:3390
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
mp[i].left[0] = mp[i].right[0] = mp[i].is[0] = '\x00';

....
Skipping nonlast:Priority -332
At location src/dfa.c:3390
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
mp[i].left[0] = mp[i].right[0] = mp[i].is[0] = '\x00';

....
Skipping nonlast:Priority -332
At location src/dfa.c:3390
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
mp[i].left[0] = mp[i].right[0] = mp[i].is[0] = '\x00';

....
Skipping nonlast:Priority -332
At location src/dfa.c:3390
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
mp[i].left[0] = mp[i].right[0] = mp[i].is[0] = '\x00';

....
Skipping nonlast:Priority -332
At location src/dfa.c:3390
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
mp[i].left[0] = mp[i].right[0] = mp[i].is[0] = '\x00';

....
Skipping nonlast:Priority -332
At location src/dfa.c:3390
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
mp[i].left[0] = mp[i].right[0] = mp[i].is[0] = '\x00';

....
Skipping nonlast:Priority -332
At location src/dfa.c:3390
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
mp[i].left[0] = mp[i].right[0] = mp[i].is[0] = '\x00';

....
Skipping nonlast:Priority -332
At location src/dfa.c:3390
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
mp[i].left[0] = mp[i].right[0] = mp[i].is[0] = '\x00';

....
Skipping nonlast:Priority -332
At location src/dfa.c:3390
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
mp[i].left[0] = mp[i].right[0] = mp[i].is[0] = '\x00';

....
Skipping nonlast addifexit:Priority 4668
At location src/dfa.c:3390
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].left, mp[i].right, mp[i].is, mp[i].in, dfa, dfa, musts, ri, t, exact, result, mp->is, mp->left, mp->right, mp->in, dm)))
    return;
mp[i].left[0] = mp[i].right[0] = mp[i].is[0] = '\x00';

....
Skipping nonlast addifexit:Priority 4668
At location src/dfa.c:3390
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].left, mp[i].right, mp[i].is, mp[i].in, dfa, dfa, musts, ri, t, exact, result, mp->is, mp->left, mp->right, mp->in, dm)))
    break;
mp[i].left[0] = mp[i].right[0] = mp[i].is[0] = '\x00';

....
Skipping nonlast addifexit:Priority 4868
At location src/dfa.c:3390
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].left, mp[i].right, mp[i].is, mp[i].in, dfa, dfa, musts, ri, t, exact, result, mp->is, mp->left, mp->right, mp->in, dm)))
    goto done;
mp[i].left[0] = mp[i].right[0] = mp[i].is[0] = '\x00';

....
Skipping nonlast:Priority -330
At location src/dfa.c:3402
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
for (ri = 0; ri < dfa->tindex; ++ri) {
    switch (t = dfa->tokens[ri]) {
      case LPAREN:
      case RPAREN:
        goto done;
      case EMPTY:
      case BEGLINE:
      case ENDLINE:
      case BEGWORD:
      case ENDWORD:
      case LIMWORD:
      case NOTLIMWORD:
      case BACKREF:
        resetmust(mp);
        break;
      case STAR:
      case QMARK:
        if (mp <= musts)
            goto done;
        --mp;
        resetmust(mp);
        break;
      case OR:
      case ORTOP:
        if (mp < &musts[2])
            goto done;
        {
            char **new;
            must *lmp;
            must *rmp;
            int j, ln, rn, n;
            rmp = --mp;
            lmp = --mp;
            if (__extension__ ({
                size_t __s1_len, __s2_len;
                (__builtin_constant_p(lmp->is) && __builtin_constant_p(rmp->is) && (__s1_len = __builtin_strlen(lmp->is) , __s2_len = __builtin_strlen(rmp->is) , (!((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(lmp->is, rmp->is) : (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) && (__s1_len = __builtin_strlen(lmp->is) , __s1_len < 4) ? (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (__extension__ ({
                    const unsigned char *__s2 = (const unsigned char *)(const char *)(rmp->is);
                    int __result = (((const unsigned char *)(const char *)(lmp->is))[0] - __s2[0]);
                    if (__s1_len > 0 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(lmp->is))[1] - __s2[1]);
                        if (__s1_len > 1 && __result == 0) {
                            __result = (((const unsigned char *)(const char *)(lmp->is))[2] - __s2[2]);
                            if (__s1_len > 2 && __result == 0)
                                __result = (((const unsigned char *)(const char *)(lmp->is))[3] - __s2[3]);
                        }
                    }
                    __result;
                }))) : (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) && (__s2_len = __builtin_strlen(rmp->is) , __s2_len < 4) ? (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (-(__extension__ ({
                    const unsigned char *__s2 = (const unsigned char *)(const char *)(lmp->is);
                    int __result = (((const unsigned char *)(const char *)(rmp->is))[0] - __s2[0]);
                    if (__s2_len > 0 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(rmp->is))[1] - __s2[1]);
                        if (__s2_len > 1 && __result == 0) {
                            __result = (((const unsigned char *)(const char *)(rmp->is))[2] - __s2[2]);
                            if (__s2_len > 2 && __result == 0)
                                __result = (((const unsigned char *)(const char *)(rmp->is))[3] - __s2[3]);
                        }
                    }
                    __result;
                })))) : __builtin_strcmp(lmp->is, rmp->is))));
            }) != 0)
                lmp->is[0] = '\x00';
            i = 0;
            while (lmp->left[i] != '\x00' && lmp->left[i] == rmp->left[i])
                ++i;
            lmp->left[i] = '\x00';
            ln = strlen(lmp->right);
            rn = strlen(rmp->right);
            n = ln;
            if (n > rn)
                n = rn;
            for (i = 0; i < n; ++i) 
                if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
                    break;
            for (j = 0; j < i; ++j) 
                lmp->right[j] = lmp->right[(ln - i) + j];
            lmp->right[j] = '\x00';
            new = inboth(lmp->in, rmp->in);
            if (new == ((void *)0))
                goto done;
            freelist(lmp->in);
            free((char *)lmp->in);
            lmp->in = new;
        }
        break;
      case PLUS:
        if (mp <= musts)
            goto done;
        --mp;
        mp->is[0] = '\x00';
        break;
      case END:
        if (mp != &musts[1])
            goto done;
        for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
            if (strlen(musts[0].in[i]) > strlen(result))
                result = musts[0].in[i];
        if (__extension__ ({
            size_t __s1_len, __s2_len;
            (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
                int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
                if (__s1_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
                    if (__s1_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                        if (__s1_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
                    }
                }
                __result;
            }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
                int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
                if (__s2_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
                    if (__s2_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                        if (__s2_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
                    }
                }
                __result;
            })))) : __builtin_strcmp(result, musts[0].is))));
        }) == 0)
            exact = 1;
        goto done;
      case CAT:
        if (mp < &musts[2])
            goto done;
        {
            must *lmp;
            must *rmp;
            rmp = --mp;
            lmp = --mp;
            lmp->in = addlists(lmp->in, rmp->in);
            if (lmp->in == ((void *)0))
                goto done;
            if (lmp->right[0] != '\x00' && rmp->left[0] != '\x00') {
                char *tp;
                tp = icpyalloc(lmp->right);
                if (tp == ((void *)0))
                    goto done;
                tp = icatalloc(tp, rmp->left);
                if (tp == ((void *)0))
                    goto done;
                lmp->in = enlist(lmp->in, tp, strlen(tp));
                free(tp);
                if (lmp->in == ((void *)0))
                    goto done;
            }
            if (lmp->is[0] != '\x00') {
                lmp->left = icatalloc(lmp->left, rmp->left);
                if (lmp->left == ((void *)0))
                    goto done;
            }
            if (rmp->is[0] == '\x00')
                lmp->right[0] = '\x00';
            lmp->right = icatalloc(lmp->right, rmp->right);
            if (lmp->right == ((void *)0))
                goto done;
            if (lmp->is[0] != '\x00' && rmp->is[0] != '\x00') {
                lmp->is = icatalloc(lmp->is, rmp->is);
                if (lmp->is == ((void *)0))
                    goto done;
            } else
                lmp->is[0] = '\x00';
        }
        break;
      default:
        if (t < END) {
            goto done;
        } else if (t == '\x00') {
            goto done;
        } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
            resetmust(mp);
        } else {
            resetmust(mp);
            mp->is[0] = mp->left[0] = mp->right[0] = t;
            mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
            mp->in = enlist(mp->in, mp->is, (size_t)1);
            if (mp->in == ((void *)0))
                goto done;
        }
        break;
    }
    ++mp;
}

....
Skipping nonlast:Priority -330
At location src/dfa.c:3402
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
for (ri = 0; ri < dfa->tindex; ++ri) {
    switch (t = dfa->tokens[ri]) {
      case LPAREN:
      case RPAREN:
        goto done;
      case EMPTY:
      case BEGLINE:
      case ENDLINE:
      case BEGWORD:
      case ENDWORD:
      case LIMWORD:
      case NOTLIMWORD:
      case BACKREF:
        resetmust(mp);
        break;
      case STAR:
      case QMARK:
        if (mp <= musts)
            goto done;
        --mp;
        resetmust(mp);
        break;
      case OR:
      case ORTOP:
        if (mp < &musts[2])
            goto done;
        {
            char **new;
            must *lmp;
            must *rmp;
            int j, ln, rn, n;
            rmp = --mp;
            lmp = --mp;
            if (__extension__ ({
                size_t __s1_len, __s2_len;
                (__builtin_constant_p(lmp->is) && __builtin_constant_p(rmp->is) && (__s1_len = __builtin_strlen(lmp->is) , __s2_len = __builtin_strlen(rmp->is) , (!((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(lmp->is, rmp->is) : (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) && (__s1_len = __builtin_strlen(lmp->is) , __s1_len < 4) ? (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (__extension__ ({
                    const unsigned char *__s2 = (const unsigned char *)(const char *)(rmp->is);
                    int __result = (((const unsigned char *)(const char *)(lmp->is))[0] - __s2[0]);
                    if (__s1_len > 0 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(lmp->is))[1] - __s2[1]);
                        if (__s1_len > 1 && __result == 0) {
                            __result = (((const unsigned char *)(const char *)(lmp->is))[2] - __s2[2]);
                            if (__s1_len > 2 && __result == 0)
                                __result = (((const unsigned char *)(const char *)(lmp->is))[3] - __s2[3]);
                        }
                    }
                    __result;
                }))) : (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) && (__s2_len = __builtin_strlen(rmp->is) , __s2_len < 4) ? (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (-(__extension__ ({
                    const unsigned char *__s2 = (const unsigned char *)(const char *)(lmp->is);
                    int __result = (((const unsigned char *)(const char *)(rmp->is))[0] - __s2[0]);
                    if (__s2_len > 0 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(rmp->is))[1] - __s2[1]);
                        if (__s2_len > 1 && __result == 0) {
                            __result = (((const unsigned char *)(const char *)(rmp->is))[2] - __s2[2]);
                            if (__s2_len > 2 && __result == 0)
                                __result = (((const unsigned char *)(const char *)(rmp->is))[3] - __s2[3]);
                        }
                    }
                    __result;
                })))) : __builtin_strcmp(lmp->is, rmp->is))));
            }) != 0)
                lmp->is[0] = '\x00';
            i = 0;
            while (lmp->left[i] != '\x00' && lmp->left[i] == rmp->left[i])
                ++i;
            lmp->left[i] = '\x00';
            ln = strlen(lmp->right);
            rn = strlen(rmp->right);
            n = ln;
            if (n > rn)
                n = rn;
            for (i = 0; i < n; ++i) 
                if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
                    break;
            for (j = 0; j < i; ++j) 
                lmp->right[j] = lmp->right[(ln - i) + j];
            lmp->right[j] = '\x00';
            new = inboth(lmp->in, rmp->in);
            if (new == ((void *)0))
                goto done;
            freelist(lmp->in);
            free((char *)lmp->in);
            lmp->in = new;
        }
        break;
      case PLUS:
        if (mp <= musts)
            goto done;
        --mp;
        mp->is[0] = '\x00';
        break;
      case END:
        if (mp != &musts[1])
            goto done;
        for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
            if (strlen(musts[0].in[i]) > strlen(result))
                result = musts[0].in[i];
        if (__extension__ ({
            size_t __s1_len, __s2_len;
            (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
                int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
                if (__s1_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
                    if (__s1_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                        if (__s1_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
                    }
                }
                __result;
            }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
                int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
                if (__s2_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
                    if (__s2_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                        if (__s2_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
                    }
                }
                __result;
            })))) : __builtin_strcmp(result, musts[0].is))));
        }) == 0)
            exact = 1;
        goto done;
      case CAT:
        if (mp < &musts[2])
            goto done;
        {
            must *lmp;
            must *rmp;
            rmp = --mp;
            lmp = --mp;
            lmp->in = addlists(lmp->in, rmp->in);
            if (lmp->in == ((void *)0))
                goto done;
            if (lmp->right[0] != '\x00' && rmp->left[0] != '\x00') {
                char *tp;
                tp = icpyalloc(lmp->right);
                if (tp == ((void *)0))
                    goto done;
                tp = icatalloc(tp, rmp->left);
                if (tp == ((void *)0))
                    goto done;
                lmp->in = enlist(lmp->in, tp, strlen(tp));
                free(tp);
                if (lmp->in == ((void *)0))
                    goto done;
            }
            if (lmp->is[0] != '\x00') {
                lmp->left = icatalloc(lmp->left, rmp->left);
                if (lmp->left == ((void *)0))
                    goto done;
            }
            if (rmp->is[0] == '\x00')
                lmp->right[0] = '\x00';
            lmp->right = icatalloc(lmp->right, rmp->right);
            if (lmp->right == ((void *)0))
                goto done;
            if (lmp->is[0] != '\x00' && rmp->is[0] != '\x00') {
                lmp->is = icatalloc(lmp->is, rmp->is);
                if (lmp->is == ((void *)0))
                    goto done;
            } else
                lmp->is[0] = '\x00';
        }
        break;
      default:
        if (t < END) {
            goto done;
        } else if (t == '\x00') {
            goto done;
        } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
            resetmust(mp);
        } else {
            resetmust(mp);
            mp->is[0] = mp->left[0] = mp->right[0] = t;
            mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
            mp->in = enlist(mp->in, mp->is, (size_t)1);
            if (mp->in == ((void *)0))
                goto done;
        }
        break;
    }
    ++mp;
}

....
Skipping nonlast:Priority -330
At location src/dfa.c:3402
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
for (ri = 0; ri < dfa->tindex; ++ri) {
    switch (t = dfa->tokens[ri]) {
      case LPAREN:
      case RPAREN:
        goto done;
      case EMPTY:
      case BEGLINE:
      case ENDLINE:
      case BEGWORD:
      case ENDWORD:
      case LIMWORD:
      case NOTLIMWORD:
      case BACKREF:
        resetmust(mp);
        break;
      case STAR:
      case QMARK:
        if (mp <= musts)
            goto done;
        --mp;
        resetmust(mp);
        break;
      case OR:
      case ORTOP:
        if (mp < &musts[2])
            goto done;
        {
            char **new;
            must *lmp;
            must *rmp;
            int j, ln, rn, n;
            rmp = --mp;
            lmp = --mp;
            if (__extension__ ({
                size_t __s1_len, __s2_len;
                (__builtin_constant_p(lmp->is) && __builtin_constant_p(rmp->is) && (__s1_len = __builtin_strlen(lmp->is) , __s2_len = __builtin_strlen(rmp->is) , (!((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(lmp->is, rmp->is) : (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) && (__s1_len = __builtin_strlen(lmp->is) , __s1_len < 4) ? (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (__extension__ ({
                    const unsigned char *__s2 = (const unsigned char *)(const char *)(rmp->is);
                    int __result = (((const unsigned char *)(const char *)(lmp->is))[0] - __s2[0]);
                    if (__s1_len > 0 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(lmp->is))[1] - __s2[1]);
                        if (__s1_len > 1 && __result == 0) {
                            __result = (((const unsigned char *)(const char *)(lmp->is))[2] - __s2[2]);
                            if (__s1_len > 2 && __result == 0)
                                __result = (((const unsigned char *)(const char *)(lmp->is))[3] - __s2[3]);
                        }
                    }
                    __result;
                }))) : (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) && (__s2_len = __builtin_strlen(rmp->is) , __s2_len < 4) ? (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (-(__extension__ ({
                    const unsigned char *__s2 = (const unsigned char *)(const char *)(lmp->is);
                    int __result = (((const unsigned char *)(const char *)(rmp->is))[0] - __s2[0]);
                    if (__s2_len > 0 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(rmp->is))[1] - __s2[1]);
                        if (__s2_len > 1 && __result == 0) {
                            __result = (((const unsigned char *)(const char *)(rmp->is))[2] - __s2[2]);
                            if (__s2_len > 2 && __result == 0)
                                __result = (((const unsigned char *)(const char *)(rmp->is))[3] - __s2[3]);
                        }
                    }
                    __result;
                })))) : __builtin_strcmp(lmp->is, rmp->is))));
            }) != 0)
                lmp->is[0] = '\x00';
            i = 0;
            while (lmp->left[i] != '\x00' && lmp->left[i] == rmp->left[i])
                ++i;
            lmp->left[i] = '\x00';
            ln = strlen(lmp->right);
            rn = strlen(rmp->right);
            n = ln;
            if (n > rn)
                n = rn;
            for (i = 0; i < n; ++i) 
                if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
                    break;
            for (j = 0; j < i; ++j) 
                lmp->right[j] = lmp->right[(ln - i) + j];
            lmp->right[j] = '\x00';
            new = inboth(lmp->in, rmp->in);
            if (new == ((void *)0))
                goto done;
            freelist(lmp->in);
            free((char *)lmp->in);
            lmp->in = new;
        }
        break;
      case PLUS:
        if (mp <= musts)
            goto done;
        --mp;
        mp->is[0] = '\x00';
        break;
      case END:
        if (mp != &musts[1])
            goto done;
        for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
            if (strlen(musts[0].in[i]) > strlen(result))
                result = musts[0].in[i];
        if (__extension__ ({
            size_t __s1_len, __s2_len;
            (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
                int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
                if (__s1_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
                    if (__s1_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                        if (__s1_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
                    }
                }
                __result;
            }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
                int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
                if (__s2_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
                    if (__s2_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                        if (__s2_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
                    }
                }
                __result;
            })))) : __builtin_strcmp(result, musts[0].is))));
        }) == 0)
            exact = 1;
        goto done;
      case CAT:
        if (mp < &musts[2])
            goto done;
        {
            must *lmp;
            must *rmp;
            rmp = --mp;
            lmp = --mp;
            lmp->in = addlists(lmp->in, rmp->in);
            if (lmp->in == ((void *)0))
                goto done;
            if (lmp->right[0] != '\x00' && rmp->left[0] != '\x00') {
                char *tp;
                tp = icpyalloc(lmp->right);
                if (tp == ((void *)0))
                    goto done;
                tp = icatalloc(tp, rmp->left);
                if (tp == ((void *)0))
                    goto done;
                lmp->in = enlist(lmp->in, tp, strlen(tp));
                free(tp);
                if (lmp->in == ((void *)0))
                    goto done;
            }
            if (lmp->is[0] != '\x00') {
                lmp->left = icatalloc(lmp->left, rmp->left);
                if (lmp->left == ((void *)0))
                    goto done;
            }
            if (rmp->is[0] == '\x00')
                lmp->right[0] = '\x00';
            lmp->right = icatalloc(lmp->right, rmp->right);
            if (lmp->right == ((void *)0))
                goto done;
            if (lmp->is[0] != '\x00' && rmp->is[0] != '\x00') {
                lmp->is = icatalloc(lmp->is, rmp->is);
                if (lmp->is == ((void *)0))
                    goto done;
            } else
                lmp->is[0] = '\x00';
        }
        break;
      default:
        if (t < END) {
            goto done;
        } else if (t == '\x00') {
            goto done;
        } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
            resetmust(mp);
        } else {
            resetmust(mp);
            mp->is[0] = mp->left[0] = mp->right[0] = t;
            mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
            mp->in = enlist(mp->in, mp->is, (size_t)1);
            if (mp->in == ((void *)0))
                goto done;
        }
        break;
    }
    ++mp;
}

....
Skipping nonlast:Priority -330
At location src/dfa.c:3402
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
for (ri = 0; ri < dfa->tindex; ++ri) {
    switch (t = dfa->tokens[ri]) {
      case LPAREN:
      case RPAREN:
        goto done;
      case EMPTY:
      case BEGLINE:
      case ENDLINE:
      case BEGWORD:
      case ENDWORD:
      case LIMWORD:
      case NOTLIMWORD:
      case BACKREF:
        resetmust(mp);
        break;
      case STAR:
      case QMARK:
        if (mp <= musts)
            goto done;
        --mp;
        resetmust(mp);
        break;
      case OR:
      case ORTOP:
        if (mp < &musts[2])
            goto done;
        {
            char **new;
            must *lmp;
            must *rmp;
            int j, ln, rn, n;
            rmp = --mp;
            lmp = --mp;
            if (__extension__ ({
                size_t __s1_len, __s2_len;
                (__builtin_constant_p(lmp->is) && __builtin_constant_p(rmp->is) && (__s1_len = __builtin_strlen(lmp->is) , __s2_len = __builtin_strlen(rmp->is) , (!((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(lmp->is, rmp->is) : (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) && (__s1_len = __builtin_strlen(lmp->is) , __s1_len < 4) ? (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (__extension__ ({
                    const unsigned char *__s2 = (const unsigned char *)(const char *)(rmp->is);
                    int __result = (((const unsigned char *)(const char *)(lmp->is))[0] - __s2[0]);
                    if (__s1_len > 0 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(lmp->is))[1] - __s2[1]);
                        if (__s1_len > 1 && __result == 0) {
                            __result = (((const unsigned char *)(const char *)(lmp->is))[2] - __s2[2]);
                            if (__s1_len > 2 && __result == 0)
                                __result = (((const unsigned char *)(const char *)(lmp->is))[3] - __s2[3]);
                        }
                    }
                    __result;
                }))) : (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) && (__s2_len = __builtin_strlen(rmp->is) , __s2_len < 4) ? (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (-(__extension__ ({
                    const unsigned char *__s2 = (const unsigned char *)(const char *)(lmp->is);
                    int __result = (((const unsigned char *)(const char *)(rmp->is))[0] - __s2[0]);
                    if (__s2_len > 0 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(rmp->is))[1] - __s2[1]);
                        if (__s2_len > 1 && __result == 0) {
                            __result = (((const unsigned char *)(const char *)(rmp->is))[2] - __s2[2]);
                            if (__s2_len > 2 && __result == 0)
                                __result = (((const unsigned char *)(const char *)(rmp->is))[3] - __s2[3]);
                        }
                    }
                    __result;
                })))) : __builtin_strcmp(lmp->is, rmp->is))));
            }) != 0)
                lmp->is[0] = '\x00';
            i = 0;
            while (lmp->left[i] != '\x00' && lmp->left[i] == rmp->left[i])
                ++i;
            lmp->left[i] = '\x00';
            ln = strlen(lmp->right);
            rn = strlen(rmp->right);
            n = ln;
            if (n > rn)
                n = rn;
            for (i = 0; i < n; ++i) 
                if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
                    break;
            for (j = 0; j < i; ++j) 
                lmp->right[j] = lmp->right[(ln - i) + j];
            lmp->right[j] = '\x00';
            new = inboth(lmp->in, rmp->in);
            if (new == ((void *)0))
                goto done;
            freelist(lmp->in);
            free((char *)lmp->in);
            lmp->in = new;
        }
        break;
      case PLUS:
        if (mp <= musts)
            goto done;
        --mp;
        mp->is[0] = '\x00';
        break;
      case END:
        if (mp != &musts[1])
            goto done;
        for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
            if (strlen(musts[0].in[i]) > strlen(result))
                result = musts[0].in[i];
        if (__extension__ ({
            size_t __s1_len, __s2_len;
            (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
                int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
                if (__s1_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
                    if (__s1_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                        if (__s1_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
                    }
                }
                __result;
            }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
                int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
                if (__s2_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
                    if (__s2_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                        if (__s2_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
                    }
                }
                __result;
            })))) : __builtin_strcmp(result, musts[0].is))));
        }) == 0)
            exact = 1;
        goto done;
      case CAT:
        if (mp < &musts[2])
            goto done;
        {
            must *lmp;
            must *rmp;
            rmp = --mp;
            lmp = --mp;
            lmp->in = addlists(lmp->in, rmp->in);
            if (lmp->in == ((void *)0))
                goto done;
            if (lmp->right[0] != '\x00' && rmp->left[0] != '\x00') {
                char *tp;
                tp = icpyalloc(lmp->right);
                if (tp == ((void *)0))
                    goto done;
                tp = icatalloc(tp, rmp->left);
                if (tp == ((void *)0))
                    goto done;
                lmp->in = enlist(lmp->in, tp, strlen(tp));
                free(tp);
                if (lmp->in == ((void *)0))
                    goto done;
            }
            if (lmp->is[0] != '\x00') {
                lmp->left = icatalloc(lmp->left, rmp->left);
                if (lmp->left == ((void *)0))
                    goto done;
            }
            if (rmp->is[0] == '\x00')
                lmp->right[0] = '\x00';
            lmp->right = icatalloc(lmp->right, rmp->right);
            if (lmp->right == ((void *)0))
                goto done;
            if (lmp->is[0] != '\x00' && rmp->is[0] != '\x00') {
                lmp->is = icatalloc(lmp->is, rmp->is);
                if (lmp->is == ((void *)0))
                    goto done;
            } else
                lmp->is[0] = '\x00';
        }
        break;
      default:
        if (t < END) {
            goto done;
        } else if (t == '\x00') {
            goto done;
        } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
            resetmust(mp);
        } else {
            resetmust(mp);
            mp->is[0] = mp->left[0] = mp->right[0] = t;
            mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
            mp->in = enlist(mp->in, mp->is, (size_t)1);
            if (mp->in == ((void *)0))
                goto done;
        }
        break;
    }
    ++mp;
}

....
Skipping nonlast:Priority -330
At location src/dfa.c:3402
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
for (ri = 0; ri < dfa->tindex; ++ri) {
    switch (t = dfa->tokens[ri]) {
      case LPAREN:
      case RPAREN:
        goto done;
      case EMPTY:
      case BEGLINE:
      case ENDLINE:
      case BEGWORD:
      case ENDWORD:
      case LIMWORD:
      case NOTLIMWORD:
      case BACKREF:
        resetmust(mp);
        break;
      case STAR:
      case QMARK:
        if (mp <= musts)
            goto done;
        --mp;
        resetmust(mp);
        break;
      case OR:
      case ORTOP:
        if (mp < &musts[2])
            goto done;
        {
            char **new;
            must *lmp;
            must *rmp;
            int j, ln, rn, n;
            rmp = --mp;
            lmp = --mp;
            if (__extension__ ({
                size_t __s1_len, __s2_len;
                (__builtin_constant_p(lmp->is) && __builtin_constant_p(rmp->is) && (__s1_len = __builtin_strlen(lmp->is) , __s2_len = __builtin_strlen(rmp->is) , (!((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(lmp->is, rmp->is) : (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) && (__s1_len = __builtin_strlen(lmp->is) , __s1_len < 4) ? (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (__extension__ ({
                    const unsigned char *__s2 = (const unsigned char *)(const char *)(rmp->is);
                    int __result = (((const unsigned char *)(const char *)(lmp->is))[0] - __s2[0]);
                    if (__s1_len > 0 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(lmp->is))[1] - __s2[1]);
                        if (__s1_len > 1 && __result == 0) {
                            __result = (((const unsigned char *)(const char *)(lmp->is))[2] - __s2[2]);
                            if (__s1_len > 2 && __result == 0)
                                __result = (((const unsigned char *)(const char *)(lmp->is))[3] - __s2[3]);
                        }
                    }
                    __result;
                }))) : (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) && (__s2_len = __builtin_strlen(rmp->is) , __s2_len < 4) ? (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (-(__extension__ ({
                    const unsigned char *__s2 = (const unsigned char *)(const char *)(lmp->is);
                    int __result = (((const unsigned char *)(const char *)(rmp->is))[0] - __s2[0]);
                    if (__s2_len > 0 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(rmp->is))[1] - __s2[1]);
                        if (__s2_len > 1 && __result == 0) {
                            __result = (((const unsigned char *)(const char *)(rmp->is))[2] - __s2[2]);
                            if (__s2_len > 2 && __result == 0)
                                __result = (((const unsigned char *)(const char *)(rmp->is))[3] - __s2[3]);
                        }
                    }
                    __result;
                })))) : __builtin_strcmp(lmp->is, rmp->is))));
            }) != 0)
                lmp->is[0] = '\x00';
            i = 0;
            while (lmp->left[i] != '\x00' && lmp->left[i] == rmp->left[i])
                ++i;
            lmp->left[i] = '\x00';
            ln = strlen(lmp->right);
            rn = strlen(rmp->right);
            n = ln;
            if (n > rn)
                n = rn;
            for (i = 0; i < n; ++i) 
                if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
                    break;
            for (j = 0; j < i; ++j) 
                lmp->right[j] = lmp->right[(ln - i) + j];
            lmp->right[j] = '\x00';
            new = inboth(lmp->in, rmp->in);
            if (new == ((void *)0))
                goto done;
            freelist(lmp->in);
            free((char *)lmp->in);
            lmp->in = new;
        }
        break;
      case PLUS:
        if (mp <= musts)
            goto done;
        --mp;
        mp->is[0] = '\x00';
        break;
      case END:
        if (mp != &musts[1])
            goto done;
        for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
            if (strlen(musts[0].in[i]) > strlen(result))
                result = musts[0].in[i];
        if (__extension__ ({
            size_t __s1_len, __s2_len;
            (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
                int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
                if (__s1_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
                    if (__s1_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                        if (__s1_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
                    }
                }
                __result;
            }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
                int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
                if (__s2_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
                    if (__s2_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                        if (__s2_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
                    }
                }
                __result;
            })))) : __builtin_strcmp(result, musts[0].is))));
        }) == 0)
            exact = 1;
        goto done;
      case CAT:
        if (mp < &musts[2])
            goto done;
        {
            must *lmp;
            must *rmp;
            rmp = --mp;
            lmp = --mp;
            lmp->in = addlists(lmp->in, rmp->in);
            if (lmp->in == ((void *)0))
                goto done;
            if (lmp->right[0] != '\x00' && rmp->left[0] != '\x00') {
                char *tp;
                tp = icpyalloc(lmp->right);
                if (tp == ((void *)0))
                    goto done;
                tp = icatalloc(tp, rmp->left);
                if (tp == ((void *)0))
                    goto done;
                lmp->in = enlist(lmp->in, tp, strlen(tp));
                free(tp);
                if (lmp->in == ((void *)0))
                    goto done;
            }
            if (lmp->is[0] != '\x00') {
                lmp->left = icatalloc(lmp->left, rmp->left);
                if (lmp->left == ((void *)0))
                    goto done;
            }
            if (rmp->is[0] == '\x00')
                lmp->right[0] = '\x00';
            lmp->right = icatalloc(lmp->right, rmp->right);
            if (lmp->right == ((void *)0))
                goto done;
            if (lmp->is[0] != '\x00' && rmp->is[0] != '\x00') {
                lmp->is = icatalloc(lmp->is, rmp->is);
                if (lmp->is == ((void *)0))
                    goto done;
            } else
                lmp->is[0] = '\x00';
        }
        break;
      default:
        if (t < END) {
            goto done;
        } else if (t == '\x00') {
            goto done;
        } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
            resetmust(mp);
        } else {
            resetmust(mp);
            mp->is[0] = mp->left[0] = mp->right[0] = t;
            mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
            mp->in = enlist(mp->in, mp->is, (size_t)1);
            if (mp->in == ((void *)0))
                goto done;
        }
        break;
    }
    ++mp;
}

....
Skipping nonlast:Priority -330
At location src/dfa.c:3402
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
for (ri = 0; ri < dfa->tindex; ++ri) {
    switch (t = dfa->tokens[ri]) {
      case LPAREN:
      case RPAREN:
        goto done;
      case EMPTY:
      case BEGLINE:
      case ENDLINE:
      case BEGWORD:
      case ENDWORD:
      case LIMWORD:
      case NOTLIMWORD:
      case BACKREF:
        resetmust(mp);
        break;
      case STAR:
      case QMARK:
        if (mp <= musts)
            goto done;
        --mp;
        resetmust(mp);
        break;
      case OR:
      case ORTOP:
        if (mp < &musts[2])
            goto done;
        {
            char **new;
            must *lmp;
            must *rmp;
            int j, ln, rn, n;
            rmp = --mp;
            lmp = --mp;
            if (__extension__ ({
                size_t __s1_len, __s2_len;
                (__builtin_constant_p(lmp->is) && __builtin_constant_p(rmp->is) && (__s1_len = __builtin_strlen(lmp->is) , __s2_len = __builtin_strlen(rmp->is) , (!((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(lmp->is, rmp->is) : (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) && (__s1_len = __builtin_strlen(lmp->is) , __s1_len < 4) ? (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (__extension__ ({
                    const unsigned char *__s2 = (const unsigned char *)(const char *)(rmp->is);
                    int __result = (((const unsigned char *)(const char *)(lmp->is))[0] - __s2[0]);
                    if (__s1_len > 0 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(lmp->is))[1] - __s2[1]);
                        if (__s1_len > 1 && __result == 0) {
                            __result = (((const unsigned char *)(const char *)(lmp->is))[2] - __s2[2]);
                            if (__s1_len > 2 && __result == 0)
                                __result = (((const unsigned char *)(const char *)(lmp->is))[3] - __s2[3]);
                        }
                    }
                    __result;
                }))) : (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) && (__s2_len = __builtin_strlen(rmp->is) , __s2_len < 4) ? (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (-(__extension__ ({
                    const unsigned char *__s2 = (const unsigned char *)(const char *)(lmp->is);
                    int __result = (((const unsigned char *)(const char *)(rmp->is))[0] - __s2[0]);
                    if (__s2_len > 0 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(rmp->is))[1] - __s2[1]);
                        if (__s2_len > 1 && __result == 0) {
                            __result = (((const unsigned char *)(const char *)(rmp->is))[2] - __s2[2]);
                            if (__s2_len > 2 && __result == 0)
                                __result = (((const unsigned char *)(const char *)(rmp->is))[3] - __s2[3]);
                        }
                    }
                    __result;
                })))) : __builtin_strcmp(lmp->is, rmp->is))));
            }) != 0)
                lmp->is[0] = '\x00';
            i = 0;
            while (lmp->left[i] != '\x00' && lmp->left[i] == rmp->left[i])
                ++i;
            lmp->left[i] = '\x00';
            ln = strlen(lmp->right);
            rn = strlen(rmp->right);
            n = ln;
            if (n > rn)
                n = rn;
            for (i = 0; i < n; ++i) 
                if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
                    break;
            for (j = 0; j < i; ++j) 
                lmp->right[j] = lmp->right[(ln - i) + j];
            lmp->right[j] = '\x00';
            new = inboth(lmp->in, rmp->in);
            if (new == ((void *)0))
                goto done;
            freelist(lmp->in);
            free((char *)lmp->in);
            lmp->in = new;
        }
        break;
      case PLUS:
        if (mp <= musts)
            goto done;
        --mp;
        mp->is[0] = '\x00';
        break;
      case END:
        if (mp != &musts[1])
            goto done;
        for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
            if (strlen(musts[0].in[i]) > strlen(result))
                result = musts[0].in[i];
        if (__extension__ ({
            size_t __s1_len, __s2_len;
            (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
                int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
                if (__s1_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
                    if (__s1_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                        if (__s1_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
                    }
                }
                __result;
            }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
                int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
                if (__s2_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
                    if (__s2_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                        if (__s2_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
                    }
                }
                __result;
            })))) : __builtin_strcmp(result, musts[0].is))));
        }) == 0)
            exact = 1;
        goto done;
      case CAT:
        if (mp < &musts[2])
            goto done;
        {
            must *lmp;
            must *rmp;
            rmp = --mp;
            lmp = --mp;
            lmp->in = addlists(lmp->in, rmp->in);
            if (lmp->in == ((void *)0))
                goto done;
            if (lmp->right[0] != '\x00' && rmp->left[0] != '\x00') {
                char *tp;
                tp = icpyalloc(lmp->right);
                if (tp == ((void *)0))
                    goto done;
                tp = icatalloc(tp, rmp->left);
                if (tp == ((void *)0))
                    goto done;
                lmp->in = enlist(lmp->in, tp, strlen(tp));
                free(tp);
                if (lmp->in == ((void *)0))
                    goto done;
            }
            if (lmp->is[0] != '\x00') {
                lmp->left = icatalloc(lmp->left, rmp->left);
                if (lmp->left == ((void *)0))
                    goto done;
            }
            if (rmp->is[0] == '\x00')
                lmp->right[0] = '\x00';
            lmp->right = icatalloc(lmp->right, rmp->right);
            if (lmp->right == ((void *)0))
                goto done;
            if (lmp->is[0] != '\x00' && rmp->is[0] != '\x00') {
                lmp->is = icatalloc(lmp->is, rmp->is);
                if (lmp->is == ((void *)0))
                    goto done;
            } else
                lmp->is[0] = '\x00';
        }
        break;
      default:
        if (t < END) {
            goto done;
        } else if (t == '\x00') {
            goto done;
        } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
            resetmust(mp);
        } else {
            resetmust(mp);
            mp->is[0] = mp->left[0] = mp->right[0] = t;
            mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
            mp->in = enlist(mp->in, mp->is, (size_t)1);
            if (mp->in == ((void *)0))
                goto done;
        }
        break;
    }
    ++mp;
}

....
Skipping nonlast:Priority -330
At location src/dfa.c:3402
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
for (ri = 0; ri < dfa->tindex; ++ri) {
    switch (t = dfa->tokens[ri]) {
      case LPAREN:
      case RPAREN:
        goto done;
      case EMPTY:
      case BEGLINE:
      case ENDLINE:
      case BEGWORD:
      case ENDWORD:
      case LIMWORD:
      case NOTLIMWORD:
      case BACKREF:
        resetmust(mp);
        break;
      case STAR:
      case QMARK:
        if (mp <= musts)
            goto done;
        --mp;
        resetmust(mp);
        break;
      case OR:
      case ORTOP:
        if (mp < &musts[2])
            goto done;
        {
            char **new;
            must *lmp;
            must *rmp;
            int j, ln, rn, n;
            rmp = --mp;
            lmp = --mp;
            if (__extension__ ({
                size_t __s1_len, __s2_len;
                (__builtin_constant_p(lmp->is) && __builtin_constant_p(rmp->is) && (__s1_len = __builtin_strlen(lmp->is) , __s2_len = __builtin_strlen(rmp->is) , (!((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(lmp->is, rmp->is) : (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) && (__s1_len = __builtin_strlen(lmp->is) , __s1_len < 4) ? (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (__extension__ ({
                    const unsigned char *__s2 = (const unsigned char *)(const char *)(rmp->is);
                    int __result = (((const unsigned char *)(const char *)(lmp->is))[0] - __s2[0]);
                    if (__s1_len > 0 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(lmp->is))[1] - __s2[1]);
                        if (__s1_len > 1 && __result == 0) {
                            __result = (((const unsigned char *)(const char *)(lmp->is))[2] - __s2[2]);
                            if (__s1_len > 2 && __result == 0)
                                __result = (((const unsigned char *)(const char *)(lmp->is))[3] - __s2[3]);
                        }
                    }
                    __result;
                }))) : (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) && (__s2_len = __builtin_strlen(rmp->is) , __s2_len < 4) ? (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (-(__extension__ ({
                    const unsigned char *__s2 = (const unsigned char *)(const char *)(lmp->is);
                    int __result = (((const unsigned char *)(const char *)(rmp->is))[0] - __s2[0]);
                    if (__s2_len > 0 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(rmp->is))[1] - __s2[1]);
                        if (__s2_len > 1 && __result == 0) {
                            __result = (((const unsigned char *)(const char *)(rmp->is))[2] - __s2[2]);
                            if (__s2_len > 2 && __result == 0)
                                __result = (((const unsigned char *)(const char *)(rmp->is))[3] - __s2[3]);
                        }
                    }
                    __result;
                })))) : __builtin_strcmp(lmp->is, rmp->is))));
            }) != 0)
                lmp->is[0] = '\x00';
            i = 0;
            while (lmp->left[i] != '\x00' && lmp->left[i] == rmp->left[i])
                ++i;
            lmp->left[i] = '\x00';
            ln = strlen(lmp->right);
            rn = strlen(rmp->right);
            n = ln;
            if (n > rn)
                n = rn;
            for (i = 0; i < n; ++i) 
                if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
                    break;
            for (j = 0; j < i; ++j) 
                lmp->right[j] = lmp->right[(ln - i) + j];
            lmp->right[j] = '\x00';
            new = inboth(lmp->in, rmp->in);
            if (new == ((void *)0))
                goto done;
            freelist(lmp->in);
            free((char *)lmp->in);
            lmp->in = new;
        }
        break;
      case PLUS:
        if (mp <= musts)
            goto done;
        --mp;
        mp->is[0] = '\x00';
        break;
      case END:
        if (mp != &musts[1])
            goto done;
        for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
            if (strlen(musts[0].in[i]) > strlen(result))
                result = musts[0].in[i];
        if (__extension__ ({
            size_t __s1_len, __s2_len;
            (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
                int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
                if (__s1_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
                    if (__s1_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                        if (__s1_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
                    }
                }
                __result;
            }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
                int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
                if (__s2_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
                    if (__s2_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                        if (__s2_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
                    }
                }
                __result;
            })))) : __builtin_strcmp(result, musts[0].is))));
        }) == 0)
            exact = 1;
        goto done;
      case CAT:
        if (mp < &musts[2])
            goto done;
        {
            must *lmp;
            must *rmp;
            rmp = --mp;
            lmp = --mp;
            lmp->in = addlists(lmp->in, rmp->in);
            if (lmp->in == ((void *)0))
                goto done;
            if (lmp->right[0] != '\x00' && rmp->left[0] != '\x00') {
                char *tp;
                tp = icpyalloc(lmp->right);
                if (tp == ((void *)0))
                    goto done;
                tp = icatalloc(tp, rmp->left);
                if (tp == ((void *)0))
                    goto done;
                lmp->in = enlist(lmp->in, tp, strlen(tp));
                free(tp);
                if (lmp->in == ((void *)0))
                    goto done;
            }
            if (lmp->is[0] != '\x00') {
                lmp->left = icatalloc(lmp->left, rmp->left);
                if (lmp->left == ((void *)0))
                    goto done;
            }
            if (rmp->is[0] == '\x00')
                lmp->right[0] = '\x00';
            lmp->right = icatalloc(lmp->right, rmp->right);
            if (lmp->right == ((void *)0))
                goto done;
            if (lmp->is[0] != '\x00' && rmp->is[0] != '\x00') {
                lmp->is = icatalloc(lmp->is, rmp->is);
                if (lmp->is == ((void *)0))
                    goto done;
            } else
                lmp->is[0] = '\x00';
        }
        break;
      default:
        if (t < END) {
            goto done;
        } else if (t == '\x00') {
            goto done;
        } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
            resetmust(mp);
        } else {
            resetmust(mp);
            mp->is[0] = mp->left[0] = mp->right[0] = t;
            mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
            mp->in = enlist(mp->in, mp->is, (size_t)1);
            if (mp->in == ((void *)0))
                goto done;
        }
        break;
    }
    ++mp;
}

....
Skipping nonlast:Priority -330
At location src/dfa.c:3402
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
for (ri = 0; ri < dfa->tindex; ++ri) {
    switch (t = dfa->tokens[ri]) {
      case LPAREN:
      case RPAREN:
        goto done;
      case EMPTY:
      case BEGLINE:
      case ENDLINE:
      case BEGWORD:
      case ENDWORD:
      case LIMWORD:
      case NOTLIMWORD:
      case BACKREF:
        resetmust(mp);
        break;
      case STAR:
      case QMARK:
        if (mp <= musts)
            goto done;
        --mp;
        resetmust(mp);
        break;
      case OR:
      case ORTOP:
        if (mp < &musts[2])
            goto done;
        {
            char **new;
            must *lmp;
            must *rmp;
            int j, ln, rn, n;
            rmp = --mp;
            lmp = --mp;
            if (__extension__ ({
                size_t __s1_len, __s2_len;
                (__builtin_constant_p(lmp->is) && __builtin_constant_p(rmp->is) && (__s1_len = __builtin_strlen(lmp->is) , __s2_len = __builtin_strlen(rmp->is) , (!((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(lmp->is, rmp->is) : (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) && (__s1_len = __builtin_strlen(lmp->is) , __s1_len < 4) ? (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (__extension__ ({
                    const unsigned char *__s2 = (const unsigned char *)(const char *)(rmp->is);
                    int __result = (((const unsigned char *)(const char *)(lmp->is))[0] - __s2[0]);
                    if (__s1_len > 0 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(lmp->is))[1] - __s2[1]);
                        if (__s1_len > 1 && __result == 0) {
                            __result = (((const unsigned char *)(const char *)(lmp->is))[2] - __s2[2]);
                            if (__s1_len > 2 && __result == 0)
                                __result = (((const unsigned char *)(const char *)(lmp->is))[3] - __s2[3]);
                        }
                    }
                    __result;
                }))) : (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) && (__s2_len = __builtin_strlen(rmp->is) , __s2_len < 4) ? (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (-(__extension__ ({
                    const unsigned char *__s2 = (const unsigned char *)(const char *)(lmp->is);
                    int __result = (((const unsigned char *)(const char *)(rmp->is))[0] - __s2[0]);
                    if (__s2_len > 0 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(rmp->is))[1] - __s2[1]);
                        if (__s2_len > 1 && __result == 0) {
                            __result = (((const unsigned char *)(const char *)(rmp->is))[2] - __s2[2]);
                            if (__s2_len > 2 && __result == 0)
                                __result = (((const unsigned char *)(const char *)(rmp->is))[3] - __s2[3]);
                        }
                    }
                    __result;
                })))) : __builtin_strcmp(lmp->is, rmp->is))));
            }) != 0)
                lmp->is[0] = '\x00';
            i = 0;
            while (lmp->left[i] != '\x00' && lmp->left[i] == rmp->left[i])
                ++i;
            lmp->left[i] = '\x00';
            ln = strlen(lmp->right);
            rn = strlen(rmp->right);
            n = ln;
            if (n > rn)
                n = rn;
            for (i = 0; i < n; ++i) 
                if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
                    break;
            for (j = 0; j < i; ++j) 
                lmp->right[j] = lmp->right[(ln - i) + j];
            lmp->right[j] = '\x00';
            new = inboth(lmp->in, rmp->in);
            if (new == ((void *)0))
                goto done;
            freelist(lmp->in);
            free((char *)lmp->in);
            lmp->in = new;
        }
        break;
      case PLUS:
        if (mp <= musts)
            goto done;
        --mp;
        mp->is[0] = '\x00';
        break;
      case END:
        if (mp != &musts[1])
            goto done;
        for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
            if (strlen(musts[0].in[i]) > strlen(result))
                result = musts[0].in[i];
        if (__extension__ ({
            size_t __s1_len, __s2_len;
            (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
                int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
                if (__s1_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
                    if (__s1_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                        if (__s1_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
                    }
                }
                __result;
            }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
                int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
                if (__s2_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
                    if (__s2_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                        if (__s2_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
                    }
                }
                __result;
            })))) : __builtin_strcmp(result, musts[0].is))));
        }) == 0)
            exact = 1;
        goto done;
      case CAT:
        if (mp < &musts[2])
            goto done;
        {
            must *lmp;
            must *rmp;
            rmp = --mp;
            lmp = --mp;
            lmp->in = addlists(lmp->in, rmp->in);
            if (lmp->in == ((void *)0))
                goto done;
            if (lmp->right[0] != '\x00' && rmp->left[0] != '\x00') {
                char *tp;
                tp = icpyalloc(lmp->right);
                if (tp == ((void *)0))
                    goto done;
                tp = icatalloc(tp, rmp->left);
                if (tp == ((void *)0))
                    goto done;
                lmp->in = enlist(lmp->in, tp, strlen(tp));
                free(tp);
                if (lmp->in == ((void *)0))
                    goto done;
            }
            if (lmp->is[0] != '\x00') {
                lmp->left = icatalloc(lmp->left, rmp->left);
                if (lmp->left == ((void *)0))
                    goto done;
            }
            if (rmp->is[0] == '\x00')
                lmp->right[0] = '\x00';
            lmp->right = icatalloc(lmp->right, rmp->right);
            if (lmp->right == ((void *)0))
                goto done;
            if (lmp->is[0] != '\x00' && rmp->is[0] != '\x00') {
                lmp->is = icatalloc(lmp->is, rmp->is);
                if (lmp->is == ((void *)0))
                    goto done;
            } else
                lmp->is[0] = '\x00';
        }
        break;
      default:
        if (t < END) {
            goto done;
        } else if (t == '\x00') {
            goto done;
        } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
            resetmust(mp);
        } else {
            resetmust(mp);
            mp->is[0] = mp->left[0] = mp->right[0] = t;
            mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
            mp->in = enlist(mp->in, mp->is, (size_t)1);
            if (mp->in == ((void *)0))
                goto done;
        }
        break;
    }
    ++mp;
}

....
Skipping nonlast:Priority -330
At location src/dfa.c:3402
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
for (ri = 0; ri < dfa->tindex; ++ri) {
    switch (t = dfa->tokens[ri]) {
      case LPAREN:
      case RPAREN:
        goto done;
      case EMPTY:
      case BEGLINE:
      case ENDLINE:
      case BEGWORD:
      case ENDWORD:
      case LIMWORD:
      case NOTLIMWORD:
      case BACKREF:
        resetmust(mp);
        break;
      case STAR:
      case QMARK:
        if (mp <= musts)
            goto done;
        --mp;
        resetmust(mp);
        break;
      case OR:
      case ORTOP:
        if (mp < &musts[2])
            goto done;
        {
            char **new;
            must *lmp;
            must *rmp;
            int j, ln, rn, n;
            rmp = --mp;
            lmp = --mp;
            if (__extension__ ({
                size_t __s1_len, __s2_len;
                (__builtin_constant_p(lmp->is) && __builtin_constant_p(rmp->is) && (__s1_len = __builtin_strlen(lmp->is) , __s2_len = __builtin_strlen(rmp->is) , (!((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(lmp->is, rmp->is) : (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) && (__s1_len = __builtin_strlen(lmp->is) , __s1_len < 4) ? (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (__extension__ ({
                    const unsigned char *__s2 = (const unsigned char *)(const char *)(rmp->is);
                    int __result = (((const unsigned char *)(const char *)(lmp->is))[0] - __s2[0]);
                    if (__s1_len > 0 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(lmp->is))[1] - __s2[1]);
                        if (__s1_len > 1 && __result == 0) {
                            __result = (((const unsigned char *)(const char *)(lmp->is))[2] - __s2[2]);
                            if (__s1_len > 2 && __result == 0)
                                __result = (((const unsigned char *)(const char *)(lmp->is))[3] - __s2[3]);
                        }
                    }
                    __result;
                }))) : (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) && (__s2_len = __builtin_strlen(rmp->is) , __s2_len < 4) ? (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (-(__extension__ ({
                    const unsigned char *__s2 = (const unsigned char *)(const char *)(lmp->is);
                    int __result = (((const unsigned char *)(const char *)(rmp->is))[0] - __s2[0]);
                    if (__s2_len > 0 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(rmp->is))[1] - __s2[1]);
                        if (__s2_len > 1 && __result == 0) {
                            __result = (((const unsigned char *)(const char *)(rmp->is))[2] - __s2[2]);
                            if (__s2_len > 2 && __result == 0)
                                __result = (((const unsigned char *)(const char *)(rmp->is))[3] - __s2[3]);
                        }
                    }
                    __result;
                })))) : __builtin_strcmp(lmp->is, rmp->is))));
            }) != 0)
                lmp->is[0] = '\x00';
            i = 0;
            while (lmp->left[i] != '\x00' && lmp->left[i] == rmp->left[i])
                ++i;
            lmp->left[i] = '\x00';
            ln = strlen(lmp->right);
            rn = strlen(rmp->right);
            n = ln;
            if (n > rn)
                n = rn;
            for (i = 0; i < n; ++i) 
                if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
                    break;
            for (j = 0; j < i; ++j) 
                lmp->right[j] = lmp->right[(ln - i) + j];
            lmp->right[j] = '\x00';
            new = inboth(lmp->in, rmp->in);
            if (new == ((void *)0))
                goto done;
            freelist(lmp->in);
            free((char *)lmp->in);
            lmp->in = new;
        }
        break;
      case PLUS:
        if (mp <= musts)
            goto done;
        --mp;
        mp->is[0] = '\x00';
        break;
      case END:
        if (mp != &musts[1])
            goto done;
        for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
            if (strlen(musts[0].in[i]) > strlen(result))
                result = musts[0].in[i];
        if (__extension__ ({
            size_t __s1_len, __s2_len;
            (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
                int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
                if (__s1_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
                    if (__s1_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                        if (__s1_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
                    }
                }
                __result;
            }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
                int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
                if (__s2_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
                    if (__s2_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                        if (__s2_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
                    }
                }
                __result;
            })))) : __builtin_strcmp(result, musts[0].is))));
        }) == 0)
            exact = 1;
        goto done;
      case CAT:
        if (mp < &musts[2])
            goto done;
        {
            must *lmp;
            must *rmp;
            rmp = --mp;
            lmp = --mp;
            lmp->in = addlists(lmp->in, rmp->in);
            if (lmp->in == ((void *)0))
                goto done;
            if (lmp->right[0] != '\x00' && rmp->left[0] != '\x00') {
                char *tp;
                tp = icpyalloc(lmp->right);
                if (tp == ((void *)0))
                    goto done;
                tp = icatalloc(tp, rmp->left);
                if (tp == ((void *)0))
                    goto done;
                lmp->in = enlist(lmp->in, tp, strlen(tp));
                free(tp);
                if (lmp->in == ((void *)0))
                    goto done;
            }
            if (lmp->is[0] != '\x00') {
                lmp->left = icatalloc(lmp->left, rmp->left);
                if (lmp->left == ((void *)0))
                    goto done;
            }
            if (rmp->is[0] == '\x00')
                lmp->right[0] = '\x00';
            lmp->right = icatalloc(lmp->right, rmp->right);
            if (lmp->right == ((void *)0))
                goto done;
            if (lmp->is[0] != '\x00' && rmp->is[0] != '\x00') {
                lmp->is = icatalloc(lmp->is, rmp->is);
                if (lmp->is == ((void *)0))
                    goto done;
            } else
                lmp->is[0] = '\x00';
        }
        break;
      default:
        if (t < END) {
            goto done;
        } else if (t == '\x00') {
            goto done;
        } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
            resetmust(mp);
        } else {
            resetmust(mp);
            mp->is[0] = mp->left[0] = mp->right[0] = t;
            mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
            mp->in = enlist(mp->in, mp->is, (size_t)1);
            if (mp->in == ((void *)0))
                goto done;
        }
        break;
    }
    ++mp;
}

....
Skipping nonlast addifexit:Priority 4670
At location src/dfa.c:3402
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(dfa, ri, dfa, dfa->tindex, dfa->tindex, t, dfa->tokens, dfa->tokens, mp, i, musts, exact, result, dm, dfa->musts, dfa->musts, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success)))
    return;
for (ri = 0; ri < dfa->tindex; ++ri) {
    switch (t = dfa->tokens[ri]) {
      case LPAREN:
      case RPAREN:
        goto done;
      case EMPTY:
      case BEGLINE:
      case ENDLINE:
      case BEGWORD:
      case ENDWORD:
      case LIMWORD:
      case NOTLIMWORD:
      case BACKREF:
        resetmust(mp);
        break;
      case STAR:
      case QMARK:
        if (mp <= musts)
            goto done;
        --mp;
        resetmust(mp);
        break;
      case OR:
      case ORTOP:
        if (mp < &musts[2])
            goto done;
        {
            char **new;
            must *lmp;
            must *rmp;
            int j, ln, rn, n;
            rmp = --mp;
            lmp = --mp;
            if (__extension__ ({
                size_t __s1_len, __s2_len;
                (__builtin_constant_p(lmp->is) && __builtin_constant_p(rmp->is) && (__s1_len = __builtin_strlen(lmp->is) , __s2_len = __builtin_strlen(rmp->is) , (!((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(lmp->is, rmp->is) : (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) && (__s1_len = __builtin_strlen(lmp->is) , __s1_len < 4) ? (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (__extension__ ({
                    const unsigned char *__s2 = (const unsigned char *)(const char *)(rmp->is);
                    int __result = (((const unsigned char *)(const char *)(lmp->is))[0] - __s2[0]);
                    if (__s1_len > 0 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(lmp->is))[1] - __s2[1]);
                        if (__s1_len > 1 && __result == 0) {
                            __result = (((const unsigned char *)(const char *)(lmp->is))[2] - __s2[2]);
                            if (__s1_len > 2 && __result == 0)
                                __result = (((const unsigned char *)(const char *)(lmp->is))[3] - __s2[3]);
                        }
                    }
                    __result;
                }))) : (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) && (__s2_len = __builtin_strlen(rmp->is) , __s2_len < 4) ? (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (-(__extension__ ({
                    const unsigned char *__s2 = (const unsigned char *)(const char *)(lmp->is);
                    int __result = (((const unsigned char *)(const char *)(rmp->is))[0] - __s2[0]);
                    if (__s2_len > 0 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(rmp->is))[1] - __s2[1]);
                        if (__s2_len > 1 && __result == 0) {
                            __result = (((const unsigned char *)(const char *)(rmp->is))[2] - __s2[2]);
                            if (__s2_len > 2 && __result == 0)
                                __result = (((const unsigned char *)(const char *)(rmp->is))[3] - __s2[3]);
                        }
                    }
                    __result;
                })))) : __builtin_strcmp(lmp->is, rmp->is))));
            }) != 0)
                lmp->is[0] = '\x00';
            i = 0;
            while (lmp->left[i] != '\x00' && lmp->left[i] == rmp->left[i])
                ++i;
            lmp->left[i] = '\x00';
            ln = strlen(lmp->right);
            rn = strlen(rmp->right);
            n = ln;
            if (n > rn)
                n = rn;
            for (i = 0; i < n; ++i) 
                if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
                    break;
            for (j = 0; j < i; ++j) 
                lmp->right[j] = lmp->right[(ln - i) + j];
            lmp->right[j] = '\x00';
            new = inboth(lmp->in, rmp->in);
            if (new == ((void *)0))
                goto done;
            freelist(lmp->in);
            free((char *)lmp->in);
            lmp->in = new;
        }
        break;
      case PLUS:
        if (mp <= musts)
            goto done;
        --mp;
        mp->is[0] = '\x00';
        break;
      case END:
        if (mp != &musts[1])
            goto done;
        for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
            if (strlen(musts[0].in[i]) > strlen(result))
                result = musts[0].in[i];
        if (__extension__ ({
            size_t __s1_len, __s2_len;
            (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
                int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
                if (__s1_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
                    if (__s1_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                        if (__s1_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
                    }
                }
                __result;
            }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
                int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
                if (__s2_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
                    if (__s2_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                        if (__s2_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
                    }
                }
                __result;
            })))) : __builtin_strcmp(result, musts[0].is))));
        }) == 0)
            exact = 1;
        goto done;
      case CAT:
        if (mp < &musts[2])
            goto done;
        {
            must *lmp;
            must *rmp;
            rmp = --mp;
            lmp = --mp;
            lmp->in = addlists(lmp->in, rmp->in);
            if (lmp->in == ((void *)0))
                goto done;
            if (lmp->right[0] != '\x00' && rmp->left[0] != '\x00') {
                char *tp;
                tp = icpyalloc(lmp->right);
                if (tp == ((void *)0))
                    goto done;
                tp = icatalloc(tp, rmp->left);
                if (tp == ((void *)0))
                    goto done;
                lmp->in = enlist(lmp->in, tp, strlen(tp));
                free(tp);
                if (lmp->in == ((void *)0))
                    goto done;
            }
            if (lmp->is[0] != '\x00') {
                lmp->left = icatalloc(lmp->left, rmp->left);
                if (lmp->left == ((void *)0))
                    goto done;
            }
            if (rmp->is[0] == '\x00')
                lmp->right[0] = '\x00';
            lmp->right = icatalloc(lmp->right, rmp->right);
            if (lmp->right == ((void *)0))
                goto done;
            if (lmp->is[0] != '\x00' && rmp->is[0] != '\x00') {
                lmp->is = icatalloc(lmp->is, rmp->is);
                if (lmp->is == ((void *)0))
                    goto done;
            } else
                lmp->is[0] = '\x00';
        }
        break;
      default:
        if (t < END) {
            goto done;
        } else if (t == '\x00') {
            goto done;
        } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
            resetmust(mp);
        } else {
            resetmust(mp);
            mp->is[0] = mp->left[0] = mp->right[0] = t;
            mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
            mp->in = enlist(mp->in, mp->is, (size_t)1);
            if (mp->in == ((void *)0))
                goto done;
        }
        break;
    }
    ++mp;
}

....
Skipping nonlast addifexit:Priority 4870
At location src/dfa.c:3402
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(dfa, ri, dfa, dfa->tindex, dfa->tindex, t, dfa->tokens, dfa->tokens, mp, i, musts, exact, result, dm, dfa->musts, dfa->musts, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success)))
    goto done;
for (ri = 0; ri < dfa->tindex; ++ri) {
    switch (t = dfa->tokens[ri]) {
      case LPAREN:
      case RPAREN:
        goto done;
      case EMPTY:
      case BEGLINE:
      case ENDLINE:
      case BEGWORD:
      case ENDWORD:
      case LIMWORD:
      case NOTLIMWORD:
      case BACKREF:
        resetmust(mp);
        break;
      case STAR:
      case QMARK:
        if (mp <= musts)
            goto done;
        --mp;
        resetmust(mp);
        break;
      case OR:
      case ORTOP:
        if (mp < &musts[2])
            goto done;
        {
            char **new;
            must *lmp;
            must *rmp;
            int j, ln, rn, n;
            rmp = --mp;
            lmp = --mp;
            if (__extension__ ({
                size_t __s1_len, __s2_len;
                (__builtin_constant_p(lmp->is) && __builtin_constant_p(rmp->is) && (__s1_len = __builtin_strlen(lmp->is) , __s2_len = __builtin_strlen(rmp->is) , (!((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(lmp->is, rmp->is) : (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) && (__s1_len = __builtin_strlen(lmp->is) , __s1_len < 4) ? (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (__extension__ ({
                    const unsigned char *__s2 = (const unsigned char *)(const char *)(rmp->is);
                    int __result = (((const unsigned char *)(const char *)(lmp->is))[0] - __s2[0]);
                    if (__s1_len > 0 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(lmp->is))[1] - __s2[1]);
                        if (__s1_len > 1 && __result == 0) {
                            __result = (((const unsigned char *)(const char *)(lmp->is))[2] - __s2[2]);
                            if (__s1_len > 2 && __result == 0)
                                __result = (((const unsigned char *)(const char *)(lmp->is))[3] - __s2[3]);
                        }
                    }
                    __result;
                }))) : (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) && (__s2_len = __builtin_strlen(rmp->is) , __s2_len < 4) ? (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (-(__extension__ ({
                    const unsigned char *__s2 = (const unsigned char *)(const char *)(lmp->is);
                    int __result = (((const unsigned char *)(const char *)(rmp->is))[0] - __s2[0]);
                    if (__s2_len > 0 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(rmp->is))[1] - __s2[1]);
                        if (__s2_len > 1 && __result == 0) {
                            __result = (((const unsigned char *)(const char *)(rmp->is))[2] - __s2[2]);
                            if (__s2_len > 2 && __result == 0)
                                __result = (((const unsigned char *)(const char *)(rmp->is))[3] - __s2[3]);
                        }
                    }
                    __result;
                })))) : __builtin_strcmp(lmp->is, rmp->is))));
            }) != 0)
                lmp->is[0] = '\x00';
            i = 0;
            while (lmp->left[i] != '\x00' && lmp->left[i] == rmp->left[i])
                ++i;
            lmp->left[i] = '\x00';
            ln = strlen(lmp->right);
            rn = strlen(rmp->right);
            n = ln;
            if (n > rn)
                n = rn;
            for (i = 0; i < n; ++i) 
                if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
                    break;
            for (j = 0; j < i; ++j) 
                lmp->right[j] = lmp->right[(ln - i) + j];
            lmp->right[j] = '\x00';
            new = inboth(lmp->in, rmp->in);
            if (new == ((void *)0))
                goto done;
            freelist(lmp->in);
            free((char *)lmp->in);
            lmp->in = new;
        }
        break;
      case PLUS:
        if (mp <= musts)
            goto done;
        --mp;
        mp->is[0] = '\x00';
        break;
      case END:
        if (mp != &musts[1])
            goto done;
        for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
            if (strlen(musts[0].in[i]) > strlen(result))
                result = musts[0].in[i];
        if (__extension__ ({
            size_t __s1_len, __s2_len;
            (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
                int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
                if (__s1_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
                    if (__s1_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                        if (__s1_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
                    }
                }
                __result;
            }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
                int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
                if (__s2_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
                    if (__s2_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                        if (__s2_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
                    }
                }
                __result;
            })))) : __builtin_strcmp(result, musts[0].is))));
        }) == 0)
            exact = 1;
        goto done;
      case CAT:
        if (mp < &musts[2])
            goto done;
        {
            must *lmp;
            must *rmp;
            rmp = --mp;
            lmp = --mp;
            lmp->in = addlists(lmp->in, rmp->in);
            if (lmp->in == ((void *)0))
                goto done;
            if (lmp->right[0] != '\x00' && rmp->left[0] != '\x00') {
                char *tp;
                tp = icpyalloc(lmp->right);
                if (tp == ((void *)0))
                    goto done;
                tp = icatalloc(tp, rmp->left);
                if (tp == ((void *)0))
                    goto done;
                lmp->in = enlist(lmp->in, tp, strlen(tp));
                free(tp);
                if (lmp->in == ((void *)0))
                    goto done;
            }
            if (lmp->is[0] != '\x00') {
                lmp->left = icatalloc(lmp->left, rmp->left);
                if (lmp->left == ((void *)0))
                    goto done;
            }
            if (rmp->is[0] == '\x00')
                lmp->right[0] = '\x00';
            lmp->right = icatalloc(lmp->right, rmp->right);
            if (lmp->right == ((void *)0))
                goto done;
            if (lmp->is[0] != '\x00' && rmp->is[0] != '\x00') {
                lmp->is = icatalloc(lmp->is, rmp->is);
                if (lmp->is == ((void *)0))
                    goto done;
            } else
                lmp->is[0] = '\x00';
        }
        break;
      default:
        if (t < END) {
            goto done;
        } else if (t == '\x00') {
            goto done;
        } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
            resetmust(mp);
        } else {
            resetmust(mp);
            mp->is[0] = mp->left[0] = mp->right[0] = t;
            mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
            mp->in = enlist(mp->in, mp->is, (size_t)1);
            if (mp->in == ((void *)0))
                goto done;
        }
        break;
    }
    ++mp;
}

....
Skipping nonlast:Priority 4732
At location src/dfa.c:3404
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
switch (t = dfa->tokens[ri]) {
  case LPAREN:
  case RPAREN:
    goto done;
  case EMPTY:
  case BEGLINE:
  case ENDLINE:
  case BEGWORD:
  case ENDWORD:
  case LIMWORD:
  case NOTLIMWORD:
  case BACKREF:
    resetmust(mp);
    break;
  case STAR:
  case QMARK:
    if (mp <= musts)
        goto done;
    --mp;
    resetmust(mp);
    break;
  case OR:
  case ORTOP:
    if (mp < &musts[2])
        goto done;
    {
        char **new;
        must *lmp;
        must *rmp;
        int j, ln, rn, n;
        rmp = --mp;
        lmp = --mp;
        if (__extension__ ({
            size_t __s1_len, __s2_len;
            (__builtin_constant_p(lmp->is) && __builtin_constant_p(rmp->is) && (__s1_len = __builtin_strlen(lmp->is) , __s2_len = __builtin_strlen(rmp->is) , (!((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(lmp->is, rmp->is) : (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) && (__s1_len = __builtin_strlen(lmp->is) , __s1_len < 4) ? (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(rmp->is);
                int __result = (((const unsigned char *)(const char *)(lmp->is))[0] - __s2[0]);
                if (__s1_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(lmp->is))[1] - __s2[1]);
                    if (__s1_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(lmp->is))[2] - __s2[2]);
                        if (__s1_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(lmp->is))[3] - __s2[3]);
                    }
                }
                __result;
            }))) : (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) && (__s2_len = __builtin_strlen(rmp->is) , __s2_len < 4) ? (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (-(__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(lmp->is);
                int __result = (((const unsigned char *)(const char *)(rmp->is))[0] - __s2[0]);
                if (__s2_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(rmp->is))[1] - __s2[1]);
                    if (__s2_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(rmp->is))[2] - __s2[2]);
                        if (__s2_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(rmp->is))[3] - __s2[3]);
                    }
                }
                __result;
            })))) : __builtin_strcmp(lmp->is, rmp->is))));
        }) != 0)
            lmp->is[0] = '\x00';
        i = 0;
        while (lmp->left[i] != '\x00' && lmp->left[i] == rmp->left[i])
            ++i;
        lmp->left[i] = '\x00';
        ln = strlen(lmp->right);
        rn = strlen(rmp->right);
        n = ln;
        if (n > rn)
            n = rn;
        for (i = 0; i < n; ++i) 
            if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
                break;
        for (j = 0; j < i; ++j) 
            lmp->right[j] = lmp->right[(ln - i) + j];
        lmp->right[j] = '\x00';
        new = inboth(lmp->in, rmp->in);
        if (new == ((void *)0))
            goto done;
        freelist(lmp->in);
        free((char *)lmp->in);
        lmp->in = new;
    }
    break;
  case PLUS:
    if (mp <= musts)
        goto done;
    --mp;
    mp->is[0] = '\x00';
    break;
  case END:
    if (mp != &musts[1])
        goto done;
    for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
        if (strlen(musts[0].in[i]) > strlen(result))
            result = musts[0].in[i];
    if (__extension__ ({
        size_t __s1_len, __s2_len;
        (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
            const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
            int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
            if (__s1_len > 0 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
                if (__s1_len > 1 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                    if (__s1_len > 2 && __result == 0)
                        __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
                }
            }
            __result;
        }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
            const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
            int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
            if (__s2_len > 0 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
                if (__s2_len > 1 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                    if (__s2_len > 2 && __result == 0)
                        __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
                }
            }
            __result;
        })))) : __builtin_strcmp(result, musts[0].is))));
    }) == 0)
        exact = 1;
    goto done;
  case CAT:
    if (mp < &musts[2])
        goto done;
    {
        must *lmp;
        must *rmp;
        rmp = --mp;
        lmp = --mp;
        lmp->in = addlists(lmp->in, rmp->in);
        if (lmp->in == ((void *)0))
            goto done;
        if (lmp->right[0] != '\x00' && rmp->left[0] != '\x00') {
            char *tp;
            tp = icpyalloc(lmp->right);
            if (tp == ((void *)0))
                goto done;
            tp = icatalloc(tp, rmp->left);
            if (tp == ((void *)0))
                goto done;
            lmp->in = enlist(lmp->in, tp, strlen(tp));
            free(tp);
            if (lmp->in == ((void *)0))
                goto done;
        }
        if (lmp->is[0] != '\x00') {
            lmp->left = icatalloc(lmp->left, rmp->left);
            if (lmp->left == ((void *)0))
                goto done;
        }
        if (rmp->is[0] == '\x00')
            lmp->right[0] = '\x00';
        lmp->right = icatalloc(lmp->right, rmp->right);
        if (lmp->right == ((void *)0))
            goto done;
        if (lmp->is[0] != '\x00' && rmp->is[0] != '\x00') {
            lmp->is = icatalloc(lmp->is, rmp->is);
            if (lmp->is == ((void *)0))
                goto done;
        } else
            lmp->is[0] = '\x00';
    }
    break;
  default:
    if (t < END) {
        goto done;
    } else if (t == '\x00') {
        goto done;
    } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
    break;
}

....
Skipping nonlast:Priority 4732
At location src/dfa.c:3404
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
switch (t = dfa->tokens[ri]) {
  case LPAREN:
  case RPAREN:
    goto done;
  case EMPTY:
  case BEGLINE:
  case ENDLINE:
  case BEGWORD:
  case ENDWORD:
  case LIMWORD:
  case NOTLIMWORD:
  case BACKREF:
    resetmust(mp);
    break;
  case STAR:
  case QMARK:
    if (mp <= musts)
        goto done;
    --mp;
    resetmust(mp);
    break;
  case OR:
  case ORTOP:
    if (mp < &musts[2])
        goto done;
    {
        char **new;
        must *lmp;
        must *rmp;
        int j, ln, rn, n;
        rmp = --mp;
        lmp = --mp;
        if (__extension__ ({
            size_t __s1_len, __s2_len;
            (__builtin_constant_p(lmp->is) && __builtin_constant_p(rmp->is) && (__s1_len = __builtin_strlen(lmp->is) , __s2_len = __builtin_strlen(rmp->is) , (!((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(lmp->is, rmp->is) : (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) && (__s1_len = __builtin_strlen(lmp->is) , __s1_len < 4) ? (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(rmp->is);
                int __result = (((const unsigned char *)(const char *)(lmp->is))[0] - __s2[0]);
                if (__s1_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(lmp->is))[1] - __s2[1]);
                    if (__s1_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(lmp->is))[2] - __s2[2]);
                        if (__s1_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(lmp->is))[3] - __s2[3]);
                    }
                }
                __result;
            }))) : (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) && (__s2_len = __builtin_strlen(rmp->is) , __s2_len < 4) ? (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (-(__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(lmp->is);
                int __result = (((const unsigned char *)(const char *)(rmp->is))[0] - __s2[0]);
                if (__s2_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(rmp->is))[1] - __s2[1]);
                    if (__s2_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(rmp->is))[2] - __s2[2]);
                        if (__s2_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(rmp->is))[3] - __s2[3]);
                    }
                }
                __result;
            })))) : __builtin_strcmp(lmp->is, rmp->is))));
        }) != 0)
            lmp->is[0] = '\x00';
        i = 0;
        while (lmp->left[i] != '\x00' && lmp->left[i] == rmp->left[i])
            ++i;
        lmp->left[i] = '\x00';
        ln = strlen(lmp->right);
        rn = strlen(rmp->right);
        n = ln;
        if (n > rn)
            n = rn;
        for (i = 0; i < n; ++i) 
            if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
                break;
        for (j = 0; j < i; ++j) 
            lmp->right[j] = lmp->right[(ln - i) + j];
        lmp->right[j] = '\x00';
        new = inboth(lmp->in, rmp->in);
        if (new == ((void *)0))
            goto done;
        freelist(lmp->in);
        free((char *)lmp->in);
        lmp->in = new;
    }
    break;
  case PLUS:
    if (mp <= musts)
        goto done;
    --mp;
    mp->is[0] = '\x00';
    break;
  case END:
    if (mp != &musts[1])
        goto done;
    for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
        if (strlen(musts[0].in[i]) > strlen(result))
            result = musts[0].in[i];
    if (__extension__ ({
        size_t __s1_len, __s2_len;
        (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
            const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
            int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
            if (__s1_len > 0 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
                if (__s1_len > 1 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                    if (__s1_len > 2 && __result == 0)
                        __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
                }
            }
            __result;
        }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
            const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
            int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
            if (__s2_len > 0 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
                if (__s2_len > 1 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                    if (__s2_len > 2 && __result == 0)
                        __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
                }
            }
            __result;
        })))) : __builtin_strcmp(result, musts[0].is))));
    }) == 0)
        exact = 1;
    goto done;
  case CAT:
    if (mp < &musts[2])
        goto done;
    {
        must *lmp;
        must *rmp;
        rmp = --mp;
        lmp = --mp;
        lmp->in = addlists(lmp->in, rmp->in);
        if (lmp->in == ((void *)0))
            goto done;
        if (lmp->right[0] != '\x00' && rmp->left[0] != '\x00') {
            char *tp;
            tp = icpyalloc(lmp->right);
            if (tp == ((void *)0))
                goto done;
            tp = icatalloc(tp, rmp->left);
            if (tp == ((void *)0))
                goto done;
            lmp->in = enlist(lmp->in, tp, strlen(tp));
            free(tp);
            if (lmp->in == ((void *)0))
                goto done;
        }
        if (lmp->is[0] != '\x00') {
            lmp->left = icatalloc(lmp->left, rmp->left);
            if (lmp->left == ((void *)0))
                goto done;
        }
        if (rmp->is[0] == '\x00')
            lmp->right[0] = '\x00';
        lmp->right = icatalloc(lmp->right, rmp->right);
        if (lmp->right == ((void *)0))
            goto done;
        if (lmp->is[0] != '\x00' && rmp->is[0] != '\x00') {
            lmp->is = icatalloc(lmp->is, rmp->is);
            if (lmp->is == ((void *)0))
                goto done;
        } else
            lmp->is[0] = '\x00';
    }
    break;
  default:
    if (t < END) {
        goto done;
    } else if (t == '\x00') {
        goto done;
    } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
    break;
}

....
Skipping nonlast:Priority 4732
At location src/dfa.c:3404
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
switch (t = dfa->tokens[ri]) {
  case LPAREN:
  case RPAREN:
    goto done;
  case EMPTY:
  case BEGLINE:
  case ENDLINE:
  case BEGWORD:
  case ENDWORD:
  case LIMWORD:
  case NOTLIMWORD:
  case BACKREF:
    resetmust(mp);
    break;
  case STAR:
  case QMARK:
    if (mp <= musts)
        goto done;
    --mp;
    resetmust(mp);
    break;
  case OR:
  case ORTOP:
    if (mp < &musts[2])
        goto done;
    {
        char **new;
        must *lmp;
        must *rmp;
        int j, ln, rn, n;
        rmp = --mp;
        lmp = --mp;
        if (__extension__ ({
            size_t __s1_len, __s2_len;
            (__builtin_constant_p(lmp->is) && __builtin_constant_p(rmp->is) && (__s1_len = __builtin_strlen(lmp->is) , __s2_len = __builtin_strlen(rmp->is) , (!((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(lmp->is, rmp->is) : (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) && (__s1_len = __builtin_strlen(lmp->is) , __s1_len < 4) ? (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(rmp->is);
                int __result = (((const unsigned char *)(const char *)(lmp->is))[0] - __s2[0]);
                if (__s1_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(lmp->is))[1] - __s2[1]);
                    if (__s1_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(lmp->is))[2] - __s2[2]);
                        if (__s1_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(lmp->is))[3] - __s2[3]);
                    }
                }
                __result;
            }))) : (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) && (__s2_len = __builtin_strlen(rmp->is) , __s2_len < 4) ? (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (-(__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(lmp->is);
                int __result = (((const unsigned char *)(const char *)(rmp->is))[0] - __s2[0]);
                if (__s2_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(rmp->is))[1] - __s2[1]);
                    if (__s2_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(rmp->is))[2] - __s2[2]);
                        if (__s2_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(rmp->is))[3] - __s2[3]);
                    }
                }
                __result;
            })))) : __builtin_strcmp(lmp->is, rmp->is))));
        }) != 0)
            lmp->is[0] = '\x00';
        i = 0;
        while (lmp->left[i] != '\x00' && lmp->left[i] == rmp->left[i])
            ++i;
        lmp->left[i] = '\x00';
        ln = strlen(lmp->right);
        rn = strlen(rmp->right);
        n = ln;
        if (n > rn)
            n = rn;
        for (i = 0; i < n; ++i) 
            if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
                break;
        for (j = 0; j < i; ++j) 
            lmp->right[j] = lmp->right[(ln - i) + j];
        lmp->right[j] = '\x00';
        new = inboth(lmp->in, rmp->in);
        if (new == ((void *)0))
            goto done;
        freelist(lmp->in);
        free((char *)lmp->in);
        lmp->in = new;
    }
    break;
  case PLUS:
    if (mp <= musts)
        goto done;
    --mp;
    mp->is[0] = '\x00';
    break;
  case END:
    if (mp != &musts[1])
        goto done;
    for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
        if (strlen(musts[0].in[i]) > strlen(result))
            result = musts[0].in[i];
    if (__extension__ ({
        size_t __s1_len, __s2_len;
        (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
            const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
            int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
            if (__s1_len > 0 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
                if (__s1_len > 1 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                    if (__s1_len > 2 && __result == 0)
                        __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
                }
            }
            __result;
        }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
            const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
            int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
            if (__s2_len > 0 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
                if (__s2_len > 1 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                    if (__s2_len > 2 && __result == 0)
                        __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
                }
            }
            __result;
        })))) : __builtin_strcmp(result, musts[0].is))));
    }) == 0)
        exact = 1;
    goto done;
  case CAT:
    if (mp < &musts[2])
        goto done;
    {
        must *lmp;
        must *rmp;
        rmp = --mp;
        lmp = --mp;
        lmp->in = addlists(lmp->in, rmp->in);
        if (lmp->in == ((void *)0))
            goto done;
        if (lmp->right[0] != '\x00' && rmp->left[0] != '\x00') {
            char *tp;
            tp = icpyalloc(lmp->right);
            if (tp == ((void *)0))
                goto done;
            tp = icatalloc(tp, rmp->left);
            if (tp == ((void *)0))
                goto done;
            lmp->in = enlist(lmp->in, tp, strlen(tp));
            free(tp);
            if (lmp->in == ((void *)0))
                goto done;
        }
        if (lmp->is[0] != '\x00') {
            lmp->left = icatalloc(lmp->left, rmp->left);
            if (lmp->left == ((void *)0))
                goto done;
        }
        if (rmp->is[0] == '\x00')
            lmp->right[0] = '\x00';
        lmp->right = icatalloc(lmp->right, rmp->right);
        if (lmp->right == ((void *)0))
            goto done;
        if (lmp->is[0] != '\x00' && rmp->is[0] != '\x00') {
            lmp->is = icatalloc(lmp->is, rmp->is);
            if (lmp->is == ((void *)0))
                goto done;
        } else
            lmp->is[0] = '\x00';
    }
    break;
  default:
    if (t < END) {
        goto done;
    } else if (t == '\x00') {
        goto done;
    } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
    break;
}

....
Skipping nonlast:Priority 4732
At location src/dfa.c:3404
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
switch (t = dfa->tokens[ri]) {
  case LPAREN:
  case RPAREN:
    goto done;
  case EMPTY:
  case BEGLINE:
  case ENDLINE:
  case BEGWORD:
  case ENDWORD:
  case LIMWORD:
  case NOTLIMWORD:
  case BACKREF:
    resetmust(mp);
    break;
  case STAR:
  case QMARK:
    if (mp <= musts)
        goto done;
    --mp;
    resetmust(mp);
    break;
  case OR:
  case ORTOP:
    if (mp < &musts[2])
        goto done;
    {
        char **new;
        must *lmp;
        must *rmp;
        int j, ln, rn, n;
        rmp = --mp;
        lmp = --mp;
        if (__extension__ ({
            size_t __s1_len, __s2_len;
            (__builtin_constant_p(lmp->is) && __builtin_constant_p(rmp->is) && (__s1_len = __builtin_strlen(lmp->is) , __s2_len = __builtin_strlen(rmp->is) , (!((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(lmp->is, rmp->is) : (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) && (__s1_len = __builtin_strlen(lmp->is) , __s1_len < 4) ? (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(rmp->is);
                int __result = (((const unsigned char *)(const char *)(lmp->is))[0] - __s2[0]);
                if (__s1_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(lmp->is))[1] - __s2[1]);
                    if (__s1_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(lmp->is))[2] - __s2[2]);
                        if (__s1_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(lmp->is))[3] - __s2[3]);
                    }
                }
                __result;
            }))) : (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) && (__s2_len = __builtin_strlen(rmp->is) , __s2_len < 4) ? (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (-(__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(lmp->is);
                int __result = (((const unsigned char *)(const char *)(rmp->is))[0] - __s2[0]);
                if (__s2_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(rmp->is))[1] - __s2[1]);
                    if (__s2_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(rmp->is))[2] - __s2[2]);
                        if (__s2_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(rmp->is))[3] - __s2[3]);
                    }
                }
                __result;
            })))) : __builtin_strcmp(lmp->is, rmp->is))));
        }) != 0)
            lmp->is[0] = '\x00';
        i = 0;
        while (lmp->left[i] != '\x00' && lmp->left[i] == rmp->left[i])
            ++i;
        lmp->left[i] = '\x00';
        ln = strlen(lmp->right);
        rn = strlen(rmp->right);
        n = ln;
        if (n > rn)
            n = rn;
        for (i = 0; i < n; ++i) 
            if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
                break;
        for (j = 0; j < i; ++j) 
            lmp->right[j] = lmp->right[(ln - i) + j];
        lmp->right[j] = '\x00';
        new = inboth(lmp->in, rmp->in);
        if (new == ((void *)0))
            goto done;
        freelist(lmp->in);
        free((char *)lmp->in);
        lmp->in = new;
    }
    break;
  case PLUS:
    if (mp <= musts)
        goto done;
    --mp;
    mp->is[0] = '\x00';
    break;
  case END:
    if (mp != &musts[1])
        goto done;
    for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
        if (strlen(musts[0].in[i]) > strlen(result))
            result = musts[0].in[i];
    if (__extension__ ({
        size_t __s1_len, __s2_len;
        (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
            const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
            int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
            if (__s1_len > 0 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
                if (__s1_len > 1 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                    if (__s1_len > 2 && __result == 0)
                        __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
                }
            }
            __result;
        }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
            const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
            int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
            if (__s2_len > 0 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
                if (__s2_len > 1 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                    if (__s2_len > 2 && __result == 0)
                        __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
                }
            }
            __result;
        })))) : __builtin_strcmp(result, musts[0].is))));
    }) == 0)
        exact = 1;
    goto done;
  case CAT:
    if (mp < &musts[2])
        goto done;
    {
        must *lmp;
        must *rmp;
        rmp = --mp;
        lmp = --mp;
        lmp->in = addlists(lmp->in, rmp->in);
        if (lmp->in == ((void *)0))
            goto done;
        if (lmp->right[0] != '\x00' && rmp->left[0] != '\x00') {
            char *tp;
            tp = icpyalloc(lmp->right);
            if (tp == ((void *)0))
                goto done;
            tp = icatalloc(tp, rmp->left);
            if (tp == ((void *)0))
                goto done;
            lmp->in = enlist(lmp->in, tp, strlen(tp));
            free(tp);
            if (lmp->in == ((void *)0))
                goto done;
        }
        if (lmp->is[0] != '\x00') {
            lmp->left = icatalloc(lmp->left, rmp->left);
            if (lmp->left == ((void *)0))
                goto done;
        }
        if (rmp->is[0] == '\x00')
            lmp->right[0] = '\x00';
        lmp->right = icatalloc(lmp->right, rmp->right);
        if (lmp->right == ((void *)0))
            goto done;
        if (lmp->is[0] != '\x00' && rmp->is[0] != '\x00') {
            lmp->is = icatalloc(lmp->is, rmp->is);
            if (lmp->is == ((void *)0))
                goto done;
        } else
            lmp->is[0] = '\x00';
    }
    break;
  default:
    if (t < END) {
        goto done;
    } else if (t == '\x00') {
        goto done;
    } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
    break;
}

....
Skipping nonlast:Priority 4732
At location src/dfa.c:3404
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
switch (t = dfa->tokens[ri]) {
  case LPAREN:
  case RPAREN:
    goto done;
  case EMPTY:
  case BEGLINE:
  case ENDLINE:
  case BEGWORD:
  case ENDWORD:
  case LIMWORD:
  case NOTLIMWORD:
  case BACKREF:
    resetmust(mp);
    break;
  case STAR:
  case QMARK:
    if (mp <= musts)
        goto done;
    --mp;
    resetmust(mp);
    break;
  case OR:
  case ORTOP:
    if (mp < &musts[2])
        goto done;
    {
        char **new;
        must *lmp;
        must *rmp;
        int j, ln, rn, n;
        rmp = --mp;
        lmp = --mp;
        if (__extension__ ({
            size_t __s1_len, __s2_len;
            (__builtin_constant_p(lmp->is) && __builtin_constant_p(rmp->is) && (__s1_len = __builtin_strlen(lmp->is) , __s2_len = __builtin_strlen(rmp->is) , (!((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(lmp->is, rmp->is) : (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) && (__s1_len = __builtin_strlen(lmp->is) , __s1_len < 4) ? (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(rmp->is);
                int __result = (((const unsigned char *)(const char *)(lmp->is))[0] - __s2[0]);
                if (__s1_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(lmp->is))[1] - __s2[1]);
                    if (__s1_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(lmp->is))[2] - __s2[2]);
                        if (__s1_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(lmp->is))[3] - __s2[3]);
                    }
                }
                __result;
            }))) : (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) && (__s2_len = __builtin_strlen(rmp->is) , __s2_len < 4) ? (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (-(__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(lmp->is);
                int __result = (((const unsigned char *)(const char *)(rmp->is))[0] - __s2[0]);
                if (__s2_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(rmp->is))[1] - __s2[1]);
                    if (__s2_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(rmp->is))[2] - __s2[2]);
                        if (__s2_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(rmp->is))[3] - __s2[3]);
                    }
                }
                __result;
            })))) : __builtin_strcmp(lmp->is, rmp->is))));
        }) != 0)
            lmp->is[0] = '\x00';
        i = 0;
        while (lmp->left[i] != '\x00' && lmp->left[i] == rmp->left[i])
            ++i;
        lmp->left[i] = '\x00';
        ln = strlen(lmp->right);
        rn = strlen(rmp->right);
        n = ln;
        if (n > rn)
            n = rn;
        for (i = 0; i < n; ++i) 
            if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
                break;
        for (j = 0; j < i; ++j) 
            lmp->right[j] = lmp->right[(ln - i) + j];
        lmp->right[j] = '\x00';
        new = inboth(lmp->in, rmp->in);
        if (new == ((void *)0))
            goto done;
        freelist(lmp->in);
        free((char *)lmp->in);
        lmp->in = new;
    }
    break;
  case PLUS:
    if (mp <= musts)
        goto done;
    --mp;
    mp->is[0] = '\x00';
    break;
  case END:
    if (mp != &musts[1])
        goto done;
    for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
        if (strlen(musts[0].in[i]) > strlen(result))
            result = musts[0].in[i];
    if (__extension__ ({
        size_t __s1_len, __s2_len;
        (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
            const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
            int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
            if (__s1_len > 0 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
                if (__s1_len > 1 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                    if (__s1_len > 2 && __result == 0)
                        __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
                }
            }
            __result;
        }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
            const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
            int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
            if (__s2_len > 0 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
                if (__s2_len > 1 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                    if (__s2_len > 2 && __result == 0)
                        __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
                }
            }
            __result;
        })))) : __builtin_strcmp(result, musts[0].is))));
    }) == 0)
        exact = 1;
    goto done;
  case CAT:
    if (mp < &musts[2])
        goto done;
    {
        must *lmp;
        must *rmp;
        rmp = --mp;
        lmp = --mp;
        lmp->in = addlists(lmp->in, rmp->in);
        if (lmp->in == ((void *)0))
            goto done;
        if (lmp->right[0] != '\x00' && rmp->left[0] != '\x00') {
            char *tp;
            tp = icpyalloc(lmp->right);
            if (tp == ((void *)0))
                goto done;
            tp = icatalloc(tp, rmp->left);
            if (tp == ((void *)0))
                goto done;
            lmp->in = enlist(lmp->in, tp, strlen(tp));
            free(tp);
            if (lmp->in == ((void *)0))
                goto done;
        }
        if (lmp->is[0] != '\x00') {
            lmp->left = icatalloc(lmp->left, rmp->left);
            if (lmp->left == ((void *)0))
                goto done;
        }
        if (rmp->is[0] == '\x00')
            lmp->right[0] = '\x00';
        lmp->right = icatalloc(lmp->right, rmp->right);
        if (lmp->right == ((void *)0))
            goto done;
        if (lmp->is[0] != '\x00' && rmp->is[0] != '\x00') {
            lmp->is = icatalloc(lmp->is, rmp->is);
            if (lmp->is == ((void *)0))
                goto done;
        } else
            lmp->is[0] = '\x00';
    }
    break;
  default:
    if (t < END) {
        goto done;
    } else if (t == '\x00') {
        goto done;
    } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
    break;
}

....
Skipping nonlast:Priority 4732
At location src/dfa.c:3404
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
switch (t = dfa->tokens[ri]) {
  case LPAREN:
  case RPAREN:
    goto done;
  case EMPTY:
  case BEGLINE:
  case ENDLINE:
  case BEGWORD:
  case ENDWORD:
  case LIMWORD:
  case NOTLIMWORD:
  case BACKREF:
    resetmust(mp);
    break;
  case STAR:
  case QMARK:
    if (mp <= musts)
        goto done;
    --mp;
    resetmust(mp);
    break;
  case OR:
  case ORTOP:
    if (mp < &musts[2])
        goto done;
    {
        char **new;
        must *lmp;
        must *rmp;
        int j, ln, rn, n;
        rmp = --mp;
        lmp = --mp;
        if (__extension__ ({
            size_t __s1_len, __s2_len;
            (__builtin_constant_p(lmp->is) && __builtin_constant_p(rmp->is) && (__s1_len = __builtin_strlen(lmp->is) , __s2_len = __builtin_strlen(rmp->is) , (!((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(lmp->is, rmp->is) : (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) && (__s1_len = __builtin_strlen(lmp->is) , __s1_len < 4) ? (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(rmp->is);
                int __result = (((const unsigned char *)(const char *)(lmp->is))[0] - __s2[0]);
                if (__s1_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(lmp->is))[1] - __s2[1]);
                    if (__s1_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(lmp->is))[2] - __s2[2]);
                        if (__s1_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(lmp->is))[3] - __s2[3]);
                    }
                }
                __result;
            }))) : (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) && (__s2_len = __builtin_strlen(rmp->is) , __s2_len < 4) ? (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (-(__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(lmp->is);
                int __result = (((const unsigned char *)(const char *)(rmp->is))[0] - __s2[0]);
                if (__s2_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(rmp->is))[1] - __s2[1]);
                    if (__s2_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(rmp->is))[2] - __s2[2]);
                        if (__s2_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(rmp->is))[3] - __s2[3]);
                    }
                }
                __result;
            })))) : __builtin_strcmp(lmp->is, rmp->is))));
        }) != 0)
            lmp->is[0] = '\x00';
        i = 0;
        while (lmp->left[i] != '\x00' && lmp->left[i] == rmp->left[i])
            ++i;
        lmp->left[i] = '\x00';
        ln = strlen(lmp->right);
        rn = strlen(rmp->right);
        n = ln;
        if (n > rn)
            n = rn;
        for (i = 0; i < n; ++i) 
            if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
                break;
        for (j = 0; j < i; ++j) 
            lmp->right[j] = lmp->right[(ln - i) + j];
        lmp->right[j] = '\x00';
        new = inboth(lmp->in, rmp->in);
        if (new == ((void *)0))
            goto done;
        freelist(lmp->in);
        free((char *)lmp->in);
        lmp->in = new;
    }
    break;
  case PLUS:
    if (mp <= musts)
        goto done;
    --mp;
    mp->is[0] = '\x00';
    break;
  case END:
    if (mp != &musts[1])
        goto done;
    for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
        if (strlen(musts[0].in[i]) > strlen(result))
            result = musts[0].in[i];
    if (__extension__ ({
        size_t __s1_len, __s2_len;
        (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
            const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
            int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
            if (__s1_len > 0 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
                if (__s1_len > 1 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                    if (__s1_len > 2 && __result == 0)
                        __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
                }
            }
            __result;
        }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
            const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
            int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
            if (__s2_len > 0 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
                if (__s2_len > 1 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                    if (__s2_len > 2 && __result == 0)
                        __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
                }
            }
            __result;
        })))) : __builtin_strcmp(result, musts[0].is))));
    }) == 0)
        exact = 1;
    goto done;
  case CAT:
    if (mp < &musts[2])
        goto done;
    {
        must *lmp;
        must *rmp;
        rmp = --mp;
        lmp = --mp;
        lmp->in = addlists(lmp->in, rmp->in);
        if (lmp->in == ((void *)0))
            goto done;
        if (lmp->right[0] != '\x00' && rmp->left[0] != '\x00') {
            char *tp;
            tp = icpyalloc(lmp->right);
            if (tp == ((void *)0))
                goto done;
            tp = icatalloc(tp, rmp->left);
            if (tp == ((void *)0))
                goto done;
            lmp->in = enlist(lmp->in, tp, strlen(tp));
            free(tp);
            if (lmp->in == ((void *)0))
                goto done;
        }
        if (lmp->is[0] != '\x00') {
            lmp->left = icatalloc(lmp->left, rmp->left);
            if (lmp->left == ((void *)0))
                goto done;
        }
        if (rmp->is[0] == '\x00')
            lmp->right[0] = '\x00';
        lmp->right = icatalloc(lmp->right, rmp->right);
        if (lmp->right == ((void *)0))
            goto done;
        if (lmp->is[0] != '\x00' && rmp->is[0] != '\x00') {
            lmp->is = icatalloc(lmp->is, rmp->is);
            if (lmp->is == ((void *)0))
                goto done;
        } else
            lmp->is[0] = '\x00';
    }
    break;
  default:
    if (t < END) {
        goto done;
    } else if (t == '\x00') {
        goto done;
    } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
    break;
}

....
Skipping nonlast:Priority 4732
At location src/dfa.c:3404
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
switch (t = dfa->tokens[ri]) {
  case LPAREN:
  case RPAREN:
    goto done;
  case EMPTY:
  case BEGLINE:
  case ENDLINE:
  case BEGWORD:
  case ENDWORD:
  case LIMWORD:
  case NOTLIMWORD:
  case BACKREF:
    resetmust(mp);
    break;
  case STAR:
  case QMARK:
    if (mp <= musts)
        goto done;
    --mp;
    resetmust(mp);
    break;
  case OR:
  case ORTOP:
    if (mp < &musts[2])
        goto done;
    {
        char **new;
        must *lmp;
        must *rmp;
        int j, ln, rn, n;
        rmp = --mp;
        lmp = --mp;
        if (__extension__ ({
            size_t __s1_len, __s2_len;
            (__builtin_constant_p(lmp->is) && __builtin_constant_p(rmp->is) && (__s1_len = __builtin_strlen(lmp->is) , __s2_len = __builtin_strlen(rmp->is) , (!((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(lmp->is, rmp->is) : (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) && (__s1_len = __builtin_strlen(lmp->is) , __s1_len < 4) ? (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(rmp->is);
                int __result = (((const unsigned char *)(const char *)(lmp->is))[0] - __s2[0]);
                if (__s1_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(lmp->is))[1] - __s2[1]);
                    if (__s1_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(lmp->is))[2] - __s2[2]);
                        if (__s1_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(lmp->is))[3] - __s2[3]);
                    }
                }
                __result;
            }))) : (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) && (__s2_len = __builtin_strlen(rmp->is) , __s2_len < 4) ? (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (-(__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(lmp->is);
                int __result = (((const unsigned char *)(const char *)(rmp->is))[0] - __s2[0]);
                if (__s2_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(rmp->is))[1] - __s2[1]);
                    if (__s2_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(rmp->is))[2] - __s2[2]);
                        if (__s2_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(rmp->is))[3] - __s2[3]);
                    }
                }
                __result;
            })))) : __builtin_strcmp(lmp->is, rmp->is))));
        }) != 0)
            lmp->is[0] = '\x00';
        i = 0;
        while (lmp->left[i] != '\x00' && lmp->left[i] == rmp->left[i])
            ++i;
        lmp->left[i] = '\x00';
        ln = strlen(lmp->right);
        rn = strlen(rmp->right);
        n = ln;
        if (n > rn)
            n = rn;
        for (i = 0; i < n; ++i) 
            if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
                break;
        for (j = 0; j < i; ++j) 
            lmp->right[j] = lmp->right[(ln - i) + j];
        lmp->right[j] = '\x00';
        new = inboth(lmp->in, rmp->in);
        if (new == ((void *)0))
            goto done;
        freelist(lmp->in);
        free((char *)lmp->in);
        lmp->in = new;
    }
    break;
  case PLUS:
    if (mp <= musts)
        goto done;
    --mp;
    mp->is[0] = '\x00';
    break;
  case END:
    if (mp != &musts[1])
        goto done;
    for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
        if (strlen(musts[0].in[i]) > strlen(result))
            result = musts[0].in[i];
    if (__extension__ ({
        size_t __s1_len, __s2_len;
        (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
            const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
            int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
            if (__s1_len > 0 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
                if (__s1_len > 1 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                    if (__s1_len > 2 && __result == 0)
                        __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
                }
            }
            __result;
        }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
            const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
            int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
            if (__s2_len > 0 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
                if (__s2_len > 1 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                    if (__s2_len > 2 && __result == 0)
                        __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
                }
            }
            __result;
        })))) : __builtin_strcmp(result, musts[0].is))));
    }) == 0)
        exact = 1;
    goto done;
  case CAT:
    if (mp < &musts[2])
        goto done;
    {
        must *lmp;
        must *rmp;
        rmp = --mp;
        lmp = --mp;
        lmp->in = addlists(lmp->in, rmp->in);
        if (lmp->in == ((void *)0))
            goto done;
        if (lmp->right[0] != '\x00' && rmp->left[0] != '\x00') {
            char *tp;
            tp = icpyalloc(lmp->right);
            if (tp == ((void *)0))
                goto done;
            tp = icatalloc(tp, rmp->left);
            if (tp == ((void *)0))
                goto done;
            lmp->in = enlist(lmp->in, tp, strlen(tp));
            free(tp);
            if (lmp->in == ((void *)0))
                goto done;
        }
        if (lmp->is[0] != '\x00') {
            lmp->left = icatalloc(lmp->left, rmp->left);
            if (lmp->left == ((void *)0))
                goto done;
        }
        if (rmp->is[0] == '\x00')
            lmp->right[0] = '\x00';
        lmp->right = icatalloc(lmp->right, rmp->right);
        if (lmp->right == ((void *)0))
            goto done;
        if (lmp->is[0] != '\x00' && rmp->is[0] != '\x00') {
            lmp->is = icatalloc(lmp->is, rmp->is);
            if (lmp->is == ((void *)0))
                goto done;
        } else
            lmp->is[0] = '\x00';
    }
    break;
  default:
    if (t < END) {
        goto done;
    } else if (t == '\x00') {
        goto done;
    } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
    break;
}

....
Skipping nonlast:Priority 4732
At location src/dfa.c:3404
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
switch (t = dfa->tokens[ri]) {
  case LPAREN:
  case RPAREN:
    goto done;
  case EMPTY:
  case BEGLINE:
  case ENDLINE:
  case BEGWORD:
  case ENDWORD:
  case LIMWORD:
  case NOTLIMWORD:
  case BACKREF:
    resetmust(mp);
    break;
  case STAR:
  case QMARK:
    if (mp <= musts)
        goto done;
    --mp;
    resetmust(mp);
    break;
  case OR:
  case ORTOP:
    if (mp < &musts[2])
        goto done;
    {
        char **new;
        must *lmp;
        must *rmp;
        int j, ln, rn, n;
        rmp = --mp;
        lmp = --mp;
        if (__extension__ ({
            size_t __s1_len, __s2_len;
            (__builtin_constant_p(lmp->is) && __builtin_constant_p(rmp->is) && (__s1_len = __builtin_strlen(lmp->is) , __s2_len = __builtin_strlen(rmp->is) , (!((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(lmp->is, rmp->is) : (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) && (__s1_len = __builtin_strlen(lmp->is) , __s1_len < 4) ? (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(rmp->is);
                int __result = (((const unsigned char *)(const char *)(lmp->is))[0] - __s2[0]);
                if (__s1_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(lmp->is))[1] - __s2[1]);
                    if (__s1_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(lmp->is))[2] - __s2[2]);
                        if (__s1_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(lmp->is))[3] - __s2[3]);
                    }
                }
                __result;
            }))) : (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) && (__s2_len = __builtin_strlen(rmp->is) , __s2_len < 4) ? (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (-(__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(lmp->is);
                int __result = (((const unsigned char *)(const char *)(rmp->is))[0] - __s2[0]);
                if (__s2_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(rmp->is))[1] - __s2[1]);
                    if (__s2_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(rmp->is))[2] - __s2[2]);
                        if (__s2_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(rmp->is))[3] - __s2[3]);
                    }
                }
                __result;
            })))) : __builtin_strcmp(lmp->is, rmp->is))));
        }) != 0)
            lmp->is[0] = '\x00';
        i = 0;
        while (lmp->left[i] != '\x00' && lmp->left[i] == rmp->left[i])
            ++i;
        lmp->left[i] = '\x00';
        ln = strlen(lmp->right);
        rn = strlen(rmp->right);
        n = ln;
        if (n > rn)
            n = rn;
        for (i = 0; i < n; ++i) 
            if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
                break;
        for (j = 0; j < i; ++j) 
            lmp->right[j] = lmp->right[(ln - i) + j];
        lmp->right[j] = '\x00';
        new = inboth(lmp->in, rmp->in);
        if (new == ((void *)0))
            goto done;
        freelist(lmp->in);
        free((char *)lmp->in);
        lmp->in = new;
    }
    break;
  case PLUS:
    if (mp <= musts)
        goto done;
    --mp;
    mp->is[0] = '\x00';
    break;
  case END:
    if (mp != &musts[1])
        goto done;
    for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
        if (strlen(musts[0].in[i]) > strlen(result))
            result = musts[0].in[i];
    if (__extension__ ({
        size_t __s1_len, __s2_len;
        (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
            const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
            int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
            if (__s1_len > 0 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
                if (__s1_len > 1 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                    if (__s1_len > 2 && __result == 0)
                        __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
                }
            }
            __result;
        }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
            const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
            int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
            if (__s2_len > 0 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
                if (__s2_len > 1 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                    if (__s2_len > 2 && __result == 0)
                        __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
                }
            }
            __result;
        })))) : __builtin_strcmp(result, musts[0].is))));
    }) == 0)
        exact = 1;
    goto done;
  case CAT:
    if (mp < &musts[2])
        goto done;
    {
        must *lmp;
        must *rmp;
        rmp = --mp;
        lmp = --mp;
        lmp->in = addlists(lmp->in, rmp->in);
        if (lmp->in == ((void *)0))
            goto done;
        if (lmp->right[0] != '\x00' && rmp->left[0] != '\x00') {
            char *tp;
            tp = icpyalloc(lmp->right);
            if (tp == ((void *)0))
                goto done;
            tp = icatalloc(tp, rmp->left);
            if (tp == ((void *)0))
                goto done;
            lmp->in = enlist(lmp->in, tp, strlen(tp));
            free(tp);
            if (lmp->in == ((void *)0))
                goto done;
        }
        if (lmp->is[0] != '\x00') {
            lmp->left = icatalloc(lmp->left, rmp->left);
            if (lmp->left == ((void *)0))
                goto done;
        }
        if (rmp->is[0] == '\x00')
            lmp->right[0] = '\x00';
        lmp->right = icatalloc(lmp->right, rmp->right);
        if (lmp->right == ((void *)0))
            goto done;
        if (lmp->is[0] != '\x00' && rmp->is[0] != '\x00') {
            lmp->is = icatalloc(lmp->is, rmp->is);
            if (lmp->is == ((void *)0))
                goto done;
        } else
            lmp->is[0] = '\x00';
    }
    break;
  default:
    if (t < END) {
        goto done;
    } else if (t == '\x00') {
        goto done;
    } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
    break;
}

....
Skipping nonlast:Priority 4732
At location src/dfa.c:3404
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
switch (t = dfa->tokens[ri]) {
  case LPAREN:
  case RPAREN:
    goto done;
  case EMPTY:
  case BEGLINE:
  case ENDLINE:
  case BEGWORD:
  case ENDWORD:
  case LIMWORD:
  case NOTLIMWORD:
  case BACKREF:
    resetmust(mp);
    break;
  case STAR:
  case QMARK:
    if (mp <= musts)
        goto done;
    --mp;
    resetmust(mp);
    break;
  case OR:
  case ORTOP:
    if (mp < &musts[2])
        goto done;
    {
        char **new;
        must *lmp;
        must *rmp;
        int j, ln, rn, n;
        rmp = --mp;
        lmp = --mp;
        if (__extension__ ({
            size_t __s1_len, __s2_len;
            (__builtin_constant_p(lmp->is) && __builtin_constant_p(rmp->is) && (__s1_len = __builtin_strlen(lmp->is) , __s2_len = __builtin_strlen(rmp->is) , (!((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(lmp->is, rmp->is) : (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) && (__s1_len = __builtin_strlen(lmp->is) , __s1_len < 4) ? (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(rmp->is);
                int __result = (((const unsigned char *)(const char *)(lmp->is))[0] - __s2[0]);
                if (__s1_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(lmp->is))[1] - __s2[1]);
                    if (__s1_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(lmp->is))[2] - __s2[2]);
                        if (__s1_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(lmp->is))[3] - __s2[3]);
                    }
                }
                __result;
            }))) : (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) && (__s2_len = __builtin_strlen(rmp->is) , __s2_len < 4) ? (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (-(__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(lmp->is);
                int __result = (((const unsigned char *)(const char *)(rmp->is))[0] - __s2[0]);
                if (__s2_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(rmp->is))[1] - __s2[1]);
                    if (__s2_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(rmp->is))[2] - __s2[2]);
                        if (__s2_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(rmp->is))[3] - __s2[3]);
                    }
                }
                __result;
            })))) : __builtin_strcmp(lmp->is, rmp->is))));
        }) != 0)
            lmp->is[0] = '\x00';
        i = 0;
        while (lmp->left[i] != '\x00' && lmp->left[i] == rmp->left[i])
            ++i;
        lmp->left[i] = '\x00';
        ln = strlen(lmp->right);
        rn = strlen(rmp->right);
        n = ln;
        if (n > rn)
            n = rn;
        for (i = 0; i < n; ++i) 
            if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
                break;
        for (j = 0; j < i; ++j) 
            lmp->right[j] = lmp->right[(ln - i) + j];
        lmp->right[j] = '\x00';
        new = inboth(lmp->in, rmp->in);
        if (new == ((void *)0))
            goto done;
        freelist(lmp->in);
        free((char *)lmp->in);
        lmp->in = new;
    }
    break;
  case PLUS:
    if (mp <= musts)
        goto done;
    --mp;
    mp->is[0] = '\x00';
    break;
  case END:
    if (mp != &musts[1])
        goto done;
    for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
        if (strlen(musts[0].in[i]) > strlen(result))
            result = musts[0].in[i];
    if (__extension__ ({
        size_t __s1_len, __s2_len;
        (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
            const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
            int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
            if (__s1_len > 0 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
                if (__s1_len > 1 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                    if (__s1_len > 2 && __result == 0)
                        __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
                }
            }
            __result;
        }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
            const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
            int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
            if (__s2_len > 0 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
                if (__s2_len > 1 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                    if (__s2_len > 2 && __result == 0)
                        __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
                }
            }
            __result;
        })))) : __builtin_strcmp(result, musts[0].is))));
    }) == 0)
        exact = 1;
    goto done;
  case CAT:
    if (mp < &musts[2])
        goto done;
    {
        must *lmp;
        must *rmp;
        rmp = --mp;
        lmp = --mp;
        lmp->in = addlists(lmp->in, rmp->in);
        if (lmp->in == ((void *)0))
            goto done;
        if (lmp->right[0] != '\x00' && rmp->left[0] != '\x00') {
            char *tp;
            tp = icpyalloc(lmp->right);
            if (tp == ((void *)0))
                goto done;
            tp = icatalloc(tp, rmp->left);
            if (tp == ((void *)0))
                goto done;
            lmp->in = enlist(lmp->in, tp, strlen(tp));
            free(tp);
            if (lmp->in == ((void *)0))
                goto done;
        }
        if (lmp->is[0] != '\x00') {
            lmp->left = icatalloc(lmp->left, rmp->left);
            if (lmp->left == ((void *)0))
                goto done;
        }
        if (rmp->is[0] == '\x00')
            lmp->right[0] = '\x00';
        lmp->right = icatalloc(lmp->right, rmp->right);
        if (lmp->right == ((void *)0))
            goto done;
        if (lmp->is[0] != '\x00' && rmp->is[0] != '\x00') {
            lmp->is = icatalloc(lmp->is, rmp->is);
            if (lmp->is == ((void *)0))
                goto done;
        } else
            lmp->is[0] = '\x00';
    }
    break;
  default:
    if (t < END) {
        goto done;
    } else if (t == '\x00') {
        goto done;
    } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
    break;
}

....
Skipping nonlast addifexit:Priority 9732
At location src/dfa.c:3404
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(dfa, ri, t, dfa, dfa->tokens, dfa->tokens, dfa->tindex, dfa->tindex, mp, i, musts, exact, result, dm, dfa->musts, dfa->musts, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success)))
    return;
switch (t = dfa->tokens[ri]) {
  case LPAREN:
  case RPAREN:
    goto done;
  case EMPTY:
  case BEGLINE:
  case ENDLINE:
  case BEGWORD:
  case ENDWORD:
  case LIMWORD:
  case NOTLIMWORD:
  case BACKREF:
    resetmust(mp);
    break;
  case STAR:
  case QMARK:
    if (mp <= musts)
        goto done;
    --mp;
    resetmust(mp);
    break;
  case OR:
  case ORTOP:
    if (mp < &musts[2])
        goto done;
    {
        char **new;
        must *lmp;
        must *rmp;
        int j, ln, rn, n;
        rmp = --mp;
        lmp = --mp;
        if (__extension__ ({
            size_t __s1_len, __s2_len;
            (__builtin_constant_p(lmp->is) && __builtin_constant_p(rmp->is) && (__s1_len = __builtin_strlen(lmp->is) , __s2_len = __builtin_strlen(rmp->is) , (!((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(lmp->is, rmp->is) : (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) && (__s1_len = __builtin_strlen(lmp->is) , __s1_len < 4) ? (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(rmp->is);
                int __result = (((const unsigned char *)(const char *)(lmp->is))[0] - __s2[0]);
                if (__s1_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(lmp->is))[1] - __s2[1]);
                    if (__s1_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(lmp->is))[2] - __s2[2]);
                        if (__s1_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(lmp->is))[3] - __s2[3]);
                    }
                }
                __result;
            }))) : (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) && (__s2_len = __builtin_strlen(rmp->is) , __s2_len < 4) ? (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (-(__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(lmp->is);
                int __result = (((const unsigned char *)(const char *)(rmp->is))[0] - __s2[0]);
                if (__s2_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(rmp->is))[1] - __s2[1]);
                    if (__s2_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(rmp->is))[2] - __s2[2]);
                        if (__s2_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(rmp->is))[3] - __s2[3]);
                    }
                }
                __result;
            })))) : __builtin_strcmp(lmp->is, rmp->is))));
        }) != 0)
            lmp->is[0] = '\x00';
        i = 0;
        while (lmp->left[i] != '\x00' && lmp->left[i] == rmp->left[i])
            ++i;
        lmp->left[i] = '\x00';
        ln = strlen(lmp->right);
        rn = strlen(rmp->right);
        n = ln;
        if (n > rn)
            n = rn;
        for (i = 0; i < n; ++i) 
            if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
                break;
        for (j = 0; j < i; ++j) 
            lmp->right[j] = lmp->right[(ln - i) + j];
        lmp->right[j] = '\x00';
        new = inboth(lmp->in, rmp->in);
        if (new == ((void *)0))
            goto done;
        freelist(lmp->in);
        free((char *)lmp->in);
        lmp->in = new;
    }
    break;
  case PLUS:
    if (mp <= musts)
        goto done;
    --mp;
    mp->is[0] = '\x00';
    break;
  case END:
    if (mp != &musts[1])
        goto done;
    for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
        if (strlen(musts[0].in[i]) > strlen(result))
            result = musts[0].in[i];
    if (__extension__ ({
        size_t __s1_len, __s2_len;
        (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
            const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
            int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
            if (__s1_len > 0 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
                if (__s1_len > 1 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                    if (__s1_len > 2 && __result == 0)
                        __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
                }
            }
            __result;
        }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
            const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
            int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
            if (__s2_len > 0 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
                if (__s2_len > 1 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                    if (__s2_len > 2 && __result == 0)
                        __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
                }
            }
            __result;
        })))) : __builtin_strcmp(result, musts[0].is))));
    }) == 0)
        exact = 1;
    goto done;
  case CAT:
    if (mp < &musts[2])
        goto done;
    {
        must *lmp;
        must *rmp;
        rmp = --mp;
        lmp = --mp;
        lmp->in = addlists(lmp->in, rmp->in);
        if (lmp->in == ((void *)0))
            goto done;
        if (lmp->right[0] != '\x00' && rmp->left[0] != '\x00') {
            char *tp;
            tp = icpyalloc(lmp->right);
            if (tp == ((void *)0))
                goto done;
            tp = icatalloc(tp, rmp->left);
            if (tp == ((void *)0))
                goto done;
            lmp->in = enlist(lmp->in, tp, strlen(tp));
            free(tp);
            if (lmp->in == ((void *)0))
                goto done;
        }
        if (lmp->is[0] != '\x00') {
            lmp->left = icatalloc(lmp->left, rmp->left);
            if (lmp->left == ((void *)0))
                goto done;
        }
        if (rmp->is[0] == '\x00')
            lmp->right[0] = '\x00';
        lmp->right = icatalloc(lmp->right, rmp->right);
        if (lmp->right == ((void *)0))
            goto done;
        if (lmp->is[0] != '\x00' && rmp->is[0] != '\x00') {
            lmp->is = icatalloc(lmp->is, rmp->is);
            if (lmp->is == ((void *)0))
                goto done;
        } else
            lmp->is[0] = '\x00';
    }
    break;
  default:
    if (t < END) {
        goto done;
    } else if (t == '\x00') {
        goto done;
    } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
    break;
}

....
Skipping nonlast addifexit:Priority 9732
At location src/dfa.c:3404
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(dfa, ri, t, dfa, dfa->tokens, dfa->tokens, dfa->tindex, dfa->tindex, mp, i, musts, exact, result, dm, dfa->musts, dfa->musts, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success)))
    break;
switch (t = dfa->tokens[ri]) {
  case LPAREN:
  case RPAREN:
    goto done;
  case EMPTY:
  case BEGLINE:
  case ENDLINE:
  case BEGWORD:
  case ENDWORD:
  case LIMWORD:
  case NOTLIMWORD:
  case BACKREF:
    resetmust(mp);
    break;
  case STAR:
  case QMARK:
    if (mp <= musts)
        goto done;
    --mp;
    resetmust(mp);
    break;
  case OR:
  case ORTOP:
    if (mp < &musts[2])
        goto done;
    {
        char **new;
        must *lmp;
        must *rmp;
        int j, ln, rn, n;
        rmp = --mp;
        lmp = --mp;
        if (__extension__ ({
            size_t __s1_len, __s2_len;
            (__builtin_constant_p(lmp->is) && __builtin_constant_p(rmp->is) && (__s1_len = __builtin_strlen(lmp->is) , __s2_len = __builtin_strlen(rmp->is) , (!((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(lmp->is, rmp->is) : (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) && (__s1_len = __builtin_strlen(lmp->is) , __s1_len < 4) ? (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(rmp->is);
                int __result = (((const unsigned char *)(const char *)(lmp->is))[0] - __s2[0]);
                if (__s1_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(lmp->is))[1] - __s2[1]);
                    if (__s1_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(lmp->is))[2] - __s2[2]);
                        if (__s1_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(lmp->is))[3] - __s2[3]);
                    }
                }
                __result;
            }))) : (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) && (__s2_len = __builtin_strlen(rmp->is) , __s2_len < 4) ? (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (-(__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(lmp->is);
                int __result = (((const unsigned char *)(const char *)(rmp->is))[0] - __s2[0]);
                if (__s2_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(rmp->is))[1] - __s2[1]);
                    if (__s2_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(rmp->is))[2] - __s2[2]);
                        if (__s2_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(rmp->is))[3] - __s2[3]);
                    }
                }
                __result;
            })))) : __builtin_strcmp(lmp->is, rmp->is))));
        }) != 0)
            lmp->is[0] = '\x00';
        i = 0;
        while (lmp->left[i] != '\x00' && lmp->left[i] == rmp->left[i])
            ++i;
        lmp->left[i] = '\x00';
        ln = strlen(lmp->right);
        rn = strlen(rmp->right);
        n = ln;
        if (n > rn)
            n = rn;
        for (i = 0; i < n; ++i) 
            if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
                break;
        for (j = 0; j < i; ++j) 
            lmp->right[j] = lmp->right[(ln - i) + j];
        lmp->right[j] = '\x00';
        new = inboth(lmp->in, rmp->in);
        if (new == ((void *)0))
            goto done;
        freelist(lmp->in);
        free((char *)lmp->in);
        lmp->in = new;
    }
    break;
  case PLUS:
    if (mp <= musts)
        goto done;
    --mp;
    mp->is[0] = '\x00';
    break;
  case END:
    if (mp != &musts[1])
        goto done;
    for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
        if (strlen(musts[0].in[i]) > strlen(result))
            result = musts[0].in[i];
    if (__extension__ ({
        size_t __s1_len, __s2_len;
        (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
            const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
            int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
            if (__s1_len > 0 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
                if (__s1_len > 1 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                    if (__s1_len > 2 && __result == 0)
                        __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
                }
            }
            __result;
        }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
            const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
            int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
            if (__s2_len > 0 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
                if (__s2_len > 1 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                    if (__s2_len > 2 && __result == 0)
                        __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
                }
            }
            __result;
        })))) : __builtin_strcmp(result, musts[0].is))));
    }) == 0)
        exact = 1;
    goto done;
  case CAT:
    if (mp < &musts[2])
        goto done;
    {
        must *lmp;
        must *rmp;
        rmp = --mp;
        lmp = --mp;
        lmp->in = addlists(lmp->in, rmp->in);
        if (lmp->in == ((void *)0))
            goto done;
        if (lmp->right[0] != '\x00' && rmp->left[0] != '\x00') {
            char *tp;
            tp = icpyalloc(lmp->right);
            if (tp == ((void *)0))
                goto done;
            tp = icatalloc(tp, rmp->left);
            if (tp == ((void *)0))
                goto done;
            lmp->in = enlist(lmp->in, tp, strlen(tp));
            free(tp);
            if (lmp->in == ((void *)0))
                goto done;
        }
        if (lmp->is[0] != '\x00') {
            lmp->left = icatalloc(lmp->left, rmp->left);
            if (lmp->left == ((void *)0))
                goto done;
        }
        if (rmp->is[0] == '\x00')
            lmp->right[0] = '\x00';
        lmp->right = icatalloc(lmp->right, rmp->right);
        if (lmp->right == ((void *)0))
            goto done;
        if (lmp->is[0] != '\x00' && rmp->is[0] != '\x00') {
            lmp->is = icatalloc(lmp->is, rmp->is);
            if (lmp->is == ((void *)0))
                goto done;
        } else
            lmp->is[0] = '\x00';
    }
    break;
  default:
    if (t < END) {
        goto done;
    } else if (t == '\x00') {
        goto done;
    } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
    break;
}

....
Skipping nonlast addifexit:Priority 9932
At location src/dfa.c:3404
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(dfa, ri, t, dfa, dfa->tokens, dfa->tokens, dfa->tindex, dfa->tindex, mp, i, musts, exact, result, dm, dfa->musts, dfa->musts, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success)))
    goto done;
switch (t = dfa->tokens[ri]) {
  case LPAREN:
  case RPAREN:
    goto done;
  case EMPTY:
  case BEGLINE:
  case ENDLINE:
  case BEGWORD:
  case ENDWORD:
  case LIMWORD:
  case NOTLIMWORD:
  case BACKREF:
    resetmust(mp);
    break;
  case STAR:
  case QMARK:
    if (mp <= musts)
        goto done;
    --mp;
    resetmust(mp);
    break;
  case OR:
  case ORTOP:
    if (mp < &musts[2])
        goto done;
    {
        char **new;
        must *lmp;
        must *rmp;
        int j, ln, rn, n;
        rmp = --mp;
        lmp = --mp;
        if (__extension__ ({
            size_t __s1_len, __s2_len;
            (__builtin_constant_p(lmp->is) && __builtin_constant_p(rmp->is) && (__s1_len = __builtin_strlen(lmp->is) , __s2_len = __builtin_strlen(rmp->is) , (!((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(lmp->is, rmp->is) : (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) && (__s1_len = __builtin_strlen(lmp->is) , __s1_len < 4) ? (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(rmp->is);
                int __result = (((const unsigned char *)(const char *)(lmp->is))[0] - __s2[0]);
                if (__s1_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(lmp->is))[1] - __s2[1]);
                    if (__s1_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(lmp->is))[2] - __s2[2]);
                        if (__s1_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(lmp->is))[3] - __s2[3]);
                    }
                }
                __result;
            }))) : (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) && (__s2_len = __builtin_strlen(rmp->is) , __s2_len < 4) ? (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (-(__extension__ ({
                const unsigned char *__s2 = (const unsigned char *)(const char *)(lmp->is);
                int __result = (((const unsigned char *)(const char *)(rmp->is))[0] - __s2[0]);
                if (__s2_len > 0 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(rmp->is))[1] - __s2[1]);
                    if (__s2_len > 1 && __result == 0) {
                        __result = (((const unsigned char *)(const char *)(rmp->is))[2] - __s2[2]);
                        if (__s2_len > 2 && __result == 0)
                            __result = (((const unsigned char *)(const char *)(rmp->is))[3] - __s2[3]);
                    }
                }
                __result;
            })))) : __builtin_strcmp(lmp->is, rmp->is))));
        }) != 0)
            lmp->is[0] = '\x00';
        i = 0;
        while (lmp->left[i] != '\x00' && lmp->left[i] == rmp->left[i])
            ++i;
        lmp->left[i] = '\x00';
        ln = strlen(lmp->right);
        rn = strlen(rmp->right);
        n = ln;
        if (n > rn)
            n = rn;
        for (i = 0; i < n; ++i) 
            if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
                break;
        for (j = 0; j < i; ++j) 
            lmp->right[j] = lmp->right[(ln - i) + j];
        lmp->right[j] = '\x00';
        new = inboth(lmp->in, rmp->in);
        if (new == ((void *)0))
            goto done;
        freelist(lmp->in);
        free((char *)lmp->in);
        lmp->in = new;
    }
    break;
  case PLUS:
    if (mp <= musts)
        goto done;
    --mp;
    mp->is[0] = '\x00';
    break;
  case END:
    if (mp != &musts[1])
        goto done;
    for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
        if (strlen(musts[0].in[i]) > strlen(result))
            result = musts[0].in[i];
    if (__extension__ ({
        size_t __s1_len, __s2_len;
        (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
            const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
            int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
            if (__s1_len > 0 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
                if (__s1_len > 1 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                    if (__s1_len > 2 && __result == 0)
                        __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
                }
            }
            __result;
        }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
            const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
            int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
            if (__s2_len > 0 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
                if (__s2_len > 1 && __result == 0) {
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                    if (__s2_len > 2 && __result == 0)
                        __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
                }
            }
            __result;
        })))) : __builtin_strcmp(result, musts[0].is))));
    }) == 0)
        exact = 1;
    goto done;
  case CAT:
    if (mp < &musts[2])
        goto done;
    {
        must *lmp;
        must *rmp;
        rmp = --mp;
        lmp = --mp;
        lmp->in = addlists(lmp->in, rmp->in);
        if (lmp->in == ((void *)0))
            goto done;
        if (lmp->right[0] != '\x00' && rmp->left[0] != '\x00') {
            char *tp;
            tp = icpyalloc(lmp->right);
            if (tp == ((void *)0))
                goto done;
            tp = icatalloc(tp, rmp->left);
            if (tp == ((void *)0))
                goto done;
            lmp->in = enlist(lmp->in, tp, strlen(tp));
            free(tp);
            if (lmp->in == ((void *)0))
                goto done;
        }
        if (lmp->is[0] != '\x00') {
            lmp->left = icatalloc(lmp->left, rmp->left);
            if (lmp->left == ((void *)0))
                goto done;
        }
        if (rmp->is[0] == '\x00')
            lmp->right[0] = '\x00';
        lmp->right = icatalloc(lmp->right, rmp->right);
        if (lmp->right == ((void *)0))
            goto done;
        if (lmp->is[0] != '\x00' && rmp->is[0] != '\x00') {
            lmp->is = icatalloc(lmp->is, rmp->is);
            if (lmp->is == ((void *)0))
                goto done;
        } else
            lmp->is[0] = '\x00';
    }
    break;
  default:
    if (t < END) {
        goto done;
    } else if (t == '\x00') {
        goto done;
    } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
    break;
}

....
Skipping nonlast:Priority -90
At location src/dfa.c:3418
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
break;

....
Skipping nonlast:Priority -90
At location src/dfa.c:3418
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
break;

....
Skipping nonlast:Priority -90
At location src/dfa.c:3418
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
break;

....
Skipping nonlast:Priority -90
At location src/dfa.c:3418
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
break;

....
Skipping nonlast:Priority -90
At location src/dfa.c:3418
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
break;

....
Skipping nonlast:Priority -90
At location src/dfa.c:3418
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
break;

....
Skipping nonlast:Priority -90
At location src/dfa.c:3418
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
break;

....
Skipping nonlast:Priority -90
At location src/dfa.c:3418
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
break;

....
Skipping nonlast:Priority -90
At location src/dfa.c:3418
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
break;

....
Skipping nonlast addifexit:Priority 4910
At location src/dfa.c:3418
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, musts, dfa, ri, t, dfa, i, exact, result, mp->is, mp->left, mp->right, mp->in, dm)))
    return;
break;

....
Skipping nonlast addifexit:Priority 4910
At location src/dfa.c:3418
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, musts, dfa, ri, t, dfa, i, exact, result, mp->is, mp->left, mp->right, mp->in, dm)))
    break;
break;

....
Skipping nonlast addifexit:Priority 5110
At location src/dfa.c:3418
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, musts, dfa, ri, t, dfa, i, exact, result, mp->is, mp->left, mp->right, mp->in, dm)))
    goto done;
break;

....
Skipping nonlast:Priority -329
At location src/dfa.c:3423
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
--mp;

....
Skipping nonlast:Priority -329
At location src/dfa.c:3423
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
--mp;

....
Skipping nonlast:Priority -329
At location src/dfa.c:3423
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
--mp;

....
Skipping nonlast:Priority -329
At location src/dfa.c:3423
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
--mp;

....
Skipping nonlast:Priority -329
At location src/dfa.c:3423
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
--mp;

....
Skipping nonlast:Priority -329
At location src/dfa.c:3423
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
--mp;

....
Skipping nonlast:Priority -329
At location src/dfa.c:3423
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
--mp;

....
Skipping nonlast:Priority -329
At location src/dfa.c:3423
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
--mp;

....
Skipping nonlast:Priority -329
At location src/dfa.c:3423
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
--mp;

....
Skipping nonlast addifexit:Priority 4671
At location src/dfa.c:3423
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, musts, dfa, ri, i, t, dfa, mp->is, exact, result, mp->left, mp->right, mp->in, dm)))
    return;
--mp;

....
Skipping nonlast addifexit:Priority 4671
At location src/dfa.c:3423
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, musts, dfa, ri, i, t, dfa, mp->is, exact, result, mp->left, mp->right, mp->in, dm)))
    break;
--mp;

....
Skipping nonlast addifexit:Priority 4871
At location src/dfa.c:3423
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, musts, dfa, ri, i, t, dfa, mp->is, exact, result, mp->left, mp->right, mp->in, dm)))
    goto done;
--mp;

....
Skipping nonlast:Priority -328
At location src/dfa.c:3424
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
resetmust(mp);

....
Skipping nonlast:Priority -328
At location src/dfa.c:3424
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
resetmust(mp);

....
Skipping nonlast:Priority -328
At location src/dfa.c:3424
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
resetmust(mp);

....
Skipping nonlast:Priority -328
At location src/dfa.c:3424
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
resetmust(mp);

....
Skipping nonlast:Priority -328
At location src/dfa.c:3424
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
resetmust(mp);

....
Skipping nonlast:Priority -328
At location src/dfa.c:3424
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
resetmust(mp);

....
Skipping nonlast:Priority -328
At location src/dfa.c:3424
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
resetmust(mp);

....
Skipping nonlast:Priority -328
At location src/dfa.c:3424
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
resetmust(mp);

....
Skipping nonlast:Priority -328
At location src/dfa.c:3424
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
resetmust(mp);

....
Skipping nonlast addifexit:Priority 4672
At location src/dfa.c:3424
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, musts, i, dfa, ri, t, dfa, mp->is, exact, result, mp->left, mp->right, mp->in, dm)))
    return;
resetmust(mp);

....
Skipping nonlast addifexit:Priority 4672
At location src/dfa.c:3424
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, musts, i, dfa, ri, t, dfa, mp->is, exact, result, mp->left, mp->right, mp->in, dm)))
    break;
resetmust(mp);

....
Skipping nonlast addifexit:Priority 4872
At location src/dfa.c:3424
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, musts, i, dfa, ri, t, dfa, mp->is, exact, result, mp->left, mp->right, mp->in, dm)))
    goto done;
resetmust(mp);

....
Skipping nonlast:Priority -327
At location src/dfa.c:3425
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
break;

....
Skipping nonlast:Priority -327
At location src/dfa.c:3425
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
break;

....
Skipping nonlast:Priority -327
At location src/dfa.c:3425
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
break;

....
Skipping nonlast:Priority -327
At location src/dfa.c:3425
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
break;

....
Skipping nonlast:Priority -327
At location src/dfa.c:3425
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
break;

....
Skipping nonlast:Priority -327
At location src/dfa.c:3425
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
break;

....
Skipping nonlast:Priority -327
At location src/dfa.c:3425
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
break;

....
Skipping nonlast:Priority -327
At location src/dfa.c:3425
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
break;

....
Skipping nonlast:Priority -327
At location src/dfa.c:3425
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
break;

....
Skipping nonlast addifexit:Priority 4673
At location src/dfa.c:3425
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, musts, i, dfa, ri, t, dfa, mp->is, result, exact, mp->left, mp->right, mp->in, dm)))
    return;
break;

....
Skipping nonlast addifexit:Priority 4673
At location src/dfa.c:3425
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, musts, i, dfa, ri, t, dfa, mp->is, result, exact, mp->left, mp->right, mp->in, dm)))
    break;
break;

....
Skipping nonlast addifexit:Priority 4873
At location src/dfa.c:3425
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, musts, i, dfa, ri, t, dfa, mp->is, result, exact, mp->left, mp->right, mp->in, dm)))
    goto done;
break;

....
Skipping nonlast:Priority -88
At location src/dfa.c:3431
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
char **new;

....
Skipping nonlast:Priority -88
At location src/dfa.c:3431
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
char **new;

....
Skipping nonlast:Priority -88
At location src/dfa.c:3431
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
char **new;

....
Skipping nonlast:Priority -88
At location src/dfa.c:3431
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
char **new;

....
Skipping nonlast:Priority -88
At location src/dfa.c:3431
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
char **new;

....
Skipping nonlast:Priority -88
At location src/dfa.c:3431
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
char **new;

....
Skipping nonlast:Priority -88
At location src/dfa.c:3431
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
char **new;

....
Skipping nonlast:Priority -88
At location src/dfa.c:3431
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
char **new;

....
Skipping nonlast:Priority -88
At location src/dfa.c:3431
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
char **new;

....
Skipping nonlast addifexit:Priority 4912
At location src/dfa.c:3431
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(musts, mp, i, dfa, ri, t, dfa, result, exact, dm)))
    return;
char **new;

....
Skipping nonlast addifexit:Priority 4912
At location src/dfa.c:3431
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(musts, mp, i, dfa, ri, t, dfa, result, exact, dm)))
    break;
char **new;

....
Skipping nonlast addifexit:Priority 5112
At location src/dfa.c:3431
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(musts, mp, i, dfa, ri, t, dfa, result, exact, dm)))
    goto done;
char **new;

....
Skipping nonlast:Priority -87
At location src/dfa.c:3432
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
must *lmp;

....
Skipping nonlast:Priority -87
At location src/dfa.c:3432
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
must *lmp;

....
Skipping nonlast:Priority -87
At location src/dfa.c:3432
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
must *lmp;

....
Skipping nonlast:Priority -87
At location src/dfa.c:3432
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
must *lmp;

....
Skipping nonlast:Priority -87
At location src/dfa.c:3432
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
must *lmp;

....
Skipping nonlast:Priority -87
At location src/dfa.c:3432
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
must *lmp;

....
Skipping nonlast:Priority -87
At location src/dfa.c:3432
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
must *lmp;

....
Skipping nonlast:Priority -87
At location src/dfa.c:3432
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
must *lmp;

....
Skipping nonlast:Priority -87
At location src/dfa.c:3432
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
must *lmp;

....
Skipping nonlast addifexit:Priority 4913
At location src/dfa.c:3432
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(musts, mp, i, new, dfa, ri, t, dfa, result, exact, dm)))
    return;
must *lmp;

....
Skipping nonlast addifexit:Priority 4913
At location src/dfa.c:3432
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(musts, mp, i, new, dfa, ri, t, dfa, result, exact, dm)))
    break;
must *lmp;

....
Skipping nonlast addifexit:Priority 5113
At location src/dfa.c:3432
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(musts, mp, i, new, dfa, ri, t, dfa, result, exact, dm)))
    goto done;
must *lmp;

....
Skipping nonlast:Priority -86
At location src/dfa.c:3433
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
must *rmp;

....
Skipping nonlast:Priority -86
At location src/dfa.c:3433
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
must *rmp;

....
Skipping nonlast:Priority -86
At location src/dfa.c:3433
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
must *rmp;

....
Skipping nonlast:Priority -86
At location src/dfa.c:3433
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
must *rmp;

....
Skipping nonlast:Priority -86
At location src/dfa.c:3433
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
must *rmp;

....
Skipping nonlast:Priority -86
At location src/dfa.c:3433
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
must *rmp;

....
Skipping nonlast:Priority -86
At location src/dfa.c:3433
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
must *rmp;

....
Skipping nonlast:Priority -86
At location src/dfa.c:3433
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
must *rmp;

....
Skipping nonlast:Priority -86
At location src/dfa.c:3433
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
must *rmp;

....
Skipping nonlast addifexit:Priority 4914
At location src/dfa.c:3433
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, lmp, musts, i, new, dfa, ri, t, dfa, result, exact, dm)))
    return;
must *rmp;

....
Skipping nonlast addifexit:Priority 4914
At location src/dfa.c:3433
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, lmp, musts, i, new, dfa, ri, t, dfa, result, exact, dm)))
    break;
must *rmp;

....
Skipping nonlast addifexit:Priority 5114
At location src/dfa.c:3433
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, lmp, musts, i, new, dfa, ri, t, dfa, result, exact, dm)))
    goto done;
must *rmp;

....
Skipping nonlast:Priority -85
At location src/dfa.c:3434
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
int j, ln, rn, n;

....
Skipping nonlast:Priority -85
At location src/dfa.c:3434
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
int j, ln, rn, n;

....
Skipping nonlast:Priority -85
At location src/dfa.c:3434
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
int j, ln, rn, n;

....
Skipping nonlast:Priority -85
At location src/dfa.c:3434
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
int j, ln, rn, n;

....
Skipping nonlast:Priority -85
At location src/dfa.c:3434
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
int j, ln, rn, n;

....
Skipping nonlast:Priority -85
At location src/dfa.c:3434
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
int j, ln, rn, n;

....
Skipping nonlast:Priority -85
At location src/dfa.c:3434
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
int j, ln, rn, n;

....
Skipping nonlast:Priority -85
At location src/dfa.c:3434
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
int j, ln, rn, n;

....
Skipping nonlast:Priority -85
At location src/dfa.c:3434
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
int j, ln, rn, n;

....
Skipping nonlast addifexit:Priority 4915
At location src/dfa.c:3434
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, rmp, lmp, musts, i, new, dfa, ri, t, dfa, result, exact, dm)))
    return;
int j, ln, rn, n;

....
Skipping nonlast addifexit:Priority 4915
At location src/dfa.c:3434
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, rmp, lmp, musts, i, new, dfa, ri, t, dfa, result, exact, dm)))
    break;
int j, ln, rn, n;

....
Skipping nonlast addifexit:Priority 5115
At location src/dfa.c:3434
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, rmp, lmp, musts, i, new, dfa, ri, t, dfa, result, exact, dm)))
    goto done;
int j, ln, rn, n;

....
Skipping nonlast:Priority 4916
At location src/dfa.c:3436
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
rmp = --mp;

....
Skipping nonlast:Priority 4916
At location src/dfa.c:3436
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
rmp = --mp;

....
Skipping nonlast:Priority 4916
At location src/dfa.c:3436
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
rmp = --mp;

....
Skipping nonlast:Priority 4916
At location src/dfa.c:3436
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
rmp = --mp;

....
Skipping nonlast:Priority 4916
At location src/dfa.c:3436
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
rmp = --mp;

....
Skipping nonlast:Priority 4916
At location src/dfa.c:3436
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
rmp = --mp;

....
Skipping nonlast:Priority 4916
At location src/dfa.c:3436
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
rmp = --mp;

....
Skipping nonlast:Priority 4916
At location src/dfa.c:3436
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
rmp = --mp;

....
Skipping nonlast:Priority 4916
At location src/dfa.c:3436
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
rmp = --mp;

....
Skipping nonlast addifexit:Priority 9916
At location src/dfa.c:3436
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, rmp, lmp, i, musts, ln, rn, n, j, new, dfa, ri, t, dfa, mp->is, result, exact, mp->left, mp->right, mp->in, dm)))
    return;
rmp = --mp;

....
Skipping nonlast addifexit:Priority 9916
At location src/dfa.c:3436
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, rmp, lmp, i, musts, ln, rn, n, j, new, dfa, ri, t, dfa, mp->is, result, exact, mp->left, mp->right, mp->in, dm)))
    break;
rmp = --mp;

....
Skipping nonlast addifexit:Priority 10116
At location src/dfa.c:3436
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, rmp, lmp, i, musts, ln, rn, n, j, new, dfa, ri, t, dfa, mp->is, result, exact, mp->left, mp->right, mp->in, dm)))
    goto done;
rmp = --mp;

....
Skipping nonlast:Priority -83
At location src/dfa.c:3437
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
lmp = --mp;

....
Skipping nonlast:Priority -83
At location src/dfa.c:3437
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
lmp = --mp;

....
Skipping nonlast:Priority -83
At location src/dfa.c:3437
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
lmp = --mp;

....
Skipping nonlast:Priority -83
At location src/dfa.c:3437
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
lmp = --mp;

....
Skipping nonlast:Priority -83
At location src/dfa.c:3437
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
lmp = --mp;

....
Skipping nonlast:Priority -83
At location src/dfa.c:3437
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
lmp = --mp;

....
Skipping nonlast:Priority -83
At location src/dfa.c:3437
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
lmp = --mp;

....
Skipping nonlast:Priority -83
At location src/dfa.c:3437
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
lmp = --mp;

....
Skipping nonlast:Priority -83
At location src/dfa.c:3437
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
lmp = --mp;

....
Skipping nonlast addifexit:Priority 4917
At location src/dfa.c:3437
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, lmp, rmp, i, musts, ln, rn, n, j, new, dfa, ri, t, dfa, mp->is, result, exact, mp->left, mp->right, mp->in, dm)))
    return;
lmp = --mp;

....
Skipping nonlast addifexit:Priority 4917
At location src/dfa.c:3437
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, lmp, rmp, i, musts, ln, rn, n, j, new, dfa, ri, t, dfa, mp->is, result, exact, mp->left, mp->right, mp->in, dm)))
    break;
lmp = --mp;

....
Skipping nonlast addifexit:Priority 5117
At location src/dfa.c:3437
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, lmp, rmp, i, musts, ln, rn, n, j, new, dfa, ri, t, dfa, mp->is, result, exact, mp->left, mp->right, mp->in, dm)))
    goto done;
lmp = --mp;

....
Skipping nonlast:Priority -82
At location src/dfa.c:3439
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(lmp->is) && __builtin_constant_p(rmp->is) && (__s1_len = __builtin_strlen(lmp->is) , __s2_len = __builtin_strlen(rmp->is) , (!((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(lmp->is, rmp->is) : (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) && (__s1_len = __builtin_strlen(lmp->is) , __s1_len < 4) ? (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(rmp->is);
        int __result = (((const unsigned char *)(const char *)(lmp->is))[0] - __s2[0]);
        if (__s1_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(lmp->is))[1] - __s2[1]);
            if (__s1_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(lmp->is))[2] - __s2[2]);
                if (__s1_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(lmp->is))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) && (__s2_len = __builtin_strlen(rmp->is) , __s2_len < 4) ? (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(lmp->is);
        int __result = (((const unsigned char *)(const char *)(rmp->is))[0] - __s2[0]);
        if (__s2_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(rmp->is))[1] - __s2[1]);
            if (__s2_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(rmp->is))[2] - __s2[2]);
                if (__s2_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(rmp->is))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(lmp->is, rmp->is))));
}) != 0)
    lmp->is[0] = '\x00';

....
Skipping nonlast:Priority -82
At location src/dfa.c:3439
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(lmp->is) && __builtin_constant_p(rmp->is) && (__s1_len = __builtin_strlen(lmp->is) , __s2_len = __builtin_strlen(rmp->is) , (!((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(lmp->is, rmp->is) : (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) && (__s1_len = __builtin_strlen(lmp->is) , __s1_len < 4) ? (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(rmp->is);
        int __result = (((const unsigned char *)(const char *)(lmp->is))[0] - __s2[0]);
        if (__s1_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(lmp->is))[1] - __s2[1]);
            if (__s1_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(lmp->is))[2] - __s2[2]);
                if (__s1_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(lmp->is))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) && (__s2_len = __builtin_strlen(rmp->is) , __s2_len < 4) ? (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(lmp->is);
        int __result = (((const unsigned char *)(const char *)(rmp->is))[0] - __s2[0]);
        if (__s2_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(rmp->is))[1] - __s2[1]);
            if (__s2_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(rmp->is))[2] - __s2[2]);
                if (__s2_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(rmp->is))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(lmp->is, rmp->is))));
}) != 0)
    lmp->is[0] = '\x00';

....
Skipping nonlast:Priority -82
At location src/dfa.c:3439
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
if (__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(lmp->is) && __builtin_constant_p(rmp->is) && (__s1_len = __builtin_strlen(lmp->is) , __s2_len = __builtin_strlen(rmp->is) , (!((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(lmp->is, rmp->is) : (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) && (__s1_len = __builtin_strlen(lmp->is) , __s1_len < 4) ? (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(rmp->is);
        int __result = (((const unsigned char *)(const char *)(lmp->is))[0] - __s2[0]);
        if (__s1_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(lmp->is))[1] - __s2[1]);
            if (__s1_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(lmp->is))[2] - __s2[2]);
                if (__s1_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(lmp->is))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) && (__s2_len = __builtin_strlen(rmp->is) , __s2_len < 4) ? (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(lmp->is);
        int __result = (((const unsigned char *)(const char *)(rmp->is))[0] - __s2[0]);
        if (__s2_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(rmp->is))[1] - __s2[1]);
            if (__s2_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(rmp->is))[2] - __s2[2]);
                if (__s2_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(rmp->is))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(lmp->is, rmp->is))));
}) != 0)
    lmp->is[0] = '\x00';

....
Skipping nonlast:Priority -82
At location src/dfa.c:3439
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
if (__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(lmp->is) && __builtin_constant_p(rmp->is) && (__s1_len = __builtin_strlen(lmp->is) , __s2_len = __builtin_strlen(rmp->is) , (!((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(lmp->is, rmp->is) : (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) && (__s1_len = __builtin_strlen(lmp->is) , __s1_len < 4) ? (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(rmp->is);
        int __result = (((const unsigned char *)(const char *)(lmp->is))[0] - __s2[0]);
        if (__s1_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(lmp->is))[1] - __s2[1]);
            if (__s1_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(lmp->is))[2] - __s2[2]);
                if (__s1_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(lmp->is))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) && (__s2_len = __builtin_strlen(rmp->is) , __s2_len < 4) ? (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(lmp->is);
        int __result = (((const unsigned char *)(const char *)(rmp->is))[0] - __s2[0]);
        if (__s2_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(rmp->is))[1] - __s2[1]);
            if (__s2_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(rmp->is))[2] - __s2[2]);
                if (__s2_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(rmp->is))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(lmp->is, rmp->is))));
}) != 0)
    lmp->is[0] = '\x00';

....
Skipping nonlast:Priority -82
At location src/dfa.c:3439
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
if (__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(lmp->is) && __builtin_constant_p(rmp->is) && (__s1_len = __builtin_strlen(lmp->is) , __s2_len = __builtin_strlen(rmp->is) , (!((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(lmp->is, rmp->is) : (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) && (__s1_len = __builtin_strlen(lmp->is) , __s1_len < 4) ? (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(rmp->is);
        int __result = (((const unsigned char *)(const char *)(lmp->is))[0] - __s2[0]);
        if (__s1_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(lmp->is))[1] - __s2[1]);
            if (__s1_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(lmp->is))[2] - __s2[2]);
                if (__s1_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(lmp->is))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) && (__s2_len = __builtin_strlen(rmp->is) , __s2_len < 4) ? (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(lmp->is);
        int __result = (((const unsigned char *)(const char *)(rmp->is))[0] - __s2[0]);
        if (__s2_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(rmp->is))[1] - __s2[1]);
            if (__s2_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(rmp->is))[2] - __s2[2]);
                if (__s2_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(rmp->is))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(lmp->is, rmp->is))));
}) != 0)
    lmp->is[0] = '\x00';

....
Skipping nonlast:Priority -82
At location src/dfa.c:3439
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
if (__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(lmp->is) && __builtin_constant_p(rmp->is) && (__s1_len = __builtin_strlen(lmp->is) , __s2_len = __builtin_strlen(rmp->is) , (!((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(lmp->is, rmp->is) : (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) && (__s1_len = __builtin_strlen(lmp->is) , __s1_len < 4) ? (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(rmp->is);
        int __result = (((const unsigned char *)(const char *)(lmp->is))[0] - __s2[0]);
        if (__s1_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(lmp->is))[1] - __s2[1]);
            if (__s1_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(lmp->is))[2] - __s2[2]);
                if (__s1_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(lmp->is))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) && (__s2_len = __builtin_strlen(rmp->is) , __s2_len < 4) ? (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(lmp->is);
        int __result = (((const unsigned char *)(const char *)(rmp->is))[0] - __s2[0]);
        if (__s2_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(rmp->is))[1] - __s2[1]);
            if (__s2_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(rmp->is))[2] - __s2[2]);
                if (__s2_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(rmp->is))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(lmp->is, rmp->is))));
}) != 0)
    lmp->is[0] = '\x00';

....
Skipping nonlast:Priority -82
At location src/dfa.c:3439
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(lmp->is) && __builtin_constant_p(rmp->is) && (__s1_len = __builtin_strlen(lmp->is) , __s2_len = __builtin_strlen(rmp->is) , (!((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(lmp->is, rmp->is) : (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) && (__s1_len = __builtin_strlen(lmp->is) , __s1_len < 4) ? (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(rmp->is);
        int __result = (((const unsigned char *)(const char *)(lmp->is))[0] - __s2[0]);
        if (__s1_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(lmp->is))[1] - __s2[1]);
            if (__s1_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(lmp->is))[2] - __s2[2]);
                if (__s1_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(lmp->is))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) && (__s2_len = __builtin_strlen(rmp->is) , __s2_len < 4) ? (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(lmp->is);
        int __result = (((const unsigned char *)(const char *)(rmp->is))[0] - __s2[0]);
        if (__s2_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(rmp->is))[1] - __s2[1]);
            if (__s2_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(rmp->is))[2] - __s2[2]);
                if (__s2_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(rmp->is))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(lmp->is, rmp->is))));
}) != 0)
    lmp->is[0] = '\x00';

....
Skipping nonlast:Priority -82
At location src/dfa.c:3439
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(lmp->is) && __builtin_constant_p(rmp->is) && (__s1_len = __builtin_strlen(lmp->is) , __s2_len = __builtin_strlen(rmp->is) , (!((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(lmp->is, rmp->is) : (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) && (__s1_len = __builtin_strlen(lmp->is) , __s1_len < 4) ? (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(rmp->is);
        int __result = (((const unsigned char *)(const char *)(lmp->is))[0] - __s2[0]);
        if (__s1_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(lmp->is))[1] - __s2[1]);
            if (__s1_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(lmp->is))[2] - __s2[2]);
                if (__s1_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(lmp->is))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) && (__s2_len = __builtin_strlen(rmp->is) , __s2_len < 4) ? (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(lmp->is);
        int __result = (((const unsigned char *)(const char *)(rmp->is))[0] - __s2[0]);
        if (__s2_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(rmp->is))[1] - __s2[1]);
            if (__s2_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(rmp->is))[2] - __s2[2]);
                if (__s2_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(rmp->is))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(lmp->is, rmp->is))));
}) != 0)
    lmp->is[0] = '\x00';

....
Skipping nonlast:Priority -82
At location src/dfa.c:3439
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(lmp->is) && __builtin_constant_p(rmp->is) && (__s1_len = __builtin_strlen(lmp->is) , __s2_len = __builtin_strlen(rmp->is) , (!((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(lmp->is, rmp->is) : (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) && (__s1_len = __builtin_strlen(lmp->is) , __s1_len < 4) ? (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(rmp->is);
        int __result = (((const unsigned char *)(const char *)(lmp->is))[0] - __s2[0]);
        if (__s1_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(lmp->is))[1] - __s2[1]);
            if (__s1_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(lmp->is))[2] - __s2[2]);
                if (__s1_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(lmp->is))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) && (__s2_len = __builtin_strlen(rmp->is) , __s2_len < 4) ? (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(lmp->is);
        int __result = (((const unsigned char *)(const char *)(rmp->is))[0] - __s2[0]);
        if (__s2_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(rmp->is))[1] - __s2[1]);
            if (__s2_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(rmp->is))[2] - __s2[2]);
                if (__s2_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(rmp->is))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(lmp->is, rmp->is))));
}) != 0)
    lmp->is[0] = '\x00';

....
Skipping nonlast addifexit:Priority 3668
At location src/dfa.c:3439
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lmp, rmp, mp, i, ln, rn, n, musts, j, new, dfa, ri, t, dfa, result, exact, dm)))
    return;
if (__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(lmp->is) && __builtin_constant_p(rmp->is) && (__s1_len = __builtin_strlen(lmp->is) , __s2_len = __builtin_strlen(rmp->is) , (!((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(lmp->is, rmp->is) : (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) && (__s1_len = __builtin_strlen(lmp->is) , __s1_len < 4) ? (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(rmp->is);
        int __result = (((const unsigned char *)(const char *)(lmp->is))[0] - __s2[0]);
        if (__s1_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(lmp->is))[1] - __s2[1]);
            if (__s1_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(lmp->is))[2] - __s2[2]);
                if (__s1_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(lmp->is))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) && (__s2_len = __builtin_strlen(rmp->is) , __s2_len < 4) ? (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(lmp->is);
        int __result = (((const unsigned char *)(const char *)(rmp->is))[0] - __s2[0]);
        if (__s2_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(rmp->is))[1] - __s2[1]);
            if (__s2_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(rmp->is))[2] - __s2[2]);
                if (__s2_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(rmp->is))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(lmp->is, rmp->is))));
}) != 0)
    lmp->is[0] = '\x00';

....
Skipping nonlast addifexit:Priority 3668
At location src/dfa.c:3439
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lmp, rmp, mp, i, ln, rn, n, musts, j, new, dfa, ri, t, dfa, result, exact, dm)))
    break;
if (__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(lmp->is) && __builtin_constant_p(rmp->is) && (__s1_len = __builtin_strlen(lmp->is) , __s2_len = __builtin_strlen(rmp->is) , (!((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(lmp->is, rmp->is) : (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) && (__s1_len = __builtin_strlen(lmp->is) , __s1_len < 4) ? (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(rmp->is);
        int __result = (((const unsigned char *)(const char *)(lmp->is))[0] - __s2[0]);
        if (__s1_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(lmp->is))[1] - __s2[1]);
            if (__s1_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(lmp->is))[2] - __s2[2]);
                if (__s1_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(lmp->is))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) && (__s2_len = __builtin_strlen(rmp->is) , __s2_len < 4) ? (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(lmp->is);
        int __result = (((const unsigned char *)(const char *)(rmp->is))[0] - __s2[0]);
        if (__s2_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(rmp->is))[1] - __s2[1]);
            if (__s2_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(rmp->is))[2] - __s2[2]);
                if (__s2_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(rmp->is))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(lmp->is, rmp->is))));
}) != 0)
    lmp->is[0] = '\x00';

....
Skipping nonlast addifexit:Priority 3868
At location src/dfa.c:3439
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lmp, rmp, mp, i, ln, rn, n, musts, j, new, dfa, ri, t, dfa, result, exact, dm)))
    goto done;
if (__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(lmp->is) && __builtin_constant_p(rmp->is) && (__s1_len = __builtin_strlen(lmp->is) , __s2_len = __builtin_strlen(rmp->is) , (!((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(lmp->is, rmp->is) : (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) && (__s1_len = __builtin_strlen(lmp->is) , __s1_len < 4) ? (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(rmp->is);
        int __result = (((const unsigned char *)(const char *)(lmp->is))[0] - __s2[0]);
        if (__s1_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(lmp->is))[1] - __s2[1]);
            if (__s1_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(lmp->is))[2] - __s2[2]);
                if (__s1_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(lmp->is))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) && (__s2_len = __builtin_strlen(rmp->is) , __s2_len < 4) ? (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(lmp->is);
        int __result = (((const unsigned char *)(const char *)(rmp->is))[0] - __s2[0]);
        if (__s2_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(rmp->is))[1] - __s2[1]);
            if (__s2_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(rmp->is))[2] - __s2[2]);
                if (__s2_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(rmp->is))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(lmp->is, rmp->is))));
}) != 0)
    lmp->is[0] = '\x00';

....
Skipping nonlast:Priority -79
At location src/dfa.c:3440
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    lmp->is[0] = '\x00';
}

....
Skipping nonlast:Priority -79
At location src/dfa.c:3440
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    lmp->is[0] = '\x00';
}

....
Skipping nonlast:Priority -79
At location src/dfa.c:3440
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        parse_bracket_exp_mb();
        return lasttok = MBCSET;
    }
    lmp->is[0] = '\x00';
}

....
Skipping nonlast:Priority -79
At location src/dfa.c:3440
--Src File: src/dfa.c
Fragment 0:
{
    if (0 != 0)
        dfaerror(0);
    else
        return lasttok = END;
    lmp->is[0] = '\x00';
}

....
Skipping nonlast:Priority -79
At location src/dfa.c:3440
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
    else
        return lasttok = END;
    lmp->is[0] = '\x00';
}

....
Skipping nonlast:Priority -79
At location src/dfa.c:3440
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
    else
        return lasttok = END;
    lmp->is[0] = '\x00';
}

....
Skipping nonlast:Priority -79
At location src/dfa.c:3440
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    lmp->is[0] = '\x00';
}

....
Skipping nonlast:Priority -79
At location src/dfa.c:3440
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    lmp->is[0] = '\x00';
}

....
Skipping nonlast:Priority -79
At location src/dfa.c:3440
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    lmp->is[0] = '\x00';
}

....
Skipping nonlast addifexit:Priority 4921
At location src/dfa.c:3440
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(lmp, rmp, i, mp, ln, rn, n, musts, j, new, dfa, result, ri, t, dfa, exact, dm)))
        return;
    lmp->is[0] = '\x00';
}

....
Skipping nonlast addifexit:Priority 4921
At location src/dfa.c:3440
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(lmp, rmp, i, mp, ln, rn, n, musts, j, new, dfa, result, ri, t, dfa, exact, dm)))
        break;
    lmp->is[0] = '\x00';
}

....
Skipping nonlast addifexit:Priority 5121
At location src/dfa.c:3440
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(lmp, rmp, i, mp, ln, rn, n, musts, j, new, dfa, result, ri, t, dfa, exact, dm)))
        goto done;
    lmp->is[0] = '\x00';
}

....
Skipping nonlast:Priority -78
At location src/dfa.c:3442
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
i = 0;

....
Skipping nonlast:Priority -78
At location src/dfa.c:3442
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
i = 0;

....
Skipping nonlast:Priority -78
At location src/dfa.c:3442
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
i = 0;

....
Skipping nonlast:Priority -78
At location src/dfa.c:3442
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
i = 0;

....
Skipping nonlast:Priority -78
At location src/dfa.c:3442
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
i = 0;

....
Skipping nonlast:Priority -78
At location src/dfa.c:3442
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
i = 0;

....
Skipping nonlast:Priority -78
At location src/dfa.c:3442
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
i = 0;

....
Skipping nonlast:Priority -78
At location src/dfa.c:3442
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
i = 0;

....
Skipping nonlast:Priority -78
At location src/dfa.c:3442
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
i = 0;

....
Skipping nonlast addifexit:Priority 4922
At location src/dfa.c:3442
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, lmp, rmp, mp, ln, rn, n, j, musts, new, result, exact, dfa, ri, t, dfa, dm)))
    return;
i = 0;

....
Skipping nonlast addifexit:Priority 4922
At location src/dfa.c:3442
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, lmp, rmp, mp, ln, rn, n, j, musts, new, result, exact, dfa, ri, t, dfa, dm)))
    break;
i = 0;

....
Skipping nonlast addifexit:Priority 5122
At location src/dfa.c:3442
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, lmp, rmp, mp, ln, rn, n, j, musts, new, result, exact, dfa, ri, t, dfa, dm)))
    goto done;
i = 0;

....
Skipping nonlast:Priority -77
At location src/dfa.c:3443
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
while (lmp->left[i] != '\x00' && lmp->left[i] == rmp->left[i])
    ++i;

....
Skipping nonlast:Priority -77
At location src/dfa.c:3443
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
while (lmp->left[i] != '\x00' && lmp->left[i] == rmp->left[i])
    ++i;

....
Skipping nonlast:Priority -77
At location src/dfa.c:3443
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
while (lmp->left[i] != '\x00' && lmp->left[i] == rmp->left[i])
    ++i;

....
Skipping nonlast:Priority -77
At location src/dfa.c:3443
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
while (lmp->left[i] != '\x00' && lmp->left[i] == rmp->left[i])
    ++i;

....
Skipping nonlast:Priority -77
At location src/dfa.c:3443
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
while (lmp->left[i] != '\x00' && lmp->left[i] == rmp->left[i])
    ++i;

....
Skipping nonlast:Priority -77
At location src/dfa.c:3443
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
while (lmp->left[i] != '\x00' && lmp->left[i] == rmp->left[i])
    ++i;

....
Skipping nonlast:Priority -77
At location src/dfa.c:3443
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
while (lmp->left[i] != '\x00' && lmp->left[i] == rmp->left[i])
    ++i;

....
Skipping nonlast:Priority -77
At location src/dfa.c:3443
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
while (lmp->left[i] != '\x00' && lmp->left[i] == rmp->left[i])
    ++i;

....
Skipping nonlast:Priority -77
At location src/dfa.c:3443
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
while (lmp->left[i] != '\x00' && lmp->left[i] == rmp->left[i])
    ++i;

....
Skipping nonlast addifexit:Priority 4923
At location src/dfa.c:3443
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, lmp, rmp, ln, rn, mp, n, j, musts, new, result, exact, dfa, ri, t, dfa, dm)))
    return;
while (lmp->left[i] != '\x00' && lmp->left[i] == rmp->left[i])
    ++i;

....
Skipping nonlast addifexit:Priority 4923
At location src/dfa.c:3443
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, lmp, rmp, ln, rn, mp, n, j, musts, new, result, exact, dfa, ri, t, dfa, dm)))
    break;
while (lmp->left[i] != '\x00' && lmp->left[i] == rmp->left[i])
    ++i;

....
Skipping nonlast addifexit:Priority 5123
At location src/dfa.c:3443
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, lmp, rmp, ln, rn, mp, n, j, musts, new, result, exact, dfa, ri, t, dfa, dm)))
    goto done;
while (lmp->left[i] != '\x00' && lmp->left[i] == rmp->left[i])
    ++i;

....
Skipping nonlast:Priority -76
At location src/dfa.c:3445
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
lmp->left[i] = '\x00';

....
Skipping nonlast:Priority -76
At location src/dfa.c:3445
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
lmp->left[i] = '\x00';

....
Skipping nonlast:Priority -76
At location src/dfa.c:3445
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
lmp->left[i] = '\x00';

....
Skipping nonlast:Priority -76
At location src/dfa.c:3445
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
lmp->left[i] = '\x00';

....
Skipping nonlast:Priority -76
At location src/dfa.c:3445
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
lmp->left[i] = '\x00';

....
Skipping nonlast:Priority -76
At location src/dfa.c:3445
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
lmp->left[i] = '\x00';

....
Skipping nonlast:Priority -76
At location src/dfa.c:3445
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
lmp->left[i] = '\x00';

....
Skipping nonlast:Priority -76
At location src/dfa.c:3445
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
lmp->left[i] = '\x00';

....
Skipping nonlast:Priority -76
At location src/dfa.c:3445
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
lmp->left[i] = '\x00';

....
Skipping nonlast addifexit:Priority 4924
At location src/dfa.c:3445
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, lmp, rmp, ln, rn, n, mp, j, new, musts, result, exact, dfa, ri, t, dfa, dm)))
    return;
lmp->left[i] = '\x00';

....
Skipping nonlast addifexit:Priority 4924
At location src/dfa.c:3445
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, lmp, rmp, ln, rn, n, mp, j, new, musts, result, exact, dfa, ri, t, dfa, dm)))
    break;
lmp->left[i] = '\x00';

....
Skipping nonlast addifexit:Priority 5124
At location src/dfa.c:3445
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, lmp, rmp, ln, rn, n, mp, j, new, musts, result, exact, dfa, ri, t, dfa, dm)))
    goto done;
lmp->left[i] = '\x00';

....
Skipping nonlast:Priority -75
At location src/dfa.c:3447
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
ln = strlen(lmp->right);

....
Skipping nonlast:Priority -75
At location src/dfa.c:3447
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
ln = strlen(lmp->right);

....
Skipping nonlast:Priority -75
At location src/dfa.c:3447
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
ln = strlen(lmp->right);

....
Skipping nonlast:Priority -75
At location src/dfa.c:3447
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
ln = strlen(lmp->right);

....
Skipping nonlast:Priority -75
At location src/dfa.c:3447
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
ln = strlen(lmp->right);

....
Skipping nonlast:Priority -75
At location src/dfa.c:3447
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
ln = strlen(lmp->right);

....
Skipping nonlast:Priority -75
At location src/dfa.c:3447
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
ln = strlen(lmp->right);

....
Skipping nonlast:Priority -75
At location src/dfa.c:3447
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
ln = strlen(lmp->right);

....
Skipping nonlast:Priority -75
At location src/dfa.c:3447
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
ln = strlen(lmp->right);

....
Skipping nonlast addifexit:Priority 4925
At location src/dfa.c:3447
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lmp, ln, rmp, rn, i, n, j, mp, new, musts, result, exact, dfa, ri, t, dfa, dm)))
    return;
ln = strlen(lmp->right);

....
Skipping nonlast addifexit:Priority 4925
At location src/dfa.c:3447
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lmp, ln, rmp, rn, i, n, j, mp, new, musts, result, exact, dfa, ri, t, dfa, dm)))
    break;
ln = strlen(lmp->right);

....
Skipping nonlast addifexit:Priority 5125
At location src/dfa.c:3447
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lmp, ln, rmp, rn, i, n, j, mp, new, musts, result, exact, dfa, ri, t, dfa, dm)))
    goto done;
ln = strlen(lmp->right);

....
Skipping nonlast:Priority -74
At location src/dfa.c:3448
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
rn = strlen(rmp->right);

....
Skipping nonlast:Priority -74
At location src/dfa.c:3448
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
rn = strlen(rmp->right);

....
Skipping nonlast:Priority -74
At location src/dfa.c:3448
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
rn = strlen(rmp->right);

....
Skipping nonlast:Priority -74
At location src/dfa.c:3448
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
rn = strlen(rmp->right);

....
Skipping nonlast:Priority -74
At location src/dfa.c:3448
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
rn = strlen(rmp->right);

....
Skipping nonlast:Priority -74
At location src/dfa.c:3448
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
rn = strlen(rmp->right);

....
Skipping nonlast:Priority -74
At location src/dfa.c:3448
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
rn = strlen(rmp->right);

....
Skipping nonlast:Priority -74
At location src/dfa.c:3448
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
rn = strlen(rmp->right);

....
Skipping nonlast:Priority -74
At location src/dfa.c:3448
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
rn = strlen(rmp->right);

....
Skipping nonlast addifexit:Priority 4926
At location src/dfa.c:3448
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(rmp, rn, lmp, ln, n, i, j, new, mp, musts, result, exact, dfa, ri, t, dfa, dm)))
    return;
rn = strlen(rmp->right);

....
Skipping nonlast addifexit:Priority 4926
At location src/dfa.c:3448
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(rmp, rn, lmp, ln, n, i, j, new, mp, musts, result, exact, dfa, ri, t, dfa, dm)))
    break;
rn = strlen(rmp->right);

....
Skipping nonlast addifexit:Priority 5126
At location src/dfa.c:3448
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(rmp, rn, lmp, ln, n, i, j, new, mp, musts, result, exact, dfa, ri, t, dfa, dm)))
    goto done;
rn = strlen(rmp->right);

....
Skipping nonlast:Priority -73
At location src/dfa.c:3449
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
n = ln;

....
Skipping nonlast:Priority -73
At location src/dfa.c:3449
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
n = ln;

....
Skipping nonlast:Priority -73
At location src/dfa.c:3449
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
n = ln;

....
Skipping nonlast:Priority -73
At location src/dfa.c:3449
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
n = ln;

....
Skipping nonlast:Priority -73
At location src/dfa.c:3449
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
n = ln;

....
Skipping nonlast:Priority -73
At location src/dfa.c:3449
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
n = ln;

....
Skipping nonlast:Priority -73
At location src/dfa.c:3449
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
n = ln;

....
Skipping nonlast:Priority -73
At location src/dfa.c:3449
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
n = ln;

....
Skipping nonlast:Priority -73
At location src/dfa.c:3449
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
n = ln;

....
Skipping nonlast addifexit:Priority 4927
At location src/dfa.c:3449
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(ln, n, rmp, rn, lmp, i, j, new, mp, musts, result, exact, dfa, ri, t, dfa, dm)))
    return;
n = ln;

....
Skipping nonlast addifexit:Priority 4927
At location src/dfa.c:3449
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(ln, n, rmp, rn, lmp, i, j, new, mp, musts, result, exact, dfa, ri, t, dfa, dm)))
    break;
n = ln;

....
Skipping nonlast addifexit:Priority 5127
At location src/dfa.c:3449
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(ln, n, rmp, rn, lmp, i, j, new, mp, musts, result, exact, dfa, ri, t, dfa, dm)))
    goto done;
n = ln;

....
Skipping nonlast:Priority -72
At location src/dfa.c:3450
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (n > rn)
    n = rn;

....
Skipping nonlast:Priority -72
At location src/dfa.c:3450
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (n > rn)
    n = rn;

....
Skipping nonlast:Priority -72
At location src/dfa.c:3450
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
if (n > rn)
    n = rn;

....
Skipping nonlast:Priority -72
At location src/dfa.c:3450
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
if (n > rn)
    n = rn;

....
Skipping nonlast:Priority -72
At location src/dfa.c:3450
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
if (n > rn)
    n = rn;

....
Skipping nonlast:Priority -72
At location src/dfa.c:3450
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
if (n > rn)
    n = rn;

....
Skipping nonlast:Priority -72
At location src/dfa.c:3450
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (n > rn)
    n = rn;

....
Skipping nonlast:Priority -72
At location src/dfa.c:3450
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (n > rn)
    n = rn;

....
Skipping nonlast:Priority -72
At location src/dfa.c:3450
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (n > rn)
    n = rn;

....
Skipping nonlast addifexit:Priority 3678
At location src/dfa.c:3450
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(rn, n, ln, i, rmp, lmp, j, new, mp, musts, result, exact, dfa, ri, t, dfa, dm)))
    return;
if (n > rn)
    n = rn;

....
Skipping nonlast addifexit:Priority 3678
At location src/dfa.c:3450
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(rn, n, ln, i, rmp, lmp, j, new, mp, musts, result, exact, dfa, ri, t, dfa, dm)))
    break;
if (n > rn)
    n = rn;

....
Skipping nonlast addifexit:Priority 3878
At location src/dfa.c:3450
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(rn, n, ln, i, rmp, lmp, j, new, mp, musts, result, exact, dfa, ri, t, dfa, dm)))
    goto done;
if (n > rn)
    n = rn;

....
Skipping nonlast:Priority -71
At location src/dfa.c:3451
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    n = rn;
}

....
Skipping nonlast:Priority -71
At location src/dfa.c:3451
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    n = rn;
}

....
Skipping nonlast:Priority -71
At location src/dfa.c:3451
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        parse_bracket_exp_mb();
        return lasttok = MBCSET;
    }
    n = rn;
}

....
Skipping nonlast:Priority -71
At location src/dfa.c:3451
--Src File: src/dfa.c
Fragment 0:
{
    if (0 != 0)
        dfaerror(0);
    else
        return lasttok = END;
    n = rn;
}

....
Skipping nonlast:Priority -71
At location src/dfa.c:3451
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
    else
        return lasttok = END;
    n = rn;
}

....
Skipping nonlast:Priority -71
At location src/dfa.c:3451
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
    else
        return lasttok = END;
    n = rn;
}

....
Skipping nonlast:Priority -71
At location src/dfa.c:3451
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    n = rn;
}

....
Skipping nonlast:Priority -71
At location src/dfa.c:3451
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    n = rn;
}

....
Skipping nonlast:Priority -71
At location src/dfa.c:3451
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    n = rn;
}

....
Skipping nonlast addifexit:Priority 4929
At location src/dfa.c:3451
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(rn, n, i, lmp, rmp, ln, j, new, mp, musts, result, exact, dfa, ri, t, dfa, dm)))
        return;
    n = rn;
}

....
Skipping nonlast addifexit:Priority 4929
At location src/dfa.c:3451
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(rn, n, i, lmp, rmp, ln, j, new, mp, musts, result, exact, dfa, ri, t, dfa, dm)))
        break;
    n = rn;
}

....
Skipping nonlast addifexit:Priority 5129
At location src/dfa.c:3451
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(rn, n, i, lmp, rmp, ln, j, new, mp, musts, result, exact, dfa, ri, t, dfa, dm)))
        goto done;
    n = rn;
}

....
Skipping nonlast:Priority -70
At location src/dfa.c:3452
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
for (i = 0; i < n; ++i) 
    if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
        break;

....
Skipping nonlast:Priority -70
At location src/dfa.c:3452
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
for (i = 0; i < n; ++i) 
    if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
        break;

....
Skipping nonlast:Priority -70
At location src/dfa.c:3452
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
for (i = 0; i < n; ++i) 
    if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
        break;

....
Skipping nonlast:Priority -70
At location src/dfa.c:3452
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
for (i = 0; i < n; ++i) 
    if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
        break;

....
Skipping nonlast:Priority -70
At location src/dfa.c:3452
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
for (i = 0; i < n; ++i) 
    if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
        break;

....
Skipping nonlast:Priority -70
At location src/dfa.c:3452
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
for (i = 0; i < n; ++i) 
    if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
        break;

....
Skipping nonlast:Priority -70
At location src/dfa.c:3452
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
for (i = 0; i < n; ++i) 
    if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
        break;

....
Skipping nonlast:Priority -70
At location src/dfa.c:3452
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
for (i = 0; i < n; ++i) 
    if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
        break;

....
Skipping nonlast:Priority -70
At location src/dfa.c:3452
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
for (i = 0; i < n; ++i) 
    if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
        break;

....
Skipping nonlast addifexit:Priority 4930
At location src/dfa.c:3452
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, n, lmp, rmp, ln, rn, j, new, musts, mp, result, exact, dfa, ri, t, dfa, dm)))
    return;
for (i = 0; i < n; ++i) 
    if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
        break;

....
Skipping nonlast addifexit:Priority 4930
At location src/dfa.c:3452
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, n, lmp, rmp, ln, rn, j, new, musts, mp, result, exact, dfa, ri, t, dfa, dm)))
    break;
for (i = 0; i < n; ++i) 
    if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
        break;

....
Skipping nonlast addifexit:Priority 5130
At location src/dfa.c:3452
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, n, lmp, rmp, ln, rn, j, new, musts, mp, result, exact, dfa, ri, t, dfa, dm)))
    goto done;
for (i = 0; i < n; ++i) 
    if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
        break;

....
Skipping nonlast:Priority -112
At location src/dfa.c:3454
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    break;
}

....
Skipping nonlast:Priority -112
At location src/dfa.c:3454
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    break;
}

....
Skipping nonlast:Priority -112
At location src/dfa.c:3454
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        parse_bracket_exp_mb();
        return lasttok = MBCSET;
    }
    break;
}

....
Skipping nonlast:Priority -112
At location src/dfa.c:3454
--Src File: src/dfa.c
Fragment 0:
{
    if (0 != 0)
        dfaerror(0);
    else
        return lasttok = END;
    break;
}

....
Skipping nonlast:Priority -112
At location src/dfa.c:3454
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
    else
        return lasttok = END;
    break;
}

....
Skipping nonlast:Priority -112
At location src/dfa.c:3454
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
    else
        return lasttok = END;
    break;
}

....
Skipping nonlast:Priority -112
At location src/dfa.c:3454
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    break;
}

....
Skipping nonlast:Priority -112
At location src/dfa.c:3454
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    break;
}

....
Skipping nonlast:Priority -112
At location src/dfa.c:3454
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    break;
}

....
Skipping nonlast addifexit:Priority 4888
At location src/dfa.c:3454
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(i, lmp, rmp, j, ln, rn, n, new, musts, mp, result, exact, dfa, ri, t, dfa, dm)))
        return;
    break;
}

....
Skipping nonlast addifexit:Priority 4888
At location src/dfa.c:3454
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(i, lmp, rmp, j, ln, rn, n, new, musts, mp, result, exact, dfa, ri, t, dfa, dm)))
        break;
    break;
}

....
Skipping nonlast addifexit:Priority 5088
At location src/dfa.c:3454
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(i, lmp, rmp, j, ln, rn, n, new, musts, mp, result, exact, dfa, ri, t, dfa, dm)))
        goto done;
    break;
}

....
Skipping nonlast:Priority -69
At location src/dfa.c:3455
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
for (j = 0; j < i; ++j) 
    lmp->right[j] = lmp->right[(ln - i) + j];

....
Skipping nonlast:Priority -69
At location src/dfa.c:3455
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
for (j = 0; j < i; ++j) 
    lmp->right[j] = lmp->right[(ln - i) + j];

....
Skipping nonlast:Priority -69
At location src/dfa.c:3455
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
for (j = 0; j < i; ++j) 
    lmp->right[j] = lmp->right[(ln - i) + j];

....
Skipping nonlast:Priority -69
At location src/dfa.c:3455
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
for (j = 0; j < i; ++j) 
    lmp->right[j] = lmp->right[(ln - i) + j];

....
Skipping nonlast:Priority -69
At location src/dfa.c:3455
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
for (j = 0; j < i; ++j) 
    lmp->right[j] = lmp->right[(ln - i) + j];

....
Skipping nonlast:Priority -69
At location src/dfa.c:3455
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
for (j = 0; j < i; ++j) 
    lmp->right[j] = lmp->right[(ln - i) + j];

....
Skipping nonlast:Priority -69
At location src/dfa.c:3455
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
for (j = 0; j < i; ++j) 
    lmp->right[j] = lmp->right[(ln - i) + j];

....
Skipping nonlast:Priority -69
At location src/dfa.c:3455
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
for (j = 0; j < i; ++j) 
    lmp->right[j] = lmp->right[(ln - i) + j];

....
Skipping nonlast:Priority -69
At location src/dfa.c:3455
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
for (j = 0; j < i; ++j) 
    lmp->right[j] = lmp->right[(ln - i) + j];

....
Skipping nonlast addifexit:Priority 4931
At location src/dfa.c:3455
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, j, lmp, ln, rmp, rn, new, n, musts, mp, result, exact, dfa, ri, t, dfa, dm)))
    return;
for (j = 0; j < i; ++j) 
    lmp->right[j] = lmp->right[(ln - i) + j];

....
Skipping nonlast addifexit:Priority 4931
At location src/dfa.c:3455
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, j, lmp, ln, rmp, rn, new, n, musts, mp, result, exact, dfa, ri, t, dfa, dm)))
    break;
for (j = 0; j < i; ++j) 
    lmp->right[j] = lmp->right[(ln - i) + j];

....
Skipping nonlast addifexit:Priority 5131
At location src/dfa.c:3455
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(i, j, lmp, ln, rmp, rn, new, n, musts, mp, result, exact, dfa, ri, t, dfa, dm)))
    goto done;
for (j = 0; j < i; ++j) 
    lmp->right[j] = lmp->right[(ln - i) + j];

....
Skipping nonlast:Priority -68
At location src/dfa.c:3457
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
lmp->right[j] = '\x00';

....
Skipping nonlast:Priority -68
At location src/dfa.c:3457
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
lmp->right[j] = '\x00';

....
Skipping nonlast:Priority -68
At location src/dfa.c:3457
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
lmp->right[j] = '\x00';

....
Skipping nonlast:Priority -68
At location src/dfa.c:3457
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
lmp->right[j] = '\x00';

....
Skipping nonlast:Priority -68
At location src/dfa.c:3457
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
lmp->right[j] = '\x00';

....
Skipping nonlast:Priority -68
At location src/dfa.c:3457
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
lmp->right[j] = '\x00';

....
Skipping nonlast:Priority -68
At location src/dfa.c:3457
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
lmp->right[j] = '\x00';

....
Skipping nonlast:Priority -68
At location src/dfa.c:3457
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
lmp->right[j] = '\x00';

....
Skipping nonlast:Priority -68
At location src/dfa.c:3457
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
lmp->right[j] = '\x00';

....
Skipping nonlast addifexit:Priority 4932
At location src/dfa.c:3457
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lmp, j, i, new, rmp, ln, rn, n, musts, mp, result, exact, dfa, ri, t, dfa, dm)))
    return;
lmp->right[j] = '\x00';

....
Skipping nonlast addifexit:Priority 4932
At location src/dfa.c:3457
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lmp, j, i, new, rmp, ln, rn, n, musts, mp, result, exact, dfa, ri, t, dfa, dm)))
    break;
lmp->right[j] = '\x00';

....
Skipping nonlast addifexit:Priority 5132
At location src/dfa.c:3457
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lmp, j, i, new, rmp, ln, rn, n, musts, mp, result, exact, dfa, ri, t, dfa, dm)))
    goto done;
lmp->right[j] = '\x00';

....
Skipping nonlast:Priority -67
At location src/dfa.c:3458
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
new = inboth(lmp->in, rmp->in);

....
Skipping nonlast:Priority -67
At location src/dfa.c:3458
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
new = inboth(lmp->in, rmp->in);

....
Skipping nonlast:Priority -67
At location src/dfa.c:3458
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
new = inboth(lmp->in, rmp->in);

....
Skipping nonlast:Priority -67
At location src/dfa.c:3458
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
new = inboth(lmp->in, rmp->in);

....
Skipping nonlast:Priority -67
At location src/dfa.c:3458
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
new = inboth(lmp->in, rmp->in);

....
Skipping nonlast:Priority -67
At location src/dfa.c:3458
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
new = inboth(lmp->in, rmp->in);

....
Skipping nonlast:Priority -67
At location src/dfa.c:3458
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
new = inboth(lmp->in, rmp->in);

....
Skipping nonlast:Priority -67
At location src/dfa.c:3458
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
new = inboth(lmp->in, rmp->in);

....
Skipping nonlast:Priority -67
At location src/dfa.c:3458
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
new = inboth(lmp->in, rmp->in);

....
Skipping nonlast addifexit:Priority 4933
At location src/dfa.c:3458
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(new, lmp, rmp, j, i, ln, rn, n, musts, mp, result, exact, dfa, ri, t, dfa, dm)))
    return;
new = inboth(lmp->in, rmp->in);

....
Skipping nonlast addifexit:Priority 4933
At location src/dfa.c:3458
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(new, lmp, rmp, j, i, ln, rn, n, musts, mp, result, exact, dfa, ri, t, dfa, dm)))
    break;
new = inboth(lmp->in, rmp->in);

....
Skipping nonlast addifexit:Priority 5133
At location src/dfa.c:3458
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(new, lmp, rmp, j, i, ln, rn, n, musts, mp, result, exact, dfa, ri, t, dfa, dm)))
    goto done;
new = inboth(lmp->in, rmp->in);

....
Skipping nonlast:Priority -56
At location src/dfa.c:3459
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (new == ((void *)0))
    goto done;

....
Skipping nonlast:Priority -56
At location src/dfa.c:3459
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (new == ((void *)0))
    goto done;

....
Skipping nonlast:Priority -56
At location src/dfa.c:3459
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
if (new == ((void *)0))
    goto done;

....
Skipping nonlast:Priority -56
At location src/dfa.c:3459
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
if (new == ((void *)0))
    goto done;

....
Skipping nonlast:Priority -56
At location src/dfa.c:3459
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
if (new == ((void *)0))
    goto done;

....
Skipping nonlast:Priority -56
At location src/dfa.c:3459
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
if (new == ((void *)0))
    goto done;

....
Skipping nonlast:Priority -56
At location src/dfa.c:3459
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (new == ((void *)0))
    goto done;

....
Skipping nonlast:Priority -56
At location src/dfa.c:3459
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (new == ((void *)0))
    goto done;

....
Skipping nonlast:Priority -56
At location src/dfa.c:3459
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (new == ((void *)0))
    goto done;

....
Skipping nonlast addifexit:Priority 3694
At location src/dfa.c:3459
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(new, lmp, rmp, j, i, ln, rn, n, musts, mp, result, exact, dfa, ri, t, dfa, dm)))
    return;
if (new == ((void *)0))
    goto done;

....
Skipping nonlast addifexit:Priority 3694
At location src/dfa.c:3459
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(new, lmp, rmp, j, i, ln, rn, n, musts, mp, result, exact, dfa, ri, t, dfa, dm)))
    break;
if (new == ((void *)0))
    goto done;

....
Skipping nonlast addifexit:Priority 3894
At location src/dfa.c:3459
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(new, lmp, rmp, j, i, ln, rn, n, musts, mp, result, exact, dfa, ri, t, dfa, dm)))
    goto done;
if (new == ((void *)0))
    goto done;

....
Skipping nonlast:Priority -55
At location src/dfa.c:3461
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
freelist(lmp->in);

....
Skipping nonlast:Priority -55
At location src/dfa.c:3461
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
freelist(lmp->in);

....
Skipping nonlast:Priority -55
At location src/dfa.c:3461
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
freelist(lmp->in);

....
Skipping nonlast:Priority -55
At location src/dfa.c:3461
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
freelist(lmp->in);

....
Skipping nonlast:Priority -55
At location src/dfa.c:3461
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
freelist(lmp->in);

....
Skipping nonlast:Priority -55
At location src/dfa.c:3461
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
freelist(lmp->in);

....
Skipping nonlast:Priority -55
At location src/dfa.c:3461
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
freelist(lmp->in);

....
Skipping nonlast:Priority -55
At location src/dfa.c:3461
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
freelist(lmp->in);

....
Skipping nonlast:Priority -55
At location src/dfa.c:3461
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
freelist(lmp->in);

....
Skipping nonlast addifexit:Priority 4945
At location src/dfa.c:3461
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lmp, new, rmp, j, i, ln, musts, mp, rn, n, result, exact, dfa, ri, t, dfa, dm)))
    return;
freelist(lmp->in);

....
Skipping nonlast addifexit:Priority 4945
At location src/dfa.c:3461
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lmp, new, rmp, j, i, ln, musts, mp, rn, n, result, exact, dfa, ri, t, dfa, dm)))
    break;
freelist(lmp->in);

....
Skipping nonlast addifexit:Priority 5145
At location src/dfa.c:3461
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lmp, new, rmp, j, i, ln, musts, mp, rn, n, result, exact, dfa, ri, t, dfa, dm)))
    goto done;
freelist(lmp->in);

....
Skipping nonlast:Priority -54
At location src/dfa.c:3462
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
free((char *)lmp->in);

....
Skipping nonlast:Priority -54
At location src/dfa.c:3462
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
free((char *)lmp->in);

....
Skipping nonlast:Priority -54
At location src/dfa.c:3462
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
free((char *)lmp->in);

....
Skipping nonlast:Priority -54
At location src/dfa.c:3462
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
free((char *)lmp->in);

....
Skipping nonlast:Priority -54
At location src/dfa.c:3462
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
free((char *)lmp->in);

....
Skipping nonlast:Priority -54
At location src/dfa.c:3462
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
free((char *)lmp->in);

....
Skipping nonlast:Priority -54
At location src/dfa.c:3462
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
free((char *)lmp->in);

....
Skipping nonlast:Priority -54
At location src/dfa.c:3462
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
free((char *)lmp->in);

....
Skipping nonlast:Priority -54
At location src/dfa.c:3462
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
free((char *)lmp->in);

....
Skipping nonlast addifexit:Priority 4946
At location src/dfa.c:3462
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lmp, new, rmp, musts, mp, j, i, ln, rn, n, result, exact, dfa, ri, t, dfa, dm)))
    return;
free((char *)lmp->in);

....
Skipping nonlast addifexit:Priority 4946
At location src/dfa.c:3462
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lmp, new, rmp, musts, mp, j, i, ln, rn, n, result, exact, dfa, ri, t, dfa, dm)))
    break;
free((char *)lmp->in);

....
Skipping nonlast addifexit:Priority 5146
At location src/dfa.c:3462
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lmp, new, rmp, musts, mp, j, i, ln, rn, n, result, exact, dfa, ri, t, dfa, dm)))
    goto done;
free((char *)lmp->in);

....
Skipping nonlast:Priority -52
At location src/dfa.c:3465
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
break;

....
Skipping nonlast:Priority -52
At location src/dfa.c:3465
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
break;

....
Skipping nonlast:Priority -52
At location src/dfa.c:3465
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
break;

....
Skipping nonlast:Priority -52
At location src/dfa.c:3465
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
break;

....
Skipping nonlast:Priority -52
At location src/dfa.c:3465
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
break;

....
Skipping nonlast:Priority -52
At location src/dfa.c:3465
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
break;

....
Skipping nonlast:Priority -52
At location src/dfa.c:3465
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
break;

....
Skipping nonlast:Priority -52
At location src/dfa.c:3465
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
break;

....
Skipping nonlast:Priority -52
At location src/dfa.c:3465
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
break;

....
Skipping nonlast addifexit:Priority 4948
At location src/dfa.c:3465
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(musts, mp, i, result, exact, dfa, ri, t, dfa, dm)))
    return;
break;

....
Skipping nonlast addifexit:Priority 4948
At location src/dfa.c:3465
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(musts, mp, i, result, exact, dfa, ri, t, dfa, dm)))
    break;
break;

....
Skipping nonlast addifexit:Priority 5148
At location src/dfa.c:3465
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(musts, mp, i, result, exact, dfa, ri, t, dfa, dm)))
    goto done;
break;

....
Skipping nonlast:Priority -267
At location src/dfa.c:3475
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
    if (strlen(musts[0].in[i]) > strlen(result))
        result = musts[0].in[i];

....
Skipping nonlast:Priority -267
At location src/dfa.c:3475
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
    if (strlen(musts[0].in[i]) > strlen(result))
        result = musts[0].in[i];

....
Skipping nonlast:Priority -267
At location src/dfa.c:3475
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
    if (strlen(musts[0].in[i]) > strlen(result))
        result = musts[0].in[i];

....
Skipping nonlast:Priority -267
At location src/dfa.c:3475
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
    if (strlen(musts[0].in[i]) > strlen(result))
        result = musts[0].in[i];

....
Skipping nonlast:Priority -267
At location src/dfa.c:3475
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
    if (strlen(musts[0].in[i]) > strlen(result))
        result = musts[0].in[i];

....
Skipping nonlast:Priority -267
At location src/dfa.c:3475
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
    if (strlen(musts[0].in[i]) > strlen(result))
        result = musts[0].in[i];

....
Skipping nonlast:Priority -267
At location src/dfa.c:3475
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
    if (strlen(musts[0].in[i]) > strlen(result))
        result = musts[0].in[i];

....
Skipping nonlast:Priority -267
At location src/dfa.c:3475
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
    if (strlen(musts[0].in[i]) > strlen(result))
        result = musts[0].in[i];

....
Skipping nonlast:Priority -267
At location src/dfa.c:3475
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
    if (strlen(musts[0].in[i]) > strlen(result))
        result = musts[0].in[i];

....
Skipping nonlast addifexit:Priority 4733
At location src/dfa.c:3475
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(musts, i, musts[0].in, result, mp, musts[0].is, exact, t, dfa, ri, dfa, dm, musts[0].left, musts[0].right)))
    return;
for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
    if (strlen(musts[0].in[i]) > strlen(result))
        result = musts[0].in[i];

....
Skipping nonlast addifexit:Priority 4733
At location src/dfa.c:3475
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(musts, i, musts[0].in, result, mp, musts[0].is, exact, t, dfa, ri, dfa, dm, musts[0].left, musts[0].right)))
    break;
for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
    if (strlen(musts[0].in[i]) > strlen(result))
        result = musts[0].in[i];

....
Skipping nonlast addifexit:Priority 4933
At location src/dfa.c:3475
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(musts, i, musts[0].in, result, mp, musts[0].is, exact, t, dfa, ri, dfa, dm, musts[0].left, musts[0].right)))
    goto done;
for (i = 0; musts[0].in[i] != ((void *)0); ++i) 
    if (strlen(musts[0].in[i]) > strlen(result))
        result = musts[0].in[i];

....
Skipping nonlast:Priority -266
At location src/dfa.c:3478
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
        int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
        if (__s1_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
            if (__s1_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                if (__s1_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
        int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
        if (__s2_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
            if (__s2_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                if (__s2_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(result, musts[0].is))));
}) == 0)
    exact = 1;

....
Skipping nonlast:Priority -266
At location src/dfa.c:3478
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
        int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
        if (__s1_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
            if (__s1_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                if (__s1_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
        int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
        if (__s2_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
            if (__s2_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                if (__s2_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(result, musts[0].is))));
}) == 0)
    exact = 1;

....
Skipping nonlast:Priority -266
At location src/dfa.c:3478
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
if (__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
        int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
        if (__s1_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
            if (__s1_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                if (__s1_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
        int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
        if (__s2_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
            if (__s2_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                if (__s2_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(result, musts[0].is))));
}) == 0)
    exact = 1;

....
Skipping nonlast:Priority -266
At location src/dfa.c:3478
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
if (__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
        int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
        if (__s1_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
            if (__s1_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                if (__s1_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
        int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
        if (__s2_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
            if (__s2_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                if (__s2_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(result, musts[0].is))));
}) == 0)
    exact = 1;

....
Skipping nonlast:Priority -266
At location src/dfa.c:3478
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
if (__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
        int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
        if (__s1_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
            if (__s1_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                if (__s1_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
        int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
        if (__s2_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
            if (__s2_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                if (__s2_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(result, musts[0].is))));
}) == 0)
    exact = 1;

....
Skipping nonlast:Priority -266
At location src/dfa.c:3478
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
if (__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
        int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
        if (__s1_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
            if (__s1_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                if (__s1_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
        int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
        if (__s2_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
            if (__s2_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                if (__s2_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(result, musts[0].is))));
}) == 0)
    exact = 1;

....
Skipping nonlast:Priority -266
At location src/dfa.c:3478
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
        int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
        if (__s1_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
            if (__s1_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                if (__s1_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
        int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
        if (__s2_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
            if (__s2_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                if (__s2_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(result, musts[0].is))));
}) == 0)
    exact = 1;

....
Skipping nonlast:Priority -266
At location src/dfa.c:3478
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
        int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
        if (__s1_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
            if (__s1_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                if (__s1_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
        int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
        if (__s2_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
            if (__s2_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                if (__s2_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(result, musts[0].is))));
}) == 0)
    exact = 1;

....
Skipping nonlast:Priority -266
At location src/dfa.c:3478
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
        int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
        if (__s1_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
            if (__s1_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                if (__s1_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
        int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
        if (__s2_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
            if (__s2_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                if (__s2_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(result, musts[0].is))));
}) == 0)
    exact = 1;

....
Skipping nonlast addifexit:Priority 3484
At location src/dfa.c:3478
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(musts, result, musts[0].is, i, exact, musts[0].in, mp, t, dfa, ri, dfa, dm, musts[0].left, musts[0].right)))
    return;
if (__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
        int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
        if (__s1_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
            if (__s1_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                if (__s1_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
        int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
        if (__s2_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
            if (__s2_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                if (__s2_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(result, musts[0].is))));
}) == 0)
    exact = 1;

....
Skipping nonlast addifexit:Priority 3484
At location src/dfa.c:3478
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(musts, result, musts[0].is, i, exact, musts[0].in, mp, t, dfa, ri, dfa, dm, musts[0].left, musts[0].right)))
    break;
if (__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
        int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
        if (__s1_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
            if (__s1_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                if (__s1_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
        int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
        if (__s2_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
            if (__s2_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                if (__s2_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(result, musts[0].is))));
}) == 0)
    exact = 1;

....
Skipping nonlast addifexit:Priority 3684
At location src/dfa.c:3478
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(musts, result, musts[0].is, i, exact, musts[0].in, mp, t, dfa, ri, dfa, dm, musts[0].left, musts[0].right)))
    goto done;
if (__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
        int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
        if (__s1_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
            if (__s1_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                if (__s1_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
        int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
        if (__s2_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
            if (__s2_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                if (__s2_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(result, musts[0].is))));
}) == 0)
    exact = 1;

....
Skipping nonlast:Priority -51
At location src/dfa.c:3479
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    exact = 1;
}

....
Skipping nonlast:Priority -51
At location src/dfa.c:3479
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    exact = 1;
}

....
Skipping nonlast:Priority -51
At location src/dfa.c:3479
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        parse_bracket_exp_mb();
        return lasttok = MBCSET;
    }
    exact = 1;
}

....
Skipping nonlast:Priority -51
At location src/dfa.c:3479
--Src File: src/dfa.c
Fragment 0:
{
    if (0 != 0)
        dfaerror(0);
    else
        return lasttok = END;
    exact = 1;
}

....
Skipping nonlast:Priority -51
At location src/dfa.c:3479
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
    else
        return lasttok = END;
    exact = 1;
}

....
Skipping nonlast:Priority -51
At location src/dfa.c:3479
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
    else
        return lasttok = END;
    exact = 1;
}

....
Skipping nonlast:Priority -51
At location src/dfa.c:3479
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    exact = 1;
}

....
Skipping nonlast:Priority -51
At location src/dfa.c:3479
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    exact = 1;
}

....
Skipping nonlast:Priority -51
At location src/dfa.c:3479
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    exact = 1;
}

....
Skipping nonlast addifexit:Priority 4949
At location src/dfa.c:3479
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(exact, musts, result, musts[0].is, i, musts[0].in, mp, t, dfa, ri, dfa, dm, musts[0].left, musts[0].right)))
        return;
    exact = 1;
}

....
Skipping nonlast addifexit:Priority 4949
At location src/dfa.c:3479
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(exact, musts, result, musts[0].is, i, musts[0].in, mp, t, dfa, ri, dfa, dm, musts[0].left, musts[0].right)))
        break;
    exact = 1;
}

....
Skipping nonlast addifexit:Priority 5149
At location src/dfa.c:3479
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(exact, musts, result, musts[0].is, i, musts[0].in, mp, t, dfa, ri, dfa, dm, musts[0].left, musts[0].right)))
        goto done;
    exact = 1;
}

....
Skipping nonlast:Priority -263
At location src/dfa.c:3480
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
goto done;

....
Skipping nonlast:Priority -263
At location src/dfa.c:3480
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
goto done;

....
Skipping nonlast:Priority -263
At location src/dfa.c:3480
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
goto done;

....
Skipping nonlast:Priority -263
At location src/dfa.c:3480
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
goto done;

....
Skipping nonlast:Priority -263
At location src/dfa.c:3480
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
goto done;

....
Skipping nonlast:Priority -263
At location src/dfa.c:3480
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
goto done;

....
Skipping nonlast:Priority -263
At location src/dfa.c:3480
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
goto done;

....
Skipping nonlast:Priority -263
At location src/dfa.c:3480
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
goto done;

....
Skipping nonlast:Priority -263
At location src/dfa.c:3480
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
goto done;

....
Skipping nonlast addifexit:Priority 4737
At location src/dfa.c:3480
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(exact, musts, mp, result, i, t, dfa, ri, dfa, dm)))
    return;
goto done;

....
Skipping nonlast addifexit:Priority 4737
At location src/dfa.c:3480
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(exact, musts, mp, result, i, t, dfa, ri, dfa, dm)))
    break;
goto done;

....
Skipping nonlast addifexit:Priority 4937
At location src/dfa.c:3480
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(exact, musts, mp, result, i, t, dfa, ri, dfa, dm)))
    goto done;
goto done;

....
Skipping nonlast:Priority -294
At location src/dfa.c:3485
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
must *lmp;

....
Skipping nonlast:Priority -294
At location src/dfa.c:3485
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
must *lmp;

....
Skipping nonlast:Priority -294
At location src/dfa.c:3485
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
must *lmp;

....
Skipping nonlast:Priority -294
At location src/dfa.c:3485
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
must *lmp;

....
Skipping nonlast:Priority -294
At location src/dfa.c:3485
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
must *lmp;

....
Skipping nonlast:Priority -294
At location src/dfa.c:3485
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
must *lmp;

....
Skipping nonlast:Priority -294
At location src/dfa.c:3485
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
must *lmp;

....
Skipping nonlast:Priority -294
At location src/dfa.c:3485
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
must *lmp;

....
Skipping nonlast:Priority -294
At location src/dfa.c:3485
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
must *lmp;

....
Skipping nonlast addifexit:Priority 4706
At location src/dfa.c:3485
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(musts, mp, exact, result, i, t, dfa, ri, dfa, dm)))
    return;
must *lmp;

....
Skipping nonlast addifexit:Priority 4706
At location src/dfa.c:3485
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(musts, mp, exact, result, i, t, dfa, ri, dfa, dm)))
    break;
must *lmp;

....
Skipping nonlast addifexit:Priority 4906
At location src/dfa.c:3485
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(musts, mp, exact, result, i, t, dfa, ri, dfa, dm)))
    goto done;
must *lmp;

....
Skipping nonlast:Priority -293
At location src/dfa.c:3486
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
must *rmp;

....
Skipping nonlast:Priority -293
At location src/dfa.c:3486
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
must *rmp;

....
Skipping nonlast:Priority -293
At location src/dfa.c:3486
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
must *rmp;

....
Skipping nonlast:Priority -293
At location src/dfa.c:3486
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
must *rmp;

....
Skipping nonlast:Priority -293
At location src/dfa.c:3486
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
must *rmp;

....
Skipping nonlast:Priority -293
At location src/dfa.c:3486
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
must *rmp;

....
Skipping nonlast:Priority -293
At location src/dfa.c:3486
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
must *rmp;

....
Skipping nonlast:Priority -293
At location src/dfa.c:3486
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
must *rmp;

....
Skipping nonlast:Priority -293
At location src/dfa.c:3486
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
must *rmp;

....
Skipping nonlast addifexit:Priority 4707
At location src/dfa.c:3486
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, lmp, musts, exact, result, i, t, dfa, ri, dfa, dm)))
    return;
must *rmp;

....
Skipping nonlast addifexit:Priority 4707
At location src/dfa.c:3486
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, lmp, musts, exact, result, i, t, dfa, ri, dfa, dm)))
    break;
must *rmp;

....
Skipping nonlast addifexit:Priority 4907
At location src/dfa.c:3486
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, lmp, musts, exact, result, i, t, dfa, ri, dfa, dm)))
    goto done;
must *rmp;

....
Skipping nonlast:Priority 4708
At location src/dfa.c:3488
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
rmp = --mp;

....
Skipping nonlast:Priority 4708
At location src/dfa.c:3488
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
rmp = --mp;

....
Skipping nonlast:Priority 4708
At location src/dfa.c:3488
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
rmp = --mp;

....
Skipping nonlast:Priority 4708
At location src/dfa.c:3488
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
rmp = --mp;

....
Skipping nonlast:Priority 4708
At location src/dfa.c:3488
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
rmp = --mp;

....
Skipping nonlast:Priority 4708
At location src/dfa.c:3488
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
rmp = --mp;

....
Skipping nonlast:Priority 4708
At location src/dfa.c:3488
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
rmp = --mp;

....
Skipping nonlast:Priority 4708
At location src/dfa.c:3488
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
rmp = --mp;

....
Skipping nonlast:Priority 4708
At location src/dfa.c:3488
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
rmp = --mp;

....
Skipping nonlast addifexit:Priority 9708
At location src/dfa.c:3488
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, rmp, lmp, rmp->in, lmp->in, musts, lmp->right, exact, rmp->left, result, i, mp->is, lmp->is, lmp->left, rmp->is, rmp->right, t, mp->left, mp->right, mp->in, dfa, ri, dfa, dm)))
    return;
rmp = --mp;

....
Skipping nonlast addifexit:Priority 9708
At location src/dfa.c:3488
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, rmp, lmp, rmp->in, lmp->in, musts, lmp->right, exact, rmp->left, result, i, mp->is, lmp->is, lmp->left, rmp->is, rmp->right, t, mp->left, mp->right, mp->in, dfa, ri, dfa, dm)))
    break;
rmp = --mp;

....
Skipping nonlast addifexit:Priority 9908
At location src/dfa.c:3488
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, rmp, lmp, rmp->in, lmp->in, musts, lmp->right, exact, rmp->left, result, i, mp->is, lmp->is, lmp->left, rmp->is, rmp->right, t, mp->left, mp->right, mp->in, dfa, ri, dfa, dm)))
    goto done;
rmp = --mp;

....
Skipping nonlast:Priority -291
At location src/dfa.c:3489
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
lmp = --mp;

....
Skipping nonlast:Priority -291
At location src/dfa.c:3489
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
lmp = --mp;

....
Skipping nonlast:Priority -291
At location src/dfa.c:3489
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
lmp = --mp;

....
Skipping nonlast:Priority -291
At location src/dfa.c:3489
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
lmp = --mp;

....
Skipping nonlast:Priority -291
At location src/dfa.c:3489
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
lmp = --mp;

....
Skipping nonlast:Priority -291
At location src/dfa.c:3489
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
lmp = --mp;

....
Skipping nonlast:Priority -291
At location src/dfa.c:3489
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
lmp = --mp;

....
Skipping nonlast:Priority -291
At location src/dfa.c:3489
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
lmp = --mp;

....
Skipping nonlast:Priority -291
At location src/dfa.c:3489
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
lmp = --mp;

....
Skipping nonlast addifexit:Priority 4709
At location src/dfa.c:3489
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, lmp, rmp, rmp->in, lmp->in, musts, lmp->right, rmp->left, exact, result, i, mp->is, lmp->is, lmp->left, rmp->is, rmp->right, t, mp->left, mp->right, mp->in, dfa, ri, dfa, dm)))
    return;
lmp = --mp;

....
Skipping nonlast addifexit:Priority 4709
At location src/dfa.c:3489
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, lmp, rmp, rmp->in, lmp->in, musts, lmp->right, rmp->left, exact, result, i, mp->is, lmp->is, lmp->left, rmp->is, rmp->right, t, mp->left, mp->right, mp->in, dfa, ri, dfa, dm)))
    break;
lmp = --mp;

....
Skipping nonlast addifexit:Priority 4909
At location src/dfa.c:3489
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, lmp, rmp, rmp->in, lmp->in, musts, lmp->right, rmp->left, exact, result, i, mp->is, lmp->is, lmp->left, rmp->is, rmp->right, t, mp->left, mp->right, mp->in, dfa, ri, dfa, dm)))
    goto done;
lmp = --mp;

....
Skipping nonlast:Priority -290
At location src/dfa.c:3493
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
lmp->in = addlists(lmp->in, rmp->in);

....
Skipping nonlast:Priority -290
At location src/dfa.c:3493
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
lmp->in = addlists(lmp->in, rmp->in);

....
Skipping nonlast:Priority -290
At location src/dfa.c:3493
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
lmp->in = addlists(lmp->in, rmp->in);

....
Skipping nonlast:Priority -290
At location src/dfa.c:3493
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
lmp->in = addlists(lmp->in, rmp->in);

....
Skipping nonlast:Priority -290
At location src/dfa.c:3493
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
lmp->in = addlists(lmp->in, rmp->in);

....
Skipping nonlast:Priority -290
At location src/dfa.c:3493
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
lmp->in = addlists(lmp->in, rmp->in);

....
Skipping nonlast:Priority -290
At location src/dfa.c:3493
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
lmp->in = addlists(lmp->in, rmp->in);

....
Skipping nonlast:Priority -290
At location src/dfa.c:3493
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
lmp->in = addlists(lmp->in, rmp->in);

....
Skipping nonlast:Priority -290
At location src/dfa.c:3493
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
lmp->in = addlists(lmp->in, rmp->in);

....
Skipping nonlast addifexit:Priority 4710
At location src/dfa.c:3493
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lmp, rmp, rmp->in, lmp->in, lmp->right, mp, rmp->left, musts, exact, result, i, lmp->is, lmp->left, rmp->is, rmp->right, t, dfa, ri, dfa, dm)))
    return;
lmp->in = addlists(lmp->in, rmp->in);

....
Skipping nonlast addifexit:Priority 4710
At location src/dfa.c:3493
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lmp, rmp, rmp->in, lmp->in, lmp->right, mp, rmp->left, musts, exact, result, i, lmp->is, lmp->left, rmp->is, rmp->right, t, dfa, ri, dfa, dm)))
    break;
lmp->in = addlists(lmp->in, rmp->in);

....
Skipping nonlast addifexit:Priority 4910
At location src/dfa.c:3493
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lmp, rmp, rmp->in, lmp->in, lmp->right, mp, rmp->left, musts, exact, result, i, lmp->is, lmp->left, rmp->is, rmp->right, t, dfa, ri, dfa, dm)))
    goto done;
lmp->in = addlists(lmp->in, rmp->in);

....
Skipping nonlast:Priority -285
At location src/dfa.c:3494
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (lmp->in == ((void *)0))
    goto done;

....
Skipping nonlast:Priority -285
At location src/dfa.c:3494
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (lmp->in == ((void *)0))
    goto done;

....
Skipping nonlast:Priority -285
At location src/dfa.c:3494
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
if (lmp->in == ((void *)0))
    goto done;

....
Skipping nonlast:Priority -285
At location src/dfa.c:3494
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
if (lmp->in == ((void *)0))
    goto done;

....
Skipping nonlast:Priority -285
At location src/dfa.c:3494
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
if (lmp->in == ((void *)0))
    goto done;

....
Skipping nonlast:Priority -285
At location src/dfa.c:3494
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
if (lmp->in == ((void *)0))
    goto done;

....
Skipping nonlast:Priority -285
At location src/dfa.c:3494
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (lmp->in == ((void *)0))
    goto done;

....
Skipping nonlast:Priority -285
At location src/dfa.c:3494
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (lmp->in == ((void *)0))
    goto done;

....
Skipping nonlast:Priority -285
At location src/dfa.c:3494
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (lmp->in == ((void *)0))
    goto done;

....
Skipping nonlast addifexit:Priority 3465
At location src/dfa.c:3494
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lmp, lmp->in, rmp, rmp->in, lmp->right, rmp->left, mp, musts, exact, result, i, lmp->is, lmp->left, rmp->is, rmp->right, t, dfa, ri, dfa, dm)))
    return;
if (lmp->in == ((void *)0))
    goto done;

....
Skipping nonlast addifexit:Priority 3465
At location src/dfa.c:3494
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lmp, lmp->in, rmp, rmp->in, lmp->right, rmp->left, mp, musts, exact, result, i, lmp->is, lmp->left, rmp->is, rmp->right, t, dfa, ri, dfa, dm)))
    break;
if (lmp->in == ((void *)0))
    goto done;

....
Skipping nonlast addifexit:Priority 3665
At location src/dfa.c:3494
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lmp, lmp->in, rmp, rmp->in, lmp->right, rmp->left, mp, musts, exact, result, i, lmp->is, lmp->left, rmp->is, rmp->right, t, dfa, ri, dfa, dm)))
    goto done;
if (lmp->in == ((void *)0))
    goto done;

....
Skipping nonlast:Priority -284
At location src/dfa.c:3496
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (lmp->right[0] != '\x00' && rmp->left[0] != '\x00') {
    char *tp;
    tp = icpyalloc(lmp->right);
    if (tp == ((void *)0))
        goto done;
    tp = icatalloc(tp, rmp->left);
    if (tp == ((void *)0))
        goto done;
    lmp->in = enlist(lmp->in, tp, strlen(tp));
    free(tp);
    if (lmp->in == ((void *)0))
        goto done;
}

....
Skipping nonlast:Priority -284
At location src/dfa.c:3496
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (lmp->right[0] != '\x00' && rmp->left[0] != '\x00') {
    char *tp;
    tp = icpyalloc(lmp->right);
    if (tp == ((void *)0))
        goto done;
    tp = icatalloc(tp, rmp->left);
    if (tp == ((void *)0))
        goto done;
    lmp->in = enlist(lmp->in, tp, strlen(tp));
    free(tp);
    if (lmp->in == ((void *)0))
        goto done;
}

....
Skipping nonlast:Priority -284
At location src/dfa.c:3496
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
if (lmp->right[0] != '\x00' && rmp->left[0] != '\x00') {
    char *tp;
    tp = icpyalloc(lmp->right);
    if (tp == ((void *)0))
        goto done;
    tp = icatalloc(tp, rmp->left);
    if (tp == ((void *)0))
        goto done;
    lmp->in = enlist(lmp->in, tp, strlen(tp));
    free(tp);
    if (lmp->in == ((void *)0))
        goto done;
}

....
Skipping nonlast:Priority -284
At location src/dfa.c:3496
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
if (lmp->right[0] != '\x00' && rmp->left[0] != '\x00') {
    char *tp;
    tp = icpyalloc(lmp->right);
    if (tp == ((void *)0))
        goto done;
    tp = icatalloc(tp, rmp->left);
    if (tp == ((void *)0))
        goto done;
    lmp->in = enlist(lmp->in, tp, strlen(tp));
    free(tp);
    if (lmp->in == ((void *)0))
        goto done;
}

....
Skipping nonlast:Priority -284
At location src/dfa.c:3496
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
if (lmp->right[0] != '\x00' && rmp->left[0] != '\x00') {
    char *tp;
    tp = icpyalloc(lmp->right);
    if (tp == ((void *)0))
        goto done;
    tp = icatalloc(tp, rmp->left);
    if (tp == ((void *)0))
        goto done;
    lmp->in = enlist(lmp->in, tp, strlen(tp));
    free(tp);
    if (lmp->in == ((void *)0))
        goto done;
}

....
Skipping nonlast:Priority -284
At location src/dfa.c:3496
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
if (lmp->right[0] != '\x00' && rmp->left[0] != '\x00') {
    char *tp;
    tp = icpyalloc(lmp->right);
    if (tp == ((void *)0))
        goto done;
    tp = icatalloc(tp, rmp->left);
    if (tp == ((void *)0))
        goto done;
    lmp->in = enlist(lmp->in, tp, strlen(tp));
    free(tp);
    if (lmp->in == ((void *)0))
        goto done;
}

....
Skipping nonlast:Priority -284
At location src/dfa.c:3496
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (lmp->right[0] != '\x00' && rmp->left[0] != '\x00') {
    char *tp;
    tp = icpyalloc(lmp->right);
    if (tp == ((void *)0))
        goto done;
    tp = icatalloc(tp, rmp->left);
    if (tp == ((void *)0))
        goto done;
    lmp->in = enlist(lmp->in, tp, strlen(tp));
    free(tp);
    if (lmp->in == ((void *)0))
        goto done;
}

....
Skipping nonlast:Priority -284
At location src/dfa.c:3496
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (lmp->right[0] != '\x00' && rmp->left[0] != '\x00') {
    char *tp;
    tp = icpyalloc(lmp->right);
    if (tp == ((void *)0))
        goto done;
    tp = icatalloc(tp, rmp->left);
    if (tp == ((void *)0))
        goto done;
    lmp->in = enlist(lmp->in, tp, strlen(tp));
    free(tp);
    if (lmp->in == ((void *)0))
        goto done;
}

....
Skipping nonlast:Priority -284
At location src/dfa.c:3496
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (lmp->right[0] != '\x00' && rmp->left[0] != '\x00') {
    char *tp;
    tp = icpyalloc(lmp->right);
    if (tp == ((void *)0))
        goto done;
    tp = icatalloc(tp, rmp->left);
    if (tp == ((void *)0))
        goto done;
    lmp->in = enlist(lmp->in, tp, strlen(tp));
    free(tp);
    if (lmp->in == ((void *)0))
        goto done;
}

....
Skipping nonlast addifexit:Priority 3466
At location src/dfa.c:3496
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lmp, lmp->right, rmp, rmp->left, lmp->in, rmp->in, mp, musts, exact, result, lmp->is, i, lmp->left, rmp->is, rmp->right, t, dm, dfa, ri, dfa)))
    return;
if (lmp->right[0] != '\x00' && rmp->left[0] != '\x00') {
    char *tp;
    tp = icpyalloc(lmp->right);
    if (tp == ((void *)0))
        goto done;
    tp = icatalloc(tp, rmp->left);
    if (tp == ((void *)0))
        goto done;
    lmp->in = enlist(lmp->in, tp, strlen(tp));
    free(tp);
    if (lmp->in == ((void *)0))
        goto done;
}

....
Skipping nonlast addifexit:Priority 3466
At location src/dfa.c:3496
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lmp, lmp->right, rmp, rmp->left, lmp->in, rmp->in, mp, musts, exact, result, lmp->is, i, lmp->left, rmp->is, rmp->right, t, dm, dfa, ri, dfa)))
    break;
if (lmp->right[0] != '\x00' && rmp->left[0] != '\x00') {
    char *tp;
    tp = icpyalloc(lmp->right);
    if (tp == ((void *)0))
        goto done;
    tp = icatalloc(tp, rmp->left);
    if (tp == ((void *)0))
        goto done;
    lmp->in = enlist(lmp->in, tp, strlen(tp));
    free(tp);
    if (lmp->in == ((void *)0))
        goto done;
}

....
Skipping nonlast addifexit:Priority 3666
At location src/dfa.c:3496
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lmp, lmp->right, rmp, rmp->left, lmp->in, rmp->in, mp, musts, exact, result, lmp->is, i, lmp->left, rmp->is, rmp->right, t, dm, dfa, ri, dfa)))
    goto done;
if (lmp->right[0] != '\x00' && rmp->left[0] != '\x00') {
    char *tp;
    tp = icpyalloc(lmp->right);
    if (tp == ((void *)0))
        goto done;
    tp = icatalloc(tp, rmp->left);
    if (tp == ((void *)0))
        goto done;
    lmp->in = enlist(lmp->in, tp, strlen(tp));
    free(tp);
    if (lmp->in == ((void *)0))
        goto done;
}

....
Skipping nonlast:Priority -283
At location src/dfa.c:3514
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (lmp->is[0] != '\x00') {
    lmp->left = icatalloc(lmp->left, rmp->left);
    if (lmp->left == ((void *)0))
        goto done;
}

....
Skipping nonlast:Priority -283
At location src/dfa.c:3514
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (lmp->is[0] != '\x00') {
    lmp->left = icatalloc(lmp->left, rmp->left);
    if (lmp->left == ((void *)0))
        goto done;
}

....
Skipping nonlast:Priority -283
At location src/dfa.c:3514
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
if (lmp->is[0] != '\x00') {
    lmp->left = icatalloc(lmp->left, rmp->left);
    if (lmp->left == ((void *)0))
        goto done;
}

....
Skipping nonlast:Priority -283
At location src/dfa.c:3514
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
if (lmp->is[0] != '\x00') {
    lmp->left = icatalloc(lmp->left, rmp->left);
    if (lmp->left == ((void *)0))
        goto done;
}

....
Skipping nonlast:Priority -283
At location src/dfa.c:3514
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
if (lmp->is[0] != '\x00') {
    lmp->left = icatalloc(lmp->left, rmp->left);
    if (lmp->left == ((void *)0))
        goto done;
}

....
Skipping nonlast:Priority -283
At location src/dfa.c:3514
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
if (lmp->is[0] != '\x00') {
    lmp->left = icatalloc(lmp->left, rmp->left);
    if (lmp->left == ((void *)0))
        goto done;
}

....
Skipping nonlast:Priority -283
At location src/dfa.c:3514
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (lmp->is[0] != '\x00') {
    lmp->left = icatalloc(lmp->left, rmp->left);
    if (lmp->left == ((void *)0))
        goto done;
}

....
Skipping nonlast:Priority -283
At location src/dfa.c:3514
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (lmp->is[0] != '\x00') {
    lmp->left = icatalloc(lmp->left, rmp->left);
    if (lmp->left == ((void *)0))
        goto done;
}

....
Skipping nonlast:Priority -283
At location src/dfa.c:3514
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (lmp->is[0] != '\x00') {
    lmp->left = icatalloc(lmp->left, rmp->left);
    if (lmp->left == ((void *)0))
        goto done;
}

....
Skipping nonlast addifexit:Priority 3467
At location src/dfa.c:3514
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lmp, lmp->is, lmp->left, rmp, lmp->in, lmp->right, mp, t, musts, exact, result, i, dm, dfa, dfa, ri)))
    return;
if (lmp->is[0] != '\x00') {
    lmp->left = icatalloc(lmp->left, rmp->left);
    if (lmp->left == ((void *)0))
        goto done;
}

....
Skipping nonlast addifexit:Priority 3467
At location src/dfa.c:3514
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lmp, lmp->is, lmp->left, rmp, lmp->in, lmp->right, mp, t, musts, exact, result, i, dm, dfa, dfa, ri)))
    break;
if (lmp->is[0] != '\x00') {
    lmp->left = icatalloc(lmp->left, rmp->left);
    if (lmp->left == ((void *)0))
        goto done;
}

....
Skipping nonlast addifexit:Priority 3667
At location src/dfa.c:3514
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lmp, lmp->is, lmp->left, rmp, lmp->in, lmp->right, mp, t, musts, exact, result, i, dm, dfa, dfa, ri)))
    goto done;
if (lmp->is[0] != '\x00') {
    lmp->left = icatalloc(lmp->left, rmp->left);
    if (lmp->left == ((void *)0))
        goto done;
}

....
Skipping nonlast:Priority -282
At location src/dfa.c:3522
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (rmp->is[0] == '\x00')
    lmp->right[0] = '\x00';

....
Skipping nonlast:Priority -282
At location src/dfa.c:3522
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (rmp->is[0] == '\x00')
    lmp->right[0] = '\x00';

....
Skipping nonlast:Priority -282
At location src/dfa.c:3522
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
if (rmp->is[0] == '\x00')
    lmp->right[0] = '\x00';

....
Skipping nonlast:Priority -282
At location src/dfa.c:3522
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
if (rmp->is[0] == '\x00')
    lmp->right[0] = '\x00';

....
Skipping nonlast:Priority -282
At location src/dfa.c:3522
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
if (rmp->is[0] == '\x00')
    lmp->right[0] = '\x00';

....
Skipping nonlast:Priority -282
At location src/dfa.c:3522
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
if (rmp->is[0] == '\x00')
    lmp->right[0] = '\x00';

....
Skipping nonlast:Priority -282
At location src/dfa.c:3522
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (rmp->is[0] == '\x00')
    lmp->right[0] = '\x00';

....
Skipping nonlast:Priority -282
At location src/dfa.c:3522
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (rmp->is[0] == '\x00')
    lmp->right[0] = '\x00';

....
Skipping nonlast:Priority -282
At location src/dfa.c:3522
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (rmp->is[0] == '\x00')
    lmp->right[0] = '\x00';

....
Skipping nonlast addifexit:Priority 3468
At location src/dfa.c:3522
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(rmp, rmp->is, lmp, lmp->right, rmp->right, lmp->left, rmp->left, lmp->is, lmp->in, t, rmp->in, mp, musts, exact, result, i, dm, dfa, dfa, ri)))
    return;
if (rmp->is[0] == '\x00')
    lmp->right[0] = '\x00';

....
Skipping nonlast addifexit:Priority 3468
At location src/dfa.c:3522
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(rmp, rmp->is, lmp, lmp->right, rmp->right, lmp->left, rmp->left, lmp->is, lmp->in, t, rmp->in, mp, musts, exact, result, i, dm, dfa, dfa, ri)))
    break;
if (rmp->is[0] == '\x00')
    lmp->right[0] = '\x00';

....
Skipping nonlast addifexit:Priority 3668
At location src/dfa.c:3522
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(rmp, rmp->is, lmp, lmp->right, rmp->right, lmp->left, rmp->left, lmp->is, lmp->in, t, rmp->in, mp, musts, exact, result, i, dm, dfa, dfa, ri)))
    goto done;
if (rmp->is[0] == '\x00')
    lmp->right[0] = '\x00';

....
Skipping nonlast:Priority -281
At location src/dfa.c:3523
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    lmp->right[0] = '\x00';
}

....
Skipping nonlast:Priority -281
At location src/dfa.c:3523
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    lmp->right[0] = '\x00';
}

....
Skipping nonlast:Priority -281
At location src/dfa.c:3523
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        parse_bracket_exp_mb();
        return lasttok = MBCSET;
    }
    lmp->right[0] = '\x00';
}

....
Skipping nonlast:Priority -281
At location src/dfa.c:3523
--Src File: src/dfa.c
Fragment 0:
{
    if (0 != 0)
        dfaerror(0);
    else
        return lasttok = END;
    lmp->right[0] = '\x00';
}

....
Skipping nonlast:Priority -281
At location src/dfa.c:3523
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
    else
        return lasttok = END;
    lmp->right[0] = '\x00';
}

....
Skipping nonlast:Priority -281
At location src/dfa.c:3523
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
    else
        return lasttok = END;
    lmp->right[0] = '\x00';
}

....
Skipping nonlast:Priority -281
At location src/dfa.c:3523
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    lmp->right[0] = '\x00';
}

....
Skipping nonlast:Priority -281
At location src/dfa.c:3523
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    lmp->right[0] = '\x00';
}

....
Skipping nonlast:Priority -281
At location src/dfa.c:3523
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    lmp->right[0] = '\x00';
}

....
Skipping nonlast addifexit:Priority 4719
At location src/dfa.c:3523
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(lmp, lmp->right, rmp, rmp->right, rmp->is, lmp->left, lmp->is, rmp->left, lmp->in, t, rmp->in, mp, musts, exact, result, i, dm, dfa, dfa, ri)))
        return;
    lmp->right[0] = '\x00';
}

....
Skipping nonlast addifexit:Priority 4719
At location src/dfa.c:3523
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(lmp, lmp->right, rmp, rmp->right, rmp->is, lmp->left, lmp->is, rmp->left, lmp->in, t, rmp->in, mp, musts, exact, result, i, dm, dfa, dfa, ri)))
        break;
    lmp->right[0] = '\x00';
}

....
Skipping nonlast addifexit:Priority 4919
At location src/dfa.c:3523
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(lmp, lmp->right, rmp, rmp->right, rmp->is, lmp->left, lmp->is, rmp->left, lmp->in, t, rmp->in, mp, musts, exact, result, i, dm, dfa, dfa, ri)))
        goto done;
    lmp->right[0] = '\x00';
}

....
Skipping nonlast:Priority -280
At location src/dfa.c:3524
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
lmp->right = icatalloc(lmp->right, rmp->right);

....
Skipping nonlast:Priority -280
At location src/dfa.c:3524
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
lmp->right = icatalloc(lmp->right, rmp->right);

....
Skipping nonlast:Priority -280
At location src/dfa.c:3524
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
lmp->right = icatalloc(lmp->right, rmp->right);

....
Skipping nonlast:Priority -280
At location src/dfa.c:3524
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
lmp->right = icatalloc(lmp->right, rmp->right);

....
Skipping nonlast:Priority -280
At location src/dfa.c:3524
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
lmp->right = icatalloc(lmp->right, rmp->right);

....
Skipping nonlast:Priority -280
At location src/dfa.c:3524
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
lmp->right = icatalloc(lmp->right, rmp->right);

....
Skipping nonlast:Priority -280
At location src/dfa.c:3524
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
lmp->right = icatalloc(lmp->right, rmp->right);

....
Skipping nonlast:Priority -280
At location src/dfa.c:3524
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
lmp->right = icatalloc(lmp->right, rmp->right);

....
Skipping nonlast:Priority -280
At location src/dfa.c:3524
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
lmp->right = icatalloc(lmp->right, rmp->right);

....
Skipping nonlast addifexit:Priority 4720
At location src/dfa.c:3524
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lmp, rmp, rmp->right, lmp->right, rmp->is, lmp->is, lmp->left, rmp->left, lmp->in, t, rmp->in, mp, musts, exact, result, i, dm, dfa, dfa, ri)))
    return;
lmp->right = icatalloc(lmp->right, rmp->right);

....
Skipping nonlast addifexit:Priority 4720
At location src/dfa.c:3524
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lmp, rmp, rmp->right, lmp->right, rmp->is, lmp->is, lmp->left, rmp->left, lmp->in, t, rmp->in, mp, musts, exact, result, i, dm, dfa, dfa, ri)))
    break;
lmp->right = icatalloc(lmp->right, rmp->right);

....
Skipping nonlast addifexit:Priority 4920
At location src/dfa.c:3524
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lmp, rmp, rmp->right, lmp->right, rmp->is, lmp->is, lmp->left, rmp->left, lmp->in, t, rmp->in, mp, musts, exact, result, i, dm, dfa, dfa, ri)))
    goto done;
lmp->right = icatalloc(lmp->right, rmp->right);

....
Skipping nonlast:Priority -273
At location src/dfa.c:3525
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
if (lmp->right == ((void *)0))
    goto done;

....
Skipping nonlast:Priority -273
At location src/dfa.c:3525
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
if (lmp->right == ((void *)0))
    goto done;

....
Skipping nonlast:Priority -273
At location src/dfa.c:3525
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
if (lmp->right == ((void *)0))
    goto done;

....
Skipping nonlast:Priority -273
At location src/dfa.c:3525
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
if (lmp->right == ((void *)0))
    goto done;

....
Skipping nonlast:Priority -273
At location src/dfa.c:3525
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
if (lmp->right == ((void *)0))
    goto done;

....
Skipping nonlast:Priority -273
At location src/dfa.c:3525
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
if (lmp->right == ((void *)0))
    goto done;

....
Skipping nonlast:Priority -273
At location src/dfa.c:3525
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
if (lmp->right == ((void *)0))
    goto done;

....
Skipping nonlast:Priority -273
At location src/dfa.c:3525
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
if (lmp->right == ((void *)0))
    goto done;

....
Skipping nonlast:Priority -273
At location src/dfa.c:3525
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
if (lmp->right == ((void *)0))
    goto done;

....
Skipping nonlast addifexit:Priority 3477
At location src/dfa.c:3525
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lmp, lmp->right, rmp, rmp->right, rmp->is, lmp->is, lmp->left, rmp->left, t, lmp->in, mp, rmp->in, musts, exact, result, i, dm, dfa, dfa, ri)))
    return;
if (lmp->right == ((void *)0))
    goto done;

....
Skipping nonlast addifexit:Priority 3477
At location src/dfa.c:3525
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lmp, lmp->right, rmp, rmp->right, rmp->is, lmp->is, lmp->left, rmp->left, t, lmp->in, mp, rmp->in, musts, exact, result, i, dm, dfa, dfa, ri)))
    break;
if (lmp->right == ((void *)0))
    goto done;

....
Skipping nonlast addifexit:Priority 3677
At location src/dfa.c:3525
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lmp, lmp->right, rmp, rmp->right, rmp->is, lmp->is, lmp->left, rmp->left, t, lmp->in, mp, rmp->in, musts, exact, result, i, dm, dfa, dfa, ri)))
    goto done;
if (lmp->right == ((void *)0))
    goto done;

....
Skipping isstmt addifexit:Priority 3478
At location src/dfa.c:3528
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lmp, rmp, rmp->is, lmp->is, lmp->right, rmp->right, lmp->left, t, rmp->left, lmp->in, mp, rmp->in, musts, exact, result, i, dm, dfa, dfa, ri)))
    return;
if (lmp->is[0] != '\x00' && rmp->is[0] != '\x00') {
    lmp->is = icatalloc(lmp->is, rmp->is);
    if (lmp->is == ((void *)0))
        goto done;
} else
    lmp->is[0] = '\x00';

....
Skipping isstmt addifexit:Priority 3478
At location src/dfa.c:3528
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lmp, rmp, rmp->is, lmp->is, lmp->right, rmp->right, lmp->left, t, rmp->left, lmp->in, mp, rmp->in, musts, exact, result, i, dm, dfa, dfa, ri)))
    break;
if (lmp->is[0] != '\x00' && rmp->is[0] != '\x00') {
    lmp->is = icatalloc(lmp->is, rmp->is);
    if (lmp->is == ((void *)0))
        goto done;
} else
    lmp->is[0] = '\x00';

....
Skipping isstmt addifexit:Priority 3678
At location src/dfa.c:3528
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(lmp, rmp, rmp->is, lmp->is, lmp->right, rmp->right, lmp->left, t, rmp->left, lmp->in, mp, rmp->in, musts, exact, result, i, dm, dfa, dfa, ri)))
    goto done;
if (lmp->is[0] != '\x00' && rmp->is[0] != '\x00') {
    lmp->is = icatalloc(lmp->is, rmp->is);
    if (lmp->is == ((void *)0))
        goto done;
} else
    lmp->is[0] = '\x00';

....
Skipping nonlast:Priority -271
At location src/dfa.c:3535
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    lmp->is[0] = '\x00';
}

....
Skipping nonlast:Priority -271
At location src/dfa.c:3535
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    lmp->is[0] = '\x00';
}

....
Skipping nonlast:Priority -271
At location src/dfa.c:3535
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        parse_bracket_exp_mb();
        return lasttok = MBCSET;
    }
    lmp->is[0] = '\x00';
}

....
Skipping nonlast:Priority -271
At location src/dfa.c:3535
--Src File: src/dfa.c
Fragment 0:
{
    if (0 != 0)
        dfaerror(0);
    else
        return lasttok = END;
    lmp->is[0] = '\x00';
}

....
Skipping nonlast:Priority -271
At location src/dfa.c:3535
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
    else
        return lasttok = END;
    lmp->is[0] = '\x00';
}

....
Skipping nonlast:Priority -271
At location src/dfa.c:3535
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
    else
        return lasttok = END;
    lmp->is[0] = '\x00';
}

....
Skipping nonlast:Priority -271
At location src/dfa.c:3535
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    lmp->is[0] = '\x00';
}

....
Skipping nonlast:Priority -271
At location src/dfa.c:3535
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    lmp->is[0] = '\x00';
}

....
Skipping nonlast:Priority -271
At location src/dfa.c:3535
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    lmp->is[0] = '\x00';
}

....
Skipping nonlast addifexit:Priority 4729
At location src/dfa.c:3535
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(lmp, lmp->is, t, rmp, lmp->right, lmp->left, mp, lmp->in, result, dm, exact, musts, dfa, dfa, i, ri)))
        return;
    lmp->is[0] = '\x00';
}

....
Skipping nonlast addifexit:Priority 4729
At location src/dfa.c:3535
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(lmp, lmp->is, t, rmp, lmp->right, lmp->left, mp, lmp->in, result, dm, exact, musts, dfa, dfa, i, ri)))
        break;
    lmp->is[0] = '\x00';
}

....
Skipping nonlast addifexit:Priority 4929
At location src/dfa.c:3535
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(lmp, lmp->is, t, rmp, lmp->right, lmp->left, mp, lmp->in, result, dm, exact, musts, dfa, dfa, i, ri)))
        goto done;
    lmp->is[0] = '\x00';
}

....
Skipping nonlast:Priority -270
At location src/dfa.c:3537
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
break;

....
Skipping nonlast:Priority -270
At location src/dfa.c:3537
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
break;

....
Skipping nonlast:Priority -270
At location src/dfa.c:3537
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
break;

....
Skipping nonlast:Priority -270
At location src/dfa.c:3537
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
break;

....
Skipping nonlast:Priority -270
At location src/dfa.c:3537
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
break;

....
Skipping nonlast:Priority -270
At location src/dfa.c:3537
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
break;

....
Skipping nonlast:Priority -270
At location src/dfa.c:3537
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
break;

....
Skipping nonlast:Priority -270
At location src/dfa.c:3537
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
break;

....
Skipping nonlast:Priority -270
At location src/dfa.c:3537
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
break;

....
Skipping nonlast addifexit:Priority 4730
At location src/dfa.c:3537
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(t, mp, result, dm, exact, dfa, dfa, musts, i, ri)))
    return;
break;

....
Skipping nonlast addifexit:Priority 4730
At location src/dfa.c:3537
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(t, mp, result, dm, exact, dfa, dfa, musts, i, ri)))
    break;
break;

....
Skipping nonlast addifexit:Priority 4930
At location src/dfa.c:3537
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(t, mp, result, dm, exact, dfa, dfa, musts, i, ri)))
    goto done;
break;

....
Skipping nonlast:Priority -326
At location src/dfa.c:3544
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    if (t == '\x00') {
        goto done;
    } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
}

....
Skipping nonlast:Priority -326
At location src/dfa.c:3544
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    if (t == '\x00') {
        goto done;
    } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
}

....
Skipping nonlast:Priority -326
At location src/dfa.c:3544
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        parse_bracket_exp_mb();
        return lasttok = MBCSET;
    }
    if (t == '\x00') {
        goto done;
    } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
}

....
Skipping nonlast:Priority -326
At location src/dfa.c:3544
--Src File: src/dfa.c
Fragment 0:
{
    if (0 != 0)
        dfaerror(0);
    else
        return lasttok = END;
    if (t == '\x00') {
        goto done;
    } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
}

....
Skipping nonlast:Priority -326
At location src/dfa.c:3544
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
    else
        return lasttok = END;
    if (t == '\x00') {
        goto done;
    } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
}

....
Skipping nonlast:Priority -326
At location src/dfa.c:3544
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
    else
        return lasttok = END;
    if (t == '\x00') {
        goto done;
    } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
}

....
Skipping nonlast:Priority -326
At location src/dfa.c:3544
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    if (t == '\x00') {
        goto done;
    } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
}

....
Skipping nonlast:Priority -326
At location src/dfa.c:3544
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    if (t == '\x00') {
        goto done;
    } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
}

....
Skipping nonlast:Priority -326
At location src/dfa.c:3544
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    if (t == '\x00') {
        goto done;
    } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
}

....
Skipping nonlast addifexit:Priority 3424
At location src/dfa.c:3544
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(t, mp, result, dm, exact, dfa, dfa, musts, i, ri)))
        return;
    if (t == '\x00') {
        goto done;
    } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
}

....
Skipping nonlast addifexit:Priority 3424
At location src/dfa.c:3544
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(t, mp, result, dm, exact, dfa, dfa, musts, i, ri)))
        break;
    if (t == '\x00') {
        goto done;
    } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
}

....
Skipping nonlast addifexit:Priority 3624
At location src/dfa.c:3544
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(t, mp, result, dm, exact, dfa, dfa, musts, i, ri)))
        goto done;
    if (t == '\x00') {
        goto done;
    } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
}

....
Skipping nonlast:Priority -325
At location src/dfa.c:3549
--Src File: src/dfa.c
Fragment 0:
{
    if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
        return 0;
    if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
}

....
Skipping nonlast:Priority -325
At location src/dfa.c:3549
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        laststart = 0;
        return lasttok = ANYCHAR;
    }
    if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
}

....
Skipping nonlast:Priority -325
At location src/dfa.c:3549
--Src File: src/dfa.c
Fragment 0:
{
    if ((__ctype_get_mb_cur_max()) > 1) {
        parse_bracket_exp_mb();
        return lasttok = MBCSET;
    }
    if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
}

....
Skipping nonlast:Priority -325
At location src/dfa.c:3549
--Src File: src/dfa.c
Fragment 0:
{
    if (0 != 0)
        dfaerror(0);
    else
        return lasttok = END;
    if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
}

....
Skipping nonlast:Priority -325
At location src/dfa.c:3549
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
        dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
    else
        return lasttok = END;
    if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
}

....
Skipping nonlast:Priority -325
At location src/dfa.c:3549
--Src File: src/dfa.c
Fragment 0:
{
    if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
        dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
    else
        return lasttok = END;
    if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
}

....
Skipping nonlast:Priority -325
At location src/dfa.c:3549
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        return 0;
    if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
}

....
Skipping nonlast:Priority -325
At location src/dfa.c:3549
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
        return lasttok = BEGLINE;
    if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
}

....
Skipping nonlast:Priority -325
At location src/dfa.c:3549
--Src File: src/dfa.c
Fragment 0:
{
    if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
        return lasttok = ENDLINE;
    if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
}

....
Skipping nonlast addifexit:Priority 3425
At location src/dfa.c:3549
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(t, mp, result, dm, exact, dfa, dfa, musts, i, ri)))
        return;
    if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
}

....
Skipping nonlast addifexit:Priority 3425
At location src/dfa.c:3549
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(t, mp, result, dm, exact, dfa, dfa, musts, i, ri)))
        break;
    if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
}

....
Skipping nonlast addifexit:Priority 3625
At location src/dfa.c:3549
--Src File: src/dfa.c
Fragment 0:
{
    if ((__abst_hole(t, mp, result, dm, exact, dfa, dfa, musts, i, ri)))
        goto done;
    if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
}

....
Skipping nonlast:Priority 4676
At location src/dfa.c:3562
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
resetmust(mp);

....
Skipping nonlast:Priority 4676
At location src/dfa.c:3562
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
resetmust(mp);

....
Skipping nonlast:Priority 4676
At location src/dfa.c:3562
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
resetmust(mp);

....
Skipping nonlast:Priority 4676
At location src/dfa.c:3562
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
resetmust(mp);

....
Skipping nonlast:Priority 4676
At location src/dfa.c:3562
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
resetmust(mp);

....
Skipping nonlast:Priority 4676
At location src/dfa.c:3562
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
resetmust(mp);

....
Skipping nonlast:Priority 4676
At location src/dfa.c:3562
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
resetmust(mp);

....
Skipping nonlast:Priority 4676
At location src/dfa.c:3562
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
resetmust(mp);

....
Skipping nonlast:Priority 4676
At location src/dfa.c:3562
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
resetmust(mp);

....
Skipping nonlast addifexit:Priority 9676
At location src/dfa.c:3562
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, t, mp->left, mp->right, mp->is, mp->in, result, dm, exact, dfa, dfa, musts, i, ri)))
    return;
resetmust(mp);

....
Skipping nonlast addifexit:Priority 9676
At location src/dfa.c:3562
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, t, mp->left, mp->right, mp->is, mp->in, result, dm, exact, dfa, dfa, musts, i, ri)))
    break;
resetmust(mp);

....
Skipping nonlast addifexit:Priority 9876
At location src/dfa.c:3562
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, t, mp->left, mp->right, mp->is, mp->in, result, dm, exact, dfa, dfa, musts, i, ri)))
    goto done;
resetmust(mp);

....
Skipping nonlast:Priority -323
At location src/dfa.c:3563
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
mp->is[0] = mp->left[0] = mp->right[0] = t;

....
Skipping nonlast:Priority -323
At location src/dfa.c:3563
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
mp->is[0] = mp->left[0] = mp->right[0] = t;

....
Skipping nonlast:Priority -323
At location src/dfa.c:3563
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
mp->is[0] = mp->left[0] = mp->right[0] = t;

....
Skipping nonlast:Priority -323
At location src/dfa.c:3563
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
mp->is[0] = mp->left[0] = mp->right[0] = t;

....
Skipping nonlast:Priority -323
At location src/dfa.c:3563
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
mp->is[0] = mp->left[0] = mp->right[0] = t;

....
Skipping nonlast:Priority -323
At location src/dfa.c:3563
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
mp->is[0] = mp->left[0] = mp->right[0] = t;

....
Skipping nonlast:Priority -323
At location src/dfa.c:3563
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
mp->is[0] = mp->left[0] = mp->right[0] = t;

....
Skipping nonlast:Priority -323
At location src/dfa.c:3563
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
mp->is[0] = mp->left[0] = mp->right[0] = t;

....
Skipping nonlast:Priority -323
At location src/dfa.c:3563
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
mp->is[0] = mp->left[0] = mp->right[0] = t;

....
Skipping nonlast addifexit:Priority 4677
At location src/dfa.c:3563
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, t, mp->left, mp->right, mp->is, mp->in, result, dm, exact, dfa, dfa, musts, i, ri)))
    return;
mp->is[0] = mp->left[0] = mp->right[0] = t;

....
Skipping nonlast addifexit:Priority 4677
At location src/dfa.c:3563
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, t, mp->left, mp->right, mp->is, mp->in, result, dm, exact, dfa, dfa, musts, i, ri)))
    break;
mp->is[0] = mp->left[0] = mp->right[0] = t;

....
Skipping nonlast addifexit:Priority 4877
At location src/dfa.c:3563
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, t, mp->left, mp->right, mp->is, mp->in, result, dm, exact, dfa, dfa, musts, i, ri)))
    goto done;
mp->is[0] = mp->left[0] = mp->right[0] = t;

....
Skipping nonlast:Priority -322
At location src/dfa.c:3564
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
mp->is[1] = mp->left[1] = mp->right[1] = '\x00';

....
Skipping nonlast:Priority -322
At location src/dfa.c:3564
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
mp->is[1] = mp->left[1] = mp->right[1] = '\x00';

....
Skipping nonlast:Priority -322
At location src/dfa.c:3564
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
mp->is[1] = mp->left[1] = mp->right[1] = '\x00';

....
Skipping nonlast:Priority -322
At location src/dfa.c:3564
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
mp->is[1] = mp->left[1] = mp->right[1] = '\x00';

....
Skipping nonlast:Priority -322
At location src/dfa.c:3564
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
mp->is[1] = mp->left[1] = mp->right[1] = '\x00';

....
Skipping nonlast:Priority -322
At location src/dfa.c:3564
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
mp->is[1] = mp->left[1] = mp->right[1] = '\x00';

....
Skipping nonlast:Priority -322
At location src/dfa.c:3564
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
mp->is[1] = mp->left[1] = mp->right[1] = '\x00';

....
Skipping nonlast:Priority -322
At location src/dfa.c:3564
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
mp->is[1] = mp->left[1] = mp->right[1] = '\x00';

....
Skipping nonlast:Priority -322
At location src/dfa.c:3564
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
mp->is[1] = mp->left[1] = mp->right[1] = '\x00';

....
Skipping nonlast addifexit:Priority 4678
At location src/dfa.c:3564
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, mp->left, mp->right, mp->is, t, mp->in, result, dm, exact, dfa, dfa, musts, i, ri)))
    return;
mp->is[1] = mp->left[1] = mp->right[1] = '\x00';

....
Skipping nonlast addifexit:Priority 4678
At location src/dfa.c:3564
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, mp->left, mp->right, mp->is, t, mp->in, result, dm, exact, dfa, dfa, musts, i, ri)))
    break;
mp->is[1] = mp->left[1] = mp->right[1] = '\x00';

....
Skipping nonlast addifexit:Priority 4878
At location src/dfa.c:3564
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, mp->left, mp->right, mp->is, t, mp->in, result, dm, exact, dfa, dfa, musts, i, ri)))
    goto done;
mp->is[1] = mp->left[1] = mp->right[1] = '\x00';

....
Skipping nonlast:Priority -321
At location src/dfa.c:3565
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
mp->in = enlist(mp->in, mp->is, (size_t)1);

....
Skipping nonlast:Priority -321
At location src/dfa.c:3565
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
mp->in = enlist(mp->in, mp->is, (size_t)1);

....
Skipping nonlast:Priority -321
At location src/dfa.c:3565
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
mp->in = enlist(mp->in, mp->is, (size_t)1);

....
Skipping nonlast:Priority -321
At location src/dfa.c:3565
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
mp->in = enlist(mp->in, mp->is, (size_t)1);

....
Skipping nonlast:Priority -321
At location src/dfa.c:3565
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
mp->in = enlist(mp->in, mp->is, (size_t)1);

....
Skipping nonlast:Priority -321
At location src/dfa.c:3565
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
mp->in = enlist(mp->in, mp->is, (size_t)1);

....
Skipping nonlast:Priority -321
At location src/dfa.c:3565
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
mp->in = enlist(mp->in, mp->is, (size_t)1);

....
Skipping nonlast:Priority -321
At location src/dfa.c:3565
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
mp->in = enlist(mp->in, mp->is, (size_t)1);

....
Skipping nonlast:Priority -321
At location src/dfa.c:3565
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
mp->in = enlist(mp->in, mp->is, (size_t)1);

....
Skipping nonlast addifexit:Priority 4679
At location src/dfa.c:3565
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, mp->in, mp->is, mp->left, mp->right, t, result, dm, exact, dfa, dfa, musts, i, ri)))
    return;
mp->in = enlist(mp->in, mp->is, (size_t)1);

....
Skipping nonlast addifexit:Priority 4679
At location src/dfa.c:3565
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, mp->in, mp->is, mp->left, mp->right, t, result, dm, exact, dfa, dfa, musts, i, ri)))
    break;
mp->in = enlist(mp->in, mp->is, (size_t)1);

....
Skipping nonlast addifexit:Priority 4879
At location src/dfa.c:3565
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, mp->in, mp->is, mp->left, mp->right, t, result, dm, exact, dfa, dfa, musts, i, ri)))
    goto done;
mp->in = enlist(mp->in, mp->is, (size_t)1);

....
Skipping isstmt addifexit:Priority 3449
At location src/dfa.c:3566
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, mp->in, mp->is, mp->left, mp->right, t, result, dm, exact, dfa, dfa, musts, i, ri)))
    return;
if (mp->in == ((void *)0))
    goto done;

....
Skipping isstmt addifexit:Priority 3449
At location src/dfa.c:3566
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, mp->in, mp->is, mp->left, mp->right, t, result, dm, exact, dfa, dfa, musts, i, ri)))
    break;
if (mp->in == ((void *)0))
    goto done;

....
Skipping isstmt addifexit:Priority 3649
At location src/dfa.c:3566
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, mp->in, mp->is, mp->left, mp->right, t, result, dm, exact, dfa, dfa, musts, i, ri)))
    goto done;
if (mp->in == ((void *)0))
    goto done;

....
Skipping nonlast:Priority -262
At location src/dfa.c:3593
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
mp = musts;

....
Skipping nonlast:Priority -262
At location src/dfa.c:3593
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
mp = musts;

....
Skipping nonlast:Priority -262
At location src/dfa.c:3593
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
mp = musts;

....
Skipping nonlast:Priority -262
At location src/dfa.c:3593
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
mp = musts;

....
Skipping nonlast:Priority -262
At location src/dfa.c:3593
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
mp = musts;

....
Skipping nonlast:Priority -262
At location src/dfa.c:3593
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
mp = musts;

....
Skipping nonlast:Priority -262
At location src/dfa.c:3593
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
mp = musts;

....
Skipping nonlast:Priority -262
At location src/dfa.c:3593
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
mp = musts;

....
Skipping nonlast:Priority -262
At location src/dfa.c:3593
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
mp = musts;

....
Skipping nonlast addifexit:Priority 4738
At location src/dfa.c:3593
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(musts, mp, dfa, i, dfa, dfa->tindex, dfa->tindex, dm, dfa->musts, dfa->musts, result, exact, mp->in, mp->is, mp->left, mp->right, t, ri, dfa->tokens, dfa->tokens, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success)))
    return;
mp = musts;

....
Skipping nonlast addifexit:Priority 4938
At location src/dfa.c:3593
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(musts, mp, dfa, i, dfa, dfa->tindex, dfa->tindex, dm, dfa->musts, dfa->musts, result, exact, mp->in, mp->is, mp->left, mp->right, t, ri, dfa->tokens, dfa->tokens, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success)))
    goto done;
mp = musts;

....
Skipping nonlast:Priority -261
At location src/dfa.c:3594
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
for (i = 0; i <= dfa->tindex; ++i) {
    freelist(mp[i].in);
    ifree((char *)mp[i].in);
    ifree(mp[i].left);
    ifree(mp[i].right);
    ifree(mp[i].is);
}

....
Skipping nonlast:Priority -261
At location src/dfa.c:3594
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
for (i = 0; i <= dfa->tindex; ++i) {
    freelist(mp[i].in);
    ifree((char *)mp[i].in);
    ifree(mp[i].left);
    ifree(mp[i].right);
    ifree(mp[i].is);
}

....
Skipping nonlast:Priority -261
At location src/dfa.c:3594
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
for (i = 0; i <= dfa->tindex; ++i) {
    freelist(mp[i].in);
    ifree((char *)mp[i].in);
    ifree(mp[i].left);
    ifree(mp[i].right);
    ifree(mp[i].is);
}

....
Skipping nonlast:Priority -261
At location src/dfa.c:3594
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
for (i = 0; i <= dfa->tindex; ++i) {
    freelist(mp[i].in);
    ifree((char *)mp[i].in);
    ifree(mp[i].left);
    ifree(mp[i].right);
    ifree(mp[i].is);
}

....
Skipping nonlast:Priority -261
At location src/dfa.c:3594
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
for (i = 0; i <= dfa->tindex; ++i) {
    freelist(mp[i].in);
    ifree((char *)mp[i].in);
    ifree(mp[i].left);
    ifree(mp[i].right);
    ifree(mp[i].is);
}

....
Skipping nonlast:Priority -261
At location src/dfa.c:3594
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
for (i = 0; i <= dfa->tindex; ++i) {
    freelist(mp[i].in);
    ifree((char *)mp[i].in);
    ifree(mp[i].left);
    ifree(mp[i].right);
    ifree(mp[i].is);
}

....
Skipping nonlast:Priority -261
At location src/dfa.c:3594
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
for (i = 0; i <= dfa->tindex; ++i) {
    freelist(mp[i].in);
    ifree((char *)mp[i].in);
    ifree(mp[i].left);
    ifree(mp[i].right);
    ifree(mp[i].is);
}

....
Skipping nonlast:Priority -261
At location src/dfa.c:3594
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
for (i = 0; i <= dfa->tindex; ++i) {
    freelist(mp[i].in);
    ifree((char *)mp[i].in);
    ifree(mp[i].left);
    ifree(mp[i].right);
    ifree(mp[i].is);
}

....
Skipping nonlast:Priority -261
At location src/dfa.c:3594
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
for (i = 0; i <= dfa->tindex; ++i) {
    freelist(mp[i].in);
    ifree((char *)mp[i].in);
    ifree(mp[i].left);
    ifree(mp[i].right);
    ifree(mp[i].is);
}

....
Skipping nonlast addifexit:Priority 4739
At location src/dfa.c:3594
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(dfa, i, dfa, dfa->tindex, dfa->tindex, musts, mp, dm, dfa->musts, dfa->musts, result, exact, mp->in, mp->is, mp->left, mp->right, t, ri, dfa->tokens, dfa->tokens, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success)))
    return;
for (i = 0; i <= dfa->tindex; ++i) {
    freelist(mp[i].in);
    ifree((char *)mp[i].in);
    ifree(mp[i].left);
    ifree(mp[i].right);
    ifree(mp[i].is);
}

....
Skipping nonlast addifexit:Priority 4939
At location src/dfa.c:3594
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(dfa, i, dfa, dfa->tindex, dfa->tindex, musts, mp, dm, dfa->musts, dfa->musts, result, exact, mp->in, mp->is, mp->left, mp->right, t, ri, dfa->tokens, dfa->tokens, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success)))
    goto done;
for (i = 0; i <= dfa->tindex; ++i) {
    freelist(mp[i].in);
    ifree((char *)mp[i].in);
    ifree(mp[i].left);
    ifree(mp[i].right);
    ifree(mp[i].is);
}

....
Skipping nonlast:Priority 4740
At location src/dfa.c:3596
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
freelist(mp[i].in);

....
Skipping nonlast:Priority 4740
At location src/dfa.c:3596
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
freelist(mp[i].in);

....
Skipping nonlast:Priority 4740
At location src/dfa.c:3596
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
freelist(mp[i].in);

....
Skipping nonlast:Priority 4740
At location src/dfa.c:3596
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
freelist(mp[i].in);

....
Skipping nonlast:Priority 4740
At location src/dfa.c:3596
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
freelist(mp[i].in);

....
Skipping nonlast:Priority 4740
At location src/dfa.c:3596
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
freelist(mp[i].in);

....
Skipping nonlast:Priority 4740
At location src/dfa.c:3596
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
freelist(mp[i].in);

....
Skipping nonlast:Priority 4740
At location src/dfa.c:3596
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
freelist(mp[i].in);

....
Skipping nonlast:Priority 4740
At location src/dfa.c:3596
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
freelist(mp[i].in);

....
Skipping nonlast addifexit:Priority 9740
At location src/dfa.c:3596
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].in, dfa, dfa, mp[i].left, musts, mp[i].right, mp[i].is, dm, result, exact, mp->in, mp->is, mp->left, mp->right, t, ri)))
    return;
freelist(mp[i].in);

....
Skipping nonlast addifexit:Priority 9740
At location src/dfa.c:3596
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].in, dfa, dfa, mp[i].left, musts, mp[i].right, mp[i].is, dm, result, exact, mp->in, mp->is, mp->left, mp->right, t, ri)))
    break;
freelist(mp[i].in);

....
Skipping nonlast addifexit:Priority 9940
At location src/dfa.c:3596
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].in, dfa, dfa, mp[i].left, musts, mp[i].right, mp[i].is, dm, result, exact, mp->in, mp->is, mp->left, mp->right, t, ri)))
    goto done;
freelist(mp[i].in);

....
Skipping nonlast:Priority -256
At location src/dfa.c:3597
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
ifree((char *)mp[i].in);

....
Skipping nonlast:Priority -256
At location src/dfa.c:3597
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
ifree((char *)mp[i].in);

....
Skipping nonlast:Priority -256
At location src/dfa.c:3597
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
ifree((char *)mp[i].in);

....
Skipping nonlast:Priority -256
At location src/dfa.c:3597
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
ifree((char *)mp[i].in);

....
Skipping nonlast:Priority -256
At location src/dfa.c:3597
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
ifree((char *)mp[i].in);

....
Skipping nonlast:Priority -256
At location src/dfa.c:3597
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
ifree((char *)mp[i].in);

....
Skipping nonlast:Priority -256
At location src/dfa.c:3597
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
ifree((char *)mp[i].in);

....
Skipping nonlast:Priority -256
At location src/dfa.c:3597
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
ifree((char *)mp[i].in);

....
Skipping nonlast:Priority -256
At location src/dfa.c:3597
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
ifree((char *)mp[i].in);

....
Skipping nonlast addifexit:Priority 4744
At location src/dfa.c:3597
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].in, mp[i].left, mp[i].right, dfa, dfa, mp[i].is, musts, dm, result, exact, mp->in, mp->is, mp->left, mp->right, t, ri)))
    return;
ifree((char *)mp[i].in);

....
Skipping nonlast addifexit:Priority 4744
At location src/dfa.c:3597
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].in, mp[i].left, mp[i].right, dfa, dfa, mp[i].is, musts, dm, result, exact, mp->in, mp->is, mp->left, mp->right, t, ri)))
    break;
ifree((char *)mp[i].in);

....
Skipping nonlast addifexit:Priority 4944
At location src/dfa.c:3597
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].in, mp[i].left, mp[i].right, dfa, dfa, mp[i].is, musts, dm, result, exact, mp->in, mp->is, mp->left, mp->right, t, ri)))
    goto done;
ifree((char *)mp[i].in);

....
Skipping nonlast:Priority -255
At location src/dfa.c:3598
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
ifree(mp[i].left);

....
Skipping nonlast:Priority -255
At location src/dfa.c:3598
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
ifree(mp[i].left);

....
Skipping nonlast:Priority -255
At location src/dfa.c:3598
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
ifree(mp[i].left);

....
Skipping nonlast:Priority -255
At location src/dfa.c:3598
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
ifree(mp[i].left);

....
Skipping nonlast:Priority -255
At location src/dfa.c:3598
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
ifree(mp[i].left);

....
Skipping nonlast:Priority -255
At location src/dfa.c:3598
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
ifree(mp[i].left);

....
Skipping nonlast:Priority -255
At location src/dfa.c:3598
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
ifree(mp[i].left);

....
Skipping nonlast:Priority -255
At location src/dfa.c:3598
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
ifree(mp[i].left);

....
Skipping nonlast:Priority -255
At location src/dfa.c:3598
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
ifree(mp[i].left);

....
Skipping nonlast addifexit:Priority 4745
At location src/dfa.c:3598
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].left, mp[i].in, mp[i].right, mp[i].is, dfa, dfa, musts, dm, result, exact, mp->in, mp->is, mp->left, mp->right, t, ri)))
    return;
ifree(mp[i].left);

....
Skipping nonlast addifexit:Priority 4745
At location src/dfa.c:3598
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].left, mp[i].in, mp[i].right, mp[i].is, dfa, dfa, musts, dm, result, exact, mp->in, mp->is, mp->left, mp->right, t, ri)))
    break;
ifree(mp[i].left);

....
Skipping nonlast addifexit:Priority 4945
At location src/dfa.c:3598
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].left, mp[i].in, mp[i].right, mp[i].is, dfa, dfa, musts, dm, result, exact, mp->in, mp->is, mp->left, mp->right, t, ri)))
    goto done;
ifree(mp[i].left);

....
Skipping nonlast:Priority -254
At location src/dfa.c:3599
--Src File: src/dfa.c
Fragment 0:
if (!(syntax_bits & ((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return 0;
ifree(mp[i].right);

....
Skipping nonlast:Priority -254
At location src/dfa.c:3599
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    laststart = 0;
    return lasttok = ANYCHAR;
}
ifree(mp[i].right);

....
Skipping nonlast:Priority -254
At location src/dfa.c:3599
--Src File: src/dfa.c
Fragment 0:
if ((__ctype_get_mb_cur_max()) > 1) {
    parse_bracket_exp_mb();
    return lasttok = MBCSET;
}
ifree(mp[i].right);

....
Skipping nonlast:Priority -254
At location src/dfa.c:3599
--Src File: src/dfa.c
Fragment 0:
if (0 != 0)
    dfaerror(0);
else
    return lasttok = END;
ifree(mp[i].right);

....
Skipping nonlast:Priority -254
At location src/dfa.c:3599
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "Unbalanced [", 5) != 0)
    dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
else
    return lasttok = END;
ifree(mp[i].right);

....
Skipping nonlast:Priority -254
At location src/dfa.c:3599
--Src File: src/dfa.c
Fragment 0:
if (dcgettext(((void *)0), "unfinished repeat count", 5) != 0)
    dfaerror(dcgettext(((void *)0), "unfinished repeat count", 5));
else
    return lasttok = END;
ifree(mp[i].right);

....
Skipping nonlast:Priority -254
At location src/dfa.c:3599
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    return 0;
ifree(mp[i].right);

....
Skipping nonlast:Priority -254
At location src/dfa.c:3599
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR)
    return lasttok = BEGLINE;
ifree(mp[i].right);

....
Skipping nonlast:Priority -254
At location src/dfa.c:3599
--Src File: src/dfa.c
Fragment 0:
if (syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n'))
    return lasttok = ENDLINE;
ifree(mp[i].right);

....
Skipping nonlast addifexit:Priority 4746
At location src/dfa.c:3599
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].right, mp[i].left, mp[i].is, mp[i].in, dfa, dfa, musts, dm, result, exact, mp->in, mp->is, mp->left, mp->right, t, ri)))
    return;
ifree(mp[i].right);

....
Skipping nonlast addifexit:Priority 4746
At location src/dfa.c:3599
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].right, mp[i].left, mp[i].is, mp[i].in, dfa, dfa, musts, dm, result, exact, mp->in, mp->is, mp->left, mp->right, t, ri)))
    break;
ifree(mp[i].right);

....
Skipping nonlast addifexit:Priority 4946
At location src/dfa.c:3599
--Src File: src/dfa.c
Fragment 0:
if ((__abst_hole(mp, i, mp[i].right, mp[i].left, mp[i].is, mp[i].in, dfa, dfa, musts, dm, result, exact, mp->in, mp->is, mp->left, mp->right, t, ri)))
    goto done;
ifree(mp[i].right);

....
Total 161890 different repair candidate templates!!!!
Total 172281 different repair candidate!!!
Trying different candidates!
BasicTester pointer: 0x7055df0
CondTester pointer: 0x13f73390
Counter: 1
Batcher Size:0
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:150
--Src File: src/dfa.c
Fragment 0:
if ((!r) && !(__abst_hole(r, n, s)))
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));


CondTester, a patch instance with id 0:
Spawn 1 instances, now Total 1
Counter: 2
Batcher Size:1
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:161
--Src File: src/dfa.c
Fragment 0:
if ((!r) && !(__abst_hole(r, n)))
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));


CondTester, a patch instance with id 1:
Spawn 1 instances, now Total 2
Counter: 3
Batcher Size:2
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:773
--Src File: src/dfa.c
Fragment 0:
if ((syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n')) && !(__abst_hole(lexptr, lexleft, syntax_bits, lasttok, backslash, laststart, c, cur_mb_index, i, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return lasttok = ENDLINE;


CondTester, a patch instance with id 2:
Spawn 1 instances, now Total 3
Counter: 4
Batcher Size:3
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:773
--Src File: src/dfa.c
Fragment 0:
if ((syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & (((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & (((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n')) || (__abst_hole(lexptr, lexleft, syntax_bits, lasttok, backslash, laststart, c, cur_mb_index, i, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return lasttok = ENDLINE;


CondTester, a patch instance with id 3:
Spawn 1 instances, now Total 4
Counter: 5
Batcher Size:4
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1147
--Src File: src/dfa.c
Fragment 0:
{
    if ((t < (1 << 8)) && !(__abst_hole(t, dfa, dfa->tindex, dfa->multibyte_prop, dfa->nmbcsets, dfa->tindex, dfa->multibyte_prop, dfa->nmbcsets, cur_mb_len, cur_mb_index, dfa->nmultibyte_prop, dfa->nmultibyte_prop, dfa->tokens, dfa->talloc, dfa->tokens, dfa->talloc, depth, dfa->nleaves, dfa->nleaves, dfa->depth, dfa->depth, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts)))
        dfa->multibyte_prop[dfa->tindex] = (cur_mb_len == 1) ? 3 : (((cur_mb_index == 1) ? 1 : 0) + ((cur_mb_index == cur_mb_len) ? 2 : 0));
    else
        dfa->multibyte_prop[dfa->tindex] = 3;
}


CondTester, a patch instance with id 4:
Spawn 1 instances, now Total 5
Counter: 6
Batcher Size:5
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1147
--Src File: src/dfa.c
Fragment 0:
{
    if ((t < (1 << 8)) || (__abst_hole(t, dfa, dfa->tindex, dfa->multibyte_prop, dfa->nmbcsets, dfa->tindex, dfa->multibyte_prop, dfa->nmbcsets, cur_mb_len, cur_mb_index, dfa->nmultibyte_prop, dfa->nmultibyte_prop, dfa->tokens, dfa->talloc, dfa->tokens, dfa->talloc, depth, dfa->nleaves, dfa->nleaves, dfa->depth, dfa->depth, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts)))
        dfa->multibyte_prop[dfa->tindex] = (cur_mb_len == 1) ? 3 : (((cur_mb_index == 1) ? 1 : 0) + ((cur_mb_index == cur_mb_len) ? 2 : 0));
    else
        dfa->multibyte_prop[dfa->tindex] = 3;
}


CondTester, a patch instance with id 5:
Spawn 1 instances, now Total 6
Counter: 7
Batcher Size:6
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1145
--Src File: src/dfa.c
Fragment 0:
if ((t == MBCSET) && !(__abst_hole(t, dfa, dfa->tindex, dfa->multibyte_prop, dfa->nmbcsets, dfa->tindex, dfa->multibyte_prop, dfa->nmbcsets, dfa->nmultibyte_prop, dfa->nmultibyte_prop, cur_mb_len, cur_mb_index, dfa->tokens, dfa->talloc, dfa->tokens, dfa->talloc, depth, dfa->nleaves, dfa->nleaves, dfa->depth, dfa->depth, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts)))
    dfa->multibyte_prop[dfa->tindex] = ((dfa->nmbcsets - 1) << 2) + 3;
else if (t < (1 << 8))
    dfa->multibyte_prop[dfa->tindex] = (cur_mb_len == 1) ? 3 : (((cur_mb_index == 1) ? 1 : 0) + ((cur_mb_index == cur_mb_len) ? 2 : 0));
else
    dfa->multibyte_prop[dfa->tindex] = 3;


CondTester, a patch instance with id 6:
Spawn 1 instances, now Total 7
Counter: 8
Batcher Size:7
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1145
--Src File: src/dfa.c
Fragment 0:
if ((t == MBCSET) || (__abst_hole(t, dfa, dfa->tindex, dfa->multibyte_prop, dfa->nmbcsets, dfa->tindex, dfa->multibyte_prop, dfa->nmbcsets, dfa->nmultibyte_prop, dfa->nmultibyte_prop, cur_mb_len, cur_mb_index, dfa->tokens, dfa->talloc, dfa->tokens, dfa->talloc, depth, dfa->nleaves, dfa->nleaves, dfa->depth, dfa->depth, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts)))
    dfa->multibyte_prop[dfa->tindex] = ((dfa->nmbcsets - 1) << 2) + 3;
else if (t < (1 << 8))
    dfa->multibyte_prop[dfa->tindex] = (cur_mb_len == 1) ? 3 : (((cur_mb_index == 1) ? 1 : 0) + ((cur_mb_index == cur_mb_len) ? 2 : 0));
else
    dfa->multibyte_prop[dfa->tindex] = 3;


CondTester, a patch instance with id 7:
Spawn 1 instances, now Total 8
Counter: 9
Batcher Size:8
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1140
--Src File: src/dfa.c
Fragment 0:
if (((__ctype_get_mb_cur_max()) > 1) && !(__abst_hole(dfa, t, cur_mb_len, cur_mb_index, depth))) {
    if ((dfa->tindex) >= (dfa->nmultibyte_prop)) {
        do 
            (dfa->nmultibyte_prop) *= 2;
        while ((dfa->tindex) >= (dfa->nmultibyte_prop));
        ((dfa->multibyte_prop) = xrealloc((ptr_t)(dfa->multibyte_prop), (dfa->nmultibyte_prop) * sizeof(int)));
    }
    ;
    if (t == MBCSET)
        dfa->multibyte_prop[dfa->tindex] = ((dfa->nmbcsets - 1) << 2) + 3;
    else if (t < (1 << 8))
        dfa->multibyte_prop[dfa->tindex] = (cur_mb_len == 1) ? 3 : (((cur_mb_index == 1) ? 1 : 0) + ((cur_mb_index == cur_mb_len) ? 2 : 0));
    else
        dfa->multibyte_prop[dfa->tindex] = 3;
}


CondTester, a patch instance with id 8:
Spawn 1 instances, now Total 9
Counter: 10
Batcher Size:9
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1140
--Src File: src/dfa.c
Fragment 0:
if (((__ctype_get_mb_cur_max()) > 1) || (__abst_hole(dfa, t, cur_mb_len, cur_mb_index, depth))) {
    if ((dfa->tindex) >= (dfa->nmultibyte_prop)) {
        do 
            (dfa->nmultibyte_prop) *= 2;
        while ((dfa->tindex) >= (dfa->nmultibyte_prop));
        ((dfa->multibyte_prop) = xrealloc((ptr_t)(dfa->multibyte_prop), (dfa->nmultibyte_prop) * sizeof(int)));
    }
    ;
    if (t == MBCSET)
        dfa->multibyte_prop[dfa->tindex] = ((dfa->nmbcsets - 1) << 2) + 3;
    else if (t < (1 << 8))
        dfa->multibyte_prop[dfa->tindex] = (cur_mb_len == 1) ? 3 : (((cur_mb_index == 1) ? 1 : 0) + ((cur_mb_index == cur_mb_len) ? 2 : 0));
    else
        dfa->multibyte_prop[dfa->tindex] = 3;
}


CondTester, a patch instance with id 9:
Spawn 1 instances, now Total 10
Counter: 11
Batcher Size:10
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1469
--Src File: src/dfa.c
Fragment 0:
{
    if ((s1->elems[i].index > s2->elems[j].index) && !(__abst_hole(s1, s2, i, j, s1->elems[i].index, s2->elems[j].index, s1->elems, s2->elems, m, s1->nelem, m->elems, m->nelem, s2->nelem, m->elems[m->nelem++].constraint, s1->elems[i].constraint, s2->elems[j].constraint, m->elems[m->nelem++].index)))
        m->elems[m->nelem++] = s1->elems[i++];
    else if (s1->elems[i].index < s2->elems[j].index)
        m->elems[m->nelem++] = s2->elems[j++];
    else {
        m->elems[m->nelem] = s1->elems[i++];
        m->elems[m->nelem++].constraint |= s2->elems[j++].constraint;
    }
}


CondTester, a patch instance with id 10:
Spawn 1 instances, now Total 11
Counter: 12
Batcher Size:11
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1448
--Src File: src/dfa.c
Fragment 0:
if ((lo < count && p.index == s->elems[lo].index) && !(__abst_hole(s, count, lo, s->elems[lo].index, p.index, s->elems, s->elems[lo].constraint, p.constraint, hi, s->nelem)))
    s->elems[lo].constraint |= p.constraint;
else {
    int i;
    for (i = count; i > lo; i--) 
        s->elems[i] = s->elems[i - 1];
    s->elems[lo] = p;
    ++s->nelem;
}


CondTester, a patch instance with id 11:
Spawn 1 instances, now Total 12
Counter: 13
Batcher Size:12
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1448
--Src File: src/dfa.c
Fragment 0:
if ((lo < count && p.index == s->elems[lo].index) || (__abst_hole(s, count, lo, s->elems[lo].index, p.index, s->elems, s->elems[lo].constraint, p.constraint, hi, s->nelem)))
    s->elems[lo].constraint |= p.constraint;
else {
    int i;
    for (i = count; i > lo; i--) 
        s->elems[i] = s->elems[i - 1];
    s->elems[lo] = p;
    ++s->nelem;
}


CondTester, a patch instance with id 12:
Spawn 1 instances, now Total 13
Counter: 14
Batcher Size:13
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1448
--Src File: src/dfa.c
Fragment 0:
if (((lo < count) || (__abst_hole(s, count, lo, s->elems[lo].index, p.index, s->elems, s->elems[lo].constraint, p.constraint, hi, s->nelem))) && p.index == s->elems[lo].index)
    s->elems[lo].constraint |= p.constraint;
else {
    int i;
    for (i = count; i > lo; i--) 
        s->elems[i] = s->elems[i - 1];
    s->elems[lo] = p;
    ++s->nelem;
}


CondTester, a patch instance with id 13:
Spawn 1 instances, now Total 14
Counter: 15
Batcher Size:14
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1142
--Src File: src/dfa.c
Fragment 0:
if (((dfa->tindex) >= (dfa->nmultibyte_prop)) && !(__abst_hole(dfa, dfa->tindex, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->tindex, dfa->nmultibyte_prop, dfa->multibyte_prop, t, dfa->nmbcsets, dfa->nmbcsets, cur_mb_len, cur_mb_index, dfa->tokens, dfa->talloc, dfa->tokens, dfa->talloc, depth, dfa->nleaves, dfa->nleaves, dfa->depth, dfa->depth, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts))) {
    do 
        (dfa->nmultibyte_prop) *= 2;
    while ((dfa->tindex) >= (dfa->nmultibyte_prop));
    ((dfa->multibyte_prop) = xrealloc((ptr_t)(dfa->multibyte_prop), (dfa->nmultibyte_prop) * sizeof(int)));
}


CondTester, a patch instance with id 14:
Spawn 1 instances, now Total 15
Counter: 16
Batcher Size:15
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3387
--Src File: src/dfa.c
Fragment 0:
if ((mp[i].in == ((void *)0) || mp[i].left == ((void *)0) || mp[i].right == ((void *)0) || mp[i].is == ((void *)0)) && !(__abst_hole(mp, i, mp[i].right, mp[i].is, mp[i].in, mp[i].left, dfa, dfa, musts, ri, exact, result, t, mp->is, mp->left, mp->right, mp->in, dm)))
    goto done;


CondTester, a patch instance with id 15:
Spawn 1 instances, now Total 16
Counter: 17
Batcher Size:16
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3387
--Src File: src/dfa.c
Fragment 0:
if ((mp[i].in == ((void *)0) || mp[i].left == ((void *)0) || mp[i].right == ((void *)0) || mp[i].is == ((void *)0)) || (__abst_hole(mp, i, mp[i].right, mp[i].is, mp[i].in, mp[i].left, dfa, dfa, musts, ri, exact, result, t, mp->is, mp->left, mp->right, mp->in, dm)))
    goto done;


CondTester, a patch instance with id 16:
Spawn 1 instances, now Total 17
Counter: 18
Batcher Size:17
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1142
--Src File: src/dfa.c
Fragment 0:
if (((dfa->tindex) >= (dfa->nmultibyte_prop)) || (__abst_hole(dfa, dfa->tindex, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->tindex, dfa->nmultibyte_prop, dfa->multibyte_prop, t, dfa->nmbcsets, dfa->nmbcsets, cur_mb_len, cur_mb_index, dfa->tokens, dfa->talloc, dfa->tokens, dfa->talloc, depth, dfa->nleaves, dfa->nleaves, dfa->depth, dfa->depth, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts))) {
    do 
        (dfa->nmultibyte_prop) *= 2;
    while ((dfa->tindex) >= (dfa->nmultibyte_prop));
    ((dfa->multibyte_prop) = xrealloc((ptr_t)(dfa->multibyte_prop), (dfa->nmultibyte_prop) * sizeof(int)));
}


CondTester, a patch instance with id 17:
Spawn 1 instances, now Total 18
Counter: 19
Batcher Size:18
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3376
--Src File: src/dfa.c
Fragment 0:
if ((musts == ((void *)0)) && !(__abst_hole(musts, dfa, dfa, dfa->tindex, dfa->tindex, mp, exact, result, i, ri, t, dfa->tokens, dfa->tokens, dm, dfa->musts, dfa->musts, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success)))
    return;


CondTester, a patch instance with id 18:
Spawn 1 instances, now Total 19
Counter: 20
Batcher Size:19
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3376
--Src File: src/dfa.c
Fragment 0:
if ((musts == ((void *)0)) || (__abst_hole(musts, dfa, dfa, dfa->tindex, dfa->tindex, mp, exact, result, i, ri, t, dfa->tokens, dfa->tokens, dm, dfa->musts, dfa->musts, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->talloc, dfa->depth, dfa->nleaves, dfa->nregexps, dfa->nmultibyte_prop, dfa->multibyte_prop, dfa->mbcsets, dfa->nmbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success)))
    return;


CondTester, a patch instance with id 19:
Spawn 1 instances, now Total 20
Counter: 21
Batcher Size:20
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if ((case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) && !(__abst_hole(c, case_fold, laststart, lasttok, eolbyte, syntax_bits, invert, c1, c2, hard_LC_COLLATE, lexptr, lexleft, backslash, parens, minrep, maxrep, cur_mb_index, i))) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}


CondTester, a patch instance with id 20:
Spawn 1 instances, now Total 21
Counter: 22
Batcher Size:21
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1442
--Src File: src/dfa.c
Fragment 0:
if ((s->elems[mid].index < p.index) && !(__abst_hole(s, mid, s->elems[mid].index, p.index, s->elems, lo, hi, count, s->nelem, p.constraint, s->elems[mid].constraint)))
    lo = mid + 1;
else
    hi = mid;


CondTester, a patch instance with id 21:
Spawn 1 instances, now Total 22
Counter: 23
Batcher Size:22
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1442
--Src File: src/dfa.c
Fragment 0:
if ((s->elems[mid].index < p.index) || (__abst_hole(s, mid, s->elems[mid].index, p.index, s->elems, lo, hi, count, s->nelem, p.constraint, s->elems[mid].constraint)))
    lo = mid + 1;
else
    hi = mid;


CondTester, a patch instance with id 22:
Spawn 1 instances, now Total 23
Counter: 24
Batcher Size:23
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if ((case_fold && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) || (__abst_hole(c, case_fold, laststart, lasttok, eolbyte, syntax_bits, invert, c1, c2, hard_LC_COLLATE, lexptr, lexleft, backslash, parens, minrep, maxrep, cur_mb_index, i))) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}


CondTester, a patch instance with id 23:
Spawn 1 instances, now Total 24
Counter: 25
Batcher Size:24
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3337
--Src File: src/dfa.c
Fragment 0:
if ((both == ((void *)0)) && !(__abst_hole(both, temp, left, right, lnum, rnum)))
    return ((void *)0);


CondTester, a patch instance with id 24:
Spawn 1 instances, now Total 25
Counter: 26
Batcher Size:25
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3337
--Src File: src/dfa.c
Fragment 0:
if ((both == ((void *)0)) || (__abst_hole(both, temp, left, right, lnum, rnum)))
    return ((void *)0);


CondTester, a patch instance with id 25:
Spawn 1 instances, now Total 26
Counter: 27
Batcher Size:26
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1109
--Src File: src/dfa.c
Fragment 0:
if (((case_fold) || (__abst_hole(c, case_fold, laststart, lasttok, eolbyte, syntax_bits, invert, c1, c2, hard_LC_COLLATE, lexptr, lexleft, backslash, parens, minrep, maxrep, cur_mb_index, i))) && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha)) {
    zeroset(ccl);
    setbit_case_fold(c, ccl);
    return lasttok = CSET + charclass_index(ccl);
}


CondTester, a patch instance with id 26:
Spawn 1 instances, now Total 27
Counter: 28
Batcher Size:27
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3329
--Src File: src/dfa.c
Fragment 0:
if ((temp == ((void *)0)) && !(__abst_hole(temp, left, right, lnum, rnum, both))) {
    freelist(both);
    return ((void *)0);
}


CondTester, a patch instance with id 27:
Spawn 1 instances, now Total 28
Counter: 29
Batcher Size:28
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3329
--Src File: src/dfa.c
Fragment 0:
if ((temp == ((void *)0)) || (__abst_hole(temp, left, right, lnum, rnum, both))) {
    freelist(both);
    return ((void *)0);
}


CondTester, a patch instance with id 28:
Spawn 1 instances, now Total 29
Counter: 30
Batcher Size:29
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3318
--Src File: src/dfa.c
Fragment 0:
if ((left == ((void *)0) || right == ((void *)0)) && !(__abst_hole(left, right, both, lnum, rnum, temp)))
    return ((void *)0);


CondTester, a patch instance with id 29:
Spawn 1 instances, now Total 30
Counter: 31
Batcher Size:30
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3321
--Src File: src/dfa.c
Fragment 0:
if ((both == ((void *)0)) && !(__abst_hole(both, left, right, lnum, rnum, temp)))
    return ((void *)0);


CondTester, a patch instance with id 30:
Spawn 1 instances, now Total 31
Counter: 32
Batcher Size:31
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3321
--Src File: src/dfa.c
Fragment 0:
if ((both == ((void *)0)) || (__abst_hole(both, left, right, lnum, rnum, temp)))
    return ((void *)0);


CondTester, a patch instance with id 31:
Spawn 1 instances, now Total 32
Counter: 33
Batcher Size:32
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3318
--Src File: src/dfa.c
Fragment 0:
if ((left == ((void *)0) || right == ((void *)0)) || (__abst_hole(left, right, both, lnum, rnum, temp)))
    return ((void *)0);


CondTester, a patch instance with id 32:
Spawn 1 instances, now Total 33
Counter: 34
Batcher Size:33
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:161
--Src File: src/dfa.c
Fragment 0:
if ((!r) || (__abst_hole(r, n)))
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));


CondTester, a patch instance with id 33:
Spawn 1 instances, now Total 34
Counter: 35
Batcher Size:34
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:763
--Src File: src/dfa.c
Fragment 0:
if ((syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR) && !(__abst_hole(lasttok, syntax_bits, backslash, lexleft, lexptr, c, cur_mb_index, i, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return lasttok = BEGLINE;


CondTester, a patch instance with id 34:
Spawn 1 instances, now Total 35
Counter: 36
Batcher Size:35
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:763
--Src File: src/dfa.c
Fragment 0:
if ((syntax_bits & (((((unsigned long)1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR) || (__abst_hole(lasttok, syntax_bits, backslash, lexleft, lexptr, c, cur_mb_index, i, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    return lasttok = BEGLINE;


CondTester, a patch instance with id 35:
Spawn 1 instances, now Total 36
Counter: 37
Batcher Size:36
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1411
--Src File: src/dfa.c
Fragment 0:
if ((d->nregexps) && !(__abst_hole(d, d->nregexps, tok, depth, d->depth, syntax_bits_set, cur_mb_len, cur_mb_index, hard_LC_COLLATE, parens, laststart, lasttok, len, lexleft, s, lexptr, dfa, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->nleaves, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    addtok(ORTOP);


CondTester, a patch instance with id 36:
Spawn 1 instances, now Total 37
Counter: 38
Batcher Size:37
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1411
--Src File: src/dfa.c
Fragment 0:
if ((d->nregexps) || (__abst_hole(d, d->nregexps, tok, depth, d->depth, syntax_bits_set, cur_mb_len, cur_mb_index, hard_LC_COLLATE, parens, laststart, lasttok, len, lexleft, s, lexptr, dfa, d->charclasses, d->cindex, d->calloc, d->tokens, d->tindex, d->talloc, d->nleaves, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->follows, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
    addtok(ORTOP);


CondTester, a patch instance with id 37:
Spawn 1 instances, now Total 38
Counter: 39
Batcher Size:38
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3298
--Src File: src/dfa.c
Fragment 0:
if ((old == ((void *)0) || new == ((void *)0)) && !(__abst_hole(old, new, i)))
    return ((void *)0);


CondTester, a patch instance with id 38:
Spawn 1 instances, now Total 39
Counter: 40
Batcher Size:39
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3298
--Src File: src/dfa.c
Fragment 0:
if ((old == ((void *)0) || new == ((void *)0)) || (__abst_hole(old, new, i)))
    return ((void *)0);


CondTester, a patch instance with id 39:
Spawn 1 instances, now Total 40
Counter: 41
Batcher Size:40
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3285
--Src File: src/dfa.c
Fragment 0:
if ((len == 0) && !(__abst_hole(len, cpp, lcp, rcp, i, right, left)))
    continue;


CondTester, a patch instance with id 40:
Spawn 1 instances, now Total 41
Counter: 42
Batcher Size:41
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3285
--Src File: src/dfa.c
Fragment 0:
if ((len == 0) || (__abst_hole(len, cpp, lcp, rcp, i, right, left)))
    continue;


CondTester, a patch instance with id 41:
Spawn 1 instances, now Total 42
Counter: 43
Batcher Size:42
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1405
--Src File: src/dfa.c
Fragment 0:
if ((tok != END) || (__abst_hole(tok, d, depth, syntax_bits_set, cur_mb_len, cur_mb_index, hard_LC_COLLATE, parens, laststart, lasttok, len, lexleft, s, lexptr, dfa)))
    dfaerror(dcgettext(((void *)0), "Unbalanced )", 5));


CondTester, a patch instance with id 42:
Spawn 1 instances, now Total 43
Counter: 44
Batcher Size:43
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3267
--Src File: src/dfa.c
Fragment 0:
if ((left == ((void *)0) || right == ((void *)0)) && !(__abst_hole(left, right, cpp, lcp, len, rcp, i)))
    return ((void *)0);


CondTester, a patch instance with id 43:
Spawn 1 instances, now Total 44
Counter: 45
Batcher Size:44
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3270
--Src File: src/dfa.c
Fragment 0:
if ((cpp == ((void *)0)) && !(__abst_hole(cpp, left, right, lcp, len, rcp, i)))
    return ((void *)0);


CondTester, a patch instance with id 44:
Spawn 1 instances, now Total 45
Counter: 46
Batcher Size:45
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3270
--Src File: src/dfa.c
Fragment 0:
if ((cpp == ((void *)0)) || (__abst_hole(cpp, left, right, lcp, len, rcp, i)))
    return ((void *)0);


CondTester, a patch instance with id 45:
Spawn 1 instances, now Total 46
Counter: 47
Batcher Size:46
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3267
--Src File: src/dfa.c
Fragment 0:
if ((left == ((void *)0) || right == ((void *)0)) || (__abst_hole(left, right, cpp, lcp, len, rcp, i)))
    return ((void *)0);


CondTester, a patch instance with id 46:
Spawn 1 instances, now Total 47
Counter: 48
Batcher Size:47
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1405
--Src File: src/dfa.c
Fragment 0:
if ((tok != END) && !(__abst_hole(tok, d, depth, syntax_bits_set, cur_mb_len, cur_mb_index, hard_LC_COLLATE, parens, laststart, lasttok, len, lexleft, s, lexptr, dfa)))
    dfaerror(dcgettext(((void *)0), "Unbalanced )", 5));


CondTester, a patch instance with id 47:
Spawn 1 instances, now Total 48
Counter: 49
Batcher Size:48
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3221
--Src File: src/dfa.c
Fragment 0:
if (((new = icpyalloc(new)) == ((void *)0)) && !(__abst_hole(new, cpp, len, i, j))) {
    freelist(cpp);
    return ((void *)0);
}


CondTester, a patch instance with id 48:
Spawn 1 instances, now Total 49
Counter: 50
Batcher Size:49
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3249
--Src File: src/dfa.c
Fragment 0:
if ((cpp == ((void *)0)) && !(__abst_hole(cpp, i, new, j, len)))
    return ((void *)0);


CondTester, a patch instance with id 49:
Spawn 1 instances, now Total 50
Counter: 51
Batcher Size:50
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3249
--Src File: src/dfa.c
Fragment 0:
if ((cpp == ((void *)0)) || (__abst_hole(cpp, i, new, j, len)))
    return ((void *)0);


CondTester, a patch instance with id 50:
Spawn 1 instances, now Total 51
Counter: 52
Batcher Size:51
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3221
--Src File: src/dfa.c
Fragment 0:
if (((new = icpyalloc(new)) == ((void *)0)) || (__abst_hole(new, cpp, len, i, j))) {
    freelist(cpp);
    return ((void *)0);
}


CondTester, a patch instance with id 51:
Spawn 1 instances, now Total 52
Counter: 53
Batcher Size:52
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3169
--Src File: src/dfa.c
Fragment 0:
if ((result != ((void *)0) && new != ((void *)0)) && !(__abst_hole(new, result, old, oldsize, newsize)))
    (void)strcpy(result + oldsize, new);


CondTester, a patch instance with id 52:
Spawn 1 instances, now Total 53
Counter: 54
Batcher Size:53
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3205
--Src File: src/dfa.c
Fragment 0:
if ((cpp == ((void *)0)) && !(__abst_hole(cpp, i)))
    return;


CondTester, a patch instance with id 53:
Spawn 1 instances, now Total 54
Counter: 55
Batcher Size:54
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3219
--Src File: src/dfa.c
Fragment 0:
if ((cpp == ((void *)0)) && !(__abst_hole(cpp, new, len, i, j)))
    return ((void *)0);


CondTester, a patch instance with id 54:
Spawn 1 instances, now Total 55
Counter: 56
Batcher Size:55
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3219
--Src File: src/dfa.c
Fragment 0:
if ((cpp == ((void *)0)) || (__abst_hole(cpp, new, len, i, j)))
    return ((void *)0);


CondTester, a patch instance with id 55:
Spawn 1 instances, now Total 56
Counter: 57
Batcher Size:56
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3205
--Src File: src/dfa.c
Fragment 0:
if ((cpp == ((void *)0)) || (__abst_hole(cpp, i)))
    return;


CondTester, a patch instance with id 56:
Spawn 1 instances, now Total 57
Counter: 58
Batcher Size:57
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3169
--Src File: src/dfa.c
Fragment 0:
if ((result != ((void *)0) && new != ((void *)0)) || (__abst_hole(new, result, old, oldsize, newsize)))
    (void)strcpy(result + oldsize, new);


CondTester, a patch instance with id 57:
Spawn 1 instances, now Total 58
Counter: 59
Batcher Size:58
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3196
--Src File: src/dfa.c
Fragment 0:
if ((cp != ((void *)0)) && !(__abst_hole(cp)))
    free(cp);


CondTester, a patch instance with id 58:
Spawn 1 instances, now Total 59
Counter: 60
Batcher Size:59
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3196
--Src File: src/dfa.c
Fragment 0:
if ((cp != ((void *)0)) || (__abst_hole(cp)))
    free(cp);


CondTester, a patch instance with id 59:
Spawn 1 instances, now Total 60
Counter: 61
Batcher Size:60
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3169
--Src File: src/dfa.c
Fragment 0:
if (((result != ((void *)0)) || (__abst_hole(new, result, old, oldsize, newsize))) && new != ((void *)0))
    (void)strcpy(result + oldsize, new);


CondTester, a patch instance with id 60:
Spawn 1 instances, now Total 61
Counter: 62
Batcher Size:61
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:402
--Src File: src/dfa.c
Fragment 0:
{
    if ((cur_mb_len < 1) && !(__abst_hole(cur_mb_len, cur_mb_index, p, len)))
        cur_mb_len = 1;
}


CondTester, a patch instance with id 61:
Spawn 1 instances, now Total 62
Counter: 63
Batcher Size:62
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1389
--Src File: src/dfa.c
Fragment 0:
if (((__ctype_get_mb_cur_max()) > 1) && !(__abst_hole(cur_mb_index, hard_LC_COLLATE, cur_mb_len, parens, laststart, lasttok, len, syntax_bits_set, lexleft, s, lexptr, d, dfa, tok, depth))) {
    cur_mb_index = 0;
    cur_mb_len = 0;
    memset(&mbs, 0, sizeof(mbstate_t));
}


CondTester, a patch instance with id 62:
Spawn 1 instances, now Total 63
Counter: 64
Batcher Size:63
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1389
--Src File: src/dfa.c
Fragment 0:
if (((__ctype_get_mb_cur_max()) > 1) || (__abst_hole(cur_mb_index, hard_LC_COLLATE, cur_mb_len, parens, laststart, lasttok, len, syntax_bits_set, lexleft, s, lexptr, d, dfa, tok, depth))) {
    cur_mb_index = 0;
    cur_mb_len = 0;
    memset(&mbs, 0, sizeof(mbstate_t));
}


CondTester, a patch instance with id 63:
Spawn 1 instances, now Total 64
Counter: 65
Batcher Size:64
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1397
--Src File: src/dfa.c
Fragment 0:
if ((!syntax_bits_set) && !(__abst_hole(syntax_bits_set, tok, d, depth, cur_mb_len, cur_mb_index, hard_LC_COLLATE, parens, laststart, lasttok, len, lexleft, s, lexptr, dfa)))
    dfaerror(dcgettext(((void *)0), "No syntax specified", 5));


CondTester, a patch instance with id 64:
Spawn 1 instances, now Total 65
Counter: 66
Batcher Size:65
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1397
--Src File: src/dfa.c
Fragment 0:
if ((!syntax_bits_set) || (__abst_hole(syntax_bits_set, tok, d, depth, cur_mb_len, cur_mb_index, hard_LC_COLLATE, parens, laststart, lasttok, len, lexleft, s, lexptr, dfa)))
    dfaerror(dcgettext(((void *)0), "No syntax specified", 5));


CondTester, a patch instance with id 65:
Spawn 1 instances, now Total 66
Counter: 67
Batcher Size:66
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3165
--Src File: src/dfa.c
Fragment 0:
if ((old == ((void *)0)) && !(__abst_hole(old, result, oldsize, newsize, new)))
    result = (char *)malloc(newsize + 1);
else
    result = (char *)realloc((void *)old, oldsize + newsize + 1);


CondTester, a patch instance with id 66:
Spawn 1 instances, now Total 67
Counter: 68
Batcher Size:67
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3165
--Src File: src/dfa.c
Fragment 0:
if ((old == ((void *)0)) || (__abst_hole(old, result, oldsize, newsize, new)))
    result = (char *)malloc(newsize + 1);
else
    result = (char *)realloc((void *)old, oldsize + newsize + 1);


CondTester, a patch instance with id 67:
Spawn 1 instances, now Total 68
Counter: 69
Batcher Size:68
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3162
--Src File: src/dfa.c
Fragment 0:
{
    if ((newsize == 0) && !(__abst_hole(newsize, old, oldsize, new, result)))
        return old;
    else
        oldsize = strlen(old);
}


CondTester, a patch instance with id 68:
Spawn 1 instances, now Total 69
Counter: 70
Batcher Size:69
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3162
--Src File: src/dfa.c
Fragment 0:
{
    if ((newsize == 0) || (__abst_hole(newsize, old, oldsize, new, result)))
        return old;
    else
        oldsize = strlen(old);
}


CondTester, a patch instance with id 69:
Spawn 1 instances, now Total 70
Counter: 71
Batcher Size:70
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3160
--Src File: src/dfa.c
Fragment 0:
if ((old == ((void *)0)) && !(__abst_hole(old, new, oldsize, newsize, result)))
    oldsize = 0;
else if (newsize == 0)
    return old;
else
    oldsize = strlen(old);


CondTester, a patch instance with id 70:
Spawn 1 instances, now Total 71
Counter: 72
Batcher Size:71
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3160
--Src File: src/dfa.c
Fragment 0:
if ((old == ((void *)0)) || (__abst_hole(old, new, oldsize, newsize, result)))
    oldsize = 0;
else if (newsize == 0)
    return old;
else
    oldsize = strlen(old);


CondTester, a patch instance with id 71:
Spawn 1 instances, now Total 72
Counter: 73
Batcher Size:72
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2970
--Src File: src/dfa.c
Fragment 0:
if ((case_fold) && !(__abst_hole(case_fold, len, s, d, searchflag))) {
    char *lcopy;
    int i;
    lcopy = malloc(len);
    if (!lcopy)
        dfaerror(dcgettext(((void *)0), "memory exhausted", 5));
    case_fold = 0;
    for (i = 0; i < len; ++i) 
        if (((*__ctype_b_loc())[(int)(((unsigned char)s[i]))] & (unsigned short)_ISupper))
            lcopy[i] = (__extension__ ({
                int __res;
                if (sizeof ((unsigned char)s[i]) > 1) {
                    if (__builtin_constant_p((unsigned char)s[i])) {
                        int __c = ((unsigned char)s[i]);
                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                    } else
                        __res = tolower((unsigned char)s[i]);
                } else
                    __res = (*__ctype_tolower_loc())[(int)((unsigned char)s[i])];
                __res;
            }));
        else
            lcopy[i] = s[i];
    dfainit(d);
    dfaparse(lcopy, len, d);
    free(lcopy);
    dfamust(d);
    d->cindex = d->tindex = d->depth = d->nleaves = d->nregexps = 0;
    case_fold = 1;
    dfaparse(s, len, d);
    dfaanalyze(d, searchflag);
} else {
    dfainit(d);
    dfaparse(s, len, d);
    dfamust(d);
    dfaanalyze(d, searchflag);
}


CondTester, a patch instance with id 72:
Spawn 1 instances, now Total 73
Counter: 74
Batcher Size:73
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2970
--Src File: src/dfa.c
Fragment 0:
if ((case_fold) || (__abst_hole(case_fold, len, s, d, searchflag))) {
    char *lcopy;
    int i;
    lcopy = malloc(len);
    if (!lcopy)
        dfaerror(dcgettext(((void *)0), "memory exhausted", 5));
    case_fold = 0;
    for (i = 0; i < len; ++i) 
        if (((*__ctype_b_loc())[(int)(((unsigned char)s[i]))] & (unsigned short)_ISupper))
            lcopy[i] = (__extension__ ({
                int __res;
                if (sizeof ((unsigned char)s[i]) > 1) {
                    if (__builtin_constant_p((unsigned char)s[i])) {
                        int __c = ((unsigned char)s[i]);
                        __res = __c < -128 || __c > 255 ? __c : (*__ctype_tolower_loc())[__c];
                    } else
                        __res = tolower((unsigned char)s[i]);
                } else
                    __res = (*__ctype_tolower_loc())[(int)((unsigned char)s[i])];
                __res;
            }));
        else
            lcopy[i] = s[i];
    dfainit(d);
    dfaparse(lcopy, len, d);
    free(lcopy);
    dfamust(d);
    d->cindex = d->tindex = d->depth = d->nleaves = d->nregexps = 0;
    case_fold = 1;
    dfaparse(s, len, d);
    dfaanalyze(d, searchflag);
} else {
    dfainit(d);
    dfaparse(s, len, d);
    dfamust(d);
    dfaanalyze(d, searchflag);
}


CondTester, a patch instance with id 73:
Spawn 1 instances, now Total 74
Counter: 75
Batcher Size:74
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:402
--Src File: src/dfa.c
Fragment 0:
{
    if ((cur_mb_len < 1) || (__abst_hole(cur_mb_len, cur_mb_index, p, len)))
        cur_mb_len = 1;
}


CondTester, a patch instance with id 74:
Spawn 1 instances, now Total 75
Counter: 76
Batcher Size:75
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:961
--Src File: src/dfa.c
Fragment 0:
if ((parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && !(__abst_hole(syntax_bits, parens, backslash, laststart, lasttok, eolbyte, c, c2, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    goto normal_char;


CondTester, a patch instance with id 75:
Spawn 1 instances, now Total 76
Counter: 77
Batcher Size:76
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2950
--Src File: src/dfa.c
Fragment 0:
if (((__ctype_get_mb_cur_max()) > 1) && !(__abst_hole(d))) {
    d->nmultibyte_prop = 1;
    ((d->multibyte_prop) = xmalloc((d->nmultibyte_prop) * sizeof(int)));
    d->nmbcsets = 0;
    d->mbcsets_alloc = 1;
    ((d->mbcsets) = xmalloc((d->mbcsets_alloc) * sizeof(struct mb_char_classes)));
}


CondTester, a patch instance with id 76:
Spawn 1 instances, now Total 77
Counter: 78
Batcher Size:77
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:2950
--Src File: src/dfa.c
Fragment 0:
if (((__ctype_get_mb_cur_max()) > 1) || (__abst_hole(d))) {
    d->nmultibyte_prop = 1;
    ((d->multibyte_prop) = xmalloc((d->nmultibyte_prop) * sizeof(int)));
    d->nmbcsets = 0;
    d->mbcsets_alloc = 1;
    ((d->mbcsets) = xmalloc((d->mbcsets_alloc) * sizeof(struct mb_char_classes)));
}


CondTester, a patch instance with id 77:
Spawn 1 instances, now Total 78
Counter: 79
Batcher Size:78
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:961
--Src File: src/dfa.c
Fragment 0:
if ((parens == 0 && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) || (__abst_hole(syntax_bits, parens, backslash, laststart, lasttok, eolbyte, c, c2, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    goto normal_char;


CondTester, a patch instance with id 78:
Spawn 1 instances, now Total 79
Counter: 80
Batcher Size:79
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:961
--Src File: src/dfa.c
Fragment 0:
if (((parens == 0) || (__abst_hole(syntax_bits, parens, backslash, laststart, lasttok, eolbyte, c, c2, lexptr, lexleft, minrep, maxrep, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i))) && syntax_bits & (((((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    goto normal_char;


CondTester, a patch instance with id 79:
Spawn 1 instances, now Total 80
Counter: 81
Batcher Size:80
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:398
--Src File: src/dfa.c
Fragment 0:
if ((cur_mb_len > 1) && !(__abst_hole(cur_mb_len, p, len, cur_mb_index, mbs.__count)))
    cur_mb_index = 1;
else if (cur_mb_len < 1)
    cur_mb_len = 1;


CondTester, a patch instance with id 80:
Spawn 1 instances, now Total 81
Counter: 82
Batcher Size:81
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:398
--Src File: src/dfa.c
Fragment 0:
if ((cur_mb_len > 1) || (__abst_hole(cur_mb_len, p, len, cur_mb_index, mbs.__count)))
    cur_mb_index = 1;
else if (cur_mb_len < 1)
    cur_mb_len = 1;


CondTester, a patch instance with id 81:
Spawn 1 instances, now Total 82
Counter: 83
Batcher Size:82
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:395
--Src File: src/dfa.c
Fragment 0:
if ((!cur_mb_index) && !(__abst_hole(cur_mb_index, p, len, cur_mb_len))) {
    cur_mb_len = mbrlen(p, len, &mbs);
    if (cur_mb_len > 1)
        cur_mb_index = 1;
    else if (cur_mb_len < 1)
        cur_mb_len = 1;
}


CondTester, a patch instance with id 82:
Spawn 1 instances, now Total 83
Counter: 84
Batcher Size:83
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:395
--Src File: src/dfa.c
Fragment 0:
if ((!cur_mb_index) || (__abst_hole(cur_mb_index, p, len, cur_mb_len))) {
    cur_mb_len = mbrlen(p, len, &mbs);
    if (cur_mb_len > 1)
        cur_mb_index = 1;
    else if (cur_mb_len < 1)
        cur_mb_len = 1;
}


CondTester, a patch instance with id 83:
Spawn 1 instances, now Total 84
Counter: 85
Batcher Size:84
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1868
--Src File: src/dfa.c
Fragment 0:
{
    if ((d->tokens[i] < (1 << 8) || d->tokens[i] == BACKREF || d->tokens[i] == ANYCHAR || d->tokens[i] == MBCSET || d->tokens[i] >= CSET) && !(__abst_hole(d, i, d->tokens, d->tindex, d->follows, nfirstpos, firstpos, wants_newline, nalloc, d->salloc, d->sindex, d->states, lastpos, o_nullable, nlastpos, o_nfirst, o_firstpos, o_nlast, nullable, o_lastpos, j, pos, d->nleaves, d->depth, searchflag, d->searchflag, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts))) {
        copy(&d->follows[i], &merged);
        epsclosure(&merged, d);
        if (d->follows[i].nelem < merged.nelem)
            ((d->follows[i].elems) = xrealloc((ptr_t)(d->follows[i].elems), (merged.nelem) * sizeof(position)));
        copy(&merged, &d->follows[i]);
    }
}


CondTester, a patch instance with id 84:
Spawn 1 instances, now Total 85
Counter: 86
Batcher Size:85
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:150
--Src File: src/dfa.c
Fragment 0:
if ((!r) || (__abst_hole(r, n, s)))
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));


CondTester, a patch instance with id 85:
Spawn 1 instances, now Total 86
Counter: 87
Batcher Size:86
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:172
--Src File: src/dfa.c
Fragment 0:
if ((!r) && !(__abst_hole(r, p, n)))
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));


CondTester, a patch instance with id 86:
Spawn 1 instances, now Total 87
Counter: 88
Batcher Size:87
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:743
--Src File: src/dfa.c
Fragment 0:
if (((__ctype_get_mb_cur_max()) > 1 && cur_mb_index) && !(__abst_hole(cur_mb_index, c, lexptr, lexleft, lasttok, i, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    goto normal_char;


CondTester, a patch instance with id 87:
Spawn 1 instances, now Total 88
Counter: 89
Batcher Size:88
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:743
--Src File: src/dfa.c
Fragment 0:
if (((__ctype_get_mb_cur_max()) > 1 && cur_mb_index) || (__abst_hole(cur_mb_index, c, lexptr, lexleft, lasttok, i, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    goto normal_char;


CondTester, a patch instance with id 88:
Spawn 1 instances, now Total 89
Counter: 90
Batcher Size:89
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1366
--Src File: src/dfa.c
Fragment 0:
if ((toplevel) && !(__abst_hole(toplevel, tok)))
    addtok(ORTOP);
else
    addtok(OR);


CondTester, a patch instance with id 89:
Spawn 1 instances, now Total 90
Counter: 91
Batcher Size:90
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1366
--Src File: src/dfa.c
Fragment 0:
if ((toplevel) || (__abst_hole(toplevel, tok)))
    addtok(ORTOP);
else
    addtok(OR);


CondTester, a patch instance with id 90:
Spawn 1 instances, now Total 91
Counter: 92
Batcher Size:91
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:743
--Src File: src/dfa.c
Fragment 0:
if ((((__ctype_get_mb_cur_max()) > 1) || (__abst_hole(cur_mb_index, c, lexptr, lexleft, lasttok, i, backslash, syntax_bits, laststart, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold))) && cur_mb_index)
    goto normal_char;


CondTester, a patch instance with id 91:
Spawn 1 instances, now Total 92
Counter: 93
Batcher Size:92
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:172
--Src File: src/dfa.c
Fragment 0:
if ((!r) || (__abst_hole(r, p, n)))
    dfaerror(dcgettext(((void *)0), "Memory exhausted", 5));


CondTester, a patch instance with id 92:
Spawn 1 instances, now Total 93
Counter: 94
Batcher Size:93
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1319
--Src File: src/dfa.c
Fragment 0:
{
    if ((tok == REPMN) || (__abst_hole(tok, ntokens, dfa, tindex, maxrep, minrep, i))) {
        ntokens = nsubtoks(dfa->tindex);
        tindex = dfa->tindex - ntokens;
        if (maxrep < 0)
            addtok(PLUS);
        if (minrep == 0)
            addtok(QMARK);
        for (i = 1; i < minrep; ++i) {
            copytoks(tindex, ntokens);
            addtok(CAT);
        }
        for (; i < maxrep; ++i) {
            copytoks(tindex, ntokens);
            addtok(QMARK);
            addtok(CAT);
        }
        tok = lex();
    } else {
        addtok(tok);
        tok = lex();
    }
}


CondTester, a patch instance with id 93:
Spawn 1 instances, now Total 94
Counter: 95
Batcher Size:94
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1272
--Src File: src/dfa.c
Fragment 0:
if ((tok != RPAREN) && !(__abst_hole(tok, cur_mb_index)))
    dfaerror(dcgettext(((void *)0), "Unbalanced (", 5));


CondTester, a patch instance with id 94:
Spawn 1 instances, now Total 95
Counter: 96
Batcher Size:95
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1272
--Src File: src/dfa.c
Fragment 0:
if ((tok != RPAREN) || (__abst_hole(tok, cur_mb_index)))
    dfaerror(dcgettext(((void *)0), "Unbalanced (", 5));


CondTester, a patch instance with id 95:
Spawn 1 instances, now Total 96
Counter: 97
Batcher Size:96
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1268
--Src File: src/dfa.c
Fragment 0:
{
    if ((tok == LPAREN) && !(__abst_hole(tok, cur_mb_index))) {
        tok = lex();
        regexp(0);
        if (tok != RPAREN)
            dfaerror(dcgettext(((void *)0), "Unbalanced (", 5));
        tok = lex();
    } else
        addtok(EMPTY);
}


CondTester, a patch instance with id 96:
Spawn 1 instances, now Total 97
Counter: 98
Batcher Size:97
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1268
--Src File: src/dfa.c
Fragment 0:
{
    if ((tok == LPAREN) || (__abst_hole(tok, cur_mb_index))) {
        tok = lex();
        regexp(0);
        if (tok != RPAREN)
            dfaerror(dcgettext(((void *)0), "Unbalanced (", 5));
        tok = lex();
    } else
        addtok(EMPTY);
}


CondTester, a patch instance with id 97:
Spawn 1 instances, now Total 98
Counter: 99
Batcher Size:98
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1224
--Src File: src/dfa.c
Fragment 0:
if (((tok >= 0 && tok < (1 << 8)) || tok >= CSET || tok == BACKREF || tok == BEGLINE || tok == ENDLINE || tok == BEGWORD || tok == ANYCHAR || tok == MBCSET || tok == ENDWORD || tok == LIMWORD || tok == NOTLIMWORD) || (__abst_hole(tok, cur_mb_index))) {
    addtok(tok);
    tok = lex();
    if ((__ctype_get_mb_cur_max()) > 1) {
        while (cur_mb_index > 1 && tok >= 0 && tok < (1 << 8))
            {
                addtok(tok);
                addtok(CAT);
                tok = lex();
            }
    }
} else if (tok == CRANGE) {
    charclass ccl;
    zeroset(ccl);
    notset(ccl);
    addtok(CSET + charclass_index(ccl));
    addtok(BACKREF);
    addtok(CAT);
    tok = lex();
} else if (tok == LPAREN) {
    tok = lex();
    regexp(0);
    if (tok != RPAREN)
        dfaerror(dcgettext(((void *)0), "Unbalanced (", 5));
    tok = lex();
} else
    addtok(EMPTY);


CondTester, a patch instance with id 98:
Spawn 1 instances, now Total 99
Counter: 100
Batcher Size:99
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1252
--Src File: src/dfa.c
Fragment 0:
{
    if ((tok == CRANGE) && !(__abst_hole(tok, cur_mb_index))) {
        charclass ccl;
        zeroset(ccl);
        notset(ccl);
        addtok(CSET + charclass_index(ccl));
        addtok(BACKREF);
        addtok(CAT);
        tok = lex();
    } else if (tok == LPAREN) {
        tok = lex();
        regexp(0);
        if (tok != RPAREN)
            dfaerror(dcgettext(((void *)0), "Unbalanced (", 5));
        tok = lex();
    } else
        addtok(EMPTY);
}


CondTester, a patch instance with id 99:
Spawn 1 instances, now Total 100
Counter: 101
Batcher Size:100
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1252
--Src File: src/dfa.c
Fragment 0:
{
    if ((tok == CRANGE) || (__abst_hole(tok, cur_mb_index))) {
        charclass ccl;
        zeroset(ccl);
        notset(ccl);
        addtok(CSET + charclass_index(ccl));
        addtok(BACKREF);
        addtok(CAT);
        tok = lex();
    } else if (tok == LPAREN) {
        tok = lex();
        regexp(0);
        if (tok != RPAREN)
            dfaerror(dcgettext(((void *)0), "Unbalanced (", 5));
        tok = lex();
    } else
        addtok(EMPTY);
}


CondTester, a patch instance with id 100:
Spawn 1 instances, now Total 101
Counter: 102
Batcher Size:101
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1224
--Src File: src/dfa.c
Fragment 0:
if (((tok >= 0 && tok < (1 << 8)) || tok >= CSET || tok == BACKREF || tok == BEGLINE || tok == ENDLINE || tok == BEGWORD || tok == ANYCHAR || tok == MBCSET || tok == ENDWORD || tok == LIMWORD || tok == NOTLIMWORD) && !(__abst_hole(tok, cur_mb_index))) {
    addtok(tok);
    tok = lex();
    if ((__ctype_get_mb_cur_max()) > 1) {
        while (cur_mb_index > 1 && tok >= 0 && tok < (1 << 8))
            {
                addtok(tok);
                addtok(CAT);
                tok = lex();
            }
    }
} else if (tok == CRANGE) {
    charclass ccl;
    zeroset(ccl);
    notset(ccl);
    addtok(CSET + charclass_index(ccl));
    addtok(BACKREF);
    addtok(CAT);
    tok = lex();
} else if (tok == LPAREN) {
    tok = lex();
    regexp(0);
    if (tok != RPAREN)
        dfaerror(dcgettext(((void *)0), "Unbalanced (", 5));
    tok = lex();
} else
    addtok(EMPTY);


CondTester, a patch instance with id 101:
Spawn 1 instances, now Total 102
Counter: 103
Batcher Size:102
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1792
--Src File: src/dfa.c
Fragment 0:
if ((nullable[-1]) && !(__abst_hole(nullable, nlastpos, nfirstpos, lastpos, pos, firstpos, j, d, nalloc, i, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline)))
    nlastpos[-2] += nlastpos[-1];
else {
    pos = lastpos + nlastpos[-2];
    for (j = nlastpos[-1] - 1; j >= 0; --j) 
        pos[j] = lastpos[j];
    lastpos += nlastpos[-2];
    nlastpos[-2] = nlastpos[-1];
}


CondTester, a patch instance with id 102:
Spawn 1 instances, now Total 103
Counter: 104
Batcher Size:103
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1792
--Src File: src/dfa.c
Fragment 0:
if ((nullable[-1]) || (__abst_hole(nullable, nlastpos, nfirstpos, lastpos, pos, firstpos, j, d, nalloc, i, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline)))
    nlastpos[-2] += nlastpos[-1];
else {
    pos = lastpos + nlastpos[-2];
    for (j = nlastpos[-1] - 1; j >= 0; --j) 
        pos[j] = lastpos[j];
    lastpos += nlastpos[-2];
    nlastpos[-2] = nlastpos[-1];
}


CondTester, a patch instance with id 103:
Spawn 1 instances, now Total 104
Counter: 105
Batcher Size:104
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:388
--Src File: src/dfa.c
Fragment 0:
if ((cur_mb_index) && !(__abst_hole(cur_mb_index, cur_mb_len, p, len)))
    cur_mb_index = (cur_mb_index >= cur_mb_len) ? 0 : cur_mb_index + 1;


CondTester, a patch instance with id 104:
Spawn 1 instances, now Total 105
Counter: 106
Batcher Size:105
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:388
--Src File: src/dfa.c
Fragment 0:
if ((cur_mb_index) || (__abst_hole(cur_mb_index, cur_mb_len, p, len)))
    cur_mb_index = (cur_mb_index >= cur_mb_len) ? 0 : cur_mb_index + 1;


CondTester, a patch instance with id 105:
Spawn 1 instances, now Total 106
Counter: 107
Batcher Size:106
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:938
--Src File: src/dfa.c
Fragment 0:
if ((backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0)) && !(__abst_hole(backslash, syntax_bits, laststart, lasttok, c, lexptr, lexleft, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    goto normal_char;


CondTester, a patch instance with id 106:
Spawn 1 instances, now Total 107
Counter: 108
Batcher Size:107
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1582
--Src File: src/dfa.c
Fragment 0:
{
    if ((d->tokens[s->elems[i].index] >= (1 << 8) && d->tokens[s->elems[i].index] != BACKREF && d->tokens[s->elems[i].index] != ANYCHAR && d->tokens[s->elems[i].index] != MBCSET && d->tokens[s->elems[i].index] < CSET) && !(__abst_hole(s, d, i, s->elems[i].index, s->elems, d->tokens, visited, s->nelem, d->tindex, j, d->follows, s->elems[i].constraint, d->charclasses, d->cindex, d->calloc, d->talloc, d->depth, d->nleaves, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->states, d->sindex, d->salloc, d->searchflag, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts))) {
        old = s->elems[i];
        p.constraint = old.constraint;
        delete(s->elems[i], s);
        if (visited[old.index]) {
            --i;
            continue;
        }
        visited[old.index] = 1;
        switch (d->tokens[old.index]) {
          case BEGLINE:
            p.constraint &= 207;
            break;
          case ENDLINE:
            p.constraint &= 175;
            break;
          case BEGWORD:
            p.constraint &= 242;
            break;
          case ENDWORD:
            p.constraint &= 244;
            break;
          case LIMWORD:
            p.constraint &= 246;
            break;
          case NOTLIMWORD:
            p.constraint &= 249;
            break;
          default:
            break;
        }
        for (j = 0; j < d->follows[old.index].nelem; ++j) {
            p.index = d->follows[old.index].elems[j].index;
            insert(p, s);
        }
        i = -1;
    }
}


CondTester, a patch instance with id 107:
Spawn 1 instances, now Total 108
Counter: 109
Batcher Size:108
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:938
--Src File: src/dfa.c
Fragment 0:
if ((backslash != ((syntax_bits & (((((((((((((((((unsigned long)1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0)) || (__abst_hole(backslash, syntax_bits, laststart, lasttok, c, lexptr, lexleft, minrep, maxrep, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold, cur_mb_index, i)))
    goto normal_char;


CondTester, a patch instance with id 108:
Spawn 1 instances, now Total 109
Counter: 110
Batcher Size:109
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3566
--Src File: src/dfa.c
Fragment 0:
if ((mp->in == ((void *)0)) && !(__abst_hole(mp, mp->in, mp->is, mp->left, mp->right, t, result, dm, exact, dfa, dfa, musts, i, ri)))
    goto done;


CondTester, a patch instance with id 109:
Spawn 1 instances, now Total 110
Counter: 111
Batcher Size:110
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3566
--Src File: src/dfa.c
Fragment 0:
if ((mp->in == ((void *)0)) || (__abst_hole(mp, mp->in, mp->is, mp->left, mp->right, t, result, dm, exact, dfa, dfa, musts, i, ri)))
    goto done;


CondTester, a patch instance with id 110:
Spawn 1 instances, now Total 111
Counter: 112
Batcher Size:111
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3549
--Src File: src/dfa.c
Fragment 0:
{
    if ((t >= CSET || t == ANYCHAR || t == MBCSET) && !(__abst_hole(t, mp, result, dm, exact, dfa, dfa, musts, i, ri))) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
}


CondTester, a patch instance with id 111:
Spawn 1 instances, now Total 112
Counter: 113
Batcher Size:112
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3549
--Src File: src/dfa.c
Fragment 0:
{
    if ((t >= CSET || t == ANYCHAR || t == MBCSET) || (__abst_hole(t, mp, result, dm, exact, dfa, dfa, musts, i, ri))) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
}


CondTester, a patch instance with id 112:
Spawn 1 instances, now Total 113
Counter: 114
Batcher Size:113
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3544
--Src File: src/dfa.c
Fragment 0:
{
    if ((t == '\x00') || (__abst_hole(t, mp, result, dm, exact, dfa, dfa, musts, i, ri))) {
        goto done;
    } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
}


CondTester, a patch instance with id 113:
Spawn 1 instances, now Total 114
Counter: 115
Batcher Size:114
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3539
--Src File: src/dfa.c
Fragment 0:
{
    if ((t < END) || (__abst_hole(t, mp, result, dm, exact, dfa, dfa, musts, i, ri))) {
        goto done;
    } else if (t == '\x00') {
        goto done;
    } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
}


CondTester, a patch instance with id 114:
Spawn 1 instances, now Total 115
Counter: 116
Batcher Size:115
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3544
--Src File: src/dfa.c
Fragment 0:
{
    if ((t == '\x00') && !(__abst_hole(t, mp, result, dm, exact, dfa, dfa, musts, i, ri))) {
        goto done;
    } else if (t >= CSET || t == ANYCHAR || t == MBCSET) {
        resetmust(mp);
    } else {
        resetmust(mp);
        mp->is[0] = mp->left[0] = mp->right[0] = t;
        mp->is[1] = mp->left[1] = mp->right[1] = '\x00';
        mp->in = enlist(mp->in, mp->is, (size_t)1);
        if (mp->in == ((void *)0))
            goto done;
    }
}


CondTester, a patch instance with id 115:
Spawn 1 instances, now Total 116
Counter: 117
Batcher Size:116
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1241
--Src File: src/dfa.c
Fragment 0:
if (((__ctype_get_mb_cur_max()) > 1) && !(__abst_hole(cur_mb_index, tok))) {
    while (cur_mb_index > 1 && tok >= 0 && tok < (1 << 8))
        {
            addtok(tok);
            addtok(CAT);
            tok = lex();
        }
}


CondTester, a patch instance with id 116:
Spawn 1 instances, now Total 117
Counter: 118
Batcher Size:117
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1241
--Src File: src/dfa.c
Fragment 0:
if (((__ctype_get_mb_cur_max()) > 1) || (__abst_hole(cur_mb_index, tok))) {
    while (cur_mb_index > 1 && tok >= 0 && tok < (1 << 8))
        {
            addtok(tok);
            addtok(CAT);
            tok = lex();
        }
}


CondTester, a patch instance with id 117:
Spawn 1 instances, now Total 118
Counter: 119
Batcher Size:118
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1784
--Src File: src/dfa.c
Fragment 0:
if ((nullable[-2]) && !(__abst_hole(nullable, nfirstpos, firstpos, d, j, pos, nalloc, nlastpos, lastpos, i, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline)))
    nfirstpos[-2] += nfirstpos[-1];
else
    firstpos += nfirstpos[-1];


CondTester, a patch instance with id 118:
Spawn 1 instances, now Total 119
Counter: 120
Batcher Size:119
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1784
--Src File: src/dfa.c
Fragment 0:
if ((nullable[-2]) || (__abst_hole(nullable, nfirstpos, firstpos, d, j, pos, nalloc, nlastpos, lastpos, i, o_lastpos, o_nlast, o_firstpos, o_nfirst, o_nullable, searchflag, wants_newline)))
    nfirstpos[-2] += nfirstpos[-1];
else
    firstpos += nfirstpos[-1];


CondTester, a patch instance with id 119:
Spawn 1 instances, now Total 120
Counter: 121
Batcher Size:120
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3528
--Src File: src/dfa.c
Fragment 0:
if ((lmp->is[0] != '\x00' && rmp->is[0] != '\x00') && !(__abst_hole(lmp, rmp, rmp->is, lmp->is, lmp->right, rmp->right, lmp->left, t, rmp->left, lmp->in, mp, rmp->in, musts, exact, result, i, dm, dfa, dfa, ri))) {
    lmp->is = icatalloc(lmp->is, rmp->is);
    if (lmp->is == ((void *)0))
        goto done;
} else
    lmp->is[0] = '\x00';


CondTester, a patch instance with id 120:
Spawn 1 instances, now Total 121
Counter: 122
Batcher Size:121
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3528
--Src File: src/dfa.c
Fragment 0:
if ((lmp->is[0] != '\x00' && rmp->is[0] != '\x00') || (__abst_hole(lmp, rmp, rmp->is, lmp->is, lmp->right, rmp->right, lmp->left, t, rmp->left, lmp->in, mp, rmp->in, musts, exact, result, i, dm, dfa, dfa, ri))) {
    lmp->is = icatalloc(lmp->is, rmp->is);
    if (lmp->is == ((void *)0))
        goto done;
} else
    lmp->is[0] = '\x00';


CondTester, a patch instance with id 121:
Spawn 1 instances, now Total 122
Counter: 123
Batcher Size:122
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3528
--Src File: src/dfa.c
Fragment 0:
if (((lmp->is[0] != '\x00') || (__abst_hole(lmp, rmp, rmp->is, lmp->is, lmp->right, rmp->right, lmp->left, t, rmp->left, lmp->in, mp, rmp->in, musts, exact, result, i, dm, dfa, dfa, ri))) && rmp->is[0] != '\x00') {
    lmp->is = icatalloc(lmp->is, rmp->is);
    if (lmp->is == ((void *)0))
        goto done;
} else
    lmp->is[0] = '\x00';


CondTester, a patch instance with id 122:
Spawn 1 instances, now Total 123
Counter: 124
Batcher Size:123
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3522
--Src File: src/dfa.c
Fragment 0:
if ((rmp->is[0] == '\x00') && !(__abst_hole(rmp, rmp->is, lmp, lmp->right, rmp->right, lmp->left, rmp->left, lmp->is, lmp->in, t, rmp->in, mp, musts, exact, result, i, dm, dfa, dfa, ri)))
    lmp->right[0] = '\x00';


CondTester, a patch instance with id 123:
Spawn 1 instances, now Total 124
Counter: 125
Batcher Size:124
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3525
--Src File: src/dfa.c
Fragment 0:
if ((lmp->right == ((void *)0)) && !(__abst_hole(lmp, lmp->right, rmp, rmp->right, rmp->is, lmp->is, lmp->left, rmp->left, t, lmp->in, mp, rmp->in, musts, exact, result, i, dm, dfa, dfa, ri)))
    goto done;


CondTester, a patch instance with id 124:
Spawn 1 instances, now Total 125
Counter: 126
Batcher Size:125
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3525
--Src File: src/dfa.c
Fragment 0:
if ((lmp->right == ((void *)0)) || (__abst_hole(lmp, lmp->right, rmp, rmp->right, rmp->is, lmp->is, lmp->left, rmp->left, t, lmp->in, mp, rmp->in, musts, exact, result, i, dm, dfa, dfa, ri)))
    goto done;


CondTester, a patch instance with id 125:
Spawn 1 instances, now Total 126
Counter: 127
Batcher Size:126
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3522
--Src File: src/dfa.c
Fragment 0:
if ((rmp->is[0] == '\x00') || (__abst_hole(rmp, rmp->is, lmp, lmp->right, rmp->right, lmp->left, rmp->left, lmp->is, lmp->in, t, rmp->in, mp, musts, exact, result, i, dm, dfa, dfa, ri)))
    lmp->right[0] = '\x00';


CondTester, a patch instance with id 126:
Spawn 1 instances, now Total 127
Counter: 128
Batcher Size:127
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1593
--Src File: src/dfa.c
Fragment 0:
if ((visited[old.index]) && !(__abst_hole(visited, old.index, s, i, s->elems, old.constraint, d, s->elems[i].index, s->nelem, j, s->elems[i].constraint))) {
    --i;
    continue;
}


CondTester, a patch instance with id 127:
Spawn 1 instances, now Total 128
Counter: 129
Batcher Size:128
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3494
--Src File: src/dfa.c
Fragment 0:
if ((lmp->in == ((void *)0)) && !(__abst_hole(lmp, lmp->in, rmp, rmp->in, lmp->right, rmp->left, mp, musts, exact, result, i, lmp->is, lmp->left, rmp->is, rmp->right, t, dfa, ri, dfa, dm)))
    goto done;


CondTester, a patch instance with id 128:
Spawn 1 instances, now Total 129
Counter: 130
Batcher Size:129
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3514
--Src File: src/dfa.c
Fragment 0:
if ((lmp->is[0] != '\x00') && !(__abst_hole(lmp, lmp->is, lmp->left, rmp, lmp->in, lmp->right, mp, t, musts, exact, result, i, dm, dfa, dfa, ri))) {
    lmp->left = icatalloc(lmp->left, rmp->left);
    if (lmp->left == ((void *)0))
        goto done;
}


CondTester, a patch instance with id 129:
Spawn 1 instances, now Total 130
Counter: 131
Batcher Size:130
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3514
--Src File: src/dfa.c
Fragment 0:
if ((lmp->is[0] != '\x00') || (__abst_hole(lmp, lmp->is, lmp->left, rmp, lmp->in, lmp->right, mp, t, musts, exact, result, i, dm, dfa, dfa, ri))) {
    lmp->left = icatalloc(lmp->left, rmp->left);
    if (lmp->left == ((void *)0))
        goto done;
}


CondTester, a patch instance with id 130:
Spawn 1 instances, now Total 131
Counter: 132
Batcher Size:131
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3494
--Src File: src/dfa.c
Fragment 0:
if ((lmp->in == ((void *)0)) || (__abst_hole(lmp, lmp->in, rmp, rmp->in, lmp->right, rmp->left, mp, musts, exact, result, i, lmp->is, lmp->left, rmp->is, rmp->right, t, dfa, ri, dfa, dm)))
    goto done;


CondTester, a patch instance with id 131:
Spawn 1 instances, now Total 132
Counter: 133
Batcher Size:132
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3496
--Src File: src/dfa.c
Fragment 0:
if ((lmp->right[0] != '\x00' && rmp->left[0] != '\x00') && !(__abst_hole(rmp, rmp->left, lmp, lmp->right, lmp->in, rmp->in, mp, musts, lmp->is, exact, result, lmp->left, i, rmp->is, rmp->right, t, dm, dfa, ri, dfa))) {
    char *tp;
    tp = icpyalloc(lmp->right);
    if (tp == ((void *)0))
        goto done;
    tp = icatalloc(tp, rmp->left);
    if (tp == ((void *)0))
        goto done;
    lmp->in = enlist(lmp->in, tp, strlen(tp));
    free(tp);
    if (lmp->in == ((void *)0))
        goto done;
}


CondTester, a patch instance with id 132:
Spawn 1 instances, now Total 133
Counter: 134
Batcher Size:133
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3496
--Src File: src/dfa.c
Fragment 0:
if ((lmp->right[0] != '\x00' && rmp->left[0] != '\x00') || (__abst_hole(rmp, rmp->left, lmp, lmp->right, lmp->in, rmp->in, mp, musts, lmp->is, exact, result, lmp->left, i, rmp->is, rmp->right, t, dm, dfa, ri, dfa))) {
    char *tp;
    tp = icpyalloc(lmp->right);
    if (tp == ((void *)0))
        goto done;
    tp = icatalloc(tp, rmp->left);
    if (tp == ((void *)0))
        goto done;
    lmp->in = enlist(lmp->in, tp, strlen(tp));
    free(tp);
    if (lmp->in == ((void *)0))
        goto done;
}


CondTester, a patch instance with id 133:
Spawn 1 instances, now Total 134
Counter: 135
Batcher Size:134
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3496
--Src File: src/dfa.c
Fragment 0:
if (((lmp->right[0] != '\x00') || (__abst_hole(rmp, rmp->left, lmp, lmp->right, lmp->in, rmp->in, mp, musts, lmp->is, exact, result, lmp->left, i, rmp->is, rmp->right, t, dm, dfa, ri, dfa))) && rmp->left[0] != '\x00') {
    char *tp;
    tp = icpyalloc(lmp->right);
    if (tp == ((void *)0))
        goto done;
    tp = icatalloc(tp, rmp->left);
    if (tp == ((void *)0))
        goto done;
    lmp->in = enlist(lmp->in, tp, strlen(tp));
    free(tp);
    if (lmp->in == ((void *)0))
        goto done;
}


CondTester, a patch instance with id 134:
Spawn 1 instances, now Total 135
Counter: 136
Batcher Size:135
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1593
--Src File: src/dfa.c
Fragment 0:
if ((visited[old.index]) || (__abst_hole(visited, old.index, s, i, s->elems, old.constraint, d, s->elems[i].index, s->nelem, j, s->elems[i].constraint))) {
    --i;
    continue;
}


CondTester, a patch instance with id 135:
Spawn 1 instances, now Total 136
Counter: 137
Batcher Size:136
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:844
--Src File: src/dfa.c
Fragment 0:
if ((!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart) && !(__abst_hole(syntax_bits, laststart, backslash, lasttok, lexptr, lexleft, minrep, c, maxrep, cur_mb_index, i, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    goto normal_char;


CondTester, a patch instance with id 136:
Spawn 1 instances, now Total 137
Counter: 138
Batcher Size:137
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:844
--Src File: src/dfa.c
Fragment 0:
if ((!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1)) && laststart) || (__abst_hole(syntax_bits, laststart, backslash, lasttok, lexptr, lexleft, minrep, c, maxrep, cur_mb_index, i, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold)))
    goto normal_char;


CondTester, a patch instance with id 137:
Spawn 1 instances, now Total 138
Counter: 139
Batcher Size:138
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1181
--Src File: src/dfa.c
Fragment 0:
if ((depth > dfa->depth) && !(__abst_hole(dfa, depth, dfa->depth, dfa->depth, dfa->nleaves, dfa->nleaves, t, dfa->tokens, dfa->tindex, dfa->tokens, dfa->tindex, dfa->talloc, dfa->talloc, dfa->multibyte_prop, dfa->multibyte_prop, cur_mb_len, cur_mb_index, dfa->nmbcsets, dfa->nmbcsets, dfa->nmultibyte_prop, dfa->nmultibyte_prop, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts)))
    dfa->depth = depth;


CondTester, a patch instance with id 138:
Spawn 1 instances, now Total 139
Counter: 140
Batcher Size:139
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1181
--Src File: src/dfa.c
Fragment 0:
if ((depth > dfa->depth) || (__abst_hole(dfa, depth, dfa->depth, dfa->depth, dfa->nleaves, dfa->nleaves, t, dfa->tokens, dfa->tindex, dfa->tokens, dfa->tindex, dfa->talloc, dfa->talloc, dfa->multibyte_prop, dfa->multibyte_prop, cur_mb_len, cur_mb_index, dfa->nmbcsets, dfa->nmbcsets, dfa->nmultibyte_prop, dfa->nmultibyte_prop, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts)))
    dfa->depth = depth;


CondTester, a patch instance with id 139:
Spawn 1 instances, now Total 140
Counter: 141
Batcher Size:140
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1777
--Src File: src/dfa.c
Fragment 0:
if (((merged.nelem - 1) >= (nalloc[pos[j].index])) && !(__abst_hole(d, nalloc, j, pos, d->follows[pos[j].index].elems, pos[j].index, d->follows, merged.nelem, nlastpos, lastpos, firstpos, tmp.elems, nfirstpos, tmp.nelem, nullable, i, d->tokens, d->tindex, d->nleaves, merged.elems, o_lastpos, o_nlast, d->depth, o_firstpos, o_nfirst, o_nullable, searchflag, d->searchflag, wants_newline, d->salloc, d->sindex, d->states, d->follows[pos[j].index].nelem, pos[j].constraint, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts))) {
    do 
        (nalloc[pos[j].index]) *= 2;
    while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
    ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
}


CondTester, a patch instance with id 140:
Spawn 1 instances, now Total 141
Counter: 142
Batcher Size:141
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1777
--Src File: src/dfa.c
Fragment 0:
if (((merged.nelem - 1) >= (nalloc[pos[j].index])) || (__abst_hole(d, nalloc, j, pos, d->follows[pos[j].index].elems, pos[j].index, d->follows, merged.nelem, nlastpos, lastpos, firstpos, tmp.elems, nfirstpos, tmp.nelem, nullable, i, d->tokens, d->tindex, d->nleaves, merged.elems, o_lastpos, o_nlast, d->depth, o_firstpos, o_nfirst, o_nullable, searchflag, d->searchflag, wants_newline, d->salloc, d->sindex, d->states, d->follows[pos[j].index].nelem, pos[j].constraint, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts))) {
    do 
        (nalloc[pos[j].index]) *= 2;
    while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
    ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
}


CondTester, a patch instance with id 141:
Spawn 1 instances, now Total 142
Counter: 143
Batcher Size:142
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3478
--Src File: src/dfa.c
Fragment 0:
if ((__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
        int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
        if (__s1_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
            if (__s1_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                if (__s1_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
        int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
        if (__s2_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
            if (__s2_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                if (__s2_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(result, musts[0].is))));
}) == 0) && !(__abst_hole(musts, result, musts[0].is, i, exact, musts[0].in, mp, t, dfa, ri, dfa, dm, musts[0].left, musts[0].right)))
    exact = 1;


CondTester, a patch instance with id 142:
Spawn 1 instances, now Total 143
Counter: 144
Batcher Size:143
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3478
--Src File: src/dfa.c
Fragment 0:
if ((__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(result) && __builtin_constant_p(musts[0].is) && (__s1_len = __builtin_strlen(result) , __s2_len = __builtin_strlen(musts[0].is) , (!((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(result, musts[0].is) : (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) && (__s1_len = __builtin_strlen(result) , __s1_len < 4) ? (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) ? __builtin_strcmp(result, musts[0].is) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(musts[0].is);
        int __result = (((const unsigned char *)(const char *)(result))[0] - __s2[0]);
        if (__s1_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(result))[1] - __s2[1]);
            if (__s1_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(result))[2] - __s2[2]);
                if (__s1_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(result))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(musts[0].is) && ((size_t)(const void *)((musts[0].is) + 1) - (size_t)(const void *)(musts[0].is) == 1) && (__s2_len = __builtin_strlen(musts[0].is) , __s2_len < 4) ? (__builtin_constant_p(result) && ((size_t)(const void *)((result) + 1) - (size_t)(const void *)(result) == 1) ? __builtin_strcmp(result, musts[0].is) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(result);
        int __result = (((const unsigned char *)(const char *)(musts[0].is))[0] - __s2[0]);
        if (__s2_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(musts[0].is))[1] - __s2[1]);
            if (__s2_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(musts[0].is))[2] - __s2[2]);
                if (__s2_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(musts[0].is))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(result, musts[0].is))));
}) == 0) || (__abst_hole(musts, result, musts[0].is, i, exact, musts[0].in, mp, t, dfa, ri, dfa, dm, musts[0].left, musts[0].right)))
    exact = 1;


CondTester, a patch instance with id 143:
Spawn 1 instances, now Total 144
Counter: 145
Batcher Size:144
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:844
--Src File: src/dfa.c
Fragment 0:
if (((!(syntax_bits & ((((((unsigned long)1) << 1) << 1) << 1) << 1))) || (__abst_hole(syntax_bits, laststart, backslash, lasttok, lexptr, lexleft, minrep, c, maxrep, cur_mb_index, i, parens, eolbyte, c2, invert, c1, hard_LC_COLLATE, case_fold))) && laststart)
    goto normal_char;


CondTester, a patch instance with id 144:
Spawn 1 instances, now Total 145
Counter: 146
Batcher Size:145
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3459
--Src File: src/dfa.c
Fragment 0:
if ((new == ((void *)0)) && !(__abst_hole(new, lmp, rmp, j, i, ln, rn, n, musts, mp, result, exact, dfa, ri, t, dfa, dm)))
    goto done;


CondTester, a patch instance with id 145:
Spawn 1 instances, now Total 146
Counter: 147
Batcher Size:146
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3459
--Src File: src/dfa.c
Fragment 0:
if ((new == ((void *)0)) || (__abst_hole(new, lmp, rmp, j, i, ln, rn, n, musts, mp, result, exact, dfa, ri, t, dfa, dm)))
    goto done;


CondTester, a patch instance with id 146:
Spawn 1 instances, now Total 147
Counter: 148
Batcher Size:147
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3453
--Src File: src/dfa.c
Fragment 0:
{
    if ((lmp->right[ln - i - 1] != rmp->right[rn - i - 1]) && !(__abst_hole(i, lmp, rmp, ln, rn, n, j, new, musts, mp, result, exact, dfa, ri, t, dfa, dm)))
        break;
}


CondTester, a patch instance with id 147:
Spawn 1 instances, now Total 148
Counter: 149
Batcher Size:148
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1159
--Src File: src/dfa.c
Fragment 0:
if (((dfa->tindex) >= (dfa->talloc)) && !(__abst_hole(dfa, dfa->tokens, dfa->tindex, dfa->talloc, dfa->tokens, dfa->tindex, dfa->talloc, t, dfa->multibyte_prop, dfa->multibyte_prop, cur_mb_len, cur_mb_index, depth, dfa->nmbcsets, dfa->nmbcsets, dfa->nleaves, dfa->nmultibyte_prop, dfa->nleaves, dfa->nmultibyte_prop, dfa->depth, dfa->depth, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts))) {
    do 
        (dfa->talloc) *= 2;
    while ((dfa->tindex) >= (dfa->talloc));
    ((dfa->tokens) = xrealloc((ptr_t)(dfa->tokens), (dfa->talloc) * sizeof(token)));
}


CondTester, a patch instance with id 148:
Spawn 1 instances, now Total 149
Counter: 150
Batcher Size:149
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1764
--Src File: src/dfa.c
Fragment 0:
{
    if ((d->tokens[i] != PLUS) && !(__abst_hole(d, i, d->tokens, nullable, j, pos, d->follows, nfirstpos, nalloc, firstpos, nlastpos, lastpos, d->tindex, d->nleaves, o_lastpos, o_nlast, d->depth, o_firstpos, o_nfirst, o_nullable, searchflag, d->searchflag, wants_newline, d->salloc, d->sindex, d->states, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts)))
        nullable[-1] = 1;
}


CondTester, a patch instance with id 149:
Spawn 1 instances, now Total 150
Counter: 151
Batcher Size:150
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3450
--Src File: src/dfa.c
Fragment 0:
if ((n > rn) && !(__abst_hole(rn, n, ln, i, rmp, lmp, j, new, mp, musts, result, exact, dfa, ri, t, dfa, dm)))
    n = rn;


CondTester, a patch instance with id 150:
Spawn 1 instances, now Total 151
Counter: 152
Batcher Size:151
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3450
--Src File: src/dfa.c
Fragment 0:
if ((n > rn) || (__abst_hole(rn, n, ln, i, rmp, lmp, j, new, mp, musts, result, exact, dfa, ri, t, dfa, dm)))
    n = rn;


CondTester, a patch instance with id 151:
Spawn 1 instances, now Total 152
Counter: 153
Batcher Size:152
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1159
--Src File: src/dfa.c
Fragment 0:
if (((dfa->tindex) >= (dfa->talloc)) || (__abst_hole(dfa, dfa->tokens, dfa->tindex, dfa->talloc, dfa->tokens, dfa->tindex, dfa->talloc, t, dfa->multibyte_prop, dfa->multibyte_prop, cur_mb_len, cur_mb_index, depth, dfa->nmbcsets, dfa->nmbcsets, dfa->nleaves, dfa->nmultibyte_prop, dfa->nleaves, dfa->nmultibyte_prop, dfa->depth, dfa->depth, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts, dfa->charclasses, dfa->cindex, dfa->calloc, dfa->nregexps, dfa->mbcsets, dfa->mbcsets_alloc, dfa->states, dfa->sindex, dfa->salloc, dfa->follows, dfa->searchflag, dfa->tralloc, dfa->trcount, dfa->trans, dfa->realtrans, dfa->fails, dfa->success, dfa->musts))) {
    do 
        (dfa->talloc) *= 2;
    while ((dfa->tindex) >= (dfa->talloc));
    ((dfa->tokens) = xrealloc((ptr_t)(dfa->tokens), (dfa->talloc) * sizeof(token)));
}


CondTester, a patch instance with id 152:
Spawn 1 instances, now Total 153
Counter: 154
Batcher Size:153
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1491
--Src File: src/dfa.c
Fragment 0:
{
    if ((p.index == s->elems[i].index) && !(__abst_hole(s, i, p.index, s->elems[i].index, s->elems, s->nelem, p.constraint, s->elems[i].constraint)))
        break;
}


CondTester, a patch instance with id 153:
Spawn 1 instances, now Total 154
Counter: 155
Batcher Size:154
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1493
--Src File: src/dfa.c
Fragment 0:
if ((i < s->nelem) && !(__abst_hole(s, i, s->nelem, s->elems)))
    for (--s->nelem; i < s->nelem; ++i) 
        s->elems[i] = s->elems[i + 1];


CondTester, a patch instance with id 154:
Spawn 1 instances, now Total 155
Counter: 156
Batcher Size:155
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1493
--Src File: src/dfa.c
Fragment 0:
if ((i < s->nelem) || (__abst_hole(s, i, s->nelem, s->elems)))
    for (--s->nelem; i < s->nelem; ++i) 
        s->elems[i] = s->elems[i + 1];


CondTester, a patch instance with id 155:
Spawn 1 instances, now Total 156
Counter: 157
Batcher Size:156
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3439
--Src File: src/dfa.c
Fragment 0:
if ((__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(lmp->is) && __builtin_constant_p(rmp->is) && (__s1_len = __builtin_strlen(lmp->is) , __s2_len = __builtin_strlen(rmp->is) , (!((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(lmp->is, rmp->is) : (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) && (__s1_len = __builtin_strlen(lmp->is) , __s1_len < 4) ? (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(rmp->is);
        int __result = (((const unsigned char *)(const char *)(lmp->is))[0] - __s2[0]);
        if (__s1_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(lmp->is))[1] - __s2[1]);
            if (__s1_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(lmp->is))[2] - __s2[2]);
                if (__s1_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(lmp->is))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) && (__s2_len = __builtin_strlen(rmp->is) , __s2_len < 4) ? (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(lmp->is);
        int __result = (((const unsigned char *)(const char *)(rmp->is))[0] - __s2[0]);
        if (__s2_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(rmp->is))[1] - __s2[1]);
            if (__s2_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(rmp->is))[2] - __s2[2]);
                if (__s2_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(rmp->is))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(lmp->is, rmp->is))));
}) != 0) && !(__abst_hole(lmp, rmp, mp, i, ln, rn, n, musts, j, new, dfa, ri, t, dfa, result, exact, dm)))
    lmp->is[0] = '\x00';


CondTester, a patch instance with id 156:
Spawn 1 instances, now Total 157
Counter: 158
Batcher Size:157
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:3439
--Src File: src/dfa.c
Fragment 0:
if ((__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(lmp->is) && __builtin_constant_p(rmp->is) && (__s1_len = __builtin_strlen(lmp->is) , __s2_len = __builtin_strlen(rmp->is) , (!((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) || __s2_len >= 4)) ? __builtin_strcmp(lmp->is, rmp->is) : (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) && (__s1_len = __builtin_strlen(lmp->is) , __s1_len < 4) ? (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(rmp->is);
        int __result = (((const unsigned char *)(const char *)(lmp->is))[0] - __s2[0]);
        if (__s1_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(lmp->is))[1] - __s2[1]);
            if (__s1_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(lmp->is))[2] - __s2[2]);
                if (__s1_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(lmp->is))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(rmp->is) && ((size_t)(const void *)((rmp->is) + 1) - (size_t)(const void *)(rmp->is) == 1) && (__s2_len = __builtin_strlen(rmp->is) , __s2_len < 4) ? (__builtin_constant_p(lmp->is) && ((size_t)(const void *)((lmp->is) + 1) - (size_t)(const void *)(lmp->is) == 1) ? __builtin_strcmp(lmp->is, rmp->is) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(lmp->is);
        int __result = (((const unsigned char *)(const char *)(rmp->is))[0] - __s2[0]);
        if (__s2_len > 0 && __result == 0) {
            __result = (((const unsigned char *)(const char *)(rmp->is))[1] - __s2[1]);
            if (__s2_len > 1 && __result == 0) {
                __result = (((const unsigned char *)(const char *)(rmp->is))[2] - __s2[2]);
                if (__s2_len > 2 && __result == 0)
                    __result = (((const unsigned char *)(const char *)(rmp->is))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(lmp->is, rmp->is))));
}) != 0) || (__abst_hole(lmp, rmp, mp, i, ln, rn, n, musts, j, new, dfa, ri, t, dfa, result, exact, dm)))
    lmp->is[0] = '\x00';


CondTester, a patch instance with id 157:
Spawn 1 instances, now Total 158
Counter: 159
Batcher Size:158
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1757
--Src File: src/dfa.c
Fragment 0:
if (((merged.nelem - 1) >= (nalloc[pos[j].index])) && !(__abst_hole(d, nalloc, j, pos, d->follows[pos[j].index].elems, pos[j].index, d->follows, merged.nelem, nlastpos, lastpos, firstpos, tmp.elems, nfirstpos, tmp.nelem, i, d->tokens, nullable, d->tindex, d->nleaves, merged.elems, o_lastpos, o_nlast, d->depth, o_firstpos, o_nfirst, o_nullable, searchflag, d->searchflag, wants_newline, d->salloc, d->sindex, d->states, d->follows[pos[j].index].nelem, pos[j].constraint, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts))) {
    do 
        (nalloc[pos[j].index]) *= 2;
    while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
    ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
}


CondTester, a patch instance with id 158:
Spawn 1 instances, now Total 159
Counter: 160
Batcher Size:159
Preprocess the following candidate with CondTester:
Priority 20000
At location src/dfa.c:1757
--Src File: src/dfa.c
Fragment 0:
if (((merged.nelem - 1) >= (nalloc[pos[j].index])) || (__abst_hole(d, nalloc, j, pos, d->follows[pos[j].index].elems, pos[j].index, d->follows, merged.nelem, nlastpos, lastpos, firstpos, tmp.elems, nfirstpos, tmp.nelem, i, d->tokens, nullable, d->tindex, d->nleaves, merged.elems, o_lastpos, o_nlast, d->depth, o_firstpos, o_nfirst, o_nullable, searchflag, d->searchflag, wants_newline, d->salloc, d->sindex, d->states, d->follows[pos[j].index].nelem, pos[j].constraint, d->charclasses, d->cindex, d->calloc, d->talloc, d->nregexps, d->nmultibyte_prop, d->multibyte_prop, d->mbcsets, d->nmbcsets, d->mbcsets_alloc, d->tralloc, d->trcount, d->trans, d->realtrans, d->fails, d->success, d->musts))) {
    do 
        (nalloc[pos[j].index]) *= 2;
    while ((merged.nelem - 1) >= (nalloc[pos[j].index]));
    ((d->follows[pos[j].index].elems) = xrealloc((ptr_t)(d->follows[pos[j].index].elems), (nalloc[pos[j].index]) * sizeof(position)));
}


CondTester, a patch instance with id 159:
Spawn 1 instances, now Total 160
Counter: 161
Batcher Size:160
Preprocess the following candidate with BasicTester:
Priority 7487
At location src/dfa.c:388
--Src File: src/dfa.c
Fragment 0:
dfaerror(dcgettext(((void *)0), "Unbalanced )", 5));
if (cur_mb_index)
    cur_mb_index = (cur_mb_index >= cur_mb_len) ? 0 : cur_mb_index + 1;


BasicTester, a patch instance with id 0:
Spawn 1 instances, now Total 161
Counter: 162
Batcher Size:161
Preprocess the following candidate with BasicTester:
Priority 7487
At location src/dfa.c:388
--Src File: src/dfa.c
Fragment 0:
dfaerror(dcgettext(((void *)0), "Unbalanced [", 5));
if (cur_mb_index)
    cur_mb_index = (cur_mb_index >= cur_mb_len) ? 0 : cur_mb_index + 1;


BasicTester, a patch instance with id 1:
Spawn 1 instances, now Total 162
Counter: 163
Batcher Size:162
Preprocess the following candidate with BasicTester:
Priority 7487
At location src/dfa.c:388
--Src File: src/dfa.c
Fragment 0:
++dfa->cindex;
if (cur_mb_index)
    cur_mb_index = (cur_mb_index >= cur_mb_len) ? 0 : cur_mb_index + 1;


BasicTester, a patch instance with id 2:
Spawn 1 instances, now Total 163
Counter: 164
Batcher Size:163
Preprocess the following candidate with BasicTester:
Priority 7487
At location src/dfa.c:388
--Src File: src/dfa.c
Fragment 0:
update_mb_len_index((p), lexleft);
if (cur_mb_index)
    cur_mb_index = (cur_mb_index >= cur_mb_len) ? 0 : cur_mb_index + 1;


BasicTester, a patch instance with id 3:
Spawn 1 instances, now Total 164
Counter: 165
Batcher Size:164
Preprocess the following candidate with BasicTester:
Priority 7487
At location src/dfa.c:388
--Src File: src/dfa.c
Fragment 0:
lasttok = (REPMN);
if (cur_mb_index)
    cur_mb_index = (cur_mb_index >= cur_mb_len) ? 0 : cur_mb_index + 1;


BasicTester, a patch instance with id 4:
Spawn 1 instances, now Total 165
Counter: 166
Batcher Size:165
Preprocess the following candidate with BasicTester:
Priority 7487
At location src/dfa.c:388
--Src File: src/dfa.c
Fragment 0:
tok = lex();
if (cur_mb_index)
    cur_mb_index = (cur_mb_index >= cur_mb_len) ? 0 : cur_mb_index + 1;


BasicTester, a patch instance with id 5:
Spawn 1 instances, now Total 166
Counter: 167
Batcher Size:166
Preprocess the following candidate with BasicTester:
Priority 7487
At location src/dfa.c:388
--Src File: src/dfa.c
Fragment 0:
update_mb_len_index(lexptr, lexleft);
if (cur_mb_index)
    cur_mb_index = (cur_mb_index >= cur_mb_len) ? 0 : cur_mb_index + 1;


BasicTester, a patch instance with id 6:
Spawn 1 instances, now Total 167
Counter: 168
Batcher Size:167
Preprocess the following candidate with BasicTester:
Priority 7487
At location src/dfa.c:388
--Src File: src/dfa.c
Fragment 0:
syntax_bits_set = (1);
if (cur_mb_index)
    cur_mb_index = (cur_mb_index >= cur_mb_len) ? 0 : cur_mb_index + 1;


BasicTester, a patch instance with id 7:
Spawn 1 instances, now Total 168
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building failed! Going to build saperately!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcCondTester, Testing instance id 104:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcCondTester, Testing instance id 105:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Unbalanced (
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Unbalanced (
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Unbalanced (
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Unbalanced )
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Passed Negative Cases wiht CondTestder!
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 11  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 12  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 14  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 17  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 22  > __res
Passed Positive Cases
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 11  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 12  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 14  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 17  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 22  > __res
Passed!
CondTester, Postprocessing instance id 105:
Trying a synthesis expr 1
Skipping a synthesis:1
Trying a synthesis expr cur_mb_index == 0
Skipping a synthesis expr :cur_mb_index == 0: in origcond:(cur_mb_index) || __is_neg()
Trying a synthesis expr cur_mb_len == 0
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcRunning test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Trying a synthesis expr len == 23
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcRunning test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Trying a synthesis expr cur_mb_len != 1
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcRunning test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Trying a synthesis expr len != 2
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcRunning test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Unbalanced (
Trying a synthesis expr len != 4
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcRunning test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Unbalanced (
Trying a synthesis expr len != 6
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcRunning test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 11  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 12  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 14  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 17  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 22  > __res
Passed Positive Cases
Passed!
Passed with updated best score 19999895.000000
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcBasicTester, Testing instance id 0:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Unbalanced )
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcBasicTester, Testing instance id 1:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Unbalanced [
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcBasicTester, Testing instance id 2:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcBasicTester, Testing instance id 3:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcBasicTester, Testing instance id 4:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcSingle building for Tester 0x7055df0 id 5 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcBasicTester, Testing instance id 6:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcBasicTester, Testing instance id 7:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 0:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 85:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Memory exhausted
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Memory exhausted
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Memory exhausted
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 1:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 33:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Memory exhausted
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Memory exhausted
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Memory exhausted
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Memory exhausted
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Memory exhausted
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Memory exhausted
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Memory exhausted
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Memory exhausted
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Memory exhausted
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Memory exhausted
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 86:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 92:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Memory exhausted
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Memory exhausted
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Memory exhausted
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Memory exhausted
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Memory exhausted
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Memory exhausted
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Memory exhausted
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Memory exhausted
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Memory exhausted
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Memory exhausted
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 82:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 83:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 80:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 81:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Unbalanced (
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Unbalanced (
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Unbalanced (
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Unbalanced (
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Unbalanced (
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Passed Negative Cases wiht CondTestder!
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 11  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 12  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 14  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 17  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 22  > __res
Passed Positive Cases
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 11  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 12  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 14  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 17  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 22  > __res
Passed!
CondTester, Postprocessing instance id 81:
Trying a synthesis expr 1
Skipping a synthesis:1
Trying a synthesis expr cur_mb_index == 0
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcRunning test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 11  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 12  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 14  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 17  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 22  > __res
Passed Positive Cases
Passed!
Passed with updated best score 19999919.000000
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 61:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 74:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 87:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 88:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Unbalanced (
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Unbalanced (
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Unbalanced (
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Unbalanced (
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Unbalanced (
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Passed Negative Cases wiht CondTestder!
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 11  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 12  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 14  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 17  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 22  > __res
Passed Positive Cases
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 11  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 12  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 14  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 17  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 22  > __res
Passed!
CondTester, Testing instance id 91:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Postprocessing instance id 88:
Postprocessing failed!
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 34:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Passed Negative Cases wiht CondTestder!
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 11  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 12  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 14  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 17  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 22  > __res
Passed Positive Cases
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 11  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 12  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 14  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 17  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 22  > __res
Passed!
CondTester, Testing instance id 35:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Postprocessing instance id 34:
Trying a synthesis expr 1
Skipping a synthesis:1
Trying a synthesis expr invert == 0
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcRunning test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 11  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 12  > __res
Failed positive case 12
Trying a synthesis expr hard_LC_COLLATE != 0
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcRunning test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 12  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 11  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 14  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 17  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 22  > __res
Passed Positive Cases
Passed!
Passed with updated best score 19999966.000000
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 2:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 3:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 136:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 137:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Passed Negative Cases wiht CondTestder!
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 12  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 11  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 14  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 17  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 22  > __res
Passed Positive Cases
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 11  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 12  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 14  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 17  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 22  > __res
Passed!
CondTester, Testing instance id 144:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Postprocessing instance id 137:
Postprocessing failed!
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 106:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 108:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Passed Negative Cases wiht CondTestder!
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 12  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 11  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 14  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 17  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 22  > __res
Passed Positive Cases
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 11  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 12  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 14  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 17  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 22  > __res
Passed!
CondTester, Postprocessing instance id 108:
Postprocessing failed!
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 75:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 78:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Unbalanced (
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Unbalanced (
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Unbalanced (
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Unbalanced (
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Unbalanced (
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Unbalanced (
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Unbalanced (
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Unbalanced (
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Unbalanced (
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Unbalanced (
CondTester, Testing instance id 79:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 20:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 23:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 26:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 8:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 9:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building failed! Going to build saperately!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcSingle building for Tester 0x13f73390 id 14 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcSingle building for Tester 0x13f73390 id 17 failed as well!
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 6:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 7:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 4:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 5:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 148:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 152:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 138:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 139:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 98:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Unbalanced )
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Unbalanced )
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Unbalanced )
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Unbalanced )
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Unbalanced )
CondTester, Testing instance id 101:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 116:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 117:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 99:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 100:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Unbalanced )
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Unbalanced )
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Unbalanced )
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Unbalanced )
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Unbalanced )
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 96:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
CondTester, Testing instance id 97:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 94:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 95:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Unbalanced (
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Unbalanced (
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Unbalanced (
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Unbalanced (
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Unbalanced (
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 93:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Passed Negative Cases wiht CondTestder!
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 12  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 11  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 14  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 17  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 22  > __res
Passed Positive Cases
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 11  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 12  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 14  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 17  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 22  > __res
Passed!
CondTester, Postprocessing instance id 93:
Postprocessing failed!
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 89:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 90:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 62:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 63:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 64:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 65:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: No syntax specified
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: No syntax specified
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 42:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Unbalanced )
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src/src/grep: Unbalanced )
CondTester, Testing instance id 47:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 36:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 37:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 21:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 22:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 11:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 12:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Passed Negative Cases wiht CondTestder!
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 12  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 11  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 14  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 17  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 22  > __res
Passed Positive Cases
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 11  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 12  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 14  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 17  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 22  > __res
Passed!
CondTester, Testing instance id 13:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Postprocessing instance id 12:
Trying a synthesis expr 1
Skipping a synthesis:1
Trying a synthesis expr count == 7
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcRunning test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 12  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 11  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 14  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 17  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 22  > __res
Passed Positive Cases
Passed!
Passed with updated best score 19999988.000000
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 10:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 153:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 154:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
CondTester, Testing instance id 155:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 107:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Passed Negative Cases wiht CondTestder!
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 12  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 11  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 14  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 17  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 22  > __res
Passed Positive Cases
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 11  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 12  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 14  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 17  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 22  > __res
Passed!
CondTester, Postprocessing instance id 107:
Postprocessing failed!
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 127:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 135:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Passed Negative Cases wiht CondTestder!
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 12  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 11  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 14  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 17  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 22  > __res
Passed Positive Cases
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 11  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 12  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 14  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 17  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 22  > __res
Passed!
CondTester, Postprocessing instance id 135:
Postprocessing failed!
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building failed! Going to build saperately!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcSingle building for Tester 0x13f73390 id 158 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcSingle building for Tester 0x13f73390 id 159 failed as well!
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 149:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Passed Negative Cases wiht CondTestder!
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 12  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 11  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 14  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 17  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 22  > __res
Passed Positive Cases
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 11  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 12  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 14  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 17  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 22  > __res
Passed!
CondTester, Postprocessing instance id 149:
Postprocessing failed!
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building failed! Going to build saperately!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcSingle building for Tester 0x13f73390 id 140 failed as well!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcSingle building for Tester 0x13f73390 id 141 failed as well!
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 118:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 119:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 102:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Passed Negative Cases wiht CondTestder!
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 12  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 11  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 14  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 17  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 22  > __res
Passed Positive Cases
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 11  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 12  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 14  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 17  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 22  > __res
Passed!
CondTester, Testing instance id 103:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Postprocessing instance id 102:
Postprocessing failed!
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 84:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Passed Negative Cases wiht CondTestder!
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 12  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 11  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 14  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 17  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 22  > __res
Passed Positive Cases
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 11  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 12  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 14  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 17  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 22  > __res
Passed!
CondTester, Postprocessing instance id 84:
Postprocessing failed!
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 76:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
CondTester, Testing instance id 77:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 72:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 73:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 70:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 71:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 68:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
CondTester, Testing instance id 69:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 66:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
CondTester, Testing instance id 67:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 52:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
CondTester, Testing instance id 57:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 60:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 58:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
CondTester, Testing instance id 59:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 53:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 56:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 54:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 55:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 48:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 51:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 49:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 50:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 43:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 46:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 44:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 45:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 40:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
CondTester, Testing instance id 41:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 38:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 39:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 29:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 32:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 30:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 31:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 27:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 28:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 24:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 25:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 18:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 19:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 15:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 16:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 156:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
CondTester, Testing instance id 157:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 150:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
CondTester, Testing instance id 151:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 147:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 145:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 146:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 142:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
CondTester, Testing instance id 143:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 128:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 131:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 132:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 133:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 134:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 129:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 130:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 123:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
CondTester, Testing instance id 126:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 124:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 125:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 120:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 121:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
CondTester, Testing instance id 122:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 114:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 113:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
CondTester, Testing instance id 115:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 111:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 112:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
a batched test job starts!
Building:src at:
/home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/srcMerged code building succ, going to invoke tester!
CondTester, Testing instance id 109:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
CondTester, Testing instance id 110:
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Aborted (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Running test command:
/home/ubuntu/spr-fast/tools/grep-test.py /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/src /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir/tests /home/ubuntu/spr-fast/tests/corebench/grep/grep-case-62458291-3c3bdace/tempworkdir 0  > __res
Segmentation fault (core dumped)
Total cnt of passed cond schemas: 13
Total cnt of cond schemas: 160
Counter: 169
Batcher Size:0
The found score 19999988.000000 is greater than current score 7487.000000!
Terminate current session!
Generated a patch at candidate schema no 13
Total cnt of passed cond schemas: 13
Total cnt of cond schemas: 160
Candidate count:0!!
Found a fix! Store to: grep-fix-62458291-3c3bdacesrc_dfa.c
Found a fix! Store to: grep-fix-62458291-3c3bdacesrc_dfa.c-1
Found a fix! Store to: grep-fix-62458291-3c3bdacesrc_dfa.c-2
Found a fix! Store to: grep-fix-62458291-3c3bdacesrc_dfa.c-3
Repair process ends successfully!
Total 161890 different repair candidate schema!!!!
Total number of compiles: 106
Total number of test eval: 996
